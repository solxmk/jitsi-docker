{"version":3,"file":"lib-jitsi-meet.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAqB,YAAID,IAEzBD,EAAkB,YAAIC,GACvB,CATD,CASGK,MAAM,kDCTT,MAAMC,EAAMC,EAAAA,MAAAA,EA6BZL,EAAOD,QAPP,SAAkCC,GAC9B,MACkC,iBAAvBM,OAAOC,YACRC,OAAOC,OAAO,CAAC,EAAGH,OAAOC,YAAaP,GACtCA,CACb,CAEgBU,CAAyBN,aCoJ1CJ,EAAOD,QA1KP,MAWIY,YAAYC,EAAQC,EAAaC,GAC7BC,KAAKC,QAAUJ,EACfG,KAAKE,eAAeJ,GACpBE,KAAKG,cAAgBJ,IAAgB,EACrCC,KAAKI,oBAAmB,GACxBJ,KAAKK,yBAA2B,EAChCL,KAAKM,sBAAwB,EAC7BN,KAAKO,oBAAqB,EAC1BP,KAAKQ,WAAY,EACjBR,KAAKS,UAAW,EAChBT,KAAKU,eAAiB,EACzB,CAODC,YACI,OAAOX,KAAKC,OACf,CAODW,iBACI,OAAOZ,KAAKF,WACf,CAQDI,eAAeW,GACXb,KAAKF,YAAce,CACtB,CAODd,eACI,OAAOC,KAAKG,aACf,CAODW,oBACI,OAAOd,KAAKO,kBACf,CAWDH,mBAAmBW,EAAsBC,GACrC,GAAKhB,KAAKc,sBAAuBC,GAAyBC,GAEnD,GAAIhB,KAAKc,oBACZ,GAAKC,GAQE,GAAIf,KAAKQ,YAAcQ,EAC1BhB,KAAKM,sBAAwBW,KAAKC,WAC/B,IAAKlB,KAAKQ,WAAaQ,EAAS,CACnC,MACMG,EADMF,KAAKC,MACSlB,KAAKM,sBAE/BN,KAAKK,0BAA4Bc,EACjCnB,KAAKM,sBAAwB,CAChC,OAfG,IAAKN,KAAKQ,UAAW,CACjB,MACMW,EADMF,KAAKC,MACSlB,KAAKM,sBAE/BN,KAAKK,0BAA4Bc,EACjCnB,KAAKM,sBAAwB,CAChC,OATLN,KAAKM,sBAAwBW,KAAKC,MAqBtClB,KAAKO,mBAAqBQ,EAC1Bf,KAAKQ,UAAYQ,CACpB,CAODI,8BACI,IAAIC,EAAQrB,KAAKK,yBAMjB,OAJIL,KAAKc,sBAAwBd,KAAKQ,YAClCa,GAASJ,KAAKC,MAAQlB,KAAKM,uBAGxBe,CACV,CAODC,UACI,OAAOtB,KAAKS,QACf,CAODc,gBACIvB,KAAKS,UAAW,EAChBT,KAAKI,oBAAmB,EAC3B,CAODoB,mBACI,OAAOxB,KAAKU,cACf,CAQDe,iBAAiBC,GACb1B,KAAKU,eAAiBgB,CACzB,CAQDC,iBAAiBD,GACb1B,KAAKU,eAAekB,KAAKF,EAC5B,aC5ILzC,EAAOD,QAlCU,CAsBb6C,gBAAe,CAACC,EAAYC,EAAUC,IAGf,iBAFPF,EAGD,KAHCA,EAMDG,QAAQ,SAAUF,GACxBE,QAAQ,iBAAiC,IAAhBD,cCvBtC,SAASE,EAAsBC,EAAKC,GAChC,IAAKD,IAAQC,GAAmC,mBAApBD,EAAIE,aACJ,mBAAdD,EAAKE,KACf,MAAM,IAAIC,MAAM,qDAEpBvC,KAAKmC,IAAMA,EACXnC,KAAKoC,KAAOA,CACf,CAUDF,EAAsBM,UAAUC,QAAU,WAAkB,2BAANC,EAAM,yBAANA,EAAM,gBACxD,MAAMC,EAAWD,EAAK,GAItBA,EAAK,GAAK1C,KAAKoC,KAGfpC,KAAKmC,IAAIE,YACLM,EACAC,SAASJ,UAAUK,KAAKC,MAAM9C,KAAKoC,KAAKE,KAAMI,GACrD,EAEDzD,EAAOD,QAAUkD,YC1BjB,MAAMa,EAAW,GAGXC,EAAoBzD,OAAO0D,QAY3BC,EAA0B3D,OAAO4D,qBAYvC5D,OAAO0D,QAlBP,WAA0C,2BAANP,EAAM,yBAANA,EAAM,gBACtCK,EAASK,SAAQC,GAAWA,KAAWX,KACvCM,GAAqBA,KAAqBN,EAC7C,EAgBDnD,OAAO4D,qBAPP,SAAuCG,GACnCP,EAASK,SAAQC,GAAWA,EAAQ,KAAM,KAAM,KAAM,KAAMC,EAAMC,UAClEL,GAA2BA,EAAwBI,EACtD,EAMD,MAAME,EAAuB,CAKzBC,WAAWJ,GACPN,EAASnB,KAAKyB,EACjB,EAMDK,iBAAiBC,GACb,MAAMC,EAAarE,OAAO0D,QAErBW,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMD,EACtC,EAMDE,8BAA8BF,GAC1B,MAAMC,EAAarE,OAAO4D,qBAErBS,GAGLA,EAAWD,EACd,GAIL1E,EAAOD,QAAUwE,YC5DjB,SAASM,EAAUC,EAAKC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,CACxD,CAOD,SAASK,EAAcC,GACnB,OAAOA,EAAIP,EAAU,EAAGO,EAAIC,OAAS,GACxC,CAoBD,MAAMC,EAAa,CAKfC,eAAc,IACHJ,EA7CI,oBAoDfK,gBAAgBC,GACZ,IAAIC,EAAM,GAEV,KAAOD,KACHC,GAAO3E,KAAKwE,iBAGhB,OAAOG,CACV,EACDP,gBACAQ,kBApCJ,SAA2BN,GACvB,IAAIO,EAAS,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAQQ,GAAK,EAC7BD,GAAUT,EApCZ,kEAuCF,OAAOS,CACV,EA6BGf,aAGJ7E,EAAOD,QAAUuF,iBC5EjB,MAAMQ,EAAyBzF,EAAQ,MAQjC0F,EAAa,CAgBfC,WACQ9C,EACA+C,EACAC,EACAC,EACAC,EACAC,GACJ,MAAMC,EAAIC,SACJC,EAAU,SACVC,EAASH,EAAEI,cAAcF,GACzBG,EAAgBL,EAAEM,qBAAqBJ,GAAS,GAItD,GAFAC,EAAOR,MAAQA,EAEXE,EAAa,CAGb,MAAMU,EAAWf,IAEjB,GAAIe,EAAU,CACV,MAAMC,EAAYD,EAAS3D,IACrB6D,EACAD,EAAUE,UAAU,EAAGF,EAAUG,YAAY,KAAO,GAEtDH,GAAaC,IAEb7D,EAAM6D,EAAgB7D,EAE7B,CACJ,CAEGkD,IACAK,EAAOS,OAASd,GAEhBC,IACAI,EAAOzC,QAAUqC,GAGrBI,EAAOvD,IAAMA,EACTgD,EACAS,EAAcQ,WAAWC,aAAaX,EAAQE,GAE9CA,EAAcQ,WAAWE,YAAYZ,EAE5C,GAKLzG,EAAOD,QAAUgG,kBCzEjB,MAAMT,EAAajF,EAAQ,MASrBiH,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7BtH,EAAOD,QAAU,CACbwH,iBARJ,WAII,MAAQ,GAHKjC,EAAWH,cAAcmC,MACvBhC,EAAWK,kBAAkB,IAG/C,8BCjbD,MAAM6B,EACS,iJAIfzH,EAAQ0H,MAAQ,SAAUC,GAItB,MAAMC,EAAkC,iBAAnB,oFACfC,GAAU,0CAAc,IAAMD,EAApB,6CAA6CE,EACvDC,GAAW,0CAAc,IAAd,0CAA+BH,GAAgB,CAAC,EAI3DI,EAAMC,KAAKP,MAAMC,EAAME,GAI7B,MAA4B,WAAxBE,EAAQG,YACDF,EAKNA,GACc,iBAARA,GAONL,EAAKQ,MAAMV,IAMhBzH,EAAQoI,KAAKJ,EAAKD,GAEXC,GAbIA,CAcd,EAGDhI,EAAQoI,KAAO,SAAUJ,GAAmB,IAAdD,EAAc,uDAAJ,CAAC,EAEjCM,EAAO,CAACL,GAEZ,KAAOK,EAAK/C,QAAQ,CAChB,MAAMgD,EAAQD,EACdA,EAAO,GAEP,IAAK,MAAME,KAAQD,EAAO,CACtB,GAAI7H,OAAO+C,UAAUgF,eAAeC,KAAKF,EAAM,aAAc,CACzD,GAA4B,WAAxBR,EAAQG,YACR,MAAM,IAAIQ,YAAY,uDAGnBH,EAAKI,SACf,CAED,IAAK,MAAMC,KAAOL,EAAM,CACpB,MAAMM,EAAQN,EAAKK,GACfC,GACiB,iBAAVA,GAEPR,EAAKzF,KAAK2F,EAAKK,GAEtB,CACJ,CACJ,CACJ,EAGD5I,EAAQ8I,UAAY,SAAUnB,EAAME,GAEhC,IACI,OAAO7H,EAAQ0H,MAAMC,EAAME,EAC9B,CACD,MAAOkB,GACH,OAAO,IACV,CACJ,kBCxED,IAAIC,EAAS1I,EAAQ,MAgDrB,SAAS2I,EAAaC,EAAYnB,GAC9B/G,KAAKkI,WAAaA,EAClBlI,KAAKmI,oBAAmBpB,IAAWA,EAAQoB,mBAAmBpB,EAAQoB,iBACtEnI,KAAKoI,cAAgBrB,GAAWA,EAAQqB,cAAgBrB,EAAQqB,cAAe,IAC/EpI,KAAKqI,eAAiBtB,GAAWA,EAAQsB,eAAiBtB,EAAQsB,eAAiB,IAGnF5I,OAAO6I,KAAKN,EAAOO,QAAQnF,QAC3B,SAAUoF,GAENxI,KADiBgI,EAAOO,OAAOC,IACZ,WACfxI,KAAKyI,KAAK3F,MAAM9C,KAAM0I,UACzB,EAAC7F,KAAK7C,KAAMwI,EAChB,EAAC3F,KAAK7C,OAMPA,KAAK2I,oBAAsB,KAM3B3I,KAAK4I,MAAQ,GAKb5I,KAAK6I,SAAW,EAMhB7I,KAAK8I,YAAc,EACtB,CAgBDb,EAAazF,UAAUuG,UAAY,SAAUC,GACzC,IACI,OAAO/B,KAAK8B,UAAUC,EACzB,CAAC,MAAOrF,GACL,MAAO,8BACV,CACJ,EAiBDsE,EAAazF,UAAUyG,iBAAmB,SAC1CT,GAEI,IADA,IAAIU,EAAM,GACDpE,EAAI,EAAGJ,EAAMgE,UAAUpE,OAAQQ,EAAIJ,EAAKI,IAAK,CAClD,IAAIqE,EAAMT,UAAU5D,IAEf9E,KAAKmI,kBAAoBK,IAAaR,EAAOO,OAAOa,OACtC,iBAARD,IACPA,EAAMnJ,KAAK+I,UAAUI,IAEzBD,GAAOC,EACHrE,IAAMJ,EAAM,IACZwE,GAAO,IAEd,CACD,OAAOA,EAAI5E,OAAS4E,EAAM,IAC7B,EAQDjB,EAAazF,UAAUiG,KAAO,WAG1B,IAAIY,EAAYX,UAAU,GACtBQ,EAAMlJ,KAAKiJ,iBAAiBnG,MAAM9C,KAAM0I,WAC5C,GAAIQ,EAAK,CAEL,IAAII,EAActJ,KAAK4I,MAAM5I,KAAK4I,MAAMtE,OAAS,IAC3BgF,GAAeA,EAAY3C,QACzBuC,EACpBI,EAAYC,OAAS,GAErBvJ,KAAK4I,MAAMhH,KAAK,CACZ+E,KAAMuC,EACNG,UAAWA,EACXE,MAAO,IAEXvJ,KAAK6I,UAAYK,EAAI5E,OAE5B,CAEGtE,KAAK6I,UAAY7I,KAAKqI,gBACtBrI,KAAKwJ,QAAO,GAAkB,EAErC,EAMDvB,EAAazF,UAAUiH,MAAQ,WAC3BzJ,KAAK0J,4BACR,EAODzB,EAAazF,UAAUkH,2BAA6B,WAC5C1J,KAAK2I,sBACLpJ,OAAOoK,aAAa3J,KAAK2I,qBACzB3I,KAAK2I,oBAAsB,MAG/B3I,KAAK2I,oBAAsBpJ,OAAOqK,WAC9B5J,KAAKwJ,OAAO3G,KACR7C,MAAM,GAA0B,GACpCA,KAAKoI,cACZ,EAMDH,EAAazF,UAAUqH,MAAQ,WAC3B7J,KAAKwJ,QACD,GACA,EACP,EAaDvB,EAAazF,UAAUgH,OAAS,SAASM,EAAOC,GAExC/J,KAAK6I,SAAW,IAAM7I,KAAKkI,WAAW8B,WAAaF,KAG/C9J,KAAKkI,WAAW8B,WAEZhK,KAAK8I,YAAYxE,SACjBtE,KAAK8I,YAAY1F,QACb,SAAU6G,GACNjK,KAAKkI,WAAWgC,UAAUD,EAC7B,EAACpH,KAAK7C,OAGXA,KAAK8I,YAAc,IAGvB9I,KAAKkI,WAAWgC,UAAUlK,KAAK4I,QAE/B5I,KAAK8I,YAAYlH,KAAK5B,KAAK4I,OAG/B5I,KAAK4I,MAAQ,GACb5I,KAAK6I,SAAW,GAGhBkB,GACA/J,KAAK0J,4BAEZ,EAMDzB,EAAazF,UAAU2H,KAAO,WAE1BnK,KAAKwJ,QAAO,GAA0B,EACzC,EAEDvK,EAAOD,QAAUiJ,YC/PjB,IAAIM,EAAS,CACT,MAAS,EACT,MAAS,EACT,KAAQ,EACR,IAAO,EACP,KAAQ,EACR,MAAS,GAObP,EAAOoC,iBAAmBC,QAM1B,IAAIC,EAAmB,CAAEtC,EAAOoC,kBAOhCpC,EAAOuC,mBAAqB,SAASC,IACY,IAAzCF,EAAiBG,QAAQD,IACzBF,EAAiB1I,KAAK4I,EAE7B,EAODxC,EAAO0C,sBAAwB,SAASF,GACpC,IAAIG,EAAeL,EAAiBG,QAAQD,IACtB,IAAlBG,GACAL,EAAiBM,OAAOD,EAAc,EAE7C,EAKD,IAAIE,EAAgB,CAAC,EA0DrB,SAASC,IACL,IAAIC,EAASrC,UAAU,GAAIsC,EAAQtC,UAAU,GACzChG,EAAOuI,MAAMzI,UAAU0I,MAAMzD,KAAKiB,UAAW,GACjD,KAAGH,EAAOyC,GAASD,EAAOC,OAQ1B,IAJA,IAAIG,IACIJ,EAAOhE,QAAQqE,mBAAqBP,EAAcO,oBAlD9D,WACI,IAAID,EAAa,CACbE,WAAY,GACZC,aAAc,GACdC,KAAM,KACNC,OAAQ,MAGR7H,EAAQ,IAAIpB,MACZkJ,EAAQ9H,EAAM8H,MAAO9H,EAAM8H,MAAMC,MAAM,MAAQ,GACnD,IAAID,GAASA,EAAMnH,OAAS,EACxB,OAAO6G,EAEX,IAAIQ,EAAI,KAIR,OAHGF,EAAM,KACLE,EAAIF,EAAM,GAAGtE,MAAM,iDAEnBwE,GAAKA,EAAErH,QAAU,GAEe,IAA7BmH,EAAM,GAAGhB,QAAQ,QAEhBU,EAAWE,WAAaI,EAAM,GAAGG,OAAO,EAAGH,EAAM,GAAGhB,QAAQ,MAG5DU,EAAWE,WAAaI,EAAM,GAAGG,OAAO,EAAGH,EAAM,GAAGhB,QAAQ,MAEzDU,IAGXA,EAAWE,WAAaM,EAAE,GAC1BR,EAAWG,aAAeK,EAAE,GAC5BR,EAAWI,KAAOI,EAAE,GACpBR,EAAWK,OAASG,EAAE,GACfR,EACV,CAiBWU,GACJC,EAAaxB,EAAiByB,OAAOhB,EAAOe,YACxChH,EAAI,EAAGA,EAAIgH,EAAWxH,OAAQQ,IAAK,CACvC,IAAIkH,EAAIF,EAAWhH,GACfmH,EAAID,EAAEhB,GACV,GAAGiB,GAAmB,mBAAPA,EAAmB,CAC9B,IAAIC,EAAc,GAElBA,EAAYtK,MAAK,IAAIX,MAAOkL,eAExBpB,EAAOqB,IACPF,EAAYtK,KAAK,IAAMmJ,EAAOqB,GAAK,KAGnCjB,GAAcA,EAAWE,WAAW/G,OAAS,GAC7C4H,EAAYtK,KAAK,IAAMuJ,EAAWE,WAAa,OAGnD,IAAIgB,EAAeH,EAAYH,OAAOrJ,GAEtCuJ,EAAEpJ,KAAKmJ,GAAGlJ,MAAMkJ,EAAGK,EACtB,CACJ,CACJ,CAcD,SAASrE,EAAOgD,EAAOoB,EAAIN,EAAY/E,GACnC/G,KAAKoM,GAAKA,EACVpM,KAAK+G,QAAUA,GAAW,CAAC,EAC3B/G,KAAK8L,WAAaA,EACd9L,KAAK8L,aACL9L,KAAK8L,WAAa,IAEtB9L,KAAKgL,MAAQzC,EAAOyC,GAEpB,IADA,IAAIsB,EAAU7M,OAAO6I,KAAKC,GAClBzD,EAAI,EAAGA,EAAIwH,EAAQhI,OAAQQ,IAC/B9E,KAAKsM,EAAQxH,IACTgG,EAAIjI,KAAK,KAAM7C,KAAMsM,EAAQxH,GAExC,CA/GDkD,EAAOuE,iBAAmB,SAASxF,GAC/B8D,EAAgB9D,GAAW,CAAC,CAC/B,EAmHDiB,EAAOxF,UAAUgK,SAAW,SAAUxB,GAClChL,KAAKgL,MAAQzC,EAAOyC,EACvB,EACD/L,EAAOD,QAAUgJ,EAKjBA,EAAOO,OAAS,CACZkE,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNzD,MAAO,yBC7LX,IAAIpB,EAAS1I,EAAQ,MACjB2I,EAAe3I,EAAQ,MAwBvBwN,EAAY,CAAC,EAKbC,EAAU,GAKVC,EAAWhF,EAAOO,OAAOkE,MAG7BxN,EAAOD,QAAU,CAMbuL,mBAAoB,SAASC,GACzBxC,EAAOuC,mBAAmBC,EAC7B,EAMDE,sBAAuB,SAASF,GAC5BxC,EAAO0C,sBAAsBF,EAChC,EAKD+B,iBAAkB,SAASxF,GACvBiB,EAAOuE,iBAAiBxF,EAC3B,EAKDkG,UAAW,SAASb,EAAIN,EAAY/E,GAChC,IAAIgE,EAAS,IAAI/C,EAAOgF,EAAUZ,EAAIN,EAAY/E,GAOlD,OANGqF,GACCU,EAAUV,GAAMU,EAAUV,IAAO,GACjCU,EAAUV,GAAIxK,KAAKmJ,IAEnBgC,EAAQnL,KAAKmJ,GAEVA,CACV,EAQDmC,gBAAiB,SAASlC,EAAOoB,GAE7B,IADA,IAAIH,EAAIG,EAAKU,EAAUV,IAAO,GAAMW,EAC5BjI,EAAI,EAAGA,EAAImH,EAAE3H,OAAQQ,IACzBmH,EAAEnH,GAAG0H,SAASxB,EAErB,EAKDmC,YAAa,SAAUnC,GACnBgC,EAAWhC,EAEX,IADA,IAAIlG,EAAI,EACFA,EAAIiI,EAAQzI,OAAQQ,IACtBiI,EAAQjI,GAAG0H,SAASxB,GAGxB,IAAI,IAAIoB,KAAMU,EAAW,CACrB,IAAIb,EAAIa,EAAUV,IAAO,GACzB,IAAItH,EAAI,EAAGA,EAAImH,EAAE3H,OAAQQ,IACrBmH,EAAEnH,GAAG0H,SAASxB,EAErB,CACJ,EAIDzC,OAAQP,EAAOO,OAIfN,aAAcA,aChIlB,IAAImF,EAAUnO,EAAOD,QAAU,CAC7BqO,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAGFF,KAAM,SACNC,IAAK,wCACLhH,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEkH,OAAQ,wBAGVC,EAAG,CAAC,CAAEJ,KAAM,SACZxI,EAAG,CAAC,CAAEwI,KAAM,gBACZK,EAAG,CAAC,CAAEL,KAAM,QACZM,EAAG,CAAC,CAAEN,KAAM,UACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,cACZS,EAAG,CAAC,CAAET,KAAM,YAEZtB,EAAG,CAAC,CAEFsB,KAAM,SACNC,IAAK,eACLhH,MAAO,CAAC,QAAS,QACjBkH,OAAQ,UAEVO,EAAG,CAAC,CAEFV,KAAM,aACNC,IAAK,mBACLhH,MAAO,CAAC,UAAW,MACnBkH,OAAQ,eAEVQ,EAAG,CAAC,CAEFrM,KAAM,YACN2L,IAAK,4BACLhH,MAAO,CAAC,OAAQ,SAChBkH,OAAQ,UAEV9B,EAAG,CAAC,CAIF4B,IAAK,kCACLhH,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCkH,OAAQ,gBAEVS,EAAG,CACD,CAEEtM,KAAM,MACN2L,IAAK,yDACLhH,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCkH,OAAQ,SAAUD,GAChB,OAAQA,EAAEW,SACN,qBACAX,EAAEY,KACA,kBACA,cACP,GAEH,CAGExM,KAAM,OACN2L,IAAK,wBACLhH,MAAO,CAAC,UAAW,UACnBkH,OAAQ,cAEV,CAEEH,KAAM,UACNC,IAAK,gBACLE,OAAQ,cAEV,CAEEH,KAAM,OACNC,IAAK,sCACLhH,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCkH,OAAQ,SAAUD,GAChB,OAAqB,MAAbA,EAAEa,QACN,qBACA,SACL,GAEH,CAEEzM,KAAM,eACN2L,IAAK,kCACLhH,MAAO,CAAC,UAAW,SACnBkH,OAAQ,yBAEV,CAEE7L,KAAM,SACN2L,IAAK,6CACLhH,MAAO,CAAC,UAAW,OAAQ,WAC3BkH,OAAQ,SAAUD,GAChB,OAAqB,MAAbA,EAAEc,QACN,mBACA,eACL,GAEH,CAIE1M,KAAM,MACN2L,IAAK,uFACLhH,MAAO,CAAC,QAAS,YAAa,cAAe,MAAO,UACpDkH,OAAQ,SAAUD,GAChB,MACE,aACCA,EAAEe,UAAY,MAAQ,OACtBf,EAAE,eAAiB,MAAQ,MAC5B,OACCA,EAAEgB,OAAS,MAAQ,GAEvB,GAEH,CAEElB,KAAM,mBACNC,IAAK,yBAEP,CAEE3L,KAAM,SACN2L,IAAK,0CACLhH,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCkH,OAAQ,SAAUD,GAChB,OAA2B,MAAnBA,EAAEiB,cACN,qBACA,iBACL,GAEH,CAEEnB,KAAM,QACNC,IAAK,eACLE,OAAQ,YAEV,CAEEH,KAAM,iBACNC,IAAK,6BACLE,OAAQ,iBAEV,CAEEH,KAAM,MACNC,IAAK,gBACLE,OAAQ,UAEV,CAEEH,KAAM,OACNC,IAAK,aACLE,OAAQ,WAEV,CAEEH,KAAM,QACNC,IAAK,yBACLE,OAAQ,YAEV,CAEEH,KAAM,WACNC,IAAK,4BACLE,OAAQ,eAEV,CAEEH,KAAM,YACNC,IAAK,0CAEP,CAEED,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,WACNC,IAAK,mBACLE,OAAQ,gBAEV,CAEEH,KAAM,SACNC,IAAK,iBACLE,OAAQ,cAEV,CAEEH,KAAM,cACNC,IAAK,2BACLhH,MAAO,CAAC,OAAQ,QAChBkH,OAAQ,qBAEV,CAME7L,KAAK,aACL2L,IAAK,+KACLhH,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IkH,OAAQ,SAAUD,GAChB,IAAIkB,EAAM,qCAaV,OAXAA,GAAmB,MAAXlB,EAAEmB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAblB,EAAEoB,QAAmB,cAAgB,KAEzB,MAAhBpB,EAAEqB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBlB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,KAE3D,GAEH,CAEEF,KAAM,kBACNC,IAAK,wBAEP,CAEED,KAAM,mBACNC,IAAK,0BACLE,OAAQ,wBAEV,CAEEH,KAAM,aACNC,IAAK,qBACLE,OAAQ,kBAEV,CAEE7L,KAAM,QACN2L,IAAK,kCACLhH,MAAO,CAAC,KAAM,YAAa,SAC3BkH,OAAQ,SAAUD,GAChB,IAAIkB,EAAM,UAOV,OANmB,MAAflB,EAAEsB,YACJJ,GAAO,MACQ,MAAXlB,EAAE3F,QACJ6G,GAAO,QAGJA,CACR,GAEH,CAGE9M,KAAM,aAEN2L,IAAK,mEACLhH,MAAO,CAAC,YAAa,SACrBkH,OAAQ,oBAEV,CAEEH,KAAM,eACNC,IAAK,gCACLhH,MAAO,CAAC,WAAY,SACpBkH,OAAQ,wBAEV,CAEE7L,KAAM,SACN2L,IAAK,oBACLhH,MAAO,CAAC,OAAQ,QAChBkH,OAAQ,eAEV,CAEEH,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,YACNC,IAAK,iBAEP,CAEED,KAAM,UACNC,IAAK,sCACLhH,MAAO,CAAC,gBAAiB,MAAO,kBAChCkH,OAAQ,SAAUD,GAChB,OAA4B,MAApBA,EAAEuB,eACN,mBACA,eACL,GAEH,CAEEzB,KAAM,cACNC,IAAK,0BACLE,OAAQ,oBAEV,CAEE7L,KAAM,OACN2L,IAAK,sCACLhH,MAAO,CAAC,KAAM,YAAa,UAC3BkH,OAAQ,SAAUD,GAChB,OAAQA,EAAEwB,OAAU,eAAiB,WACtC,GAEH,CAIEpN,KAAM,aACN2L,IAAK,IAAI0B,OAEP,wKAMF1I,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCkH,OAAQ,SAAUD,GAChB,MAAO,sBAAwBA,EAAE0B,KAAO,SAAW,GACpD,GAEH,CAGE5B,KAAM,YACNC,IAAK,IAAI0B,OAEP,2FAQF1I,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCkH,OAAQ,SAAUD,GAChB,MAAO,mBAAqBA,EAAE0B,KAAO,SAAW,GACjD,GAEH,CAKE5B,KAAM,eACNC,IAAK,kCACLhH,MAAO,CAAC,SACRkH,OAAQ,iBAEV,CAGEH,KAAM,YACNC,IAAK,8BACLE,OAAQ,gBAEV,CAGEH,KAAM,eACNC,IAAK,6DACLhH,MAAO,CAAC,aAAc,UAAW,eAAgB,cAAe,WAChEkH,OAAQ,iCAEV,CAEEH,KAAM,aACNC,IAAK,kBAEP,CAEED,KAAM,QACNC,IAAK,cACLE,OAAQ,YAEV,CAGEH,KAAM,WACNC,IAAK,oBACLE,OAAQ,gBAEV,CAGEH,KAAM,iBACNC,IAAK,2BACLE,OAAQ,uBAEV,CAGE7L,KAAK,cACL2L,IAAK,kCACLhH,MAAO,CAAC,SAAU,aAClBkH,OAAQ,SAAUD,GAChB,MAAO,gBAAiC,MAAfA,EAAE2B,UAAoB,MAAQ,GACxD,GAEH,CAGE7B,KAAK,WACLC,IAAK,wEACLhH,MAAO,CAAC,KAAM,iBAAkB,kBAAmB,gBAAiB,mBACpEkH,OAAQ,SAAUD,GAChB,IAAIkB,EAAM,YAKV,OAJAA,GAAgB,MAARlB,EAAEpB,GAAa,WAAa,OACpCsC,GAA6B,MAArBlB,EAAE4B,gBAA0B,MAAQ,IAC5CV,GAA2B,MAAnBlB,EAAE6B,cAAwB,WAAa,KAClB,MAArB7B,EAAE8B,gBAA0B,MAAQ,GAE7C,GAEH,CAEEhC,KAAM,WACNC,IAAK,gBACLE,OAAQ,aAEV,CAEEH,KAAM,UACNC,IAAK,gBACLE,OAAQ,cAGV,CAEEH,KAAM,gBACNC,IAAK,iCACLE,OAAQ,gBAEV,CAEEH,KAAM,aACNC,IAAK,gBACLE,OAAQ,aAEV,CAEEH,KAAM,aACNC,IAAK,gBACLE,OAAQ,aAEV,CAEEH,KAAM,cACNC,IAAK,wCACLhH,MAAO,CAAC,KAAM,WACdkH,OAAQ,uBAEV,CAEE7L,KAAM,UACN2E,MAAO,CAAC,YAMd9G,OAAO6I,KAAK8E,GAAShK,SAAQ,SAAUwE,GAC1BwF,EAAQxF,GACdxE,SAAQ,SAAU4D,GAChBA,EAAIuG,MACPvG,EAAIuG,IAAM,QAEPvG,EAAIyG,SACPzG,EAAIyG,OAAS,KAEhB,GACF,oBC7eD,IAAI8B,EAASjQ,EAAQ,MACjBkQ,EAASlQ,EAAQ,MAErBN,EAAQyQ,MAAQD,EAChBxQ,EAAQ0H,MAAQ6I,EAAO7I,MACvB1H,EAAQ0Q,YAAcH,EAAOG,YAC7B1Q,EAAQ2Q,gBAAkBJ,EAAOI,gBACjC3Q,EAAQ4Q,cAAgBL,EAAOK,cAC/B5Q,EAAQ6Q,sBAAwBN,EAAOM,sBACvC7Q,EAAQ8Q,qBAAuBP,EAAOO,qBACtC9Q,EAAQ+Q,yBAA2BR,EAAOQ,yCCV1C,IAAIC,EAAa,SAAU3C,GACzB,OAAO4C,OAAOC,OAAO7C,MAAQA,EAAI6C,OAAO7C,GAAKA,CAC9C,EAeG8C,EAAW,SAAUnJ,EAAKoJ,EAAUC,GACtC,IAAIC,EAAatJ,EAAIsG,MAAQtG,EAAIT,MAC7BS,EAAIpF,OAASwO,EAASpJ,EAAIpF,MAC5BwO,EAASpJ,EAAIpF,MAAQ,GAEd0O,IAAeF,EAASpJ,EAAIsG,QACnC8C,EAASpJ,EAAIsG,MAAQ,CAAC,GAExB,IAAIiD,EAAcvJ,EAAIpF,KACpB,CAAC,EACD0O,EAAaF,EAASpJ,EAAIsG,MAAQ8C,GAvBf,SAAUjJ,EAAOiJ,EAAU7J,EAAOiK,GACvD,GAAIA,IAAYjK,EACd6J,EAASI,GAAWR,EAAW7I,EAAM,SAGrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIyB,EAAMjC,OAAQQ,GAAK,EACnB,MAAdqC,EAAMrC,EAAE,KACVsL,EAAS7J,EAAMzB,IAAMkL,EAAW7I,EAAMrC,EAAE,IAI/C,CAcC2L,CAAiBJ,EAAQlJ,MAAMH,EAAIuG,KAAMgD,EAAavJ,EAAIT,MAAOS,EAAIsG,MAEjEtG,EAAIpF,MACNwO,EAASpJ,EAAIpF,MAAMA,KAAK2O,EAE3B,EAEGnD,EAAU9N,EAAQ,MAClBoR,EAAYzB,OAAOzM,UAAUmO,KAAK9N,KAAK,iBAE3C7D,EAAQ0H,MAAQ,SAAUkK,GACxB,IAAIC,EAAU,CAAC,EACXC,EAAQ,GACRV,EAAWS,EAoBf,OAjBAD,EAAIlF,MAAM,gBAAgBqF,OAAOL,GAAWtN,SAAQ,SAAU6I,GAC5D,IAAI+E,EAAO/E,EAAE,GACToE,EAAUpE,EAAEf,MAAM,GACT,MAAT8F,IACFF,EAAMlP,KAAK,CAACqP,IAAK,GAAIC,KAAM,KAC3Bd,EAAWU,EAAMA,EAAMxM,OAAO,IAGhC,IAAK,IAAI6M,EAAI,EAAGA,GAAK/D,EAAQ4D,IAAS,IAAI1M,OAAQ6M,GAAK,EAAG,CACxD,IAAInK,EAAMoG,EAAQ4D,GAAMG,GACxB,GAAInK,EAAIuG,IAAIoD,KAAKN,GACf,OAAOF,EAASnJ,EAAKoJ,EAAUC,EAElC,CACF,IAEDQ,EAAQC,MAAQA,EACTD,CACR,EAED,IAAIO,EAAe,SAAUC,EAAKC,GAChC,IAAI5D,EAAI4D,EAAK5F,MAAM,QAAS,GAM5B,OALiB,IAAbgC,EAAEpJ,OACJ+M,EAAI3D,EAAE,IAAMsC,EAAWtC,EAAE,IACH,IAAbA,EAAEpJ,QAAgBgN,EAAKhN,OAAS,IACzC+M,EAAI3D,EAAE,SAAM5G,GAEPuK,CACR,EAEDrS,EAAQ0Q,YAAc,SAAUhB,GAC9B,OAAOA,EAAIhD,MAAM,QAAQ6F,OAAOH,EAAc,CAAC,EAChD,EAGDpS,EAAQ2Q,gBAAkB3Q,EAAQ0Q,YAElC1Q,EAAQ4Q,cAAgB,SAAUlB,GAChC,OAAOA,EAAI8C,WAAW9F,MAAM,KAAK+F,IAAIvB,OACtC,EAEDlR,EAAQ6Q,sBAAwB,SAAUnB,GAGxC,IAFA,IAAIgD,EAAa,GACbC,EAAQjD,EAAIhD,MAAM,KAAK+F,IAAIzB,GACtBlL,EAAI,EAAGA,EAAI6M,EAAMrN,OAAQQ,GAAK,EACrC4M,EAAW9P,KAAK,CACdgQ,UAAWD,EAAM7M,GACjB+M,GAAIF,EAAM7M,EAAI,GACdgN,KAAMH,EAAM7M,EAAI,KAGpB,OAAO4M,CACR,EAED1S,EAAQ8Q,qBAAuB,SAAUpB,GACvC,OAAOA,EAAIhD,MAAM,KAAK+F,KAAI,SAAUM,GAClC,OAAOA,EAAK9L,UAAU,EAAG8L,EAAKzN,OAAO,GAAGoH,MAAM,KAAK6F,OAAOH,EAAc,CAAC,EAC1E,GACF,EAEDpS,EAAQ+Q,yBAA2B,SAAUrB,GAC3C,OAAOA,EAAIhD,MAAM,KAAK+F,KAAI,SAAUO,GAClC,OAAOA,EAAOtG,MAAM,KAAK+F,KAAI,SAAUhE,GACrC,IAAIwE,EAAMC,GAAS,EASnB,MAPkB,MAAdzE,EAAO,GACTwE,EAAOjC,EAAWvC,IAElBwE,EAAOjC,EAAWvC,EAAOxH,UAAU,EAAGwH,EAAOnJ,SAC7C4N,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,EAEX,GACF,GACF,kBC3HD,IAAI9E,EAAU9N,EAAQ,MAGlB6S,EAAe,WACf1E,EAAS,SAAU2E,GACrB,IAAItN,EAAI,EACJpC,EAAOgG,UACPhE,EAAMhC,EAAK4B,OACf,OAAO8N,EAAUnQ,QAAQkQ,GAAc,SAAUE,GAC/C,GAAIvN,GAAKJ,EACP,OAAO2N,EAET,IAAIlJ,EAAMzG,EAAKoC,GAEf,OADAA,GAAK,EACGuN,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAOpC,OAAO9G,GAChB,IAAK,KACH,OAAO+G,OAAO/G,GAChB,IAAK,KACH,MAAO,GAEV,GAEF,EAEGmJ,EAAW,SAAUtB,EAAMhK,EAAKoJ,GAClC,IAII1N,EAAO,CAACsO,EAAO,KAJThK,EAAIyG,kBAAkB7K,SAC7BoE,EAAIyG,OAAOzG,EAAIpF,KAAOwO,EAAWA,EAASpJ,EAAIsG,OAC/CtG,EAAIyG,SAGN,GAAIzG,EAAIT,MACN,IAAK,IAAIzB,EAAI,EAAGA,EAAIkC,EAAIT,MAAMjC,OAAQQ,GAAK,EAAG,CAC5C,IAAIyN,EAAIvL,EAAIT,MAAMzB,GACdkC,EAAIsG,KACN5K,EAAKd,KAAKwO,EAASpJ,EAAIsG,MAAMiF,IAG7B7P,EAAKd,KAAKwO,EAASpJ,EAAIT,MAAMzB,IAEhC,MAGDpC,EAAKd,KAAKwO,EAASpJ,EAAIsG,OAEzB,OAAOG,EAAO3K,MAAM,KAAMJ,EAC3B,EAIG8P,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCxT,EAAOD,QAAU,SAAU6R,EAAS6B,GAClCA,EAAOA,GAAQ,CAAC,EAEO,MAAnB7B,EAAQ8B,UACV9B,EAAQ8B,QAAU,GAEA,MAAhB9B,EAAQvD,OACVuD,EAAQvD,KAAO,KAEjBuD,EAAQC,MAAM1N,SAAQ,SAAUwP,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,GAEpB,IAED,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChC7B,EAAM,GAkCV,OA/BAkC,EAAW1P,SAAQ,SAAU4N,GAC3B5D,EAAQ4D,GAAM5N,SAAQ,SAAU4D,GAC1BA,EAAIsG,QAAQuD,GAAgC,MAArBA,EAAQ7J,EAAIsG,MACrCsD,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAK6J,IAEtB7J,EAAIpF,QAAQiP,GAAgC,MAArBA,EAAQ7J,EAAIpF,OAC1CiP,EAAQ7J,EAAIpF,MAAMwB,SAAQ,SAAU4P,GAClCpC,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAKgM,GAC9B,GAEJ,GACF,IAGDnC,EAAQC,MAAM1N,SAAQ,SAAUwP,GAC9BhC,EAAIhP,KAAK0Q,EAAS,IAAKlF,EAAQzB,EAAE,GAAIiH,IAErCG,EAAW3P,SAAQ,SAAU4N,GAC3B5D,EAAQ4D,GAAM5N,SAAQ,SAAU4D,GAC1BA,EAAIsG,QAAQsF,GAA4B,MAAnBA,EAAM5L,EAAIsG,MACjCsD,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAK4L,IAEtB5L,EAAIpF,QAAQgR,GAA4B,MAAnBA,EAAM5L,EAAIpF,OACtCgR,EAAM5L,EAAIpF,MAAMwB,SAAQ,SAAU4P,GAChCpC,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAKgM,GAC9B,GAEJ,GACF,GACF,IAEMpC,EAAIqC,KAAK,QAAU,MAC3B,kBClGD,IAAIC,EAAY5T,EAAQ,MACpB6T,EAAiB7T,EAAQ,MACzB8T,EAAaD,EAAeC,WAC5BC,EAAaF,EAAeE,WAI5BC,EAAwB,EAI5B,SAASC,EAAkBX,EAAOY,EAAMC,GACpC,OAAOb,EACFc,MACA3C,QAAO,SAAS4C,GAAY,OAAOA,EAASvH,KAAOoH,CAAO,IAC1DzC,QAAO,SAAS4C,GAAY,OAAOA,EAAS7E,YAAc2E,CAAgB,IAC1EhC,KAAI,SAASkC,GAAY,OAAOA,EAAS9L,KAAQ,IAAE,EAC3D,CAID,SAAS+L,EAAU7M,GAEf/G,KAAK+G,QAAUA,GAAoB,CAAC,EAE/B/G,KAAK+G,QAAQ8M,cACd7T,KAAK+G,QAAQ8M,YAAcP,GAE/BjJ,QAAQS,IAAI,uBAAyB9K,KAAK+G,QAAQ8M,YAAc,WAMhE7T,KAAK8T,UAAY,EACpB,CAgBD,SAASC,EAAalD,EAASmD,GACZ,MAAXnD,GAAoB5F,MAAMgJ,QAAQpD,EAAQC,QAI9CD,EAAQC,MAAM1N,SAAQ,SAAUwP,GACT,UAAfA,EAAM5B,MACNgD,EAAOpB,EAEd,GACJ,CAED,SAASsB,EAAoBC,GAEzB,OAAOA,GAAgB,MAARA,GACRA,EAAKnD,MAAqB,IAAbmD,EAAKnD,MAClBmD,EAAKvD,KAAmB,IAAZuD,EAAKvD,GAC3B,CAiJDgD,EAAUpR,UAAU4R,eAAiB,WACjCpU,KAAK8T,UAAY,EACpB,EAUDF,EAAUpR,UAAU6R,aAAe,SAASX,GACxC1T,KAAK8T,UAAYJ,CACpB,EAWDE,EAAUpR,UAAU8R,gBAAkB,SAAU1B,GAC5C,IAAI2B,EAAW3B,EAAM4B,YACjB5B,EAAM4B,WAAWC,MAAK,SAASC,GAAS,MAA2B,QAApBA,EAAMC,SAAsB,IAC/E,OAAIJ,EACOA,EAASb,MACXhI,MAAM,KACN+F,KAAI,SAASmD,GAAW,OAAOC,SAASD,EAAU,IAEhD,CAAChC,EAAMc,MAAM,GAAGtH,GAE9B,EAEDwH,EAAUpR,UAAUsS,sBAAwB,SAAUC,EAAaC,GAE/D,IADA,IAAIC,EAAU,CAAC,EACNnQ,EAAI,EAAGA,EAAIiQ,EAAYzQ,SAAUQ,EAAG,CACzC,IAAIoQ,EAAUH,EAAYjQ,GACtBqQ,EAAUH,EAAYlQ,IAAM,KAChCmQ,EAAQC,GAAWC,CACtB,CACD,OAAOF,CACV,EAEDrB,EAAUpR,UAAU4S,2BAA6B,SAASxC,GACtDvI,QAAQS,IAAI,sCAAuC9K,KAAK8T,WACxD,IAAIuB,EAAcrV,KAAKsU,gBAAgB1B,GACvCvI,QAAQS,IAAI,sCAAuCuK,GACnD,IAAIC,EAAU/B,EAAiBX,EAAOyC,EAAY,GAAI,QAClDE,EAAWhC,EAAiBX,EAAOyC,EAAY,GAAI,SACnDG,EAAiBxV,KAAK8U,sBAAsBO,EAAarV,KAAK8T,WAClEzJ,QAAQS,IAAI,uCAAwC0K,GAGpD,IAAIC,EAAazV,KAAK8T,UACjB/C,QAAO,SAASyC,GAAQ,OAAwD,IAAjD/T,OAAOiW,OAAOF,GAAgB/K,QAAQ+I,EAAe,IA2BzF,OA1BAnJ,QAAQS,IAAI,oCAAqC2K,GAGjD7C,EAAMc,MAAMtQ,SAAQ,SAASoQ,GACrBgC,EAAehC,EAAKpH,MACpBoH,EAAKpH,GAAKoJ,EAAehC,EAAKpH,IAErC,IAEDqJ,EAAWrS,SAAQ,SAASoQ,GACxBZ,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,OACXjH,MAAOyN,IAEX1C,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,QACXjH,MAAO0N,GAEd,IACD3C,EAAM4B,WAAa5B,EAAM4B,YAAc,GACvC5B,EAAM4B,WAAW5S,KAAK,CAClB+S,UAAW,MACXjB,MAAO1T,KAAK8T,UAAUb,KAAK,OAExBL,CACV,EAEDgB,EAAUpR,UAAUmT,oBAAsB,SAAS/C,EAAOgD,GACtD,IAAIC,EAAsB,SAASjD,EAAOY,GACtCZ,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,QACXjH,MAAOiO,IAEXlD,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,OACXjH,MAAOkO,GAEd,EACGA,EAAkBxC,EAAiBX,EAAOgD,EAAa,QACvDE,EAAmBvC,EAAiBX,EAAOgD,EAAa,SAKxD5V,KAAK+G,QAAQiP,kBAAoBD,IACjCA,EAAkBnD,EAAMqD,KACLrD,EAAMc,MACZtQ,SAAQoQ,IACjBZ,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EAAKpH,GACT0C,UAAW,OACXjH,MAAOkO,GAHX,KAUR,IADA,IAAIG,EAAW,GACNpR,EAAI,EAAGA,EAAI9E,KAAK+G,QAAQ8M,YAAc,IAAK/O,EAAG,CACnD,IAAIqR,EA/RDlS,KAAKC,MAAM,WAAAD,KAAKE,UADb,EAiSN0R,EAAoBjD,EAAOuD,GAC3BD,EAAStU,KAAKuU,EACjB,CAMD,OALAvD,EAAM4B,WAAa5B,EAAM4B,YAAc,GACvC5B,EAAM4B,WAAW5S,KAAK,CAClB+S,UAAW,MACXjB,MAAOkC,EAAc,IAAMM,EAASjD,KAAK,OAEtCL,CACV,EAmBDgB,EAAUpR,UAAU4T,kBAAoB,SAASxD,GAG7C,IAAIgD,EACAS,EAAWzD,EAAMc,OAASd,EAAMc,MAC/BjC,KAAI,SAASkC,GAAY,OAAOA,EAASvH,EAAK,IAC9C2E,QAAO,SAASyC,EAAM8C,EAAOC,GAC1B,OAAOA,EAAM9L,QAAQ+I,KAAU8C,CAClC,IACAhS,QAAU,EACXkS,EAAa5D,EAAM4B,YAAc5B,EAAM4B,WAAWlQ,QAAW,EAEjE,GAAiB,IAAb+R,GAAkBA,EAAW,EAE7B,OAAOzD,EAEX,GAAgB,GAAZyD,GAA+B,IAAdG,EAEjB,OAAO5D,EAGX,GAAiB,IAAbyD,EACAT,EAAchD,EAAMc,MAAM,GAAGtH,OAC1B,CAGH,IAAIqK,EAAW7D,EAAM4B,WAAWzD,QAAO,SAAS2D,GAAS,MAA2B,QAApBA,EAAMC,SAAsB,IAAE,GAC9F,IAAI8B,EAIA,OAAO7D,EAHPgD,EAAcf,SAAS4B,EAAS/C,MAAMhI,MAAM,KAAK,GAKxD,CAiBD,OAhBArB,QAAQS,IAAI,qCAAsC9K,KAAK8T,WACvDzJ,QAAQS,IAAI,qCAAuC8K,IAEY,IAAzC5V,KAAK8T,UAAUrJ,QAAQmL,IAGzCvL,QAAQS,IAAI,2EAEZ8H,EAAQ5S,KAAKoV,2BAA2BxC,KAExCvI,QAAQS,IAAI,2EAEZ8H,EAAQ5S,KAAK2V,oBAAoB/C,EAAOgD,IAG5C5V,KAAK8T,UAAY9T,KAAKsU,gBAAgB1B,GAC/BA,CACV,EAYDgB,EAAUpR,UAAUkU,uBAAyB,SAAUvC,EAAMwC,GAEzD,IAAKzC,EAAoBC,GACrB,OAAOA,EAGX,IAAItD,EAAUqC,EAAUxM,MAAMyN,EAAKvD,KAE/BxR,EAAOY,KAqBX,OApBA+T,EAAalD,GAAS,SAAU+B,GAGxBxT,EAAK2H,QAAQ6P,uBAjXzB,SAAgChE,GAE5B,GAAKA,GAAU3H,MAAMgJ,QAAQrB,EAAM4B,YASnC,IALA,IAAIqC,EAAUzD,EAAWR,GACrBkE,EAAQ,GAGR3F,EAAIyB,EAAM4B,WAAWlQ,OAClB6M,KAEH,GAAsC,QAAlCyB,EAAM4B,WAAWrD,GAAGwD,UAAxB,CAMA,IAFA,IAAIoC,EAAiBnE,EAAM4B,WAAWrD,GAAGuC,MAAMhI,MAAM,KAE5C5G,EAAI,EAAGA,EAAIiS,EAAezS,OAAQQ,IAAK,CAE5C,IAAI0O,EAAOuD,EAAejS,GAC1BgS,EAAMlV,KAAK4R,GAEX,IAAI7B,EAAQkF,EAAQrD,GAAMyC,KAAKvK,MAAM,KACrCmL,EAAQrD,GAAMyC,KAAO,CAACtE,EAAM,GAAI,IAAK7M,EAAG,IAAK6M,EAAM,GAAI,IAAK7M,GAAGmO,KAAK,IACpE4D,EAAQrD,GAAMwD,MAAQ,CAACH,EAAQrD,GAAMwD,MAAO,IAAKlS,GAAGmO,KAAK,IAGzDL,EAAM4B,WAAWpR,SAAQ,SAAU6T,GAC/B,GAA+B,QAA3BA,EAAatC,UAAjB,CAIA,IAAIuC,EAAeD,EAAavD,MAAMhI,MAAM,MACR,IAAhCwL,EAAazM,QAAQ+I,IAKzB0D,EAAa9T,SAAQ,SAAU+T,GAC3BN,EAAQM,GAAalB,KAAOY,EAAQrD,GAAMyC,KAC1CY,EAAQM,GAAaH,MAAQH,EAAQrD,GAAMwD,MACvCG,IAAgB3D,GAChBsD,EAAMlV,KAAKuV,EAElB,GAdA,CAiBJ,GACJ,CAEDvE,EAAMc,MAAQL,EAAWwD,EAASC,GAClClE,EAAM4B,WAAW5J,OAAOuG,EAAG,EAtC1B,CAwCR,CA2TWyF,CAAuBhE,GAzTnC,SAAgCA,GAE5B,GAAKA,GAAU3H,MAAMgJ,QAAQrB,EAAM4B,YAAnC,CAMA,IAAIqC,EAAUzD,EAAWR,GAGzBA,EAAM4B,WAAWpR,SAAQ,SAAUgU,GAC/B,GAAiC,QAA7BA,EAAezC,UAAnB,CAIAtK,QAAQgN,KAAK,wBAA0BD,EAAe1D,OAEtD0D,EAAeE,MAAO,EAKtB,IAHA,IAAIP,EAAiBK,EAAe1D,MAAMhI,MAAM,KAGvC5G,EAAI,EAAGA,EAAIiS,EAAezS,OAAQQ,IAAK,CAE5C,IAAI0O,EAAOuD,EAAejS,UACnB+R,EAAQrD,GAGfZ,EAAM4B,WAAWpR,SAAQ,SAAU6T,GAC/B,GAA+B,QAA3BA,EAAatC,UAAjB,CAIA,IAAIuC,EAAeD,EAAavD,MAAMhI,MAAM,MACR,IAAhCwL,EAAazM,QAAQ+I,KAKzB0D,EAAa9T,SAAQ,SAAU+T,UACpBN,EAAQM,EAClB,IAGDF,EAAaK,MAAO,EAbnB,CAcJ,GACJ,CAjCA,CAoCJ,IAED1E,EAAMc,MAAQL,EAAWwD,GAIzB,IADA,IAAI/R,EAAI8N,EAAM4B,WAAWlQ,OAClBQ,KACC8N,EAAM4B,WAAW1P,GAAGwS,MACpB1E,EAAM4B,WAAW5J,OAAO9F,EAAG,EApDlC,MAHGuF,QAAQgN,KAAK,4DA0DpB,CA8PWE,CAAuB3E,IAOtBxT,EAAK2H,QAAQiP,iBAAmBW,EA3P7C,SAA8B/D,GACrBA,IAIA3H,MAAMgJ,QAAQrB,EAAM4E,WACrB5E,EAAM4E,QAAU,IAGf5E,EAAM4E,QAAQC,MACX,SAAU3S,GAAK,MAAmB,6BAAZA,EAAE+C,KAAsC,KAClE+K,EAAM4E,QAAQ5V,KAAK,CAAC,MAAS,6BAEpC,CA+OW8V,CAAqB9E,GApQjC,SAA8BA,GACrBA,QAAsC,IAAtBA,EAAM+E,cAI3B/E,EAAM+E,iBAAc7Q,EACvB,CAgQW8Q,CAAqBhF,EAE5B,IAEM,IAAIiF,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKsC,EAAUzD,MAAMoB,IAE5B,EASD+C,EAAUpR,UAAUsV,sBAAwB,SAAU3D,GAElD,IAAKD,EAAoBC,GACrB,OAAOA,EAGX,IAAItD,EAAUqC,EAAUxM,MAAMyN,EAAKvD,KAE/BxR,EAAOY,KASX,OARA+T,EAAalD,GAAS,SAAU+B,GACL,YAAnBA,EAAMrE,WAA8C,YAAnBqE,EAAMrE,WAI3CnP,EAAKgX,kBAAkBxD,EAC1B,IAEM,IAAIiF,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKsC,EAAUzD,MAAMoB,IAE5B,EAID5R,EAAOD,QAAU4U,gBCrejB5U,EAAQqU,WAAa,SAASwD,EAASC,GACrC,IAAIpD,EAAQ,GAGZ,QAAuB,IAAZmD,GACyB,IAAhCpX,OAAO6I,KAAKuO,GAASvS,OAAc,CAEhC2G,MAAMgJ,QAAQ6C,KACjBA,EAAQ,IAIV,IAAK,IAAIhS,EAAI,EAAGA,EAAIgS,EAAMxS,OAAQQ,IAAK,CACrC,IAAI0O,EAAOsD,EAAMhS,GACbiT,EAASlB,EAAQrD,GACrB/T,OAAO6I,KAAKyP,GAAQ3U,SAAQ,SAAU0L,GACpC4E,EAAM9R,KAAK,CACTwK,GAAIoH,EACJ1E,UAAWA,EACXjH,MAAOkQ,EAAOjJ,IAEjB,GACF,CAGDrP,OAAO6I,KAAKuO,GAASzT,SAAQ,SAAUoQ,GAErC,GADAA,EAAOqB,SAASrB,KACZsD,EAAMrM,QAAQ+I,IAAS,GAA3B,CAKA,IAAIuE,EAASlB,EAAQrD,GACrB/T,OAAO6I,KAAKyP,GAAQ3U,SAAQ,SAAU0L,GACpC4E,EAAM9R,KAAK,CACTwK,GAAIoH,EACJ1E,UAAWA,EACXjH,MAAOkQ,EAAOjJ,IAEjB,GATA,CAUF,GACF,CAED,OAAO4E,CACR,EAED1U,EAAQoU,WAAa,SAAUR,GAC7B,IAAIiE,EAAU,CAAC,EASf,YAP2B,IAAhBjE,EAAMc,OAAyBzI,MAAMgJ,QAAQrB,EAAMc,QAC5Dd,EAAMc,MAAMtQ,SAAQ,SAAUoQ,GACvBqD,EAAQrD,EAAKpH,MAChByK,EAAQrD,EAAKpH,IAAM,CAAC,GACtByK,EAAQrD,EAAKpH,IAAIoH,EAAK1E,WAAa0E,EAAK3L,KACzC,IAEIgP,CACR,WCxEEzX,KAPDH,EAAOD,QAQT,wCCRAA,EAAQ,GAAmBA,EAAQ,GAAkBA,EAAQ,GAAgBA,EAAQ,GAAmBA,EAAQ,GAAaA,EAAQ,GAAUA,EAAQ,GAAWA,EAAQ,GAAYA,EAAQ,GAAWA,EAAQ,GAAuBA,EAAQ,GAAwBA,EAAQ,GAAUA,EAAQ,GAAgBA,EAAQ,GAAUA,EAAQ,GAAYA,EAAQ,UAChW,EAAQ,KACR,IAAIgZ,EAAQ,EAAQ,KAWpBhZ,EAAQ,GAHG,SAAUiZ,EAAgBC,IAAAA,EAC7BF,EAAMG,SAAUF,GAAkB,CAAC,EAAI,CAAC,IAAKC,EAAAA,EAUrDlZ,EAAQ,GAHQ,SAAUiZ,IAAAA,EAClBD,EAAMI,WAAWH,EAAAA,EAWzBjZ,EAAQ,GAHM,SAEdqZ,GAAAA,EAYArZ,EAAQ,GALY,SAEpBsZ,EAAQC,IAAAA,EACAP,EAAMQ,eAAeF,EAAQC,EAAAA,EAYrCvZ,EAAQ,GALM,SAEdsJ,IAAAA,EACQ0P,EAAMS,SAASnQ,EAAAA,EASvBtJ,EAAQ,GAHoB,cACpBgZ,EAAMU,wBAAAA,EASd1Z,EAAQ,GAHmB,cACnBgZ,EAAMW,uBAAAA,EAMd3Z,EAAQ,GAHO,SAAUsE,IAAAA,EACjB0U,EAAMY,UAAUtV,EAAAA,EAYxBtE,EAAQ,GAHQ,SAAUoN,EAAIkB,IAAAA,EACtB0K,EAAMa,WAAWzM,EAAIkB,EAAAA,EAW7BtO,EAAQ,GAHO,SAAUoN,EAAIkB,IAAAA,EACrB0K,EAAMc,UAAU1M,EAAIkB,EAAAA,EAM5BtO,EAAQ,GAHM,cACNgZ,EAAMe,UAAAA,EAMd/Z,EAAQ,GAHS,cACTgZ,EAAMgB,aAAAA,EAMdha,EAAQ,GAHe,SAAUia,IAAAA,EACzBjB,EAAMkB,yBAAyBD,EAAAA,EAMvCja,EAAQ,GAHY,SAAUma,IAAAA,EACtBnB,EAAMoB,eAAeD,EAAAA,EAM7Bna,EAAQ,GAHc,SAAUqa,EAAQC,IAAAA,EAChCtB,EAAMuB,iBAAiBF,EAAQC,EAAAA,EAMvCta,EAAQ,GAHe,SAAUia,IAAAA,EACzBjB,EAAMwB,uBAAuBP,EAAAA,EAGrCja,EAAQya,QAAU,CAOdC,KAAM1a,EAAQ,GAMd2a,QAAS3a,EAAQ,GAMjBwZ,cAAexZ,EAAQ,GAKvByZ,QAASzZ,EAAQ,GAKjBoZ,UAAWpZ,EAAQ,GAInB0Z,sBAAuB1Z,EAAQ,GAI/B2Z,qBAAsB3Z,EAAQ,GAC9B4Z,SAAU5Z,EAAQ,GAOlB6Z,UAAW7Z,EAAQ,GAMnB8Z,SAAU9Z,EAAQ,GAClB+Z,QAAS/Z,EAAQ,GACjBga,WAAYha,EAAQ,GACpB4a,iBAAkB5a,EAAQ,GAC1Boa,cAAepa,EAAQ,GACvBua,gBAAiBva,EAAQ,GACzB6a,iBAAkB7a,EAAQ,GA7J9BA,mCCdA,IAAI8a,EAAY9Z,MAAQA,KAAK8Z,UAAa,WAStC,OARAA,EAAWra,OAAOC,QAAU,SAASsM,GACjC,IAAK,IAAI0B,EAAG5I,EAAI,EAAGyN,EAAI7J,UAAUpE,OAAQQ,EAAIyN,EAAGzN,IAE5C,IAAK,IAAI+I,KADTH,EAAIhF,UAAU5D,GACOrF,OAAO+C,UAAUgF,eAAeC,KAAKiG,EAAGG,KACzD7B,EAAE6B,GAAKH,EAAEG,IAEjB,OAAO7B,CAAAA,EAEJ8N,EAAShX,MAAM9C,KAAM0I,UAAAA,EAE5BqR,EAAa/Z,MAAQA,KAAK+Z,WAAc,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU1S,GAAS,IAAM2S,EAAKL,EAAU9S,KAAKQ,GAAW,OAAO+F,GAAK0M,EAAO1M,EAAAA,CACpF,UAAS6M,EAAS5S,GAAS,IAAM2S,EAAKL,EAAiB,MAAEtS,GAAW,OAAO+F,GAAK0M,EAAO1M,EAAAA,CACvF,UAAS4M,EAAK3V,GAJlB,IAAegD,EAIahD,EAAO6V,KAAOL,EAAQxV,EAAOgD,QAJ1CA,EAIyDhD,EAAOgD,MAJhDA,aAAiBqS,EAAIrS,EAAQ,IAAIqS,GAAE,SAAUG,GAAWA,EAAQxS,EAAAA,KAIT8S,KAAKJ,EAAWE,EAClGD,CAAAA,GAAML,EAAYA,EAAUrX,MAAMkX,EAASC,GAAc,KAAK5S,OAAAA,GAAAA,EAGlEuT,EAAe5a,MAAQA,KAAK4a,aAAgB,SAAUZ,EAASa,GAC/D,IAAsGC,EAAGC,EAAG/O,EAAGgP,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPnP,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOoP,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAE3T,KAAMiU,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAOxb,IAAAA,GAAUgb,EACvJ,SAASM,EAAK/I,GAAK,OAAO,SAAUlF,GAAK,OACzC,SAAcoO,GACV,GAAIX,EAAG,MAAM,IAAIY,UAAU,mCAC3B,KAAOT,GAAAA,IACH,GAAIH,EAAI,EAAGC,IAAM/O,EAAY,EAARyP,EAAG,GAASV,EAAU,OAAIU,EAAG,GAAKV,EAAS,SAAO/O,EAAI+O,EAAU,SAAM/O,EAAEvE,KAAKsT,GAAI,GAAKA,EAAE1T,SAAW2E,EAAIA,EAAEvE,KAAKsT,EAAGU,EAAG,KAAKf,KAAM,OAAO1O,EAE3J,OADI+O,EAAI,EAAG/O,IAAGyP,EAAK,CAAS,EAARA,EAAG,GAAQzP,EAAEnE,QACzB4T,EAAG,IACP,KAAK,EAAG,KAAK,EAAGzP,EAAIyP,EAAI,MACxB,KAAK,EAAc,OAAXR,EAAEC,QAAgB,CAAErT,MAAO4T,EAAG,GAAIf,MAAAA,GAC1C,KAAK,EAAGO,EAAEC,QAASH,EAAIU,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKR,EAAEI,IAAIM,MAAOV,EAAEG,KAAKO,MAAO,SACxC,QACI,MAAkB3P,GAAZA,EAAIiP,EAAEG,MAAY9W,OAAS,GAAK0H,EAAEA,EAAE1H,OAAS,KAAkB,IAAVmX,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAER,EAAI,EAAG,QACjG,IAAc,IAAVQ,EAAG,MAAczP,GAAMyP,EAAG,GAAKzP,EAAE,IAAMyP,EAAG,GAAKzP,EAAE,IAAM,CAAEiP,EAAEC,MAAQO,EAAG,GAAI,KAC9E,IAAc,IAAVA,EAAG,IAAYR,EAAEC,MAAQlP,EAAE,GAAI,CAAEiP,EAAEC,MAAQlP,EAAE,GAAIA,EAAIyP,EAAI,KAC7D,IAAIzP,GAAKiP,EAAEC,MAAQlP,EAAE,GAAI,CAAEiP,EAAEC,MAAQlP,EAAE,GAAIiP,EAAEI,IAAIzZ,KAAK6Z,GAAK,KACvDzP,CAAAA,EAAE,IAAIiP,EAAEI,IAAIM,MAChBV,EAAEG,KAAKO,MAAO,SAEtBF,EAAKZ,EAAKpT,KAAKuS,EAASiB,EAC1B,OAAOrN,GAAK6N,EAAK,CAAC,EAAG7N,GAAImN,EAAI,CAAK,CAjB7BE,QAiBuCH,EAAI9O,EAAI,CACtD,IAAY,EAARyP,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE5T,MAAO4T,EAAG,GAAKA,EAAG,UAAaf,MAAAA,EArBxBF,CAChD,CADqD,CAACjI,EAAGlF,GAAAA,CAAAA,CAAAA,EAwBzDuO,EAAiB5b,MAAQA,KAAK4b,eAAkB,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBrT,UAAUpE,OAAc,IAAK,IAA4B0X,EAAxBlX,EAAI,EAAGmH,EAAI6P,EAAKxX,OAAYQ,EAAImH,EAAGnH,KACxEkX,GAAQlX,KAAKgX,IACRE,IAAIA,EAAK/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,EAAM,EAAGhX,IAClDkX,EAAGlX,GAAKgX,EAAKhX,IAGrB,OAAO+W,EAAG9P,OAAOiQ,GAAM/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,GAAAA,EAEtDrc,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C7I,EAAQua,gBAAkBva,EAAQoa,cAAgBpa,EAAQwa,sBAAwBxa,EAAQka,wBAA0Bla,EAAQga,WAAaha,EAAQ+Z,QAAU/Z,EAAQ8Z,SAAW9Z,EAAQ6Z,UAAY7Z,EAAQ4Z,SAAW5Z,EAAQ2Z,qBAAuB3Z,EAAQ0Z,sBAAwB1Z,EAAQyZ,QAAUzZ,EAAQwZ,cAAgBxZ,EAAQoZ,UAAYpZ,EAAQmZ,aAAAA,EAC1V,IAmBI+D,EAEAC,EAEAC,EACAC,EAEAC,EAGAC,EA7BAC,EAAmB,EAAQ,IAC3BC,EAAiB,EAAQ,KACzBC,EAAU,EAAQ,KAClBC,EAAY,EAAQ,KAEpBC,IAAcrd,OAAOsd,qBAGrBC,IAFYF,GAAard,OAAOwd,mBAAsBxd,OAAOyd,UAAUC,mBAExD,CAAC,GAChBC,EAAwB,EACxBC,EAAiB,CAAC,EAClBC,EAAsB,CACtBC,eAAAA,EACAC,eAAAA,EACAC,eAAAA,GAEAtF,EAAiB,KACjBuF,EAAO,KACPC,EAAS,KAETC,EAAqB,EAErBC,GAAAA,EAGAC,GAAAA,EAEAC,GAAAA,EACAC,GAAAA,EAEAC,EAAgB,KAChBC,EAAWtB,EAAQsB,SAASnb,KAAK,MAAM,WAAc,OAAOoV,MAAAA,OAAAA,EAAgEA,EAAegG,KAAAA,IAE3IC,EAAc,CAAC,EACfC,EAA+B,SAAUC,GACzC,IAAIC,EACAC,EAAKF,EAAGG,cAAeA,OAAAA,IAAgBD,GAAwBA,EAAIE,EAAKJ,EAAGK,aAAcA,OAAAA,IAAeD,GAAwBA,EAAIE,EAAKN,EAAGO,KAAMA,OAAAA,IAAOD,EAAgB,aAAeA,EAW5L,GAVAV,EAAS,OAAQ,yCAAyCjS,OAAO4S,EAAM,KAAM,CACzEJ,cAAeA,EACfE,aAAcA,EACdX,mBAAoBA,EACpBH,sBAAuBA,EACvB1F,eAAgBA,EAChB6E,aAAc7V,KAAK8B,UAAU+T,KAEjCgB,GAAAA,GAC2F,QAA5EO,EAAKZ,MAAAA,OAAAA,EAAgDA,EAAOmB,kBAAAA,IAAwBP,OAAAA,EAAyBA,EAAGQ,cAAgBC,UAAUC,KAC7I,CAER,OADgCrC,EAAQsC,yBAAyB5B,EAAqBnF,KACzDsG,EAMzB,YADAP,EAAS,OAAQ,+DAA+DjS,OAAO4S,EAAM,MAJ7FX,EAAS,OAAQ,yDAAyDjS,OAAO4S,EAAM,MACvFlB,MAAAA,GAAgDA,EAAOwB,OAO/D,KAAIC,GAAAA,EAAsBxC,EAAQyC,yBAAyBrC,GAC3D,IAAKe,GAAmBqB,EAAkB,IAAMvB,EAC5CK,EAAS,OAAQ,2HAA2HjS,OAAO4S,EAAM,KAAM,CAC3J7B,aAAc7V,KAAK8B,UAAU+T,GAC7BoC,gBAAiBA,EACjBvB,sBAAuBA,EACvBE,gBAAiBA,QALzB,CASA,IAAIuB,GAAAA,EAAiB1C,EAAQ2C,gBAAgBpH,GACzC7L,EAAK3M,OAAO6I,KAAKwU,GAAcoC,EAAkB,GACrD,IAAKE,EAKD,OAJAzB,GAAAA,OACAK,EAAS,OAAQ,4EAA4EjS,OAAO4S,EAAM,KAAM,CAC5G1G,eAAgBA,IAIpBA,EAAe3P,MACf7I,OAAO6I,KAAK2P,EAAe3P,MAAQ,CAAC,GAAGlF,SAAQ,SAAUkc,GACf,iBAA3BrH,EAAe3P,KAAKgX,KAC3BrH,EAAe3P,KAAKgX,GAAK,CAACrH,EAAe3P,KAAKgX,IAAAA,IAI1D,IAAIC,IAAatH,EAAeuH,SAC5BC,GAAAA,EAAuB/C,EAAQgD,mBAAmB,KAAMH,EAAWtH,EAAeuH,SAAWvH,EAAe0H,UAAW1H,EAAe2H,UACrInC,GACDO,EAAS,QAAS,+DAA+DjS,OAAO4S,EAAM,MAElGhB,GAAAA,EACAD,EAAqBzc,KAAKC,MAC1B8c,EAAS,OAAQ,+DAA+DjS,OAAO4S,EAAM,MAC7FkB,IACA,IAAIC,EAAqB7e,KAAKC,MAC9Buc,MAAAA,GAAgDA,EAAO1E,QAAQ,CAC3DgH,IAAK,GAAGhU,OAAO0T,EAAiBM,IAAK,KAAKhU,OAAOwT,EAAW,QAAU,SAAU,KAAKxT,OAAO0T,EAAiB7X,IAAK,eAAemE,OAAO9K,KAAKC,OAC7I8e,OAAQ,SAAUC,GAEd,IADA,IAAI7B,EACK8B,EAAK,EAAG7B,EAAK5e,OAAO0gB,QAAQF,GAAOC,EAAK7B,EAAG/Z,OAAQ4b,IAAM,CAC9D,IAAI5B,EAAKD,EAAG6B,GAAKtY,EAAM0W,EAAG,GAAIzW,EAAQyW,EAAG,GACzCnB,EAAevV,GAAOC,CA0B1B,IAxBAuV,EAAoBG,UAAY0C,EAAK1C,UACrCI,GAAAA,EACA1F,EAAemI,0BAA4BC,QAAQJ,EAAKK,0BACnDrI,EAAemI,4BAQwF,QAAjGhC,EAAKnG,MAAAA,OAAAA,EAAgEA,EAAe5N,eAAAA,IAAqB+T,OAAAA,EAAyBA,EAAGmC,WAAaN,EAAKO,yBAAAA,EACtJ9D,EAAQ+D,iBAAiBR,EAAKO,uBAAwBtE,KAAAA,EAR1DQ,EAAQgE,kCAERjD,MAAAA,OAAAA,EAAgDA,EAAOkD,UACvDlD,EAAOkD,OAASlD,EAAOkD,OAAO5P,QAAO,SAAUkP,GAAQ,MAAmB,QAAZA,EAAK,QAQ3E5V,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,iDAAiD7U,OAAOkU,EAAKY,aAAc,gBAAgB9U,OAAO4Q,EAAUlD,QAAS,MAAM1N,OAAO4S,EAAM,WAC7OzC,EAAM,CAAE+D,KAAM,CAAC,WAAY7T,EAAI0N,EAASA,EAASA,EAAS,CAAC,EAAG7B,GAAiBgI,GAAO,CAAEa,WAAYnE,EAAUlD,aAC1GgF,GACAvC,EAAM,CAAE+D,KAAM,CAAC,YAAa,KAAM,QAElC7D,GACAF,EAAM,CAAE+D,KAAM,CAAC,WAAY,KAAM7D,KAErCF,EAAM,CAAE+D,KAAM,CAAC,YAAa,KAAM1gB,OAAOwhB,qBACrCd,EAAKe,WAAa/I,EAAegJ,mBAArC,CAGA,IAAIC,EAAcjJ,EAAegJ,mBACjChJ,EAAegJ,mBAAqBhB,EAAKe,SACzCG,IACAtB,IACAxV,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,+DACtG1E,EAAM,CAAE+D,KAAM,CAAC,2BAA4B,KAAM,CAAEiB,YAAaA,KAAAA,CAAAA,EAEpEE,QAAS,SAAUnG,EAAGjK,GACL,SAATA,IACA4M,GAAAA,GAEJD,GAAAA,EACAD,EAAqB,GAEzB2D,OAAQ,WACAtD,GACAA,EAAc,CAAEuD,iBAAkB,cAEtC1D,GAAAA,EACItB,IACAiF,cAAcjF,GACdA,OAAAA,GAEJ,IAAIkF,EAAQvgB,KAAKC,MAAQ4e,EACzB9B,EAAS,OAAQ,mEAAmEjS,OAAOyV,EAAO,SAASzV,OAAO4S,EAAM,OAE5H8C,QAAS,SAAUC,GACX3D,GACAA,EAAc,CAAEuD,iBAAkB,iBAEtC,IAAIK,EAAOD,EAAWC,KAAMpe,EAASme,EAAWne,OAAQqe,EAAWF,EAAWE,SAC9E5D,EAAS,OAAQ,cAAe,CAAEJ,WAAYA,EAAY+D,KAAMA,EAAMpe,OAAQA,EAAQqe,SAAUA,IAC5FhE,EACItB,GACAiF,cAAcjF,GAGZA,GAAqBwB,IAC3BK,EAA6B,CAAEM,cAAAA,EAAoBE,KAAMA,IACzDrC,EAAmBuF,aAAY,WAC3B1D,EAA6B,CAAEM,cAAAA,EAAoBE,KAAMA,GAAAA,GAC1D,WAKfkB,EAAuB,WACvBtgB,OAAOgiB,cAAcpF,GACrBA,EAAmB5c,OAAOsiB,aAAY,WAClC,OAAO9H,EAAU/Z,UAAAA,OAAM,GAAgB,WACnC,IAAI8hB,EAAO5B,EAAI9B,EAAI2D,EAAQ1D,EAAI2D,EAAMC,EACrC,OAAOrH,EAAY5a,MAAM,SAAUse,GAC/B,OAAQA,EAAGpD,OACP,KAAK,EACD,OAAO2C,GAA0E,OAAnDnB,EAAQyC,yBAAyBrC,GAA6B,CAAC,EAAa,IAC1GkB,EAAS,OAAQ,uDAEbN,GAAsBA,EAAqB,IAAQzc,KAAKC,QACxD3B,OAAOgiB,cAAcpF,GACrBsB,MAAAA,GAAgDA,EAAOwB,QACvD5U,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,iDAAiD7U,OAAOoR,MAAAA,OAAAA,EAAgEA,EAAe0D,aAAc,iBAAiB9U,OAAO4Q,EAAUlD,WAAAA,KAEzR,CAAC,EAAa,IACzB,KAAK,EACDiE,EAAqBzc,KAAKC,MAC1B4gB,EAAQ,CAAEI,YAAa,CAAC,EAAGD,QAAS,CAAC,GACrC/B,EAAK,EAAG9B,EAAK3e,OAAOiW,OAAOoH,GAC3BwB,EAAGpD,MAAQ,EACf,KAAK,EACD,OAAMgF,EAAK9B,EAAG9Z,QACdyd,EAAS3D,EAAG8B,GACZlC,EAAS,OAAQ,qBAAqBjS,OAAOgW,EAAO3V,GAAI,qBAAqBL,OAAOgW,EAAOI,GAAGC,iBAC3D,WAA7BL,EAAOI,GAAGC,eAAqC,CAAC,EAAa,GAC5D,CAAC,EAAaC,EAASN,KAJA,CAAC,EAAa,GAKhD,KAAK,EACD1D,EAAKC,EAAGnD,OAAQ6G,EAAO3D,EAAG2D,KAAMC,EAAU5D,EAAG4D,QAC7CH,EAAMI,YAAcpI,EAASA,EAAS,CAAC,EAAGgI,EAAMI,aAAcF,GAC9DF,EAAMG,QAAUnI,EAASA,EAAS,CAAC,EAAGgI,EAAMG,SAAUA,GACtD3D,EAAGpD,MAAQ,EACf,KAAK,EAED,OADAgF,IACO,CAAC,EAAa,GACzB,KAAK,EACG3D,GACAA,EAAiBuF,GAErBxD,EAAGpD,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,YAI7BjD,EAAegJ,mBAAAA,EAElBoB,EAAW,SAAUN,GACrB,OAAO,IAAI3H,SAAQ,SAAUC,EAASiI,GAClC,GAAIP,EAAQ,CACR,IAAIQ,EAAOR,EAAO3V,GAAIoW,EAAOT,EAAOI,GAAIM,EAASV,EAAOW,KAEpDF,EAAKH,SAAS,MAAM1H,MAAK,SAAUgI,IAC3B1K,MAAAA,OAAAA,EAAgEA,EAAe2K,cAC/E5E,EAAS,OAAQ,eAAgB,CAAE2E,IAAKA,IAE5C,IAAIzhB,EAAM,CAAC,EACP0b,EACA+F,EAAIvf,SAAQ,SAAUyf,GAClB3hB,EAAI,GAAG6K,OAAO8W,EAAO7R,KAAM,KAAKjF,OAAO8W,EAAOzW,KAAOyW,CAAAA,IAIzD3hB,GAAAA,EAAUwb,EAAQoG,SAASH,GAE/B,IAAII,EAAO9b,KAAKP,MAAMO,KAAK8B,UAAU7H,IACrCA,GAAAA,EAAUwb,EAAQsG,kBAAkBP,EAAQvhB,GAC5C,IAAI+e,GAAAA,EAAWvD,EAAQuG,kBAAkBR,EAAQvhB,IAC7C+W,MAAAA,OAAAA,EAAgEA,EAAe2K,cAC/E5E,EAAS,OAAQ,mBAAmBjS,OAAOwW,EAAM,KAAM,CAAEtC,KAAMA,IAEE,QAAhEA,MAAAA,OAAAA,EAA4CA,EAAK5W,aAAwB4W,MAAAA,OAAAA,EAA4CA,EAAK5W,cAAAA,KAC3H6S,EAAM,CAAE+D,KAAM,CAAC,WAAYsC,EAAMtC,KAErC8B,EAAOW,KAAOK,EACd1I,GAAAA,EAAYqC,EAAQwG,6BAA6BX,EAAME,EAAQvhB,EAAKgd,GAAAA,GAAAA,CAAAA,GAAAA,EAwyBxFlf,EAAQmZ,QAzvBM,SAAUgL,EAAUC,EAAgBlL,GAC9C,IAAIkG,EAAIC,EAER,IADkB9e,OAAO8jB,oBACzB,EAG2F,IAA3DtG,kBAAkBvL,WAAW/G,QAAQ,kBAEjEJ,QAAQiZ,KAAKxgB,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,mEAEzGrhB,OAAO8jB,qBAAAA,EACP9jB,OAAOwhB,mBAAAA,EAAwBrE,EAAQ6G,cApCvC3Z,YAAW,WAEP,IAAI4Z,EAAuBviB,KAAKC,OAAAA,EAC5Bwb,EAAQ+G,mBACP9I,MAAK,SAAU+I,GAChB,IAAIC,EAAkB1iB,KAAKC,MAAQsiB,EAC/BG,GAAmB,IAEnB3F,EAAS,OAAQ,cAAe,CAAE5B,aADlCA,EAAesH,IAIf1F,EAAS,OAAQ,yCAAyCjS,OAAO4X,GAAkB,CAAEvH,aAAcA,GAAAA,IAGtGwH,OAAM,SAAUC,GACjBxZ,QAAQ1G,MAAM,6BAA6BoI,OAAO8X,EAAIC,SAAAA,GAAAA,GAE3D,GAqBH,IAAIC,EAAY,IAAIC,gBAAgB5T,SAAS6T,QAusB7C,GAtsBIF,EAAUG,IAAI,aAA6C,UAA9BH,EAAUI,IAAI,cAC3ChB,EAASlF,OAAAA,GAEbR,GAAUvF,MAAAA,OAAAA,EAAoDA,EAASkM,gBAAkB,IAAI5H,EAAiB/C,QAAQ,CAAEwE,MAAOkF,MAAAA,OAAAA,EAAoDA,EAASlF,QAC5LT,GAAQtF,MAAAA,OAAAA,EAAoDA,EAASmM,cAAgB,IAAI5H,EAAehD,QAAQ,CAAEwE,MAAOkF,MAAAA,OAAAA,EAAoDA,EAASlF,QACtLkF,EAASlC,mBAA4D,QAAtC7C,EAAK+E,EAASlC,0BAAAA,IAAgC7C,EAAgBA,EAAK,IAClGnG,EAAiBkL,EACjB/F,EAAoBC,UAAYpF,EAAeoF,UAC/CD,EAAoBE,UAAYrF,EAAeqF,UAC/CpB,EAAQuB,EAAOvB,MACXjE,EAAeqM,OACfja,QAAQiZ,KAAKxgB,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,4EAErG3I,EAAe2H,UACfvV,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,2BAEzGwC,EAAehgB,SAAQ,SAAUmhB,GAC7B,GAAKhlB,OAAOglB,EAAS,qBAArB,CAGA,IAAIC,EAAqBjlB,OAAOglB,EAAS,qBACrCE,EAAiB,SAAUjW,EAAQkW,IAC/BlW,MAAAA,OAAAA,EAAgDA,EAAO2U,YACvDlL,EAAiB6B,EAASA,EAAS,CAAC,EAAG7B,GAAiBzJ,EAAO2U,WAEnEnF,EAAS,OAAQ,gCAAiC,CAC9CxP,OAAQA,EACRkW,YAAaA,IAEjB,IAAIvC,EAAK,IAAIqC,EAAmBhW,EAAQkW,GACpCtY,EAAK,MAAQ8Q,IA0KjB,OAzKAiF,EAAGwC,aAAevY,EAClB0Q,EAAa1Q,GAAM,CACfA,GAAIA,EACJ+V,GAAIA,EACJyC,iBAAAA,GAECpW,IACDA,EAAS,CAAEqW,YAAAA,MAEfrW,EAASvH,KAAKP,MAAMO,KAAK8B,UAAUyF,MAEvBA,EAAOsW,YAAe,IAAI1hB,SAAQ,SAAU2hB,UAC7CA,EAAOC,UAAAA,KAEdxW,MAAAA,OAAAA,EAAgDA,EAAO2U,kBAChD3U,EAAO2U,SAGd3U,EAAOyW,YADPrI,EACqB,MAGA,SAEzBV,EAAM,CAAE+D,KAAM,CAAC,SAAU7T,EAAIoC,KAGzBkW,GACAxI,EAAM,CAAE+D,KAAM,CAAC,cAAe7T,EAAIsY,KAEtCvC,EAAG+C,iBAAiB,gBAAgB,SAAUtX,GAC1CsO,EAAM,CAAE+D,KAAM,CAAC,iBAAkB7T,EAAIwB,EAAEuX,YAAAA,IAE3ChD,EAAG+C,iBAAiB,qBAAqB,SAAUtX,GAC/CsO,EAAM,CAAE+D,KAAM,CAAC,sBAAuB7T,EAAIwB,IAAAA,IAE9CuU,EAAG+C,iBAAiB,aAAa,SAAUtX,GACvCsO,EAAM,CACF+D,KAAM,CACF,cACA7T,EACAwB,EAAEoE,OAAO5F,GACL,IACAwB,EAAEoE,OAAOoT,YAAY3T,KAAI,SAAUzF,GAC/B,OAAOA,EAAEqZ,KAAO,IAAMrZ,EAAEI,EAAAA,MAAAA,IAK5C+V,EAAG+C,iBAAiB,SAAS,SAAUtX,GACnCsO,EAAM,CACF+D,KAAM,CACF,UACA7T,EACAwB,EAAE0X,MAAMD,KACJ,IACAzX,EAAE0X,MAAMlZ,GACR,UACAwB,EAAE0X,MAAMzG,WACR,UACAjR,EAAE0X,MAAMC,MACR,IACA3X,EAAEqU,QAAQxQ,KAAI,SAAUO,GACpB,MAAO,UAAYA,EAAO5F,EAAAA,OAK1CwB,EAAE0X,MAAME,QAAU,WACdtJ,EAAM,CACF+D,KAAM,CACF,UACA7T,EACAwB,EAAE0X,MAAMD,KACJ,IACAzX,EAAE0X,MAAMlZ,GACR,UACAwB,EAAE0X,MAAMzG,WACR,IACAjR,EAAEqU,QAAQxQ,KAAI,SAAUO,GACpB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,EAK9CwB,EAAE0X,MAAMG,OAAS,WACbvJ,EAAM,CACF+D,KAAM,CACF,UACA7T,EACAwB,EAAE0X,MAAMD,KACJ,IACAzX,EAAE0X,MAAMlZ,GACR,UACAwB,EAAE0X,MAAMzG,WACR,UACAjR,EAAE0X,MAAMC,MACR,IACA3X,EAAEqU,QAAQxQ,KAAI,SAAUO,GACpB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,EAK9CwB,EAAE0X,MAAMI,SAAW,WACfxJ,EAAM,CACF+D,KAAM,CACF,UACA7T,EACAwB,EAAE0X,MAAMD,KACJ,IACAzX,EAAE0X,MAAMlZ,GACR,UACAwB,EAAE0X,MAAMzG,WACR,UACAjR,EAAE0X,MAAMC,MACR,IACA3X,EAAEqU,QAAQxQ,KAAI,SAAUO,GACpB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,CAAAA,IAMlD+V,EAAG+C,iBAAiB,gBAAgB,SAAUtX,GAC1CsO,EAAM,CACF+D,KAAM,CACF,iBACA7T,EACAwB,EAAEoE,OAAO5F,GACL,IACAwB,EAAEoE,OAAOoT,YAAY3T,KAAI,SAAUzF,GAC/B,OAAOA,EAAEqZ,KAAO,IAAMrZ,EAAEI,EAAAA,MAAAA,IAK5C+V,EAAG+C,iBAAiB,wBAAwB,WACpCpI,EAAa1Q,KAAQ0Q,EAAa1Q,GAAIwY,iBACtC9H,EAAa1Q,GAAIwY,iBAAAA,EACjBhb,YAAW,WACPuU,EAA6B,CAAEI,eAAAA,EAAqBI,KAAMvS,GAAAA,GAC3D,MAGH4R,EAAS,OAAQ,qHAAqHjS,OAAOK,EAAI,KAAM,CAAE0Q,aAAc7V,KAAK8B,UAAU+T,KAE1LZ,EAAM,CAAE+D,KAAM,CAAC,yBAA0B7T,EAAI+V,EAAGC,iBAAAA,IAEpDD,EAAG+C,iBAAiB,4BAA4B,WAC5ChJ,EAAM,CAAE+D,KAAM,CAAC,6BAA8B7T,EAAI+V,EAAGwD,qBAAAA,IAExDxD,EAAG+C,iBAAiB,2BAA2B,WAC3ChJ,EAAM,CAAE+D,KAAM,CAAC,4BAA6B7T,EAAI+V,EAAGyD,oBAAAA,IAEvDzD,EAAG+C,iBAAiB,yBAAyB,WACzChJ,EAAM,CAAE+D,KAAM,CAAC,0BAA2B7T,EAAI+V,EAAG0D,kBAAAA,IAErD1D,EAAG+C,iBAAiB,qBAAqB,WACrChJ,EAAM,CAAE+D,KAAM,CAAC,sBAAuB7T,OAAAA,IAAItF,IAE9Cqb,EAAG+C,iBAAiB,eAAe,SAAU5hB,GACzC4Y,EAAM,CAAE+D,KAAM,CAAC,gBAAiB7T,EAAI,CAAC9I,EAAMwiB,QAAQ1Z,GAAI9I,EAAMwiB,QAAQ5K,SAAAA,IAQlEiH,CAAAA,EAEX,GAAI,qBAAsB5iB,QAAU,cAAewmB,iBAAiBvjB,UAAW,CAC3E,IAAIwjB,EAAiBD,iBAAiBvjB,UAAUyjB,UAChDF,iBAAiBvjB,UAAUyjB,UAAY,WACnC,IAAIC,EAAmBxd,UAAU,GAgBjC,OAfAsU,UAAUmJ,aACLC,mBACAzL,MAAK,SAAU0L,GAChB,IAAIC,EAAgBD,EAAQ5R,MAAK,SAAU2J,GAEvC,OADeA,EAAGmI,WACEL,CAAAA,IAEpBI,GAAiBA,EAAcC,WAAalK,GAC5CH,EAAM,CAAE+D,KAAM,CAAC,oBAAqB,KAAMqG,EAAcpL,SAE5DmB,EAAuB6J,CAAAA,IAEtBtC,OAAM,SAAUjgB,GACjBqa,EAAS,QAASra,EAAMmgB,QAAS,CAAEngB,MAAOA,GAAAA,IAEvCqiB,EAAeljB,MAAM9C,KAAM0I,UAAAA,CAI1C,IAAI,sBAAuBnJ,QAAU,wBAAyBA,OAAOinB,kBAAkBhkB,UAAW,CAC9F,IAAIikB,EAAwBlnB,OAAOinB,kBAC/BE,EAAiBD,EAAsBjkB,UAAUmkB,oBACrDF,EAAsBjkB,UAAUmkB,oBAAsB,WAElD,OADAzK,EAAM,CAAE+D,KAAM,CAAC,sBAAuBjgB,KAAK4mB,OAAQle,aAC5Cge,EAAe5jB,MAAM9C,KAAM0I,UAAAA,CAI1C,IAAI,iBAAkBnJ,QAAU,kBAAmBA,OAAOsnB,aAAarkB,UAAW,CAC9E,IACIskB,GADAC,EAAmBxnB,OAAOsnB,cACQrkB,UAAUwkB,cAChDD,EAAiBvkB,UAAUwkB,cAAgB,WAEvC,OADA9K,EAAM,CAAE+D,KAAM,CAAC,gBAAiBjgB,KAAK4mB,OAAQle,aACtCoe,EAAehkB,MAAM9C,KAAM0I,UAAAA,CAI1C,IAAI,iBAAkBnJ,QAAU,iBAAkBA,OAAOsnB,aAAarkB,UAAW,CAC7E,IAAIukB,EACAE,GADAF,EAAmBxnB,OAAOsnB,cACQrkB,UAAU0kB,aAChDH,EAAiBvkB,UAAU0kB,aAAe,WACtC,IAAI5B,EAAQ5c,UAAU,GAqBtB,OAnBIwT,EADAoJ,EACM,CACFrF,KAAM,CACF,eACAjgB,KAAK4mB,OACLtB,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,QAKZ,CAAE+E,KAAM,CAAC,eAAgBjgB,KAAK4mB,OAAQ,QAEzCK,EAAenkB,MAAM9C,KAAM0I,UAAAA,CAI1C,EAAC,kBAAkBtF,SAAQ,SAAU+jB,GACjC,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAAIE,EAAUrnB,KACViiB,EAAU,GACVvZ,UAAU,IAAMA,UAAU,GAAGuZ,UAC7BA,EAAUvZ,UAAU,GAAGuZ,QAAQxQ,KAAI,SAAU/D,GAAK,MAAO,UAAYA,EAAEtB,EAAAA,IAAO6G,KAAK,MAEvF,IAAIqU,EAAsC,iBAAjB5e,UAAU,GAC7BA,UAAU,GACVA,UAAU,GAAG2c,KAAO,IAAM3c,UAAU,GAAG0D,GAAK,IAAM1D,UAAU,GAAGwS,MACjExB,EAAOhR,UAAU,GAAKoR,EAASA,EAAS,CAAC,EAAGpR,UAAU,IAAK,CAAEuZ,QAASA,IAAa,KACvF/F,EAAM,CAAE+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAc,CAAC2C,EAAa5N,MACxD,IAAI6N,EAAcH,EAAatkB,MAAM9C,KAAM0I,WAC3C6e,EAAYC,OAAOZ,OAAS5mB,KAAK2kB,aAEjC,IAAIW,EAAQ5c,UAAU,GA6DtB,MA5DqB,iBAAV4c,IACPpJ,EAAM,CACF+D,KAAM,CACF,eACAjgB,KAAK2kB,aACLW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,SAGlBoK,EAAME,QAAU,WACZtJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KAAO,IAAMC,EAAMlZ,GAAK,UAAYkZ,EAAMzG,WAAa,UAAYyG,EAAMpK,QAAAA,EAI3FoK,EAAMG,OAAS,WACXvJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,QAAAA,EAItBoK,EAAMI,SAAW,WACbxJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,QAAAA,GAKnBqM,CAAAA,EAAAA,IAInB,CAAC,oBAAqB,cAAcnkB,SAAQ,SAAU+jB,GAClD,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WAEnC,OADAjL,EAAM,CAAE+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAcjc,aACnC0e,EAAatkB,MAAM9C,KAAM0I,UAAAA,EAAAA,IAI5C,CAAC,SAAStF,SAAQ,SAAU+jB,GACxB,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WAKnC,OAJAjL,EAAM,CAAE+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAcjc,oBACnCoU,EAAa9c,KAAK2kB,cACzB7G,GAAAA,EACAE,EAAS,OAAQ,wBAAwBjS,OAAO/L,KAAK2kB,aAAc,YAC5DyC,EAAatkB,MAAM9C,KAAM0I,UAAAA,EAAAA,IAI5C,CAAC,YAAa,gBAAgBtF,SAAQ,SAAU+jB,GAC5C,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAAIE,EAAUrnB,KACVgS,EAAStJ,UAAU,GACnB+e,EAAazV,EACZoT,YACA3T,KAAI,SAAUzF,GACf,OAAOA,EAAEqZ,KAAO,IAAMrZ,EAAEI,EAAAA,IAEvB6G,KAAK,KA+EV,OA9EAiJ,EAAM,CAAE+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAc3S,EAAO5F,GAAK,IAAMqb,KAE7C,cAAXN,GACAnV,EAAOoT,YAAY3T,KAAI,SAAU6T,GAC7BpJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACAlJ,EAAO5F,MAGnBkZ,EAAME,QAAU,WACZtJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMpK,MACN,IACAlJ,EAAO5F,KAAAA,EAIvBkZ,EAAMG,OAAS,WACXvJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACAlJ,EAAO5F,KAAAA,EAIvBkZ,EAAMI,SAAW,WACbxJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACAlJ,EAAO5F,KAAAA,CAAAA,IAMxBgb,EAAatkB,MAAM9C,KAAM0I,UAAAA,EAAAA,IAI5C,CAAC,YAAYtF,SAAQ,SAAU+jB,GAC3B,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAAIE,EAAUrnB,KACVslB,EAAQ5c,UAAU,GAClBuZ,EAAU,GAAG/W,MAAMzD,KAAKiB,UAAW,GACvCwT,EAAM,CACF+D,KAAM,CACFkH,EACAnnB,KAAK2kB,aACLW,EAAMD,KACF,IACAC,EAAMlZ,GACN,IACAkZ,EAAMpK,MACN,KACC+G,EACIxQ,KAAI,SAAU/D,GACf,MAAO,UAAYA,EAAEtB,EAAAA,IAEpB6G,KAAK,MAAQ,QAI9BiJ,EAAM,CACF+D,KAAM,CACF,eACAjgB,KAAK2kB,aACLW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACA+G,EAAQxQ,KAAI,SAAUO,GAClB,MAAO,UAAYA,EAAO5F,EAAAA,OAI1CkZ,EAAME,QAAU,WACZtJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMpK,MACN,IACA+G,EAAQxQ,KAAI,SAAUO,GAClB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,EAK9CkZ,EAAMG,OAAS,WACXvJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACA+G,EAAQxQ,KAAI,SAAUO,GAClB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,EAK9CkZ,EAAMI,SAAW,WACbxJ,EAAM,CACF+D,KAAM,CACF,eACAoH,EAAQ1C,aACRW,EAAMD,KACF,IACAC,EAAMlZ,GACN,UACAkZ,EAAMzG,WACN,UACAyG,EAAMC,MACN,UACAD,EAAMpK,MACN,IACA+G,EAAQxQ,KAAI,SAAUO,GAClB,MAAO,UAAYA,EAAO5F,EAAAA,MAAAA,EAK9C,IAAIob,EAASJ,EAAatkB,MAAM9C,KAAM0I,WACtC8e,EAAOZ,OAAS5mB,KAAK2kB,aAErB,IAAI+C,EAAe1nB,KAAK2nB,kBAMxB,OALID,GACAA,EAAatkB,SAAQ,SAAUmkB,GAC3BA,EAAYX,OAASS,EAAQ1C,YAAAA,IAG9B6C,CAAAA,EAAAA,IAInB,CAAC,eAAepkB,SAAQ,SAAU+jB,GAC9B,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAAI7B,EAAQ5c,UAAU,GAAG4c,MAIzB,OAHApJ,EAAM,CACF+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAcW,EAAQA,EAAMD,KAAO,IAAMC,EAAMlZ,GAAK,IAAMkZ,EAAMpK,MAAQ,UAEzFkM,EAAatkB,MAAM9C,KAAM0I,UAAAA,EAAAA,IAI5C,CAAC,cAAe,gBAAgBtF,SAAQ,SAAU+jB,GAC9C,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAEIzU,EAFAkV,EAAa5nB,KAAK2kB,aAClBjiB,EAAOgG,UASX,OAPyB,IAArBA,UAAUpE,QAAwC,iBAAjBoE,UAAU,GAC3CgK,EAAOhK,UAAU,GAES,IAArBA,UAAUpE,QAAwC,iBAAjBoE,UAAU,KAChDgK,EAAOhK,UAAU,IAErBwT,EAAM,CAAE+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAcjS,KACnC0U,EAAatkB,MAAM9C,KAAM0S,EAAO,CAACA,QAAAA,GAAmBiI,MAAK,SAAUkN,GAEtE,GADA3L,EAAM,CAAE+D,KAAM,CAACkH,EAAS,YAAaS,EAAYC,OAC7CnlB,EAAK4B,OAAS,GAAwB,mBAAZ5B,EAAK,IAInC,OAAOmlB,EAHHnlB,EAAK,GAAGI,MAAM,KAAM,CAAC+kB,GAAAA,IAI1B,SAAUhE,GAET,GADA3H,EAAM,CAAE+D,KAAM,CAACkH,EAAS,YAAaS,EAAY/D,EAAIrS,gBACjD9O,EAAK4B,OAAS,GAAwB,mBAAZ5B,EAAK,IAInC,MAAMmhB,EAHFnhB,EAAK,GAAGI,MAAM,KAAM,CAAC+gB,GAAAA,GAAAA,EAAAA,IAQzC,CAAC,sBAAuB,uBAAwB,mBAAmBzgB,SAAQ,SAAU+jB,GACjF,IAAIC,EAAe5C,EAAmBhiB,UAAU2kB,GAC5CC,IACA5C,EAAmBhiB,UAAU2kB,GAAU,WACnC,IAAIS,EAAa5nB,KAAK2kB,aAClBjiB,EAAOgG,UACPof,EAAQ9nB,KAGR+nB,EAA8C,wBAAXZ,KAAsCzkB,EAAK,IAAOA,EAAK,KAAOA,EAAK,GAAGkO,KAI7G,OAHAsL,EAAM,CACF+D,KAAM,CAACkH,EAAQnnB,KAAK2kB,aAAcoD,EAAmC,CAAEC,eAAAA,GAAwBtlB,EAAK,MAEjG0kB,EAAatkB,MAAM9C,KAAM,CAAC0C,EAAK,KAAKiY,MAAK,WAC5CuB,EAAM,CACF+D,KAAM,CACFkH,EAAS,YACTS,EACAG,EAAmCD,MAAAA,OAAAA,EAA8CA,EAAMG,sBAAAA,KAG3FvlB,EAAK4B,QAAU,GAAwB,mBAAZ5B,EAAK,IAChCA,EAAK,GAAGI,MAAM,KAAM,OAIzB,SAAU+gB,GAET,GADA3H,EAAM,CAAE+D,KAAM,CAACkH,EAAS,YAAaS,EAAY/D,EAAIrS,gBACjD9O,EAAK4B,QAAU,GAAwB,mBAAZ5B,EAAK,IAIpC,MAAMmhB,EAHFnhB,EAAK,GAAGI,MAAM,KAAM,CAAC+gB,GAAAA,GAAAA,EAAAA,IASrCW,EAAmB0D,qBACnBzoB,OAAOwc,eAAewI,EAAgB,sBAAuB,CACzDN,IAAK,WACD,OAAOzb,UAAUpE,OACXkgB,EAAmB0D,oBAAoBplB,MAAM,KAAM4F,WACnD8b,EAAmB0D,mBAAAA,IAIrC3oB,OAAOglB,EAAS,qBAAuBE,EACvCllB,OAAOglB,EAAS,qBAAqB/hB,UAAYgiB,EAAmBhiB,SAAAA,CAAAA,IAGxE4gB,EAAehgB,SAAQ,SAAUmhB,GAC7B,IAAIjX,EAAOiX,GAAUA,EAAOjgB,OAAS,eAAiB,gBACtD,GAAK0Y,UAAU1P,GAAf,CAGA,IAAI6a,EAAmBnL,UAAU1P,GAAMzK,KAAKma,WAqB5CA,UAAU1P,GApBA,WACN4O,EAAM,CAAE+D,KAAM,CAAC,eAAgB,KAAMvX,UAAU,MAC/C,IAAI0f,EAAK1f,UAAU,GACf2f,EAAK3f,UAAU,GACnByf,EAAiBzf,UAAU,IAAI,SAAUsJ,GAGrCkK,EAAM,CAAE+D,KAAM,CAAC,wBAAyB,QAAUvD,EAAQ4L,YAAYtW,MAClEoW,GACAA,EAAGpW,EAAAA,IAER,SAAU6R,GACT,IAAI0E,EAAY,CAAC,wBAAyB,KAAM1E,EAAIvW,MACpD4O,EAAM,CAAE+D,KAAMsI,IACdC,EAAgBD,GACZF,GACAA,EAAGxE,EAAAA,GAAAA,EAIOhhB,KAAKma,UAAAA,CAAAA,IAE3BA,UAAUmJ,cAAgBnJ,UAAUmJ,aAAasC,aAAc,CAC/D,IAAIC,EAAqB1L,UAAUmJ,aAAasC,aAAa5lB,KAAKma,UAAUmJ,cAa5EnJ,UAAUmJ,aAAasC,aAZb,WAEN,OADAvM,EAAM,CAAE+D,KAAM,CAAC,sCAAuC,KAAMvX,UAAU,MAC/DggB,EAAmB5lB,MAAMka,UAAUmJ,aAAczd,WAAWiS,MAAK,SAAU3I,GAE9E,OADAkK,EAAM,CAAE+D,KAAM,CAAC,+CAAgD,QAAUvD,EAAQ4L,YAAYtW,MACtFA,CAAAA,IACR,SAAU6R,GACT,IAAI0E,EAAY,CAAC,+CAAgD,KAAM1E,EAAIvW,MAG3E,OAFA4O,EAAM,CAAE+D,KAAMsI,IACdC,EAAgBD,GACTnO,QAAQE,OAAOuJ,EAAAA,GAAAA,EAGYhhB,KAAKma,UAAUmJ,aAG7D,IAAInJ,UAAUmJ,cAAgBnJ,UAAUmJ,aAAawC,gBAAiB,CAClE,IAAIC,EAAwB5L,UAAUmJ,aAAawC,gBAAgB9lB,KAAKma,UAAUmJ,cAalFnJ,UAAUmJ,aAAawC,gBAZb,WAEN,OADAzM,EAAM,CAAE+D,KAAM,CAAC,yCAA0C,KAAMvX,UAAU,MAClEkgB,EAAsB9lB,MAAMka,UAAUmJ,aAAczd,WAAWiS,MAAK,SAAU3I,GAEjF,OADAkK,EAAM,CAAE+D,KAAM,CAAC,kDAAmD,QAAUvD,EAAQ4L,YAAYtW,MACzFA,CAAAA,IACR,SAAU6R,GACT,IAAI0E,EAAY,CAAC,kDAAmD,KAAM1E,EAAIvW,MAG9E,OAFA4O,EAAM,CAAE+D,KAAMsI,IACdC,EAAgBD,GACTnO,QAAQE,OAAOuJ,EAAAA,GAAAA,EAGehhB,KAAKma,UAAUmJ,aAAAA,EAEhC,QAA3B9H,EAAK8E,EAAS9Y,eAAAA,IAAqBgU,OAAAA,EAAyBA,EAAGrT,SAAAA,EAC5D0R,EAAQ+D,iBAAiB0C,EAAS9Y,QAAQW,MAAOkR,EAAAA,CAAAA,EAwB7Dld,EAAQoZ,UApBQ,SAAUyQ,GACtB,IAAIzK,EACc7e,OAAO8jB,wBAAAA,KAKKpL,MAAAA,OAAAA,EAAgEA,EAAemI,8BAAAA,KAC8B,QAA1GhC,EAAKyK,MAAAA,OAAAA,EAAsEA,EAAkBxe,eAAAA,IAAqB+T,OAAAA,EAAyBA,EAAGmC,WAAsBsI,EAAkBxe,QAAQW,QAAAA,EACvN0R,EAAQ+D,iBAAiBoI,EAAkBxe,QAAQW,MAAOkR,GAE9D,uBAAwB2M,UACjBA,EAAkB5H,mBAE7BhJ,EAAiB6B,EAASA,EAAS,CAAC,EAAG7B,GAAiB4Q,GACxDzL,EAAoBC,UAAYpF,EAAeoF,UAC/CD,EAAoBE,UAAYrF,EAAeqF,UAC/CU,EAAS,OAAQ,YAAa,CAAE6K,kBAAmBA,EAAmB5Q,eAAgBA,IACtFkG,EAA6B,CAAC,IAd1B9T,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0DAAuD,EAgDrK5hB,EAAQwZ,cA1BY,SAEpBF,EAAQwQ,GACJ,IAAI1K,EAEJ,IADkB7e,OAAO8jB,oBAGrB,OADAhZ,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,2DAC/FxG,QAAQC,QAAQ,CAAE1W,MAAO,uDAGpC,OADwB+Y,EAAQqM,gBAAgBzQ,GAE5C,OAAO8B,QAAQC,QAAQ,CAAE1W,MAAO,sBAEpC,IAAIqlB,GAAuF,QAA5E5K,EAAKX,MAAAA,OAAAA,EAAgDA,EAAOmB,kBAAAA,IAAwBR,OAAAA,EAAyBA,EAAGS,cAAgBC,UAAUC,KACrJkB,EAAO,CAAC,aAAc,KAAM,CAAE3H,OAAQA,EAAQwQ,cAAeA,IACjE,OAAO,IAAI1O,SAAQ,SAAUC,EAASC,GAE9B0O,EACA9M,EAAM,CAAE+D,KAAMA,EAAMlZ,QAFV,CAAEkiB,aAAc,CAAE5O,QAASA,EAASC,OAAQA,MAKtD4O,EAAUpmB,WAAAA,EAAcmd,GAAMtF,MAAK,WAAc,OAAON,EAAQ,CAAC,EAAD,IAC3DuJ,OAAM,SAAUjgB,GAAS,OAAO0W,EAAQ,CAAE1W,MAAOA,GAAAA,GAAAA,GAAAA,EAwClE3E,EAAQyZ,QA/BM,SAEdnQ,GACI,IAAI8V,EAEJ,GADkB7e,OAAO8jB,oBACzB,CAIA5jB,OAAO6I,KAAKA,GAAQ,CAAC,GAAGlF,SAAQ,SAAUkc,GACf,iBAAZhX,EAAKgX,KACZhX,EAAKgX,GAAK,CAAChX,EAAKgX,IAAAA,IAGxB,IAAIW,EAAO,CAAC,OAAQ,KAAM3X,GACtB0gB,GAAuF,QAA5E5K,EAAKX,MAAAA,OAAAA,EAAgDA,EAAOmB,kBAAAA,IAAwBR,OAAAA,EAAyBA,EAAGS,cAAgBC,UAAUC,KACrJoK,EAAe1L,MAAAA,OAAAA,EAAgDA,EAAO0L,aAC1E,OAAO,IAAI/O,SAAQ,SAAUC,EAASC,GAClC,IAAIvT,EAAU,CAAEkiB,aAAc,CAAE5O,QAASA,EAASC,OAAQA,IACtD0O,EACA9M,EAAM,CAAE+D,KAAMA,EAAMlZ,QAASA,IAEvBoiB,EAIND,EAAUpmB,WAAAA,EAAcmd,GAAMtF,MAAK,WAAc,OAAON,EAAQ,CAAC,EAAD,IAC3DuJ,OAAM,SAAUjgB,GAAS,OAAO0W,EAAQ,CAAE1W,MAAOA,GAAAA,IAJtDuY,EAAM,CAAE+D,KAAMA,EAAMlZ,QAASA,GAAAA,GAjBjCsD,CAAAA,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0DAAuD,EAkCrK5hB,EAAQ0Z,sBARoB,WACNnZ,OAAO8jB,oBAKzB5F,MAAAA,GAAgDA,EAAO/E,wBAHnDrO,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0DAAuD,EAcrK5hB,EAAQ2Z,qBARmB,WACLpZ,OAAO8jB,oBAKzB5F,MAAAA,GAAgDA,EAAO9E,uBAHnDtO,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0DAAuD,EA2BrK5hB,EAAQ4Z,SArBO,SAAUtV,GAErB,GADkB/D,OAAO8jB,qBAWzB,MADuB3G,EAAQ0M,eAAe9lB,GAC9C,CAGA,IAAI2c,EAAO,CAAC,QAAS,KAAM3c,GAC3B,OAAO,IAAI8W,SAAQ,SAAUC,EAASC,GAElC4B,EAAM,CAAE+D,KAAMA,EAAMlZ,QADN,CAAEkiB,aAAc,CAAE5O,QAASA,EAASC,OAAQA,KAAAA,GAAAA,OAd1DjQ,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0EAAuE,EAiCrL5hB,EAAQ6Z,UAdQ,SAAUzM,EAAIkB,GAE1B,GADkB/N,OAAO8jB,qBAMzB,GADoBjX,GAAQkB,EAC5B,CAGA,IAAI2S,EAAO,CAAC,YAAa,KAAM,CAAE7T,GAAIA,EAAIkB,KAAMA,IAC/CjD,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,qEACrG1E,EAAM,CAAE+D,KAAMA,GAAAA,OATV5V,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,2EAAwE,EA0BtL5hB,EAAQ8Z,SAdO,SAAU1M,EAAIkB,GACP/N,OAAO8jB,qBAKLjX,IAAQkB,IAI5B4Q,EAAY9R,GAAMkB,EAElB4O,EAAM,CAAE+D,KADG,CAAC,WAAY,KAAM,CAAE7T,GAAIA,EAAIkB,KAAMA,OAR1CjD,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,0EAAuE,EAsBrL5hB,EAAQ+Z,QAVM,WACQxZ,OAAO8jB,qBAKzBxF,GAAAA,EACAG,EAAS,OAAQ,kBACjBG,EAA6B,CAAC,IAL1B9T,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,yEAAsE,EAmBpL5hB,EAAQga,WAXS,WACKzZ,OAAO8jB,qBAKzBxF,GAAAA,EACAC,GAAAA,EACAL,MAAAA,GAAgDA,EAAOwB,QACvDjB,EAAS,OAAQ,sBANb3T,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,4EAAyE,EAYvL5hB,EAAQka,wBAHsB,SAAUD,GACpCsD,EAAmBtD,CAAAA,EAMvBja,EAAQwa,sBAHoB,SAAUP,GAClC8E,EAAgB9E,CAAAA,EAGpB,IAAIiQ,EAAY,WAGZ,IAFA,IAAI9K,EACA6B,EAAO,GACFC,EAAK,EAAGA,EAAKxX,UAAUpE,OAAQ4b,IACpCD,EAAKC,GAAMxX,UAAUwX,GAEzB,IAAK9C,EAAoBC,YAAcD,EAAoBE,UAAW,CAClE,IAAIwG,EAAU,2CAEd,OADAzZ,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAACkD,IAAAA,IAC7F1J,QAAQE,OAAOwJ,EAE1B,KAAK1G,EAAoBG,YAActF,EAAe0H,UAGlD,OAFImE,EAAU,iEACdzZ,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAACkD,IAAAA,IAC7F1J,QAAQE,OAAOwJ,GAE1B,IAAIuF,GAAAA,EAAyB3M,EAAQgD,mBAAmB,OAAQzH,EAAe0H,UAAW1H,EAAe2H,UACzG,OAAOpC,EACDA,EAAKtB,MAAMpZ,MAAM0a,EAAM5B,EAAc,CAAC,GAAG7P,OAAOsd,EAAmBtJ,IAAK,UAAoD,QAAxC3B,EAAKhB,EAAoBG,iBAAAA,IAAuBa,EAAgBA,EAAKiL,EAAmBzhB,IAAKwV,EAAoBC,UACnMD,EAAoBE,WAAY2C,GAAAA,IAAgB7F,QAAQE,OAAO,0CAEvEkO,EAAkB,SAAUvI,GAC5B,IAAIqJ,EAASrR,MAAAA,OAAAA,EAAgEA,EAAe0H,UACxFtC,EAAYpF,MAAAA,OAAAA,EAAgEA,EAAeoF,UAC3FC,EAAYrF,MAAAA,OAAAA,EAAgEA,EAAeqF,UAC/F,GAAKgM,GAAWjM,GAAcC,EAA9B,CAIA,IAAI+L,GAAAA,EAAyB3M,EAAQgD,mBAAmB,OAAQzH,MAAAA,OAAAA,EAAgEA,EAAe0H,UAAW1H,EAAe2H,UACzKK,EAAOA,IAASxC,MAAAA,OAAAA,EAAgDA,EAAOkD,SAAW,GAClFnD,MAAAA,GAA4CA,EAAKtB,MAAM,GAAGnQ,OAAOsd,EAAmBtJ,IAAK,UAAWsJ,EAAmBzhB,IAAKyV,EAAWC,EAAW2C,EAAAA,MAL9I5V,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,+EAA4E,EAmBzL5hB,EAAQoa,cAZY,SAAUD,GACR5Z,OAAO8jB,qBAKzB9B,cAAcpF,GACd0B,GAAAA,EACAC,GAAAA,EACAL,MAAAA,GAAgDA,EAAOwB,MAAM9F,GAC7D6E,EAAS,OAAQ,6BAA6BjS,OAAOxM,OAAOwhB,qBAPxD1W,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,+EAA4E,EAU1L,IAAIO,EAAuB,WAEvB,IADA,IAAI/C,EACK8B,EAAK,EAAG7B,EAAK5e,OAAOiW,OAAOoH,GAAeoD,EAAK7B,EAAG/Z,OAAQ4b,IACjD7B,EAAG6B,GACTwC,KAAO,MAE0D,QAAxEtE,EAAKX,MAAAA,OAAAA,EAAgDA,EAAOkD,cAAAA,IAAoBvC,OAAAA,EAAyBA,EAAG9Z,UAC7GmZ,EAAOkD,OAAS,KAgBxB3hB,EAAQua,gBAbc,SAAUF,EAAQC,GAClB/Z,OAAO8jB,qBAKzBpL,EAAiB6B,EAASA,EAAS,CAAC,EAAG7B,GAAiB,CAAEoF,UAAWhE,EAAQiE,UAAWhE,IACxF8D,EAAoBC,UAAYhE,EAChC+D,EAAoBE,UAAYhE,EAChC6H,IACAhD,EAA6B,CAAC,GAC9BH,EAAS,OAAQ,+BAA+BjS,OAAOxM,OAAOwhB,mBAAoB,CAAE9I,eAAgBA,KARhG5N,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,iFAA8E,4BCt1C5LnhB,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C7I,EAAQuqB,oBAAsBvqB,EAAQwqB,2BAAAA,EAyBtCxqB,EAAQwqB,sBAxBoB,SAAUpd,EAAIqd,GACtC,IAAKA,EACD,OAAO,KAEX,IAAIC,EAAajqB,OAAO6I,KAAKmhB,GACzBE,EAAWD,EAAW3Y,QAAO,SAAU6Y,GAAa,MAAmC,mBAA5BH,EAAQG,GAAW5Y,MAA6ByY,EAAQG,GAAWC,SAAAA,IAClI,GAAIF,EAASrlB,OAAS,EAAG,CACrB,IAAI8Z,EAAKqL,EAAQE,EAAS,IAAKG,EAAqB1L,EAAG2L,iBAAkBC,EAAsB5L,EAAG6L,kBAC9FC,EAAoBR,EAAWjV,MAAK,SAAUmV,GAAa,MAAmC,oBAA5BH,EAAQG,GAAW5Y,MAA8ByY,EAAQG,GAAWxd,KAAO0d,CAAAA,IAC7IK,EAAqBT,EAAWjV,MAAK,SAAUmV,GAAa,MAAmC,qBAA5BH,EAAQG,GAAW5Y,MAA+ByY,EAAQG,GAAWxd,KAAO4d,CAAAA,IACnJ,GAAIE,GAAqBC,EAAoB,CACzC,IAAIC,EAAiBX,EAAQS,GACzBG,EAAkBZ,EAAQU,GAC1BnI,EAAO,CAAC,EAMZ,OALAA,EAAK5V,GAAM,CACPwS,WAA6C,UAAjCwL,EAAeE,cAA4B,QAAU,SACjE9f,UAA4C,UAAjC4f,EAAeE,cAA4BF,EAAeG,cAAgB,MACrFlc,QAAS,GAAGtC,OAAOse,EAAgBhc,QAAS,KAAKtC,OAAOse,EAAgBvY,OAErEkQ,CAAAA,CAGf,QAAO,MAsEXhjB,EAAQuqB,oBAnEkB,SAAUnd,EAAIoe,EAAUC,EAASvM,GACvD,IAAI+D,EAAU,CAAC,EACXyI,EAAqBjrB,OAAO6I,KAAKmiB,GA+DrC,OA9DkBC,EAAmB3Z,QAAO,SAAUzI,GAAQ,MAA8B,gBAAvBmiB,EAAQniB,GAAM0I,MAAiD,iBAAvByZ,EAAQniB,GAAM0I,IAAAA,IAC/G5N,SAAQ,SAAUunB,GAC1B,IAAIC,EAAgBH,EAAQE,GACxBE,EAAiBL,GAAYG,KAAaH,EAAWA,EAASG,GAAa,KAC3Epc,EAAmC,gBAAvBqc,EAAc5Z,KAAyB,UAAY,WAC/DqU,EAAOuF,EAAcvF,KACrByF,EAAsBF,EAAcG,YAAYN,EAAUA,EAAQG,EAAcG,UAAY,KAC5FC,EAAuBH,GAAkBA,EAAeE,YAAYP,EAAWA,EAASK,EAAeE,UAAY,KACnHE,EAAeJ,GAAkBD,EAAcvhB,UAAYwhB,EAAexhB,WAAa,IAAO,KAC9F2I,EAAS,CACTzD,UAAWA,EACX8W,KAAMA,EACN/L,OAAQlN,GAQZ,GALa,UAATiZ,IACArT,EAAOkZ,WAAaN,EAAcM,WAClClZ,EAAOmZ,YAAcP,EAAcO,YACnCnZ,EAAOoZ,UAAYR,EAAcS,iBAEV,gBAAvBT,EAAc5Z,KACdgB,EAAOsZ,OAASV,EAAcU,OAE9BtZ,EAAOuZ,WACHX,EAAcY,mBAAmBtN,EAAcA,EAAY0M,EAAcY,iBAAmB,KAEhGxZ,EAAOyZ,cAAgBZ,EAAiBD,EAAca,cAAgBZ,EAAeY,cAAgB,KACrGzZ,EAAO0Z,gBAAkBb,EAAiBD,EAAcc,gBAAkBb,EAAea,gBAAkB,KAC3G1Z,EAAO2Z,YAAcd,EAAiBD,EAAce,YAAcd,EAAec,YAAc,KAC/F3Z,EAAO4Z,YACH5Z,EAAO2Z,YAAc3Z,EAAO0Z,gBAAkB,EAClB,IAArB1Z,EAAO2Z,aAAsB3Z,EAAO2Z,YAAc3Z,EAAO0Z,iBAC1D,KACV1Z,EAAO6Z,QAAUZ,EAAuC,EAAvBjZ,EAAOyZ,cAAqBR,EAAe,KAE5EjZ,EAAO8Z,cACHhB,GAAuB,kBAAmBA,EAAsBA,EAAoBgB,cAAgB,SAEvG,CAED9Z,EAAO+Z,UAAYlB,EAAiBD,EAAcmB,UAAYlB,EAAekB,UAAY,KACzF/Z,EAAOga,YAAcnB,EAAiBD,EAAcoB,YAAcnB,EAAemB,YAAc,KAC/Fha,EAAO6Z,QAAUZ,EAAmC,EAAnBjZ,EAAO+Z,UAAiBd,EAAe,KAExEjZ,EAAO8Z,cACHhB,GAAuB,kBAAmBA,EAAsBA,EAAoBgB,cAAgB,KACxG9Z,EAAOsZ,OAASR,GAAuB,WAAYA,EAAsBA,EAAoBQ,OAAS,KACtGtZ,EAAO2Z,YACHb,GAAuBE,EACjBF,EAAoBa,YAAcX,EAAqBW,YACvD,KACV3Z,EAAO4Z,YACHd,GAAuB,iBAAkBA,EAAsBA,EAAoBmB,aAAe,KAEtG,IAAIC,EAAiBxB,EAAmBjW,MAAK,SAAU7M,GAAO,OAAO6iB,EAAQ7iB,GAAKwE,KAAOwe,EAAcuB,aAAAA,IACvG,GAAID,EAAgB,CAChB,IAAIE,EAA0B3B,EAAQyB,GAAgBV,gBACtDxZ,EAAOuZ,WAAaa,KAA2BlO,EAAcA,EAAYkO,GAA2B,KAG5GnK,CAAAA,EAAQwI,EAAQE,GAAWve,IAAM4F,CAAAA,IAE9BiQ,CAAAA,CA5FXxiB,2BCAAA,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,GAA/CpI,mCCAA,IAAIqa,EAAY9Z,MAAQA,KAAK8Z,UAAa,WAStC,OARAA,EAAWra,OAAOC,QAAU,SAASsM,GACjC,IAAK,IAAI0B,EAAG5I,EAAI,EAAGyN,EAAI7J,UAAUpE,OAAQQ,EAAIyN,EAAGzN,IAE5C,IAAK,IAAI+I,KADTH,EAAIhF,UAAU5D,GACOrF,OAAO+C,UAAUgF,eAAeC,KAAKiG,EAAGG,KACzD7B,EAAE6B,GAAKH,EAAEG,IAEjB,OAAO7B,CAAAA,EAEJ8N,EAAShX,MAAM9C,KAAM0I,UAAAA,EAE5BqR,EAAa/Z,MAAQA,KAAK+Z,WAAc,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU1S,GAAS,IAAM2S,EAAKL,EAAU9S,KAAKQ,GAAW,OAAO+F,GAAK0M,EAAO1M,EAAAA,CACpF,UAAS6M,EAAS5S,GAAS,IAAM2S,EAAKL,EAAiB,MAAEtS,GAAW,OAAO+F,GAAK0M,EAAO1M,EAAAA,CACvF,UAAS4M,EAAK3V,GAJlB,IAAegD,EAIahD,EAAO6V,KAAOL,EAAQxV,EAAOgD,QAJ1CA,EAIyDhD,EAAOgD,MAJhDA,aAAiBqS,EAAIrS,EAAQ,IAAIqS,GAAE,SAAUG,GAAWA,EAAQxS,EAAAA,KAIT8S,KAAKJ,EAAWE,EAClGD,CAAAA,GAAML,EAAYA,EAAUrX,MAAMkX,EAASC,GAAc,KAAK5S,OAAAA,GAAAA,EAGlEuT,EAAe5a,MAAQA,KAAK4a,aAAgB,SAAUZ,EAASa,GAC/D,IAAsGC,EAAGC,EAAG/O,EAAGgP,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPnP,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOoP,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAE3T,KAAMiU,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAOxb,IAAAA,GAAUgb,EACvJ,SAASM,EAAK/I,GAAK,OAAO,SAAUlF,GAAK,OACzC,SAAcoO,GACV,GAAIX,EAAG,MAAM,IAAIY,UAAU,mCAC3B,KAAOT,GAAAA,IACH,GAAIH,EAAI,EAAGC,IAAM/O,EAAY,EAARyP,EAAG,GAASV,EAAU,OAAIU,EAAG,GAAKV,EAAS,SAAO/O,EAAI+O,EAAU,SAAM/O,EAAEvE,KAAKsT,GAAI,GAAKA,EAAE1T,SAAW2E,EAAIA,EAAEvE,KAAKsT,EAAGU,EAAG,KAAKf,KAAM,OAAO1O,EAE3J,OADI+O,EAAI,EAAG/O,IAAGyP,EAAK,CAAS,EAARA,EAAG,GAAQzP,EAAEnE,QACzB4T,EAAG,IACP,KAAK,EAAG,KAAK,EAAGzP,EAAIyP,EAAI,MACxB,KAAK,EAAc,OAAXR,EAAEC,QAAgB,CAAErT,MAAO4T,EAAG,GAAIf,MAAAA,GAC1C,KAAK,EAAGO,EAAEC,QAASH,EAAIU,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKR,EAAEI,IAAIM,MAAOV,EAAEG,KAAKO,MAAO,SACxC,QACI,MAAkB3P,GAAZA,EAAIiP,EAAEG,MAAY9W,OAAS,GAAK0H,EAAEA,EAAE1H,OAAS,KAAkB,IAAVmX,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAER,EAAI,EAAG,QACjG,IAAc,IAAVQ,EAAG,MAAczP,GAAMyP,EAAG,GAAKzP,EAAE,IAAMyP,EAAG,GAAKzP,EAAE,IAAM,CAAEiP,EAAEC,MAAQO,EAAG,GAAI,KAC9E,IAAc,IAAVA,EAAG,IAAYR,EAAEC,MAAQlP,EAAE,GAAI,CAAEiP,EAAEC,MAAQlP,EAAE,GAAIA,EAAIyP,EAAI,KAC7D,IAAIzP,GAAKiP,EAAEC,MAAQlP,EAAE,GAAI,CAAEiP,EAAEC,MAAQlP,EAAE,GAAIiP,EAAEI,IAAIzZ,KAAK6Z,GAAK,KACvDzP,CAAAA,EAAE,IAAIiP,EAAEI,IAAIM,MAChBV,EAAEG,KAAKO,MAAO,SAEtBF,EAAKZ,EAAKpT,KAAKuS,EAASiB,EAC1B,OAAOrN,GAAK6N,EAAK,CAAC,EAAG7N,GAAImN,EAAI,CAAK,CAjB7BE,QAiBuCH,EAAI9O,EAAI,CACtD,IAAY,EAARyP,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE5T,MAAO4T,EAAG,GAAKA,EAAG,UAAaf,MAAAA,EArBxBF,CAChD,CADqD,CAACjI,EAAGlF,GAAAA,CAAAA,CAAAA,EAwBzDuO,EAAiB5b,MAAQA,KAAK4b,eAAkB,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBrT,UAAUpE,OAAc,IAAK,IAA4B0X,EAAxBlX,EAAI,EAAGmH,EAAI6P,EAAKxX,OAAYQ,EAAImH,EAAGnH,KACxEkX,GAAQlX,KAAKgX,IACRE,IAAIA,EAAK/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,EAAM,EAAGhX,IAClDkX,EAAGlX,GAAKgX,EAAKhX,IAGrB,OAAO+W,EAAG9P,OAAOiQ,GAAM/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,GAAAA,EAEtDrc,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C7I,EAAQukB,WAAavkB,EAAQgkB,iBAAmBhkB,EAAQkkB,4BAA8BlkB,EAAQ0hB,8BAAgC1hB,EAAQyhB,gBAAkBzhB,EAAQykB,gBAAkBzkB,EAAQoqB,cAAgBpqB,EAAQ+pB,eAAiB/pB,EAAQggB,wBAA0BhgB,EAAQmgB,wBAA0BngB,EAAQqgB,eAAiBrgB,EAAQ0gB,kBAAoB1gB,EAAQspB,WAAatpB,EAAQ8jB,QAAU9jB,EAAQqtB,kBAAoBrtB,EAAQikB,iBAAmBjkB,EAAQgf,SAAWhf,EAAQ4hB,eAAAA,EACrd,IAAI0L,EAAM,EAAQ,KACdC,EAAU,EAAQ,KAWtBvtB,EAAQ4hB,UAVQ,SAAU5P,GAEtB,gBADIA,IAAmBA,EAAO,QACd,UAATA,EACD,CACE,qBACA,eAAejF,OAAO,OAAQ,6DAC9B,eAAeA,OAAO,MAAO,8DAE/B,CAAC,aAAc,eAAeA,OAAO,OAAQ,+DAcvD/M,EAAQgf,SAXO,SAAUwO,EAAgBjI,EAAQT,EAAS2I,GAEtD,GADqBD,IACrB,CAGA,IAAIE,EAAU9Q,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW2D,IAAAA,GAAgB,CAACT,IAAAA,GAClF2I,GACAC,EAAQ9qB,KAAK6qB,GAEjBpiB,QAAQS,IAAIhI,MAAMuH,QAASqiB,EAAAA,CAAAA,EAqD/B1tB,EAAQikB,iBA/Ce,SAAU0J,EAAUC,GACvCD,EAAWA,GAAY,CAAC,EACxBC,EAAWA,GAAY,CAAC,EACxBA,EAAW3lB,KAAKP,MAAMO,KAAK8B,UAAU6jB,IACrCntB,OAAO6I,KAAKskB,GAAUxpB,SAAQ,SAAUgJ,GACpC,IAAIyW,EAAS+J,EAASxgB,UACfyW,EAAOzW,GACTugB,EAASvgB,IAGd3M,OAAO6I,KAAKua,GAAQzf,SAAQ,SAAUkK,GAC9BuV,EAAOxZ,WAAyC,iBAArBwZ,EAAOxZ,YAClCwZ,EAAOxZ,UAAY,IAAIpI,KAAK4hB,EAAOxZ,WAAWwjB,YAE9ChK,EAAOvV,KAAUqf,EAASvgB,GAAIkB,IAGzBrC,MAAMgJ,QAAQ4O,EAAOvV,KAEtBrG,KAAK8B,UAAU8Z,EAAOvV,MAAWrG,KAAK8B,UAAU4jB,EAASvgB,GAAIkB,aAJ1Dsf,EAASxgB,GAAIkB,IAQW,IAA/B7N,OAAO6I,KAAKua,GAAQve,QAGgB,IAA/B7E,OAAO6I,KAAKua,GAAQve,QAAgBue,EAAOxZ,mBAFzCujB,EAASxgB,EAAAA,GAAAA,IAO5B,IAAI/C,GAAAA,IAcJ,OAbA5J,OAAO6I,KAAKskB,GAAUxpB,SAAQ,SAAUgJ,GACpC,IAAIyW,EAAS+J,EAASxgB,GAClByW,EAAOxZ,UAAYA,IACnBA,EAAYwZ,EAAOxZ,UAAAA,IAG3B5J,OAAO6I,KAAKskB,GAAUxpB,SAAQ,SAAUgJ,GACpC,IAAIyW,EAAS+J,EAASxgB,GAClByW,EAAOxZ,YAAcA,IACrBwZ,EAAOxZ,UAAY,MAG3BujB,EAASvjB,UAAYA,EACdujB,CAAAA,EAmBX5tB,EAAQqtB,kBAhBgB,SAAUlK,EAAI2K,GAClC,IAAIC,EAAiB,CAAC,EAatB,OAZcD,EAASjoB,SACfzB,SAAQ,SAAUyf,GACtB,IAAImK,EAAgB,CAChB5gB,GAAIyW,EAAOzW,GACX/C,UAAWwZ,EAAOxZ,UAAUwjB,UAC5B7b,KAAM6R,EAAO7R,MAEjB6R,EAAOtc,QAAQnD,SAAQ,SAAUkK,GAC7B0f,EAAc1f,GAAQuV,EAAOoK,KAAK3f,EAAAA,IAEtCyf,EAAeC,EAAc5gB,IAAM4gB,CAAAA,IAEhCD,CAAAA,EAeX/tB,EAAQ8jB,QAVM,SAAUnX,GACpB,IAAKA,EAAEwU,QACH,OAAOxU,EAEX,IAAI6B,EAAI,CAAC,EAIT,OAHA7B,EAAEvI,SAAQ,SAAUiK,EAAGiS,GACnB9R,EAAE8R,GAAKjS,CAAAA,IAEJG,CAAAA,EAkBXxO,EAAQspB,WAfS,SAAUtW,GACvB,MAAO,CACH5F,GAAI4F,EAAO5F,GACX8gB,OAAQlb,EAAOoT,YAAY3T,KAAI,SAAU6T,GACrC,MAAO,CACHlZ,GAAIkZ,EAAMlZ,GACViZ,KAAMC,EAAMD,KACZnK,MAAOoK,EAAMpK,MACbiS,QAAS7H,EAAM6H,QACf5H,MAAOD,EAAMC,MACb1G,WAAYyG,EAAMzG,WAAAA,IAAAA,EA0DlC7f,EAAQ0gB,kBApDgB,SAAU1O,EAAMpJ,EAAKwlB,GACzC,IAAIC,EAAW,GAAGthB,OAAe,MAARiF,EAAe,KAAO,OAAQ,qBACnDsc,EAAc,GAAGvhB,OAAe,MAARiF,EAAe,MAAQ,QAAS,oCACxDuc,EAAc,GAAGxhB,OAAe,MAARiF,EAAe,MAAQ,QAAS,oCACxDwc,EAAgB,GAAGzhB,OAAe,MAARiF,EAAe,MAAQ,QAAS,2BAC1Dyc,EAAiB,GAAG1hB,OAAe,MAARiF,EAAe,MAAQ,QAAS,gCAC3Doc,GAAqB,SAATpc,IAERoc,EADAA,EAASM,SAAS,UACPN,EAASnrB,QAAQ,SAAU,YAG3BmrB,EAASnrB,QAAQ,QAAS,YAG7C,IAAI0rB,EAAW/lB,EAAI8D,MAAM,KACzB,OAA8B,IAA1B9D,EAAI6C,QAAQ,SACL,CACHsV,IAAKqN,GAAYC,EACjBzlB,IAAK+lB,EAAS,KAGgB,IAA7B/lB,EAAI6C,QAAQ,YACV,CACHsV,IAAKqN,GAAYE,EACjB1lB,IAAK+lB,EAAS,KAGe,IAA5B/lB,EAAI6C,QAAQ,WACV,CACHsV,IAAKqN,GAAYG,EACjB3lB,IAAK+lB,EAAS,KAGmB,IAAhC/lB,EAAI6C,QAAQ,eACV,CACHsV,IAAKqN,GAAYK,EACjB7lB,IAAK+lB,EAAS,KAGkB,IAA/B/lB,EAAI6C,QAAQ,cACV,CACHsV,IAAKqN,GAAYI,EACjB5lB,IAAK+lB,EAAS,IAIX,CACH5N,IAAKqN,GAAYI,EACjB5lB,IAAK+lB,EAAS,KAoB1B3uB,EAAQqgB,eAfa,SAAU7Q,GAC3B,QAAMA,MAAAA,OAAAA,EAAgDA,EAAOmR,aACrDnR,MAAAA,OAAAA,EAAgDA,EAAOyP,QACvD5T,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,kEAA6D,OAIrKpS,MAAAA,OAAAA,EAAgDA,EAAO6O,cAAgB7O,MAAAA,OAAAA,EAAgDA,EAAO8O,eAC5H9O,MAAAA,OAAAA,EAAgDA,EAAOyP,QACvD5T,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,YAAiB,CAAC,wDAAmD,EAErJ,EAQf5hB,EAAQmgB,wBAHsB,SAAUrC,GACpC,OAAOrd,OAAO6I,KAAKwU,GAAc/L,QAAO,SAAU3E,GAAM,OAAO0Q,EAAa1Q,GAAIwY,eAAAA,IAAoBtgB,MAAAA,EA6BxGtF,EAAQggB,wBA1BsB,SAAU5B,EAAqBnF,GACzD,IAAI2V,GAAAA,EAuBJ,OAtBI3V,EAAeoF,WACfD,EAAoBC,WACpBD,EAAoBC,YAAcpF,EAAeoF,YACjDuQ,GAAAA,GAEA3V,EAAeqF,WACfF,EAAoBE,WACpBF,EAAoBE,YAAcrF,EAAeqF,YACjDsQ,GAAAA,GAEAA,GAAW3V,EAAegG,OAC1B5T,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,YAAiB,CAAC,wEAAyE,CACrKiN,IAAK,CACDxQ,UAAWD,EAAoBC,UAC/BC,UAAWF,EAAoBE,WAEnCwQ,IAAK,CACDzQ,UAAWpF,EAAeoF,UAC1BC,UAAWrF,EAAeqF,cAAAA,IAInCsQ,CAAAA,EAcX5uB,EAAQ+pB,eAXa,SAAUzQ,GAC3B,OAAKA,IAIiB,iBAAXA,GAAuBA,EAAS,GAAKA,EAAS,KACrDjO,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,uDAAkD,IAJxJvW,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,sCAAiC,EAChI,EAwBf5hB,EAAQoqB,cAfY,SAAU9lB,GAC1B,OAAKA,EAIc,WAAfA,EAAM0N,MAAoC,UAAf1N,EAAM0N,MAAmC,QAAf1N,EAAM0N,MAC3D3G,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,kEAAmE,IAGzKtd,EAAMyqB,YAA0C,iBAArBzqB,EAAMyqB,aACjC1jB,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,iDAA6C,IARnJvW,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQ5c,EAAQ4hB,WAAW,aAAkB,CAAC,qCAAgC,EAC/H,EAuDf5hB,EAAQykB,gBA1Cc,WAAc,OAAO1J,OAAAA,OAAU,OAAQ,GAAgB,WACzE,SAASiU,EAAcC,GACnB,OAAQhqB,KAAKiqB,MAAY,IAAND,GAAa,KAAKE,QAAQ,EAEjD,KAAIC,EAAgBC,EAASxpB,EAAQypB,EACrC,OAAO1T,EAAY5a,MAAM,SAAUoe,GAC/B,OAAQA,EAAGlD,OACP,KAAK,EAmBD,OAlBAkT,EAAiB,SAAUG,GAAY,OAAOxU,OAAAA,OAAU,OAAQ,GAAgB,WAC5E,OAAOa,EAAY5a,MAAM,SAAUoe,GAC/B,OAAQA,EAAGlD,OACP,KAAK,EAAG,MAAO,CAAC,EAAa,IAAId,SAAQ,SAAUC,GAC3C,IACI,IAAI4F,EAAO,OAAQ,KAAoBlU,OAAOwiB,IAE9C,OADAtO,EAAKuO,QACEnU,EAAQ4F,EAEnB,OAAO4D,GACHxZ,QAAQ1G,MAAM,yCAA0C,CAAEkgB,IAAKA,EAAIpY,MAAO8iB,SAAUA,IACpFlU,EAAQ,SAGpB,KAAK,EAAG,MAAO,CAAC,EAAc+D,EAAGjD,QAAAA,GAAAA,GAAAA,EAItC,CAAC,EAAamR,EAAImC,WAAW,CAC5BlO,SAAU,CAAE6N,eAAgBA,MAExC,KAAK,EASD,OARAC,EAAUjQ,EAAGjD,OACbtW,EAASiV,EAASA,EAAS,CAAC,EAAGuU,GAAU,CAAEK,YAAanvB,OAAOyd,UAAU2R,uBACzEL,EAAS/uB,OAAOqvB,YAAoB,UAEhC/pB,EAAOgqB,gBAAkBb,EAAcM,EAAOO,gBAAkB,SAChEhqB,EAAOiqB,gBAAkBd,EAAcM,EAAOQ,gBAAkB,SAChEjqB,EAAOkqB,eAAiBf,EAAcM,EAAOS,eAAiB,UAE3D,CAAC,EAAclqB,GAAAA,GAAAA,GAAAA,EAKtC,IAAImqB,EAAqB,CACrBC,qBAAsB,aACtBC,eAAgB,CAAC,MAAO,QAAS,OAAQ,OAAQ,SACjDlkB,MAAO,IAEPmkB,EAAqB,SAAU9jB,EAAY6Q,GAC3C,IAAIkT,EAAiB/kB,QAAQgB,GACxB+jB,IAGL/kB,QAAQ2kB,EAAmBC,qBAAuB5jB,GAAc+jB,EAChE/kB,QAAQgB,GAAc,WAElB,IADA,IAAI3I,EAAO,GACFwd,EAAK,EAAGA,EAAKxX,UAAUpE,OAAQ4b,IACpCxd,EAAKwd,GAAMxX,UAAUwX,GAEzB,GAAI8O,EAAmBhkB,OAAStI,EAAK4B,QAAU4X,EAAO,CAClD,IAAImT,EAAqBL,EAAmBE,eAAezkB,QAAQY,GAC/DikB,EAAoBN,EAAmBE,eAAezkB,QAAQukB,EAAmBhkB,OAErF,GADwBqkB,GAAsB,GAAKA,GAAsBC,EAClD,CACnB,IAAI3oB,EAAO4oB,EAAc7sB,GACzBwZ,EAAM,CAAE+D,KAAM,CAAC,MAAO,KAAM,CAAEjP,KAAM3F,EAAY1E,KAAMA,KAAAA,CAG9DyoB,CAAAA,EAAetsB,MAAMuH,QAAS3H,EAAAA,EAAAA,EAsBtC1D,EAAQyhB,gBAnBc,SAAUzV,EAAOkR,GACnC,GAAIlR,GAASgkB,EAAmBE,eAAexB,SAAS1iB,IAAUA,IAAUgkB,EAAmBhkB,MAAO,CAClG,IAAIwkB,EAAeR,EAAmBE,eAAezkB,QAAQO,GACzDykB,EAAgBT,EAAmBE,eAAezkB,QAAQukB,EAAmBhkB,OACjF,GAAIykB,EAAgB,EAChB,IAAK,IAAIvP,EAAK,EAAG9B,EAAK4Q,EAAmBE,eAAehkB,MAAMskB,GAAetP,EAAK9B,EAAG9Z,OAAQ4b,IAAM,CAC/F,IAAI7U,EAAa+S,EAAG8B,GACpBiP,EAAmB9jB,EAAY6Q,EAAAA,MAGlC,GAAIsT,EAAeC,EACpB,IAAK,IAAIpR,EAAK,EAAGC,EAAK0Q,EAAmBE,eAAehkB,MAAMskB,EAAcC,GAAgBpR,EAAKC,EAAGha,OAAQ+Z,IACpGhT,EAAaiT,EAAGD,GACpB8Q,EAAmB9jB,EAAY6Q,GAGvC8S,EAAmBhkB,MAAQA,CAAAA,CAAAA,EAkBnChM,EAAQ0hB,8BAd4B,WAChC,GAAM,YAAanhB,OAGnB,IAAK,IAAI2gB,EAAK,EAAG9B,EAAK4Q,EAAmBE,eAAgBhP,EAAK9B,EAAG9Z,OAAQ4b,IAAM,CAC3E,IAAI7U,EAAa+S,EAAG8B,GAChBkP,EAAiB/kB,QAAQ2kB,EAAmBC,qBAAuB5jB,GAClE+jB,IAGL/kB,QAAQgB,GAAc+jB,EAAevsB,KAAKwH,gBACnCA,QAAQ2kB,EAAmBC,qBAAuB5jB,GAAAA,CAAAA,EAUjErM,EAAQkkB,4BAN0B,SAAU9W,EAAIoe,EAAUC,EAASiF,GAC/D,MAAO,CACH1N,MAAAA,EAAUuK,EAAQ/C,uBAAuBpd,EAAIqe,GAC7CxI,SAAAA,EAAasK,EAAQhD,qBAAqBnd,EAAIoe,EAAUC,EAASiF,GAAAA,EAIzE,IAAIH,EAAgB,SAAU7sB,GAC1B,IACI,OAAOA,EAAK+O,KAAI,SAAUM,GAAQ,MAAwB,iBAATA,EAAoBA,EAAO9K,KAAK8B,UAAUgJ,EAAM4d,IAAAA,IAAqB1c,KAAK,IAE/H,OAAOmL,GAKH,MAAO,KAIXuR,EAAe,WACf,IAAIC,EAAU,IAAIC,QAClB,OAAO,SAAUC,EAAMjoB,GACnB,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,CAC7C,GAAI+nB,EAAQ1L,IAAIrc,GACZ,OAEJ+nB,EAAQG,IAAIloB,EAEhB,QAAOA,CAAAA,CAAAA,EA+Bf7I,EAAQgkB,iBA5Be,SAAU2J,EAAUC,GACvCD,EAAWA,GAAY,CAAC,EACxBC,EAAWA,GAAY,CAAC,EACxB,IAAIoD,GAAAA,EAuBJ,OAtBqC,IAAjCvwB,OAAO6I,KAAKqkB,GAAUroB,SACtB0rB,GAAAA,GAEOvwB,OAAO6I,KAAKskB,GACD7b,QAAO,SAAUnJ,GAAO,MAA8B,wBAAvBglB,EAAShlB,GAAKoJ,MAAyD,uBAAvB4b,EAAShlB,GAAKoJ,IAAAA,IACxG5N,SAAQ,SAAUwmB,GAEzB,GAAM,kBAAmBgD,EAAShD,GAG7B,CAED,IAAIqG,EAA2B,8BAA+BrD,EAAShD,IACnEvJ,QAAQsM,EAAS/C,KACjB,8BAA+B+C,EAAS/C,GACxCoG,GAAeC,GACXrD,EAAShD,GAAWsG,4BAA8BvD,EAAS/C,GAAWsG,4BACtEtD,EAAShD,GAAWkC,cAAgBqE,IAAAA,MAT5CvD,EAAShD,GAAWkC,cAAgBqE,GAAAA,IAcrCvD,CAAAA,EAMX5tB,EAAQukB,WAHS,WACb,OAAOtf,KAAKE,SAASqN,SAAS,IAAIvL,UAAU,EAAG,IAAMhC,KAAKE,SAASqN,SAAS,IAAIvL,UAAU,EAAG,+BC5djGxG,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C7I,EAAQya,QAAU,QADlBha,mCCAA,IAAImc,EAAiB5b,MAAQA,KAAK4b,eAAkB,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBrT,UAAUpE,OAAc,IAAK,IAA4B0X,EAAxBlX,EAAI,EAAGmH,EAAI6P,EAAKxX,OAAYQ,EAAImH,EAAGnH,KACxEkX,GAAQlX,KAAKgX,IACRE,IAAIA,EAAK/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,EAAM,EAAGhX,IAClDkX,EAAGlX,GAAKgX,EAAKhX,IAGrB,OAAO+W,EAAG9P,OAAOiQ,GAAM/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,GAAAA,EAEtDrc,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C,IAAI6U,EAAU,EAAQ,KAClB0T,EAA8B,WAC9B,SAASA,EAAarpB,GAClB/G,KAAKie,OAAAA,EACDmS,EAAaC,UACbhmB,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,iDAGrGwP,EAAaC,UAAYrwB,KACzBA,KAAKie,QAAUlX,EAAQkX,MAmC/B,QAhCAmS,EAAa5tB,UAAU0Z,MAAQ,SAAU6D,EAAKxC,EAAWF,EAAWC,GAEhE,IADA,IAAI2C,EAAO,GACFC,EAAK,EAAGA,EAAKxX,UAAUpE,OAAQ4b,IACpCD,EAAKC,EAAK,GAAKxX,UAAUwX,GAE7B,IAAIxd,EAAOuI,MAAMzI,UAAU0I,MAAMzD,KAAKwY,GAoBtC,OAnBAvd,EAAKd,KAAKX,KAAKC,OACXwB,EAAK,aAAcqa,oBACnBra,EAAK,GAAKA,EAAK,GAAGiiB,cAEP2L,MAAMvQ,EAAK,CACtBoH,OAAQ,OACRoJ,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACL,eAAgB,oBAEpB7V,KAAM5T,KAAK8B,UAAU,CACjBkX,KAAMA,EACN1C,UAAWA,EACXF,UAAWA,EACXC,UAAWA,MAId3C,MAAK,WAAc,MAAO,MAC1BiJ,OAAM,SAAUC,GAEjB,OADAxZ,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAACiD,EAAIC,QAAS,CAAED,IAAKA,EAAIpY,SAAAA,IACtH,CAAE9H,MAAOkgB,EAAAA,GAAAA,EAGjBuM,CA3CsB,CAAC,GA6ClCpxB,EAAQya,QAAU2W,CAAAA,kCCxDlB,IAAIxU,EAAiB5b,MAAQA,KAAK4b,eAAkB,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBrT,UAAUpE,OAAc,IAAK,IAA4B0X,EAAxBlX,EAAI,EAAGmH,EAAI6P,EAAKxX,OAAYQ,EAAImH,EAAGnH,KACxEkX,GAAQlX,KAAKgX,IACRE,IAAIA,EAAK/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,EAAM,EAAGhX,IAClDkX,EAAGlX,GAAKgX,EAAKhX,IAGrB,OAAO+W,EAAG9P,OAAOiQ,GAAM/Q,MAAMzI,UAAU0I,MAAMzD,KAAKqU,GAAAA,EAEtDrc,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAAA,IAC/C,IAAI6U,EAAU,EAAQ,KAClBiU,EAAW,EAAQ,KAEnBC,EAAgC,WAChC,SAASA,EAAe7pB,GACpB/G,KAAK4e,WAAa,KAClB5e,KAAKmpB,cAAAA,EACLnpB,KAAK2gB,OAAS,GACd3gB,KAAK6wB,aAAe,EACpB7wB,KAAKyhB,QAAU,WAAa,EAC5BzhB,KAAKie,OAAAA,EACLje,KAAK8wB,gBAAAA,EACL9wB,KAAK+wB,aAAe,GACpB/wB,KAAKkc,MAAQ,SAAUkC,GACnB,IAAIC,EACA4B,EAAO7B,EAAG6B,KAAMlZ,EAAUqX,EAAGrX,QAC7BrE,EAAOuI,MAAMzI,UAAU0I,MAAMzD,KAAKwY,GAKtC,GAJAvd,EAAKd,KAAKX,KAAKC,OACXwB,EAAK,aAAcqa,oBACnBra,EAAK,GAAKA,EAAK,GAAGiiB,cAEjBiM,EAAeP,UAAUS,eAA9B,CAMA,IAAKF,EAAeP,UAAUzR,WAC1B,OAAIgS,EAAeP,UAAU1P,OAAOrc,OAAS,UACrCyC,MAAAA,OAAAA,EAAkDA,EAAQkiB,eAC1DliB,EAAQkiB,aAAa5O,QAAQ,CAAE1W,MAAO,mCAI9CitB,EAAeP,UAAU1P,OAAO/e,KAAKc,SACjCqE,MAAAA,OAAAA,EAAkDA,EAAQkiB,eAC1D2H,EAAeP,UAAUU,aAAanvB,KAAKmF,EAAQkiB,gBAI3D,GAAI2H,EAAeP,UAAUzR,WAAWC,aAAeC,UAAUC,OAC7D6R,EAAeP,UAAU1P,OAAO/e,KAAKc,IACjCqE,MAAAA,OAAAA,EAAkDA,EAAQkiB,eAC1D2H,EAAeP,UAAUU,aAAanvB,KAAKmF,EAAQkiB,cAEnD2H,EAAeP,UAAU1P,OAAOrc,QAAUssB,EAAeP,UAAUQ,cAAc,CACjF,IAAIG,EAAQ/pB,KAAK8B,UAAU6nB,EAAeP,UAAU1P,QAChDsQ,EAAoBN,EAASO,8BAA8BF,GAC/D,GAAIJ,EAAeP,UAAUpS,MAAO,CAChC,IAAIkT,EAA2C,QAAhC9S,EAAKhU,QAAQ+mB,qBAAAA,IAA2B/S,EAAgBA,EAAKhU,QAAQS,IACpFqmB,EAAQruB,WAAAA,EAAc8Y,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,UAAU7U,OAAOilB,EAAM1sB,UAAAA,IACtH6sB,EAAQruB,WAAAA,EAAc8Y,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,sBAAsB7U,OAAOklB,EAAkB3sB,UAAAA,GAElJssB,CAAAA,EAAeP,UAAU1P,OAAS,GAClCiQ,EAAeP,UAAUzR,WAAWyS,KAAKJ,GACzCL,EAAeP,UAAUU,aAAa3tB,SAAQ,SAAUgb,GAEpD,SADcA,EAAG/D,SACF,CAAC,EAAD,IAEnBuW,EAAeP,UAAUU,aAAe,SArCxChqB,MAAAA,OAAAA,EAAkDA,EAAQkiB,eAC1DliB,EAAQkiB,aAAa5O,QAAQ,CAAE1W,MAAO,8BAwC9CitB,EAAeP,UACfhmB,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,iDAGrGgQ,EAAeP,UAAYrwB,KAC3BA,KAAKie,QAAUlX,EAAQkX,MA0E/B,QAvEA2S,EAAepuB,UAAUuW,QAAU,SAAUqF,GACzC,IAAI2B,EAAM3B,EAAG2B,IAAKC,EAAS5B,EAAG4B,OAAQoB,EAAUhD,EAAGgD,QAASC,EAASjD,EAAGiD,OAAQI,EAAUrD,EAAGqD,QACzFmP,EAAeP,UAAUzR,YACzBgS,EAAeP,UAAUzR,WAAWK,QAExC,IAAI6I,EAAQ8I,EAAeP,UAC3BO,EAAeP,UAAUzR,WAAa,IAAIE,UAAUiB,EA3ErC,OA4Ef6Q,EAAeP,UAAUzR,WAAW0S,OAASjQ,GAAU,KACvDuP,EAAeP,UAAUzR,WAAW2S,QAAU9P,GAAW,KACzDmP,EAAeP,UAAUzR,WAAW4S,UAAY,SAAU5jB,GACtD,IAAIwQ,EACJ,IACI,IAAI6B,EAAOhZ,KAAKP,MAAMkH,EAAEqS,MACpBA,EAAKtc,OACqE,QAAzEya,EAAK0J,MAAAA,OAAAA,EAA8CA,EAAMlJ,kBAAAA,IAAwBR,GAAyBA,EAAGa,QAC9G6I,EAAMlJ,WAAa,KACnBvU,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,KAAOX,EAAKtc,QAAAA,IAClHyd,EAAQnB,EAAKtc,MAAO,UAGhBsc,EAAK4Q,eACLD,EAAeP,UAAUQ,aAAe5Q,EAAK4Q,cAEjD7Q,EAAOC,GACP2Q,EAAeP,UAAUlH,cAAAA,EAGjC,OAAOtF,GACHxZ,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,CAAEiD,IAAKA,EAAIpY,SAAAA,IACjH2V,EAAQyC,EAAIC,QAAAA,CAAAA,EAGpB8M,EAAeP,UAAUzR,WAAW3b,QAAU,SAAU2K,GACpDvD,QAAQgN,KAAKvU,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,aAAkB,CAAC,KAAMhT,IAAAA,IAC5GwT,EAAQxT,EAAG,gBAGnBgjB,EAAepuB,UAAUyc,MAAQ,SAAU9F,GACvC,IAAIiF,EAAIC,EACR,GAAIlF,IAAgH,QAA7FkF,EAAyC,QAAnCD,EAAKwS,EAAeP,iBAAAA,IAAuBjS,OAAAA,EAAyBA,EAAGQ,kBAAAA,IAAwBP,OAAAA,EAAyBA,EAAGQ,cAAgBC,UAAUC,KAAM,CACpL,IAAIiS,EAAQ/pB,KAAK8B,UAAU,CAAC,gBAAiB,KAAM,OAC/CkoB,EAAoBN,EAASO,8BAA8BF,GAC/DJ,EAAeP,UAAUzR,WAAWyS,KAAKJ,EAE7CL,CAAAA,EAAeP,UAAU1P,OAAS,GAClCiQ,EAAeP,UAAUU,aAAa3tB,SAAQ,SAAUgb,GAEpD,SADcA,EAAG/D,SACF,CAAE1W,MAAO,4BAE5BitB,EAAeP,UAAUU,aAAe,GACpCH,EAAeP,UAAUzR,aACzBgS,EAAeP,UAAUzR,WAAWK,QACpC2R,EAAeP,UAAU5O,UACzBmP,EAAeP,UAAUzR,WAAa,OAG9CgS,EAAepuB,UAAUkW,sBAAwB,WACzCkY,EAAeP,UAAUpS,OACzB5T,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,kCAExGgQ,EAAeP,UAAUS,gBAAAA,CAAiB,EAE9CF,EAAepuB,UAAUmW,qBAAuB,WACxCiY,EAAeP,UAAUpS,OACzB5T,QAAQS,IAAIhI,MAAMuH,QAASuR,EAAcA,EAAc,MAAQc,EAAQkE,WAAW,YAAiB,CAAC,iCAExGgQ,EAAeP,UAAUS,gBAAAA,CAAiB,EAE9CF,EAAepuB,UAAUivB,YAAc,SAAUxT,GAC7C2S,EAAeP,UAAUpS,MAAQA,CAAAA,EAE9B2S,CA3IwB,CAAC,GA6IpC5xB,EAAQya,QAAUmX,CAAAA,qBCrJT,SAAUhjB,GACjB,aACA,IAAIG,EAAI,SAAUH,EAAG2E,GACnB,OAAQxE,EACNtO,OAAOiyB,gBACN,CAAE/pB,UAAW,cAAgBsD,OAC5B,SAAU2C,EAAGG,GACXH,EAAEjG,UAAYoG,CAAAA,GAElB,SAAUH,EAAGG,GACX,IAAK,IAAIwE,KAAKxE,EAAGtO,OAAO+C,UAAUgF,eAAeC,KAAKsG,EAAGwE,KAAO3E,EAAE2E,GAAKxE,EAAEwE,GAAAA,GACxE3E,EAAG2E,EAAAA,EAEV,SAASA,EAAE3E,EAAGG,EAAGwE,EAAGvG,GAClB,OAAO,IAAKuG,IAAMA,EAAI6H,WAAU,SAAU5M,EAAGU,GAC3C,SAASpJ,EAAE8I,GACT,IACED,EAAE3B,EAAE3E,KAAKuG,GACT,OAAOA,GACPM,EAAEN,EAAAA,CAGN,UAASI,EAAEJ,GACT,IACED,EAAE3B,EAAE2lB,MAAM/jB,GACV,OAAOA,GACPM,EAAEN,EAAAA,CAGN,UAASD,EAAEC,GACT,IAAIG,EACJH,EAAE8M,KACElN,EAAEI,EAAE/F,QACFkG,EAAIH,EAAE/F,MACRkG,aAAawE,EACTxE,EACA,IAAIwE,GAAE,SAAU3E,GACdA,EAAEG,EAAAA,KACA4M,KAAK7V,EAAGkJ,EAEtBL,CAAAA,GAAG3B,EAAIA,EAAElJ,MAAM8K,EAAGG,GAAK,KAAK1G,OAAAA,GAGhC,UAAS2E,EAAE4B,EAAGG,GACZ,IAAIwE,EACFvG,EACAwB,EACAU,EACApJ,EAAI,CACFoW,MAAO,EACPC,KAAM,WACJ,GAAI,EAAI3N,EAAE,GAAI,MAAMA,EAAE,GACtB,OAAOA,EAAE,IAEX4N,KAAM,GACNC,IAAK,IAET,OACGnN,EAAI,CAAE7G,KAAM2G,EAAE,GAAI2jB,MAAO3jB,EAAE,GAAI4jB,OAAQ5jB,EAAE,IAC1C,mBAAqBuN,SAClBrN,EAAEqN,OAAOC,UAAY,WACpB,OAAOxb,IAAAA,GAEXkO,EAEF,SAASF,EAAEE,GACT,OAAO,SAAUF,GACf,OAAO,SAAWE,GAChB,GAAIqE,EAAG,MAAM,IAAImJ,UAAU,mCAC3B,KAAO5W,GACL,IACE,GACIyN,EAAI,EACNvG,IACGwB,EAAI,EAAIU,EAAE,GAAKlC,EAAE4lB,OAAS1jB,EAAE,GAAKlC,EAAE2lB,SAAWnkB,EAAIxB,EAAE4lB,SAAWpkB,EAAE/F,KAAKuE,GAAI,GAAKA,EAAE3E,SAChFmG,EAAIA,EAAE/F,KAAKuE,EAAGkC,EAAE,KAAKwM,KAEzB,OAAOlN,EACT,OAAUxB,EAAI,EAAIwB,IAAMU,EAAI,CAAC,EAAIA,EAAE,GAAIV,EAAE3F,QAASqG,EAAE,IAClD,KAAK,EACL,KAAK,EACHV,EAAIU,EACJ,MACF,KAAK,EACH,OAAOpJ,EAAEoW,QAAS,CAAErT,MAAOqG,EAAE,GAAIwM,MAAAA,GACnC,KAAK,EACH5V,EAAEoW,QAAUlP,EAAIkC,EAAE,GAAMA,EAAI,CAAC,GAC7B,SACF,KAAK,EACFA,EAAIpJ,EAAEuW,IAAIM,MAAQ7W,EAAEsW,KAAKO,MAC1B,SACF,QACE,MAAqBnO,GAAdA,EAAI1I,EAAEsW,MAAc9W,OAAS,GAAKkJ,EAAEA,EAAElJ,OAAS,KAAQ,IAAM4J,EAAE,IAAM,IAAMA,EAAE,IAAM,CACxFpJ,EAAI,EACJ,QAEF,IAAI,IAAMoJ,EAAE,MAAQV,GAAMU,EAAE,GAAKV,EAAE,IAAMU,EAAE,GAAKV,EAAE,IAAM,CACtD1I,EAAEoW,MAAQhN,EAAE,GACZ,KAEF,IAAI,IAAMA,EAAE,IAAMpJ,EAAEoW,MAAQ1N,EAAE,GAAI,CAC/B1I,EAAEoW,MAAQ1N,EAAE,GAAMA,EAAIU,EACvB,KAEF,IAAIV,GAAK1I,EAAEoW,MAAQ1N,EAAE,GAAI,CACtB1I,EAAEoW,MAAQ1N,EAAE,GAAK1I,EAAEuW,IAAIzZ,KAAKsM,GAC7B,KAEFV,CAAAA,EAAE,IAAM1I,EAAEuW,IAAIM,MAAO7W,EAAEsW,KAAKO,MAC5B,SAEJzN,EAAIH,EAAEtG,KAAKmG,EAAG9I,EACd,OAAO8I,GACNM,EAAI,CAAC,EAAGN,GAAM5B,EAAI,CACnB,CA5CF,QA6CEuG,EAAI/E,EAAI,CAEZ,IAAI,EAAIU,EAAE,GAAI,MAAMA,EAAE,GACtB,MAAO,CAAErG,MAAOqG,EAAE,GAAKA,EAAE,UAAawM,MAAAA,EAnDjC,EAoDJ,CAACxM,EAAGF,GAAAA,CAAAA,CAIb,KAAIR,EAAI,CACN,eACA,eACA,mBACA,kBACA,kBACA,eACA,kBACA,gBACA,mBACA,gBACA,oBACA,iBACA,iBACA,kBACA,kBACA,qBACA,YACA,YACA,oBACA,kBACA,gBACA,YACA,SACA,SACA,SACA,SACA,iBACA,cACA,cACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,kBACA,kBACA,kBACA,kBACA,UACA,UAEF,SAASU,EAAEN,GACT,OAAYA,EACTikB,cACA5vB,QAAQ,qBAAsB,MAC9BA,QAAQ,+CAAgD,GAG7D,KAAI+L,EAAI,oBAAsBzO,OAC5BoO,EAAI,WACF,IAAKK,EAAG,CACN,IAAIJ,EAAIrO,OAAOyd,UACbjP,EAAIH,EAAEkkB,UACNvf,EAAI3E,EAAEmkB,SACN/lB,EAAI4B,EAAEokB,eACNxkB,EAAI,sBAAsBmD,KAAK5C,GAC/BG,EAAI,SAAWqE,GAAM,aAAeA,GAAKvG,EAAI,IAAMzM,OAAO0yB,SAC5D,MAAO,CAAEC,OAAQhkB,EAAGikB,SAAU,WAAWxhB,KAAK5C,IAAMP,GAAKU,EAAGkkB,WAAY,sBAAsBzhB,KAAK5C,GAAAA,CARnG,IAyFN,IAAI9B,EAAI,GACN1G,EAAI,GACN,SAASmI,EAAEE,EAAGG,GACZ,GAAIH,IAAMG,EAAG,OAAO,EACpB,IAAIwE,EAAI3E,EACRA,EAAEtJ,OAASyJ,EAAEzJ,SAAYsJ,EAAIG,EAAKA,EAAIwE,GACtC,IAAK,IAAIvG,EAAI4B,EAAEtJ,OAAQkJ,EAAIO,EAAEzJ,OAAQ0H,EAAI,GAAK4B,EAAEykB,aAAarmB,KAAO+B,EAAEskB,aAAa7kB,IAAMxB,IAAKwB,IAC9F,IAAK,IAAIU,EAAGpJ,EAAI,EAAGA,EAAIkH,GAAK4B,EAAEykB,WAAWvtB,KAAOiJ,EAAEskB,WAAWvtB,IAAMA,IACnE,GAAM0I,GAAK1I,EAAI,IAAOkH,GAAKlH,GAAK,OAAO0I,EACvC,IAAK,IAAIQ,EAAGL,EAAGmN,EAAI,EAAGpN,EAAI,EAAG4kB,EAAI,EAAG5kB,EAAI1B,GAAMzG,EAAEmI,GAAKE,EAAEykB,WAAWvtB,EAAI4I,GAAMzB,EAAEyB,KAAOA,EACrF,KAAO4kB,EAAI9kB,GACT,IAAKU,EAAIH,EAAEskB,WAAWvtB,EAAIwtB,GAAItkB,EAAIskB,IAAKxX,EAAIwX,EAAG5kB,EAAI,EAAGA,EAAI1B,EAAG0B,IACzDC,EAAIO,IAAM3I,EAAEmI,GAAKM,EAAIA,EAAI,EAAKA,EAAI/B,EAAEyB,GAAMoN,EAAI7O,EAAEyB,GAAKM,EAAI8M,EAAKnN,EAAImN,EAAIA,EAAI,EAAInN,EAAKA,EAAIK,EAAIA,EAAI,EAAIL,EACxG,OAAOmN,CAET,UAASwX,EAAE1kB,GACT,OAAO,MAAQA,CAEjB,KAAIP,EAAI,SAAWO,GACjB,SAAS2E,EAAExE,GACT,IAAIwE,EAAIvS,KAAKJ,YACXoM,EAAI4B,EAAEnG,KAAKzH,KAAM+N,IAAM/N,KACzB,OAAOP,OAAOiyB,eAAe1lB,EAAGuG,EAAE/P,WAAYwJ,CAEhD,QACE,SAAW4B,EAAG2E,GACZ,GAAI,mBAAqBA,GAAK,OAASA,EACrC,MAAM,IAAImJ,UAAU,uBAAyBzL,OAAOsC,GAAK,iCAC3D,SAASvG,IACPhM,KAAKJ,YAAcgO,CAErBG,CAAAA,EAAEH,EAAG2E,GAAK3E,EAAEpL,UAAY,OAAS+P,EAAI9S,OAAO8yB,OAAOhgB,IAAOvG,EAAExJ,UAAY+P,EAAE/P,UAAY,IAAIwJ,EAN5F,EAOGuG,EAAG3E,GACN2E,CAfI,EAiBLhQ,OACFqL,EAAE6gB,WAAa,SAAU7gB,GACxB,IAAIG,OAAAA,IAAeH,EAAI,CAAC,EAAIA,EAC1B9I,EAAIiJ,EAAEykB,YACNvmB,OAAAA,IAAenH,EAAI,CAAC,EAAG,GAAI,GAAI,IAAMA,EACrCS,EAAIwI,EAAE0kB,aACN5kB,OAAAA,IAAetI,EAAI,CAAC,EAAG,GAAI,GAAI,IAAMA,EACrCyV,EAAIjN,EAAEwS,SACN5U,OAAAA,IAAeqP,EAAI,CAAC,EAAIA,EACxB/M,EAAIF,EAAE2kB,UACNC,EAAI5kB,EAAE6kB,6BACN7X,OAAAA,IAAe4X,GAAKA,EACpBtgB,EAAItE,EAAE8kB,cACN3Y,OAAAA,IAAe7H,EAAI,gCAAgCtG,OAAO,QAAS,oBAAsBsG,EAC3F,OAAOE,OAAAA,OAAE,OAAQ,GAAgB,WAC/B,IAAI3E,EAAGG,EAAGjJ,EAAGS,EAAGyV,EAAG2X,EAAGtgB,EAAGygB,EAAGC,EAAG9X,EAAG+X,EAAGC,EAAGC,EAAGC,EAAGhiB,EAAGiiB,EAAG9T,EAAG+T,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAC/E,OAAO7nB,EAAEhM,MAAM,SAAU8zB,GACvB,OAAQA,EAAE5Y,OACR,KAAK,EACH,GAAMtN,EAAI,CAAC,EAAII,EAAI,MAAO,CAAC,EAAG,CAAE+lB,KAAM,EAAG/iB,KAAM,QAC/C,GACIjD,EAAIpC,EAAEumB,OACPptB,OAAAA,IAAeiJ,KAAO,MAAQJ,OAAAA,EAAaA,EAAEukB,QAAUnkB,EACvDxI,EAAIoG,EAAEwmB,SACNnX,OAAAA,IAAezV,KAAO,MAAQoI,OAAAA,EAAaA,EAAEwkB,UAAY5sB,EACzDotB,EAAIhnB,EAAEqoB,WACN3hB,OAAAA,IAAesgB,EAAIpzB,OAAO00B,OAAStB,EACnCG,EAAInnB,EAAEyiB,eACN2E,OAAAA,IACYD,EACP,SAAUllB,GACR,OAAO2E,OAAAA,OAAE,OAAQ,GAAgB,WAC/B,IAAIxE,EACJ,OAAO/B,EAAEhM,MAAM,SAAUuS,GACvB,OAAQA,EAAE2I,OACR,KAAK,EACH,MAAO,CACL,EACAoV,MAAM,GAAGvkB,OAAOmO,EAAG,KAAKnO,OAAO6B,IAAI+M,MAAK,SAAU/M,GAChD,OAAOA,EAAEsmB,MAAAA,KAGf,KAAK,EACH,GAAMnmB,EAAIwE,EAAE4I,OAAStG,SAAS9G,EAAEygB,QAAQ9iB,MAAM,KAAK,GAAI,IAAM,EAC3D,MAAM,IAAI2B,EAAE,yEACd,MAAO,CAAC,EAAGU,GAAAA,GAAAA,GAAAA,EAKrB+kB,EACL7X,EAAItP,EAAEwoB,SACNnB,EAAI,SAAUplB,GACb,IACE,IAAIG,EAAI,EACNwE,EAAIyI,EACA,CAAC,SAAU,QAAS,SAAU,OAAQ,SAAU,WAChD,CAAC,QAAS,QAAS,MAAO,SAAU,SAAU,WACpDjN,EAAIwE,EAAEjO,OACNyJ,IACA,CACA,IAAI/B,EAAIuG,EAAExE,GACV,GAAIH,EAAE8f,SAAS1hB,GAAI,OAAOA,CAAAA,CAAAA,EAG7BinB,EAAI,SAAUllB,GACb,OAAOwE,OAAAA,OAAE,OAAQ,GAAgB,WAC/B,IAAIA,EAAG/E,EAAGU,EAAGF,EAAGL,EAAGmN,EAAG7O,EAAG1G,EAAG+sB,EAAGzkB,EAAGlC,EAAGsC,EAAG0kB,EAAG5X,EAAGb,EAAG4Y,EAAG7X,EAAGgY,EAAGC,EAAGC,EAAGhiB,EAAGiiB,EAAG9T,EAAG+T,EAAGC,EAAGC,EAC/E,OAAOvnB,EAAEhM,MAAM,SAAUgM,GACvB,OAAQA,EAAEkP,OACR,KAAK,EACH,KAAM3I,EAAIygB,EAAEjlB,IAAK,MAAO,CAAC,GACxBP,EAAI,GACFzB,OAAOiP,EAAI,IAAM,IAAK,KACtBjP,OAAOwG,GACPxG,OAAOjH,EAAI,QAAU,GAAI,SACzBoJ,EAAIN,EAAEJ,GAAK,QAAU+lB,EAAI3lB,EAAEJ,UAAAA,IAAkB+lB,EAAIA,EAAIR,EAAEvlB,GACvDxB,EAAEkP,MAAQ,EACf,KAAK,EACH,OAAOlP,EAAEoP,KAAKxZ,KAAK,CAAC,EAAG,EAAJ,CAAS,IAAK,CAAC,EAAGsM,GACvC,KAAK,EACH,OAAQF,EAAIhC,EAAEmP,OAAS,CAAC,EAAG,GAC7B,KAAK,EACH,IAAKxN,EAAI3B,EAAEmP,kBAAmB9N,EAAG,MAAMM,EACvC,MAAO,CAAC,GACV,KAAK,EACH,GACImN,EAAI,SAAWlN,GACf,IAAIG,EACFwE,GACG3E,EAAIA,EAAE3L,QAAQ,YAAa,KAAKkF,MAAM,QACvCyG,EAAEzG,MAAM,gCACZ,OAAO,QAAU4G,EAAI,MAAQwE,OAAAA,EAAaA,EAAEU,KAAK,IAAIhR,QAAQ,UAAW,eAAmB8L,EACvFA,EACA,EAPA,EAQHA,IACF9B,EAAI+B,EAAE+C,QAAO,SAAUnD,GACtB,OAAOA,EAAE,KAAOkN,CAAAA,KACdxW,SACD2H,EAAI+B,EAAE+C,QAAO,SAAUnD,GACtB,OAAOA,EAAE,GAAG8f,SAAS3f,EAAAA,KAEzB,KAAOxI,EAAI0G,EAAE3H,QAEb,MAAO,CAAC,GACV,IACEguB,EACE/sB,EAAI,EACA0G,EACGwF,KAAI,SAAU7D,GACb,MAAO,CAACA,EAAGF,EAAEK,EAAGH,EAAE,QAEnBwmB,MAAK,SAAUxmB,EAAGG,GACjB,OAAOH,EAAE,GAAKG,EAAE,MACf,GAAG,GACR9B,EAAE,GACN4B,EAAIykB,EAAE,GACN3mB,EAAI2mB,EAAE,GACNrkB,EAAIiC,OAAOmkB,UACXtZ,EAAIxb,OAAO+0B,iBACXpa,EAAI7H,EAAEkiB,MAAQxZ,EAAI1I,EAAEmiB,OAASzZ,EAC7B+X,EAAI,EACJ7X,EAAItP,EACNmnB,EAAI7X,EAAE3W,OACNwuB,IAECG,EAAIhY,EAAE6X,GACJI,EAAID,EAAE,GACNE,EAAIF,EAAE,GACN9hB,EAAI+hB,EAAIC,GACRC,EAAInvB,KAAKwwB,IAAIva,EAAI/I,IAAMlD,IAAOA,EAAImlB,EAAKT,EAAIM,GAChD,OAAON,GAAMU,GAAK/T,EAAIqT,GAAG,GAAMW,EAAIhU,EAAE,GAAK,CAAC,EAAG,CAACrR,EAAGolB,EAAGxlB,EAAGylB,KAAO,CAAC,WAKzEJ,EAAI,SAAUtlB,EAAGG,EAAGwE,EAAGvG,EAAGwB,GACzB,MAAO,CAAEknB,OAAQlnB,EAAGmnB,IAAK3oB,EAAG4oB,IAAKriB,EAAG4f,SAAUnX,EAAG+Y,KAAMnmB,EAAGoD,KAAMjD,EAAAA,EAEjEoD,EAAI,GACL8J,EAECA,EAAI/M,EAAE+M,GAAMkY,EAAI,CAAClY,OACf,CACH,KACImY,EACAnlB,GACA,SAAWL,EAAGG,QAAAA,IACDA,IAAMA,GAAAA,GACjB,IAAIwE,EAAI,CACNsiB,OAAAA,EACAC,WAAAA,EACAC,OAAAA,EACAnC,6BAA8B7kB,EAC9BinB,gBAAiB,mBACjBC,SAAAA,GAEFrnB,UAAY2E,EAAEyiB,gBACd,IAAIhpB,EAAIzM,OAAOiG,SAASG,cAAc,UACpC6H,EAAIxB,EAAEkpB,WAAW,QAAS3iB,IAAMvG,EAAEkpB,WAAW,qBAAsB3iB,GACrE,OAAO,MAAQ/E,EAAIA,OAAAA,CAbrB,EAcG,MAAQG,OAAAA,EAAaA,EAAEykB,WAAYrX,IAExC,MAAO,CAAC,EAAGmY,EAAE,EAAG,sBAClB,IACI5T,EAAI8T,EAAE+B,aAAa,gCAAkCla,EAAImY,EAAEgC,aAAa9V,EAAE+V,2BAC3Epa,EAED,MAAO,CAAC,EAAGiY,EAAE,EAAG,aACjB/hB,EAAI8J,EACFA,EAAI/M,EAAE+M,GACNkY,EAAI,SAAWvlB,EAAGG,EAAGwE,GACpB,MAAO,cAAgBxE,EA7RvC,SAAWH,EAAGG,EAAGwE,GACf,IAAKA,EAAG,MAAO,CAACxE,GAChB,IAAI/B,EACFwB,EAAI,SAAWI,GACb,IAIE5B,EAAI4B,EAAE0nB,aAAa,OACnB9nB,EAAII,EAAE0nB,aAAa,OACnBpnB,EAAIN,EAAE2nB,gBACR,GAAM/nB,GAAKxB,GAAKkC,EAAhB,CACAN,EAAE4nB,aAAaxpB,EAPX,kMAQF4B,EAAE4nB,aAAahoB,EANb,oRAOFI,EAAE6nB,cAAczpB,GAChB4B,EAAE6nB,cAAcjoB,GAChBI,EAAE8nB,aAAaxnB,EAAGlC,GAClB4B,EAAE8nB,aAAaxnB,EAAGV,GAClBI,EAAE+nB,YAAYznB,GACdN,EAAEgoB,aAAa1nB,EAAGlC,GAClB4B,EAAEgoB,aAAa1nB,EAAGV,GAClBI,EAAEioB,aAAa7pB,GACf4B,EAAEioB,aAAaroB,GACfI,EAAEkoB,WAAW5nB,GACf,IAAIF,EAAIJ,EAAEmoB,eACVnoB,EAAEooB,WAtCE,MAsCYhoB,GAAIJ,EAAEqoB,WAtClB,MAsCgC,IAAIC,aAAa,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,OACvF,IAAIvoB,EAAIC,EAAEuoB,kBAAkBjoB,EAAG,aAC/BN,EAAEwoB,oBAAoBzoB,EAAG,EAAG,QAAU,EAAG,GACvCC,EAAEyoB,wBAAwB1oB,GAC1BC,EAAE0oB,WAAW,EAAG,EAAG,EAAG,GACtB1oB,EAAE2oB,MAAM,OACR3oB,EAAE4oB,SAAS,EAAG,EAAG,EAAG,GACpB5oB,EAAE6oB,WAAW,EAAG,EAAG,GACrB,IAAI3b,EAAI,IAAI4b,WAAW,GACvB,OAAO9oB,EAAE+oB,WAAW,EAAG,EAAG,EAAG,EAAG,KAAM,KAAM7b,GAAIlN,EAAEgpB,cAAc1oB,GAAIN,EAAEipB,aAAa7oB,GAAI8M,EAAE7H,KAAK,IA/B5F,EAgCDrF,GACHM,EAAI,YACJF,EAAI,aACJ8M,EAAI,cACJ7O,GAAK,MAAQ0B,OAAAA,EAAaA,EAAEukB,QACxB,CACE,CAAC,KAAMpX,EAAG,IACV,CAAC,KAAM9M,EAAG,IACV,CAAC,MAAOA,EAAG,IACX,CAAC,KAAMA,EAAG,IACV,CAAC,MAAOA,EAAG,IACX,CAAC,MAAOA,EAAG,IACX,CAAC,OAAQA,EAAG,IACZ,CAAC,MAAOE,EAAG,IACX,CAAC,OAAQA,EAAG,IACZ,CAAC,OAAQA,EAAG,IACZ,CAAC,MAAOA,EAAG,IACX,CAAC,KAAMA,EAAG,KAEZ,CACE,CAAC,KAAM4M,EAAG,IACV,CAAC,KAAM9M,EAAG,IACV,CAAC,KAAMA,EAAG,IACV,CAAC,MAAOA,EAAG,IACX,CAAC,MAAOE,EAAG,IACX,CAAC,MAAOA,EAAG,IACX,CAAC,MAAOA,EAAG,IACX,CAAC,MAAOA,EAAG,KAEnB,MACE,gBAAkBV,EACbxB,EAAIC,EAAE8E,QAAO,SAAUnD,GACtB,OAAOA,EAAE,IAAM,OAEhB5B,EAAIC,EAAE8E,QAAO,SAAUnD,GACtB,OAAOA,EAAE,KAAOJ,CAAAA,KACdlJ,SAAW0H,EAAIC,GACvBD,EAAEyF,KAAI,SAAU7D,GACd,IAAIG,EAAIH,EAAE,GACV,MAAO,SAAS7B,OAAOgC,EAAG,UAIhC,CA+M2C+M,CAAElN,EAAGG,EAAGwE,GAAK,CAACxE,EADtC,EAEFqlB,EAAGnY,EAAGD,EAEb,OAAO,CAAC,EAAGZ,QAAQ0c,IAAI3D,EAAE1hB,IAAIwhB,KAC/B,KAAK,EACH,KACII,EAAIS,EAAE3Y,OACLpK,OAAOuhB,GACP8B,MAAK,SAAUxmB,EAAGG,GACjB,IAAIwE,EAAI3E,EAAE,GACR5B,OAAAA,IAAeuG,EAAIrC,OAAOmkB,UAAY9hB,EACtC/E,EAAII,EAAE,GACNM,EAAIH,EAAE,GACNjJ,OAAAA,IAAeoJ,EAAIgC,OAAOmkB,UAAYnmB,EACtCF,EAAID,EAAE,GACR,OAAO/B,IAAMlH,EAAI0I,EAAIQ,EAAIhC,EAAIlH,CAAAA,KAC3BR,OAEN,MAAO,CACL,GACCgvB,EAAI9lB,EAAEiH,MAAK,SAAU7G,GACpB,OAAOqN,EAAEyS,SAAS9f,EAAAA,KAEhBslB,EAAE,EAAG,cAAeI,GACpBJ,EAAE,EAAG,WAAY,GAAGnnB,OAAOkP,EAAG,MAAMlP,OAAOoF,EAAG,OAEtD,GAAMoiB,EAAIF,EAAE,GAAMG,EAAID,EAAE,GAAME,EAAIF,EAAE,GAAMG,EAAIH,EAAE,IAAM,IAAMC,EAAI,MAAO,CAAC,EAAGN,EAAE,EAAG,cAAeO,EAAGD,EAAGE,IACrG,IAAKC,EAAI3Y,EAAI/O,EAAI4B,EAAG+lB,EAAI,EAAGC,EAAI,EAAGA,EAAIF,EAAErvB,OAAQuvB,IAAKL,GAAKG,EAAEE,KAAOD,EAAIC,GACvE,MAAO,CAAC,EAAGX,EAAEU,EAAG,YAAaH,EAAGD,EAAGE,IAAAA,GAAAA,GAAAA,EAK3Cj0B,OAAOwc,eAAerO,EAAG,aAAc,CAAE/F,OAAAA,GAjgBvCkG,CAIG,CAJD/O,EAAAA,0xtNCFR,IAAIyS,EAAM,CACT,kBAAmB,IACnB,eAAgB,IAChB,iBAAkB,IAClB,mBAAoB,IACpB,iBAAkB,IAClB,kBAAmB,IACnB,kBAAmB,IACnB,kBAAmB,IACnB,sBAAuB,IACvB,iBAAkB,IAClB,iBAAkB,IAClB,kBAAmB,IACnB,gBAAiB,IACjB,kBAAmB,IACnB,mBAAoB,KAIrB,SAASslB,EAAeC,GACvB,IAAI5qB,EAAK6qB,EAAsBD,GAC/B,OAAOE,EAAoB9qB,EAE5B,UAAS6qB,EAAsBD,GAC9B,IAAIE,EAAoB1pB,EAAEiE,EAAKulB,GAAM,CACpC,IAAIppB,EAAI,IAAIrL,MAAM,uBAAyBy0B,EAAM,KAEjD,MADAppB,EAAE+T,KAAO,mBACH/T,CAEP,QAAO6D,EAAIulB,EAEZD,CAAAA,EAAezuB,KAAO,WACrB,OAAO7I,OAAO6I,KAAKmJ,EAAAA,EAEpBslB,EAAe1c,QAAU4c,EACzBh4B,EAAOD,QAAU+3B,EACjBA,EAAe3qB,GAAK,GALpB2qB,gBC/BA,IAAI,EAAJ,aACE,SAASvpB,EAAEA,EAAGO,GACZ,IAAK/B,EAAEwB,GAAI,CACTxB,EAAEwB,GAAK,CAAC,EACR,IAAK,IAAI+E,EAAI,EAAGA,EAAI/E,EAAElJ,OAAQiO,IAAKvG,EAAEwB,GAAGA,EAAE2pB,OAAO5kB,IAAMA,CAEzD,QAAOvG,EAAEwB,GAAGO,EAEd,KAAIA,EAAIkC,OAAOmnB,aACb7kB,EAAI,oEACJ3E,EAAI,oEACJ5B,EAAI,CAAC,EACLlH,EAAI,CACFuyB,iBAAkB,SAAU7pB,GAC1B,GAAI,MAAQA,EAAG,MAAO,GACtB,IAAIO,EAAIjJ,EAAEwyB,UAAU9pB,EAAG,GAAG,SAAUA,GAClC,OAAO+E,EAAE4kB,OAAO3pB,EAAAA,IAElB,OAAQO,EAAEzJ,OAAS,GACjB,QACA,KAAK,EACH,OAAOyJ,EACT,KAAK,EACH,OAAOA,EAAI,MACb,KAAK,EACH,OAAOA,EAAI,KACb,KAAK,EACH,OAAOA,EAAI,MAGjBwpB,qBAAsB,SAAUxpB,GAC9B,OAAO,MAAQA,EACX,GACA,IAAMA,EACN,KACAjJ,EAAE0yB,YAAYzpB,EAAEzJ,OAAQ,IAAI,SAAUsJ,GACpC,OAAOJ,EAAE+E,EAAGxE,EAAEopB,OAAOvpB,GAAAA,GAAAA,EAG7B6pB,gBAAiB,SAAUjqB,GACzB,OAAO,MAAQA,EACX,GACA1I,EAAEwyB,UAAU9pB,EAAG,IAAI,SAAUA,GAC3B,OAAOO,EAAEP,EAAI,OACV,KAEXkqB,oBAAqB,SAAUlqB,GAC7B,OAAO,MAAQA,EACX,GACA,IAAMA,EACN,KACA1I,EAAE0yB,YAAYhqB,EAAElJ,OAAQ,OAAO,SAAUyJ,GACvC,OAAOP,EAAE6kB,WAAWtkB,GAAK,OAGjC4pB,qBAAsB,SAAUnqB,GAC9B,IACE,IAAIO,EAAIjJ,EAAE8yB,SAASpqB,GAAI+E,EAAI,IAAImkB,WAAW,EAAI3oB,EAAEzJ,QAASsJ,EAAI,EAAG5B,EAAI+B,EAAEzJ,OACtE0H,EAAI4B,EACJA,IACA,CACA,IAAIF,EAAIK,EAAEskB,WAAWzkB,GACpB2E,EAAE,EAAI3E,GAAKF,IAAM,EAAK6E,EAAE,EAAI3E,EAAI,GAAKF,EAAI,GAE5C,QAAO6E,CAAAA,EAETslB,yBAA0B,SAAUrqB,GAClC,GAAI,MAASA,EAAmB,OAAO1I,EAAEgzB,WAAWtqB,GACpD,IAAK,IAAI+E,EAAI,IAAItH,MAAMuC,EAAElJ,OAAS,GAAIsJ,EAAI,EAAG5B,EAAIuG,EAAEjO,OAAQ0H,EAAI4B,EAAGA,IAChE2E,EAAE3E,GAAK,IAAMJ,EAAE,EAAII,GAAKJ,EAAE,EAAII,EAAI,GACpC,IAAIF,EAAI,GACR,OACE6E,EAAEnP,SAAQ,SAAUoK,GAClBE,EAAE9L,KAAKmM,EAAEP,GAAAA,IAEX1I,EAAEgzB,WAAWpqB,EAAEuF,KAAK,MAGxBie,8BAA+B,SAAU1jB,GACvC,OAAO,MAAQA,EACX,GACA1I,EAAEwyB,UAAU9pB,EAAG,GAAG,SAAUA,GAC1B,OAAOI,EAAEupB,OAAO3pB,EAAAA,GAAAA,EAGxBuqB,kCAAmC,SAAUhqB,GAC3C,OAAO,MAAQA,EACX,GACA,IAAMA,EACN,MACEA,EAAIA,EAAE9L,QAAQ,KAAM,KACtB6C,EAAE0yB,YAAYzpB,EAAEzJ,OAAQ,IAAI,SAAUiO,GACpC,OAAO/E,EAAEI,EAAGG,EAAEopB,OAAO5kB,GAAAA,IAAAA,EAG7BqlB,SAAU,SAAUpqB,GAClB,OAAO1I,EAAEwyB,UAAU9pB,EAAG,IAAI,SAAUA,GAClC,OAAOO,EAAEP,EAAAA,GAAAA,EAGb8pB,UAAW,SAAU9pB,EAAGO,EAAGwE,GACzB,GAAI,MAAQ/E,EAAG,MAAO,GACtB,IAAII,EACF5B,EACAlH,EACA4I,EAAI,CAAC,EACLG,EAAI,CAAC,EACLF,EAAI,GACJK,EAAI,GACJE,EAAI,GACJjC,EAAI,EACJ6O,EAAI,EACJwX,EAAI,EACJ/sB,EAAI,GACJoG,EAAI,EACJ0B,EAAI,EACN,IAAKvI,EAAI,EAAGA,EAAI0I,EAAElJ,OAAQQ,GAAK,EAC7B,GACI6I,EAAIH,EAAE2pB,OAAOryB,GACfrF,OAAO+C,UAAUgF,eAAeC,KAAKiG,EAAGC,KAAQD,EAAEC,GAAKmN,IAAOjN,EAAEF,IAAAA,GAC/DK,EAAIE,EAAIP,EACTlO,OAAO+C,UAAUgF,eAAeC,KAAKiG,EAAGM,GAExCE,EAAIF,MACD,CACH,GAAIvO,OAAO+C,UAAUgF,eAAeC,KAAKoG,EAAGK,GAAI,CAC9C,GAAIA,EAAEmkB,WAAW,GAAK,IAAK,CACzB,IAAKzkB,EAAI,EAAG0kB,EAAI1kB,EAAGA,IAChBjC,IAAM,EAAI0B,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC7D,IAAKrB,EAAIkC,EAAEmkB,WAAW,GAAIzkB,EAAI,EAAG,EAAIA,EAAGA,IACrCjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,MACN,CACL,IAAKA,EAAI,EAAG4B,EAAI,EAAG0kB,EAAI1kB,EAAGA,IACvBjC,EAAKA,GAAK,EAAKK,EAAIqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAAMrB,EAAI,EAChF,IAAKA,EAAIkC,EAAEmkB,WAAW,GAAIzkB,EAAI,EAAG,GAAKA,EAAGA,IACtCjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,CAER,MAALC,IAAiBA,EAAIhI,KAAK+zB,IAAI,EAAG1F,GAAKA,YAAazkB,EAAEK,EAAAA,MAErD,IAAKlC,EAAI0B,EAAEQ,GAAIN,EAAI,EAAG0kB,EAAI1kB,EAAGA,IAC1BjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,EACR,KAALC,IAAiBA,EAAIhI,KAAK+zB,IAAI,EAAG1F,GAAKA,KAAO5kB,EAAEM,GAAK8M,IAAO5M,EAAI+B,OAAOtC,EAE1E,IAAI,KAAOO,EAAG,CACZ,GAAIzO,OAAO+C,UAAUgF,eAAeC,KAAKoG,EAAGK,GAAI,CAC9C,GAAIA,EAAEmkB,WAAW,GAAK,IAAK,CACzB,IAAKzkB,EAAI,EAAG0kB,EAAI1kB,EAAGA,IAChBjC,IAAM,EAAI0B,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC7D,IAAKrB,EAAIkC,EAAEmkB,WAAW,GAAIzkB,EAAI,EAAG,EAAIA,EAAGA,IACrCjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,MACN,CACL,IAAKA,EAAI,EAAG4B,EAAI,EAAG0kB,EAAI1kB,EAAGA,IACvBjC,EAAKA,GAAK,EAAKK,EAAIqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAAMrB,EAAI,EAChF,IAAKA,EAAIkC,EAAEmkB,WAAW,GAAIzkB,EAAI,EAAG,GAAKA,EAAGA,IACtCjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,CAER,MAALC,IAAiBA,EAAIhI,KAAK+zB,IAAI,EAAG1F,GAAKA,YAAazkB,EAAEK,EAAAA,MAErD,IAAKlC,EAAI0B,EAAEQ,GAAIN,EAAI,EAAG0kB,EAAI1kB,EAAGA,IAC1BjC,EAAKA,GAAK,EAAM,EAAIK,EACnBqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAC/CrB,IAAM,EACR,KAALC,IAAiBA,EAAIhI,KAAK+zB,IAAI,EAAG1F,GAAKA,IAExC,KAAKtmB,EAAI,EAAG4B,EAAI,EAAG0kB,EAAI1kB,EAAGA,IACvBjC,EAAKA,GAAK,EAAM,EAAIK,EAAKqB,GAAKU,EAAI,GAAMV,EAAI,EAAI9H,EAAE3D,KAAK2Q,EAAE5G,IAAMA,EAAI,GAAM0B,IAAMrB,IAAM,EACxF,OAAS,CACP,GAAML,IAAM,EAAI0B,GAAKU,EAAI,EAAI,CAC3BxI,EAAE3D,KAAK2Q,EAAE5G,IACT,KAEF0B,CAAAA,GAEF,QAAO9H,EAAE0N,KAAK,KAEhB6kB,WAAY,SAAUtqB,GACpB,OAAO,MAAQA,EACX,GACA,IAAMA,EACN,KACA1I,EAAE0yB,YAAYhqB,EAAElJ,OAAQ,OAAO,SAAUyJ,GACvC,OAAOP,EAAE6kB,WAAWtkB,EAAAA,GAAAA,EAG5BypB,YAAa,SAAUhqB,EAAG+E,EAAG3E,GAC3B,IACE9I,EACA4I,EACAG,EACAF,EACAK,EACAE,EACAjC,EACA6O,EAAI,GACJwX,EAAI,EACJ/sB,EAAI,EACJoG,EAAI,EACJ0B,EAAI,GACJslB,EAAI,GACJG,EAAI,CAAEmF,IAAKrqB,EAAE,GAAIsqB,SAAU3lB,EAAG+D,MAAO,GACvC,IAAKxR,EAAI,EAAG,EAAIA,EAAGA,GAAK,EAAGgW,EAAEhW,GAAKA,EAClC,IAAK+I,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAG,GAAI9pB,EAAI,EAAGA,GAAKF,GACzCL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACX,OAAaL,GACX,KAAK,EACH,IAAKA,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAG,GAAI9pB,EAAI,EAAGA,GAAKF,GACzCL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACXjC,EAAI8B,EAAEF,GACN,MACF,KAAK,EACH,IAAKA,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAG,IAAK9pB,EAAI,EAAGA,GAAKF,GAC1CL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACXjC,EAAI8B,EAAEF,GACN,MACF,KAAK,EACH,MAAO,GAEX,IAAKiN,EAAE,GAAK7O,EAAGyB,EAAIzB,EAAG0mB,EAAE/wB,KAAKqK,KAAQ,CACnC,GAAI6mB,EAAExc,MAAQ9I,EAAG,MAAO,GACxB,IAAKK,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAGrsB,GAAIuC,EAAI,EAAGA,GAAKF,GACzCL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACX,OAASjC,EAAI4B,GACX,KAAK,EACH,IAAKA,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAG,GAAI9pB,EAAI,EAAGA,GAAKF,GACzCL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACV4M,EAAEvV,KAAOwI,EAAEF,GAAM5B,EAAI1G,EAAI,EAAI+sB,IAC9B,MACF,KAAK,EACH,IAAKzkB,EAAI,EAAGG,EAAI/J,KAAK+zB,IAAI,EAAG,IAAK9pB,EAAI,EAAGA,GAAKF,GAC1CL,EAAImlB,EAAEmF,IAAMnF,EAAEoF,SACZpF,EAAEoF,WAAa,EAChB,GAAKpF,EAAEoF,WAAcpF,EAAEoF,SAAW3lB,EAAKugB,EAAEmF,IAAMrqB,EAAEklB,EAAExc,UAClDzI,IAAMF,EAAI,EAAI,EAAI,GAAKO,EACvBA,IAAM,EACV4M,EAAEvV,KAAOwI,EAAEF,GAAM5B,EAAI1G,EAAI,EAAI+sB,IAC9B,MACF,KAAK,EACH,OAAOK,EAAE1f,KAAK,IAElB,GAAK,GAAKqf,IAAOA,EAAIruB,KAAK+zB,IAAI,EAAGrsB,GAAKA,KAAMmP,EAAE7O,GAAKoB,EAAIyN,EAAE7O,OACpD,CACH,GAAIA,IAAM1G,EAAG,OAAO,KACpB8H,EAAIK,EAAIA,EAAEypB,OAAO,EAEnBxE,CAAAA,EAAE/wB,KAAKyL,GACJyN,EAAEvV,KAAOmI,EAAIL,EAAE8pB,OAAO,GAEtBzpB,EAAIL,EACL,KAFAilB,IAEYA,EAAIruB,KAAK+zB,IAAI,EAAGrsB,GAAKA,IAAAA,CAAAA,GAI3C,OAAO7G,CA1RT,cA6RI,aACE,OAAO6rB,CAAAA,EACR,6BA/RL,GCCIwH,EAA2B,CAAC,EAGhC,SAASjB,EAAoBkB,GAE5B,GAAGD,EAAyBC,GAC3B,OAAOD,EAAyBC,GAAUp5B,QAG3C,IAAIC,EAASk5B,EAAyBC,GAAY,CAGjDp5B,QAAS,CAAC,GAOX,OAHAq5B,EAAoBD,GAAU3wB,KAAKxI,EAAOD,QAASC,EAAQA,EAAOD,QAASk4B,GAGpEj4B,EAAOD,OCjBf,QCHAk4B,EAAoB1pB,EAAI,CAACxG,EAAKsxB,IAAU74B,OAAO+C,UAAUgF,eAAeC,KAAKT,EAAKsxB,GDG3EpB,EAAoB,MbO3B,GaP2B,mCED3Bl4B,EAAQu5B,WAuCR,SAAqBC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,CACjD,EA3CD55B,EAAQ65B,YAiDR,SAAsBL,GACpB,IAAIM,EAcAh0B,EAbA2zB,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBp0B,EAAM,IAAI00B,EAVhB,SAAsBP,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,CACjD,CAQmBI,CAAYR,EAAKG,EAAUC,IAEzCK,EAAU,EAGVv0B,EAAMk0B,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK7zB,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EACxBg0B,EACGI,EAAUV,EAAInG,WAAWvtB,KAAO,GAChCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,KAAO,GACpCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,KAAO,EACrCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,IAC/BT,EAAI40B,KAAcH,GAAO,GAAM,IAC/Bz0B,EAAI40B,KAAcH,GAAO,EAAK,IAC9Bz0B,EAAI40B,KAAmB,IAANH,EAmBnB,OAhBwB,IAApBF,IACFE,EACGI,EAAUV,EAAInG,WAAWvtB,KAAO,EAChCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,KAAO,EACvCT,EAAI40B,KAAmB,IAANH,GAGK,IAApBF,IACFE,EACGI,EAAUV,EAAInG,WAAWvtB,KAAO,GAChCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,KAAO,EACpCo0B,EAAUV,EAAInG,WAAWvtB,EAAI,KAAO,EACvCT,EAAI40B,KAAcH,GAAO,EAAK,IAC9Bz0B,EAAI40B,KAAmB,IAANH,GAGZz0B,CACR,EA5FDrF,EAAQm6B,cAkHR,SAAwBC,GAQtB,IAPA,IAAIN,EACAp0B,EAAM00B,EAAM90B,OACZ+0B,EAAa30B,EAAM,EACnBiN,EAAQ,GACR2nB,EAAiB,MAGZx0B,EAAI,EAAGy0B,EAAO70B,EAAM20B,EAAYv0B,EAAIy0B,EAAMz0B,GAAKw0B,EACtD3nB,EAAM/P,KAAK43B,EACTJ,EAAOt0B,EAAIA,EAAIw0B,EAAkBC,EAAOA,EAAQz0B,EAAIw0B,IAsBxD,OAjBmB,IAAfD,GACFP,EAAMM,EAAM10B,EAAM,GAClBiN,EAAM/P,KACJ63B,EAAOX,GAAO,GACdW,EAAQX,GAAO,EAAK,IACpB,OAEsB,IAAfO,IACTP,GAAOM,EAAM10B,EAAM,IAAM,GAAK00B,EAAM10B,EAAM,GAC1CiN,EAAM/P,KACJ63B,EAAOX,GAAO,IACdW,EAAQX,GAAO,EAAK,IACpBW,EAAQX,GAAO,EAAK,IACpB,MAIGnnB,EAAMsB,KAAK,GACnB,EA5ID,IALA,IAAIwmB,EAAS,GACTP,EAAY,GACZH,EAA4B,oBAAfrC,WAA6BA,WAAazrB,MAEvD0W,EAAO,mEACF7c,EAAI,EAAGJ,EAAMid,EAAKrd,OAAQQ,EAAIJ,IAAOI,EAC5C20B,EAAO30B,GAAK6c,EAAK7c,GACjBo0B,EAAUvX,EAAK0Q,WAAWvtB,IAAMA,EAQlC,SAAS4zB,EAASF,GAChB,IAAI9zB,EAAM8zB,EAAIl0B,OAEd,GAAII,EAAM,EAAI,EACZ,MAAM,IAAInC,MAAM,kDAKlB,IAAIo2B,EAAWH,EAAI/tB,QAAQ,KAO3B,OANkB,IAAdkuB,IAAiBA,EAAWj0B,GAMzB,CAACi0B,EAJcA,IAAaj0B,EAC/B,EACA,EAAKi0B,EAAW,EAGrB,CAmED,SAASa,EAAaJ,EAAO3vB,EAAOiwB,GAGlC,IAFA,IAAIZ,EARoB7K,EASpB0L,EAAS,GACJ70B,EAAI2E,EAAO3E,EAAI40B,EAAK50B,GAAK,EAChCg0B,GACIM,EAAMt0B,IAAM,GAAM,WAClBs0B,EAAMt0B,EAAI,IAAM,EAAK,QACP,IAAfs0B,EAAMt0B,EAAI,IACb60B,EAAO/3B,KAdF63B,GADiBxL,EAeM6K,IAdT,GAAK,IACxBW,EAAOxL,GAAO,GAAK,IACnBwL,EAAOxL,GAAO,EAAI,IAClBwL,EAAa,GAANxL,IAaT,OAAO0L,EAAO1mB,KAAK,GACpB,CAlGDimB,EAAU,IAAI7G,WAAW,IAAM,GAC/B6G,EAAU,IAAI7G,WAAW,IAAM,qBCnBkCpzB,EAAOD,QAAiJ,SAAS4O,GAAG,IAAI5B,EAAE,CAAC,EAAE,SAAS+B,EAAEjJ,GAAG,GAAGkH,EAAElH,GAAG,OAAOkH,EAAElH,GAAG9F,QAAQ,IAAIuT,EAAEvG,EAAElH,GAAG,CAACA,EAAImH,GAAE,EAAGjN,QAAQ,CAAC,GAAG,OAAO4O,EAAE9I,GAAG2C,KAAK8K,EAAEvT,QAAQuT,EAAEA,EAAEvT,QAAQ+O,GAAGwE,EAAEtG,GAAE,EAAGsG,EAAEvT,OAAQ,QAAO+O,EAAEpC,EAAEiC,EAAEG,EAAEC,EAAEhC,EAAE+B,EAAExI,EAAE,SAASqI,EAAE5B,EAAElH,GAAGiJ,EAAEP,EAAEI,EAAE5B,IAAIvM,OAAOwc,eAAerO,EAAE5B,EAAE,CAAC4tB,YAAW,EAAGzV,IAAIrf,GAAI,EAACiJ,EAAEA,EAAE,SAASH,GAAG,oBAAoB2N,QAAQA,OAAOse,aAAap6B,OAAOwc,eAAerO,EAAE2N,OAAOse,YAAY,CAAChyB,MAAM,WAAWpI,OAAOwc,eAAerO,EAAE,aAAa,CAAC/F,OAAM,GAAK,EAACkG,EAAE/B,EAAE,SAAS4B,EAAE5B,GAAG,GAAG,EAAEA,IAAI4B,EAAEG,EAAEH,IAAI,EAAE5B,EAAE,OAAO4B,EAAE,GAAG,EAAE5B,GAAG,iBAAiB4B,GAAGA,GAAGA,EAAEksB,WAAW,OAAOlsB,EAAE,IAAI9I,EAAErF,OAAO8yB,OAAO,MAAM,GAAGxkB,EAAEA,EAAEjJ,GAAGrF,OAAOwc,eAAenX,EAAE,UAAU,CAAC80B,YAAW,EAAG/xB,MAAM+F,IAAI,EAAE5B,GAAG,iBAAiB4B,EAAE,IAAI,IAAI2E,KAAK3E,EAAEG,EAAExI,EAAET,EAAEyN,EAAE,SAASvG,GAAG,OAAO4B,EAAE5B,EAAG,EAACnJ,KAAK,KAAK0P,IAAI,OAAOzN,CAAE,EAACiJ,EAAEwE,EAAE,SAAS3E,GAAG,IAAI5B,EAAE4B,GAAGA,EAAEksB,WAAW,WAAW,OAAOlsB,EAAE6L,OAAQ,EAAC,WAAW,OAAO7L,CAAE,EAAC,OAAOG,EAAExI,EAAEyG,EAAE,IAAIA,GAAGA,CAAE,EAAC+B,EAAEP,EAAE,SAASI,EAAE5B,GAAG,OAAOvM,OAAO+C,UAAUgF,eAAeC,KAAKmG,EAAE5B,EAAG,EAAC+B,EAAEF,EAAE,GAAGE,EAAEA,EAAEL,EAAE,GAAI,CAAr5B,CAAs5B,CAAC,GAAG,SAASE,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEiJ,EAAE,IAAIwE,EAAE,WAAW,SAAS3E,IAAK,QAAOA,EAAEmsB,cAAc,SAASnsB,EAAE5B,GAAG,IAAI+B,EAAE/B,EAAE7E,MAAMyG,GAAG,OAAOG,GAAGA,EAAEzJ,OAAO,GAAGyJ,EAAE,IAAI,EAAG,EAACH,EAAEosB,eAAe,SAASpsB,EAAE5B,GAAG,IAAI+B,EAAE/B,EAAE7E,MAAMyG,GAAG,OAAOG,GAAGA,EAAEzJ,OAAO,GAAGyJ,EAAE,IAAI,EAAG,EAACH,EAAEqsB,oBAAoB,SAASrsB,EAAE5B,EAAE+B,GAAG,GAAGH,EAAE+C,KAAK3E,GAAG,OAAO+B,CAAE,EAACH,EAAEssB,sBAAsB,SAAStsB,GAAG,OAAOA,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAA0C,IAAI,SAAS,MAAM,KAA7C,IAAI,SAAS,MAAM,OAA+B,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,MAAM,IAAI,UAAU,MAAM,KAAK,QAAQ,OAAQ,EAACA,EAAEusB,oBAAoB,SAASvsB,GAAG,IAAI5B,EAAE4B,EAAElC,MAAM,KAAKd,OAAO,EAAE,GAAG6G,KAAK,SAAS7D,GAAG,OAAOiH,SAASjH,EAAE,KAAK,CAAE,IAAG,GAAG5B,EAAEpK,KAAK,GAAG,KAAKoK,EAAE,GAAG,OAAOA,EAAE,IAAI,KAAK,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM,eAAe,KAAK,EAAE,MAAM,OAAO,KAAK,EAAE,MAAM,gBAAgB,KAAK,EAAE,MAAM,YAAY,KAAK,GAAG,MAAM,WAAW,KAAK,GAAG,MAAM,aAAa,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,WAAW,QAAQ,OAAQ,EAAC4B,EAAEwsB,sBAAsB,SAASxsB,GAAG,IAAI5B,EAAE4B,EAAElC,MAAM,KAAKd,OAAO,EAAE,GAAG6G,KAAK,SAAS7D,GAAG,OAAOiH,SAASjH,EAAE,KAAK,CAAE,IAAG,GAAG5B,EAAEpK,KAAK,KAAK,IAAIoK,EAAE,IAAIA,EAAE,GAAG,GAAG,OAAO,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,UAAU,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,SAAS,IAAIA,EAAE,IAAI,IAAIA,EAAE,GAAG,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,cAAc,IAAIA,EAAE,GAAG,YAAY,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,qBAAqB,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,aAAa,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,SAAS,IAAIA,EAAE,GAAG,WAAW,IAAIA,EAAE,GAAG,cAAc,IAAIA,EAAE,GAAG,SAAS,IAAIA,EAAE,GAAG,OAAO,IAAIA,EAAE,GAAG,WAAM,CAAO,EAAC4B,EAAEysB,oBAAoB,SAASzsB,GAAG,OAAOA,EAAElC,MAAM,KAAKpH,MAAO,EAACsJ,EAAE0sB,gBAAgB,SAAStuB,EAAE+B,EAAEjJ,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIyN,EAAE3E,EAAEysB,oBAAoBruB,GAAG0B,EAAEE,EAAEysB,oBAAoBtsB,GAAGP,EAAEvJ,KAAKD,IAAIuO,EAAE7E,GAAGQ,EAAE,EAAEP,EAAEC,EAAE6D,IAAI,CAACzF,EAAE+B,IAAI,SAAS/B,GAAG,IAAI+B,EAAEP,EAAEI,EAAEysB,oBAAoBruB,GAAGlH,EAAEkH,EAAE,IAAIf,MAAM8C,EAAE,GAAGkF,KAAK,MAAM,OAAOrF,EAAE6D,IAAI3M,EAAE4G,MAAM,MAAM,SAASkC,GAAG,OAAO,IAAI3C,MAAM,GAAG2C,EAAEtJ,QAAQ2O,KAAK,KAAKrF,CAAE,IAAG2sB,SAAU,IAAG,IAAIz1B,IAAIoJ,EAAEV,EAAEvJ,KAAKF,IAAIwO,EAAE7E,IAAIF,GAAG,EAAEA,GAAGU,GAAG,CAAC,GAAGP,EAAE,GAAGH,GAAGG,EAAE,GAAGH,GAAG,OAAO,EAAE,GAAGG,EAAE,GAAGH,KAAKG,EAAE,GAAGH,GAAG,CAAC,GAAGA,IAAIU,EAAE,OAAO,EAAEV,GAAG,CAAE,MAAK,GAAGG,EAAE,GAAGH,GAAGG,EAAE,GAAGH,GAAG,OAAO,CAAE,CAAC,EAACI,EAAE6D,IAAI,SAAS7D,EAAE5B,GAAG,IAAI+B,EAAEjJ,EAAE,GAAG,GAAGmG,MAAMzI,UAAUiP,IAAI,OAAOxG,MAAMzI,UAAUiP,IAAIhK,KAAKmG,EAAE5B,GAAG,IAAI+B,EAAE,EAAEA,EAAEH,EAAEtJ,OAAOyJ,GAAG,EAAEjJ,EAAElD,KAAKoK,EAAE4B,EAAEG,KAAK,OAAOjJ,CAAE,EAAC8I,EAAE4sB,gBAAgB,SAAS5sB,GAAG,OAAO9I,EAAE21B,oBAAoB7sB,EAAG,EAACA,EAAE8sB,sBAAsB,SAAS9sB,GAAG,OAAO9I,EAAE61B,YAAY/sB,IAAI,EAAG,EAACA,CAAE,CAAxvE,GAA2vE5B,EAAEyN,QAAQlH,EAAE3E,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAE4uB,WAAW5uB,EAAE6uB,OAAO7uB,EAAE8uB,cAAc9uB,EAAE2uB,YAAY3uB,EAAEyuB,yBAAoB,EAAOzuB,EAAEyuB,oBAAoB,CAAC,cAAc,cAAc,kBAAkB,UAAUM,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAU,gBAAgB,gBAAgBC,UAAU,YAAY,oBAAoB,KAAK,WAAW,WAAWC,QAAQ,UAAU,iBAAiB,OAAO,aAAa,KAAK,sBAAsB,QAAQC,MAAM,QAAQ,cAAc,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,KAAKC,OAAO,SAASC,OAAO,SAASC,SAAS,WAAW,+BAA+B,mBAAmBC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQ,aAAa,KAAKC,QAAQ,UAAU,gBAAgB,QAAQC,OAAO,SAAS,iBAAiB,SAASC,KAAK,QAAQvwB,EAAE2uB,YAAY,CAAC6B,YAAY,cAAcC,QAAQ,kBAAkBC,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAUC,UAAU,YAAYC,cAAc,gBAAgBC,GAAG,oBAAoBC,SAAS,WAAWC,QAAQ,UAAUC,KAAK,iBAAiBC,GAAG,aAAaC,MAAM,sBAAsBC,MAAM,QAAQC,YAAY,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,aAAaC,OAAO,kBAAkBC,OAAO,SAASC,SAAS,WAAWC,iBAAiB,+BAA+BC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQC,GAAG,aAAaC,QAAQ,UAAUC,MAAM,gBAAgBC,OAAO,SAASC,OAAO,kBAAkB5yB,EAAE8uB,cAAc,CAAC+D,OAAO,SAASC,OAAO,SAASC,QAAQ,UAAUC,GAAG,MAAMhzB,EAAE6uB,OAAO,CAACoE,aAAa,gBAAgBC,QAAQ,UAAUC,MAAM,QAAQC,IAAI,MAAMC,QAAQ,UAAUC,MAAM,QAAQtE,WAAW,aAAaD,KAAK,OAAOqB,MAAM,QAAQmD,MAAM,QAAQC,SAAS,YAAYC,aAAa,gBAAgBlD,KAAK,QAAQvwB,EAAE4uB,WAAW,CAAC8E,SAAS,WAAWC,MAAM,QAAQC,QAAQ,UAAUC,OAAO,SAASC,MAAM,QAAQC,OAAO,SAAU,EAAC,GAAG,SAASnyB,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEyN,GAAGzN,EAAEiJ,EAAE,MAAMjJ,EAAEg1B,WAAWh1B,EAAE,CAAC2U,QAAQ3U,GAAG4I,EAAEK,EAAE,IAAI,SAASP,EAAEI,EAAE5B,GAAG,IAAI,IAAI+B,EAAE,EAAEA,EAAE/B,EAAE1H,OAAOyJ,IAAI,CAAC,IAAIjJ,EAAEkH,EAAE+B,GAAGjJ,EAAE80B,WAAW90B,EAAE80B,aAAY,EAAG90B,EAAEk7B,cAAa,EAAG,UAAUl7B,IAAIA,EAAEm7B,UAAS,GAAIxgC,OAAOwc,eAAerO,EAAE9I,EAAE8C,IAAI9C,EAAG,CAAC,KAAIoJ,EAAE,WAAW,SAASN,IAAK,KAAI5B,EAAIlH,EAAE,OAAO8I,EAAEsyB,UAAU,SAAStyB,EAAE5B,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,iBAAiB4B,EAAE,MAAM,IAAIrL,MAAM,gCAAgC,OAAO,IAAIgQ,EAAEkH,QAAQ7L,EAAE5B,EAAG,EAAC4B,EAAElH,MAAM,SAASkH,GAAG,OAAO,IAAI2E,EAAEkH,QAAQ7L,GAAGuyB,WAAY,EAACn0B,EAAE4B,EAAE9I,EAAE,CAAC,CAAC8C,IAAI,cAAcuc,IAAI,WAAW,OAAOzW,EAAEitB,WAAY,GAAE,CAAC/yB,IAAI,aAAauc,IAAI,WAAW,OAAOzW,EAAEktB,UAAW,GAAE,CAAChzB,IAAI,SAASuc,IAAI,WAAW,OAAOzW,EAAEmtB,MAAO,GAAE,CAACjzB,IAAI,gBAAgBuc,IAAI,WAAW,OAAOzW,EAAEotB,aAAc,IAAM,MAAOttB,EAAExB,EAAExJ,UAAX,MAAwBsC,GAAG0I,EAAExB,EAAElH,GAAG8I,CAAE,CAA5f,GAA+f5B,EAAEyN,QAAQvL,EAAEN,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAE6I,EAAEI,EAAE,KAAKwE,EAAE5E,EAAEI,EAAE,KAAKL,EAAEC,EAAEI,EAAE,KAAKP,EAAEG,EAAEI,EAAE,KAAKG,EAAEP,EAAEI,EAAE,KAAK,SAASJ,EAAEC,GAAG,OAAOA,GAAGA,EAAEksB,WAAWlsB,EAAE,CAAC6L,QAAQ7L,EAAG,KAAIrI,EAAE,WAAW,SAASqI,EAAEA,EAAE5B,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,MAAM4B,GAAG,KAAKA,EAAE,MAAM,IAAIrL,MAAM,sCAAsCvC,KAAKogC,IAAIxyB,EAAE5N,KAAKqgC,aAAa,CAAC,GAAE,IAAKr0B,GAAGhM,KAAK0G,OAAQ,KAAIsF,EAAE4B,EAAEpL,UAAU,OAAOwJ,EAAEs0B,MAAM,WAAW,OAAOtgC,KAAKogC,GAAI,EAACp0B,EAAE2E,KAAK,SAAS/C,GAAG,OAAOA,EAAE+C,KAAK3Q,KAAKogC,IAAK,EAACp0B,EAAEu0B,aAAa,WAAW,IAAI3yB,EAAE5N,KAAKA,KAAKqgC,aAAaG,QAAQ,CAAC,EAAE,IAAIx0B,EAAElH,EAAE2U,QAAQhF,MAAM,SAASzI,GAAG,GAAG,mBAAmBA,EAAE2E,KAAK,OAAO3E,EAAE2E,KAAK/C,GAAG,GAAG5B,EAAE2E,gBAAgB1F,MAAM,OAAOe,EAAE2E,KAAK8G,MAAM,SAASzL,GAAG,OAAO4B,EAAE+C,KAAK3E,EAAG,IAAG,MAAM,IAAIzJ,MAAM,uCAAwC,IAAG,OAAOyJ,IAAIhM,KAAKqgC,aAAaG,QAAQx0B,EAAEy0B,SAASzgC,KAAKsgC,UAAUtgC,KAAKqgC,aAAaG,OAAQ,EAACx0B,EAAE00B,WAAW,WAAW,OAAO1gC,KAAKqgC,aAAaG,QAAQxgC,KAAKqgC,aAAaG,QAAQxgC,KAAKugC,cAAe,EAACv0B,EAAE20B,eAAe,SAAS/yB,GAAG,OAAOA,EAAEqC,OAAOjQ,KAAK0gC,aAAapzB,MAAMukB,eAAe,GAAG7xB,KAAK0gC,aAAapzB,MAAM,EAAG,EAACtB,EAAE40B,kBAAkB,WAAW,OAAO5gC,KAAK0gC,aAAa/tB,OAAQ,EAAC3G,EAAE60B,MAAM,WAAW,OAAO7gC,KAAKqgC,aAAaS,GAAG9gC,KAAKqgC,aAAaS,GAAG9gC,KAAK+gC,SAAU,EAAC/0B,EAAE+0B,QAAQ,WAAW,IAAInzB,EAAE5N,KAAKA,KAAKqgC,aAAaS,GAAG,CAAC,EAAE,IAAI90B,EAAEuG,EAAEkH,QAAQhF,MAAM,SAASzI,GAAG,GAAG,mBAAmBA,EAAE2E,KAAK,OAAO3E,EAAE2E,KAAK/C,GAAG,GAAG5B,EAAE2E,gBAAgB1F,MAAM,OAAOe,EAAE2E,KAAK8G,MAAM,SAASzL,GAAG,OAAO4B,EAAE+C,KAAK3E,EAAG,IAAG,MAAM,IAAIzJ,MAAM,uCAAwC,IAAG,OAAOyJ,IAAIhM,KAAKqgC,aAAaS,GAAG90B,EAAEy0B,SAASzgC,KAAKsgC,UAAUtgC,KAAKqgC,aAAaS,EAAG,EAAC90B,EAAEg1B,UAAU,SAASpzB,GAAG,IAAI5B,EAAEhM,KAAK6gC,QAAQvzB,KAAK,OAAOM,EAAEqC,OAAOjE,GAAG6lB,eAAe,GAAG7lB,GAAG,EAAG,EAACA,EAAEi1B,aAAa,WAAW,OAAOjhC,KAAK6gC,QAAQluB,OAAQ,EAAC3G,EAAEk1B,YAAY,WAAW,OAAOlhC,KAAKqgC,aAAatO,SAAS/xB,KAAKqgC,aAAatO,SAAS/xB,KAAKmhC,eAAgB,EAACn1B,EAAEo1B,gBAAgB,SAASxzB,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI5B,EAAEhM,KAAKkhC,cAAclwB,KAAK,OAAOpD,EAAEqC,OAAOjE,GAAG6lB,eAAe,GAAG7lB,GAAG,EAAG,EAACA,EAAEm1B,cAAc,WAAW,IAAIvzB,EAAE5N,KAAKA,KAAKqgC,aAAatO,SAAS,CAAC,EAAE,IAAI/lB,EAAE0B,EAAE+L,QAAQhF,MAAM,SAASzI,GAAG,GAAG,mBAAmBA,EAAE2E,KAAK,OAAO3E,EAAE2E,KAAK/C,GAAG,GAAG5B,EAAE2E,gBAAgB1F,MAAM,OAAOe,EAAE2E,KAAK8G,MAAM,SAASzL,GAAG,OAAO4B,EAAE+C,KAAK3E,EAAG,IAAG,MAAM,IAAIzJ,MAAM,uCAAwC,IAAG,OAAOyJ,IAAIhM,KAAKqgC,aAAatO,SAAS/lB,EAAEy0B,SAASzgC,KAAKsgC,UAAUtgC,KAAKqgC,aAAatO,QAAS,EAAC/lB,EAAEq1B,UAAU,WAAW,OAAOrhC,KAAKqgC,aAAaiB,OAAOthC,KAAKqgC,aAAaiB,OAAOthC,KAAKuhC,aAAc,EAACv1B,EAAEw1B,cAAc,SAAS5zB,GAAG,OAAOA,EAAEqC,OAAOjQ,KAAKqhC,YAAY/zB,MAAMukB,eAAe,GAAG7xB,KAAKqhC,YAAY/zB,MAAM,EAAG,EAACtB,EAAEu1B,YAAY,WAAW,IAAI3zB,EAAE5N,KAAKA,KAAKqgC,aAAaiB,OAAO,CAAC,EAAE,IAAIt1B,EAAEwB,EAAEiM,QAAQhF,MAAM,SAASzI,GAAG,GAAG,mBAAmBA,EAAE2E,KAAK,OAAO3E,EAAE2E,KAAK/C,GAAG,GAAG5B,EAAE2E,gBAAgB1F,MAAM,OAAOe,EAAE2E,KAAK8G,MAAM,SAASzL,GAAG,OAAO4B,EAAE+C,KAAK3E,EAAG,IAAG,MAAM,IAAIzJ,MAAM,uCAAwC,IAAG,OAAOyJ,IAAIhM,KAAKqgC,aAAaiB,OAAOt1B,EAAEy0B,SAASzgC,KAAKsgC,UAAUtgC,KAAKqgC,aAAaiB,MAAO,EAACt1B,EAAEtF,MAAM,WAAW,OAAO1G,KAAKugC,eAAevgC,KAAK+gC,UAAU/gC,KAAKmhC,gBAAgBnhC,KAAKuhC,cAAcvhC,IAAK,EAACgM,EAAEm0B,UAAU,WAAW,OAAO1gC,OAAOC,OAAO,CAAC,EAAEM,KAAKqgC,aAAc,EAACr0B,EAAEy1B,UAAU,SAAS7zB,GAAG,IAAI5B,EAAEhM,KAAK+N,EAAE,CAAC,EAAEjJ,EAAE,EAAEyN,EAAE,CAAC,EAAE7E,EAAE,EAAE,GAAGjO,OAAO6I,KAAKsF,GAAGxK,SAAS,SAAS4I,GAAG,IAAIwB,EAAEI,EAAE5B,GAAG,iBAAiBwB,GAAG+E,EAAEvG,GAAGwB,EAAEE,GAAG,GAAG,iBAAiBF,IAAIO,EAAE/B,GAAGwB,EAAE1I,GAAG,EAAG,IAAGA,EAAE,EAAE,CAAC,IAAI0I,EAAE/N,OAAO6I,KAAKyF,GAAGG,EAAEV,EAAEiH,MAAM,SAAS7G,GAAG,OAAO5B,EAAE01B,KAAK9zB,EAAG,IAAG,GAAGM,EAAE,CAAC,IAAIP,EAAE3N,KAAKyhC,UAAU1zB,EAAEG,IAAI,QAAG,IAASP,EAAE,OAAOA,CAAE,KAAIpI,EAAEiI,EAAEiH,MAAM,SAAS7G,GAAG,OAAO5B,EAAE21B,WAAW/zB,EAAG,IAAG,GAAGrI,EAAE,CAAC,IAAIyI,EAAEhO,KAAKyhC,UAAU1zB,EAAExI,IAAI,QAAG,IAASyI,EAAE,OAAOA,CAAE,CAAC,IAAGN,EAAE,EAAE,CAAC,IAAIoN,EAAErb,OAAO6I,KAAKiK,GAAGkC,MAAM,SAAS7G,GAAG,OAAO5B,EAAE41B,UAAUh0B,GAAE,EAAI,IAAG,QAAG,IAASkN,EAAE,OAAO9a,KAAK6hC,eAAetvB,EAAEuI,GAAI,CAAC,EAAC9O,EAAE41B,UAAU,SAASh0B,EAAE5B,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI+B,EAAE/N,KAAK2gC,iBAAiB9O,cAAc/sB,EAAE8I,EAAEikB,cAActf,EAAErE,EAAEuL,QAAQihB,sBAAsB51B,GAAG,OAAOkH,GAAGuG,IAAIzN,EAAEyN,EAAEsf,eAAe/sB,IAAIiJ,CAAE,EAAC/B,EAAE61B,eAAe,SAASj0B,GAAG,IAAI5B,EAAE,CAAC,GAAG+B,EAAEH,EAAE9I,GAAE,EAAGyN,EAAEvS,KAAK4gC,oBAAoB,GAAG,iBAAiBruB,EAAE,MAAM,MAAM3E,EAAE,IAAI,MAAMA,EAAE,IAAIG,EAAEH,EAAEhC,OAAO,GAAG,MAAMgC,EAAE,IAAI9I,GAAE,EAAGiJ,EAAEH,EAAEhC,OAAO,IAAII,EAAE,GAAG,MAAM4B,EAAE,GAAG5B,EAAEpK,KAAK,GAAGoK,EAAEpK,MAAM,IAAI,MAAMgM,EAAE,GAAGG,EAAEH,EAAEhC,OAAO,GAAG,MAAMgC,EAAE,KAAK9I,GAAE,EAAGiJ,EAAEH,EAAEhC,OAAO,IAAII,EAAEvB,QAAQyD,EAAEuL,QAAQ6gB,gBAAgB/nB,EAAExE,EAAEjJ,KAAK,CAAE,EAACkH,EAAE01B,KAAK,SAAS9zB,GAAG,OAAO5N,KAAKghC,WAAU,KAAM/wB,OAAOrC,GAAGikB,aAAc,EAAC7lB,EAAE21B,WAAW,SAAS/zB,GAAG,OAAO5N,KAAKohC,iBAAgB,KAAMnxB,OAAOrC,GAAGikB,aAAc,EAAC7lB,EAAE81B,SAAS,SAASl0B,GAAG,OAAO5N,KAAKwhC,eAAc,KAAMvxB,OAAOrC,GAAGikB,aAAc,EAAC7lB,EAAE+1B,GAAG,SAASn0B,GAAG,OAAO5N,KAAK4hC,UAAUh0B,IAAI5N,KAAK0hC,KAAK9zB,IAAI5N,KAAK2hC,WAAW/zB,EAAG,EAAC5B,EAAEyL,KAAK,SAAS7J,GAAG,IAAI5B,EAAEhM,KAAK,YAAO,IAAS4N,IAAIA,EAAE,IAAIA,EAAE6J,MAAM,SAAS7J,GAAG,OAAO5B,EAAE+1B,GAAGn0B,EAAG,GAAG,EAACA,CAAE,CAApuI,GAAuuI5B,EAAEyN,QAAQlU,EAAEqI,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEyN,GAAGzN,EAAEiJ,EAAE,MAAMjJ,EAAEg1B,WAAWh1B,EAAE,CAAC2U,QAAQ3U,GAAO4I,EAAE,6BAA6BF,EAAE,CAAC,CAACmD,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,aAAaS,EAAEwE,EAAEkH,QAAQsgB,cAAc,2BAA2BnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,SAASS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,kCAAkCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,gBAAgB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,SAASS,EAAEwE,EAAEkH,QAAQsgB,cAAc,2BAA2BnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,mBAAmB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,gCAAgCS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,2CAA2CnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,uBAAuBS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,iCAAiCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,cAAcS,EAAEwE,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,SAASS,EAAEwE,EAAEkH,QAAQsgB,cAAc,iCAAiCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,SAASS,EAAEwE,EAAEkH,QAAQsgB,cAAc,iCAAiCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,eAAeS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,kCAAkCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,kBAAkBS,EAAEwE,EAAEkH,QAAQsgB,cAAc,sCAAsCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,cAAcS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,sCAAsCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,kBAAkB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,WAAWS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,0CAA0CnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,WAAW8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,UAAUS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,mCAAmCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,mBAAmB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,UAAUS,EAAEwE,EAAEkH,QAAQsgB,cAAc,2CAA2CnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,iBAAiBqD,KAAK/C,GAAG,kBAAkB,cAAcG,EAAEwE,EAAEkH,QAAQsgB,cAAc,kDAAkDnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,iBAAiB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,qBAAqBS,EAAEwE,EAAEkH,QAAQsgB,cAAc,iCAAiCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,YAAY8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,kBAAkBS,EAAEwE,EAAEkH,QAAQsgB,cAAc,2BAA2BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,kBAAkB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,kBAAkBS,EAAEwE,EAAEkH,QAAQugB,eAAe,mCAAmCpsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,YAAY8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,WAAWS,EAAEwE,EAAEkH,QAAQsgB,cAAc,6BAA6BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,aAAaS,EAAEwE,EAAEkH,QAAQsgB,cAAc,+BAA+BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,SAAS8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,eAAeS,EAAEwE,EAAEkH,QAAQsgB,cAAc,0BAA0BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,YAAY8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,aAAaS,EAAEwE,EAAEkH,QAAQsgB,cAAc,+BAA+BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAc,8BAA8BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,sBAAsB,gBAAgB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,cAAcS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,mBAAmB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,iBAAiBS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,IAAI2E,EAAEkH,QAAQsgB,cAAc,0CAA0CnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,SAAS8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,QAAQS,EAAEwE,EAAEkH,QAAQsgB,cAAc,4BAA4BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,SAASS,EAAEwE,EAAEkH,QAAQsgB,cAAc,0CAA0CnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,4BAA4B8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,WAAWS,EAAEwE,EAAEkH,QAAQsgB,cAAc,oDAAoDnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,YAAYS,EAAEwE,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,sBAAsB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,UAAUS,EAAEwE,EAAEkH,QAAQsgB,cAAc,2CAA2CnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,QAAQ8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,iBAAiBS,EAAEwE,EAAEkH,QAAQsgB,cAAc,6BAA6BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,SAAS/C,GAAG,IAAI5B,GAAG4B,EAAE+C,KAAK,iBAAiB5C,EAAEH,EAAE+C,KAAK,YAAY,OAAO3E,GAAG+B,CAAE,EAAC0yB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,mBAAmBS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,kBAAkB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,iBAAiBS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,uBAAuB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAK,UAAUS,EAAEwE,EAAEkH,QAAQsgB,cAAcrsB,EAAEE,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,OAAO8vB,SAAS,SAAS7yB,GAAG,IAAI5B,GAAG,IAAI4B,EAAEqW,OAAO,OAAO,yBAAyB,eAAe,MAAM,CAAC3W,KAAKiF,EAAEkH,QAAQsgB,cAAc/tB,EAAE4B,GAAG+E,QAAQJ,EAAEkH,QAAQugB,eAAehuB,EAAE4B,GAAI,IAAG5B,EAAEyN,QAAQjM,EAAEI,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEyN,GAAGzN,EAAEiJ,EAAE,MAAMjJ,EAAEg1B,WAAWh1B,EAAE,CAAC2U,QAAQ3U,GAAG4I,EAAEK,EAAE,IAAQP,EAAE,CAAC,CAACmD,KAAK,CAAC,aAAa8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,wBAAwBnsB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAO0B,KAAK5pB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,kBAAkB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,yCAAyCnsB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAOoE,aAAatsB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,YAAY8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,iCAAiCnsB,GAAGG,EAAEwE,EAAEkH,QAAQygB,sBAAsBluB,GAAG,MAAM,CAACsB,KAAKI,EAAEmtB,OAAOqE,QAAQvsB,QAAQ3G,EAAEg2B,YAAYj0B,EAAG,GAAE,CAAC4C,KAAK,CAAC,cAAc8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,6BAA6BnsB,GAAG3L,QAAQ,SAAS,KAAK8L,EAAEwE,EAAEkH,QAAQ0gB,oBAAoBnuB,GAAGlH,EAAE,CAACwI,KAAKI,EAAEmtB,OAAOsE,MAAMxsB,QAAQ3G,GAAG,OAAO+B,IAAIjJ,EAAEk9B,YAAYj0B,GAAGjJ,CAAE,GAAE,CAAC6L,KAAK,CAAC,uBAAuB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,qCAAqCnsB,GAAG3L,QAAQ,SAAS,KAAK,MAAM,CAACqL,KAAKI,EAAEmtB,OAAOuE,IAAIzsB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,SAAS/C,GAAG,IAAI5B,GAAG4B,EAAE+C,KAAK,iBAAiB5C,EAAEH,EAAE+C,KAAK,YAAY,OAAO3E,GAAG+B,CAAE,EAAC0yB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,8BAA8BnsB,GAAGG,EAAEwE,EAAEkH,QAAQ2gB,sBAAsBpuB,GAAGlH,EAAE,CAACwI,KAAKI,EAAEmtB,OAAOwE,QAAQ1sB,QAAQ3G,GAAG,OAAO+B,IAAIjJ,EAAEk9B,YAAYj0B,GAAGjJ,CAAE,GAAE,CAAC6L,KAAK,CAAC,mBAAmB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,mCAAmCnsB,GAAGG,EAAE,CAACT,KAAKI,EAAEmtB,OAAOyE,OAAO,OAAOtzB,GAAGA,EAAE1H,SAASyJ,EAAE4E,QAAQ3G,GAAG+B,CAAE,GAAE,CAAC4C,KAAK,CAAC,sBAAsB,gBAAgB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,kCAAkCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAc,mCAAmCnsB,IAAI2E,EAAEkH,QAAQsgB,cAAc,aAAansB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAOG,WAAWroB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,SAAS8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,uBAAuBnsB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAOE,KAAKpoB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,2BAA2BnsB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAOuB,MAAMzpB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,UAAU8vB,SAAS,WAAW,MAAM,CAACnzB,KAAKI,EAAEmtB,OAAO0E,MAAO,GAAE,CAAC5uB,KAAK,CAAC,QAAQ8vB,SAAS,WAAW,MAAM,CAACnzB,KAAKI,EAAEmtB,OAAO2E,SAAU,GAAE,CAAC7uB,KAAK,CAAC,iBAAiB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,mCAAmCnsB,GAAG,MAAM,CAACN,KAAKI,EAAEmtB,OAAO4E,aAAa9sB,QAAQ3G,EAAG,IAAGA,EAAEyN,QAAQjM,EAAEI,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEyN,GAAGzN,EAAEiJ,EAAE,MAAMjJ,EAAEg1B,WAAWh1B,EAAE,CAAC2U,QAAQ3U,GAAG4I,EAAEK,EAAE,IAAQP,EAAE,CAAC,CAACmD,KAAK,CAAC,cAAc8vB,SAAS,WAAW,MAAM,CAACzvB,KAAK,MAAMixB,OAAO,SAAU,GAAE,CAACtxB,KAAK,CAAC,WAAW8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,aAAansB,IAAI,OAAOG,EAAE,CAACiD,KAAKtD,EAAEotB,cAAcgE,OAAOmD,OAAO,UAAU,OAAOj2B,IAAI+B,EAAEm0B,MAAMl2B,GAAG+B,CAAE,GAAE,CAAC4C,KAAK,CAAC,2BAA2B8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAOoD,OAAO,QAAS,GAAE,CAACtxB,KAAK,CAAC,SAAS8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAOoD,OAAO,QAAQC,MAAM,OAAQ,GAAE,CAACvxB,KAAK,CAAC,eAAe8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAOoD,OAAO,SAASC,MAAM,mBAAoB,GAAE,CAACvxB,KAAK,CAAC,SAAS8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAOoD,OAAO,SAAU,GAAE,CAACtxB,KAAK,CAAC,kBAAkB8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAQ,GAAE,CAACluB,KAAK,SAAS/C,GAAG,IAAI5B,EAAE4B,EAAE+C,KAAK,gBAAgB5C,EAAEH,EAAE+C,KAAK,uBAAuB,OAAO3E,IAAI+B,CAAE,EAAC0yB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAEuG,EAAEkH,QAAQsgB,cAAc,iBAAiBnsB,GAAG,MAAM,CAACoD,KAAKtD,EAAEotB,cAAcgE,OAAOmD,OAAO,QAAQC,MAAMl2B,EAAG,GAAE,CAAC2E,KAAK,CAAC,mBAAmB,iBAAiB8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAOmD,OAAO,QAAS,GAAE,CAACtxB,KAAK,CAAC,aAAa8vB,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAQ,GAAE,CAACnuB,KAAK,SAAS/C,GAAG,MAAM,eAAeA,EAAE+yB,gBAAe,EAAI,EAACF,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAOmD,OAAO,aAAc,GAAE,CAACtxB,KAAK,SAAS/C,GAAG,MAAM,SAASA,EAAE+yB,gBAAe,EAAI,EAACF,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAQ,GAAE,CAACnuB,KAAK,SAAS/C,GAAG,MAAM,kBAAkBA,EAAE+yB,gBAAiB,EAACF,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAOmD,OAAO,YAAa,GAAE,CAACtxB,KAAK,SAAS/C,GAAG,IAAI5B,EAAEkE,OAAOD,OAAOrC,EAAEqzB,gBAAgBv1B,MAAM,KAAK,IAAI,MAAM,YAAYkC,EAAEozB,WAAU,IAAKh1B,GAAG,CAAE,EAACy0B,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAc+D,OAAQ,GAAE,CAACluB,KAAK,SAAS/C,GAAG,MAAM,YAAYA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAcgE,OAAQ,GAAE,CAACnuB,KAAK,SAAS/C,GAAG,MAAM,UAAUA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAciE,QAAQkD,OAAO,QAAS,GAAE,CAACtxB,KAAK,SAAS/C,GAAG,MAAM,YAAYA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAciE,QAAS,GAAE,CAACpuB,KAAK,SAAS/C,GAAG,MAAM,UAAUA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAciE,QAAS,GAAE,CAACpuB,KAAK,SAAS/C,GAAG,MAAM,kBAAkBA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAckE,GAAI,GAAE,CAACruB,KAAK,SAAS/C,GAAG,MAAM,SAASA,EAAEozB,WAAU,EAAI,EAACP,SAAS,WAAW,MAAM,CAACzvB,KAAKtD,EAAEotB,cAAckE,GAAI,IAAGhzB,EAAEyN,QAAQjM,EAAEI,EAAE5O,QAAQgN,EAAEyN,OAAQ,EAAC,GAAG,SAAS7L,EAAE5B,EAAE+B,GAAG,aAAa/B,EAAE8tB,YAAW,EAAG9tB,EAAEyN,aAAQ,EAAO,IAAI3U,EAAEyN,GAAGzN,EAAEiJ,EAAE,MAAMjJ,EAAEg1B,WAAWh1B,EAAE,CAAC2U,QAAQ3U,GAAG4I,EAAEK,EAAE,IAAQP,EAAE,CAAC,CAACmD,KAAK,SAAS/C,GAAG,MAAM,mBAAmBA,EAAE+yB,gBAAe,EAAI,EAACF,SAAS,SAAS7yB,GAAG,GAAG,WAAW+C,KAAK/C,GAAG,MAAM,CAACN,KAAKI,EAAEktB,WAAW+E,OAAO,IAAI3zB,EAAEuG,EAAEkH,QAAQsgB,cAAc,0BAA0BnsB,GAAG,MAAM,CAACN,KAAKI,EAAEktB,WAAW8E,SAAS/sB,QAAQ3G,EAAG,GAAE,CAAC2E,KAAK,CAAC,YAAY8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAKI,EAAEktB,WAAWgF,SAAS7xB,EAAEwE,EAAEkH,QAAQsgB,cAAc,6BAA6BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,SAAS/C,GAAG,OAAOA,EAAE+C,KAAK,UAAW,EAAC8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAKI,EAAEktB,WAAWiF,QAAQ9xB,EAAEwE,EAAEkH,QAAQsgB,cAAc,4BAA4BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,SAAS/C,GAAG,IAAI5B,EAAE4B,EAAE+C,KAAK,UAAU5C,EAAEH,EAAE+C,KAAK,eAAe,OAAO3E,IAAI+B,CAAE,EAAC0yB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAKI,EAAEktB,WAAWkF,OAAO/xB,EAAEwE,EAAEkH,QAAQsgB,cAAc,2BAA2BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,GAAE,CAAC2E,KAAK,CAAC,4BAA4B8vB,SAAS,WAAW,MAAM,CAACnzB,KAAKI,EAAEktB,WAAW+E,MAAO,GAAE,CAAChvB,KAAK,CAAC,mBAAmB8vB,SAAS,SAAS7yB,GAAG,IAAI5B,EAAE,CAACsB,KAAKI,EAAEktB,WAAWmF,QAAQhyB,EAAEwE,EAAEkH,QAAQsgB,cAAc,4BAA4BnsB,GAAG,OAAOG,IAAI/B,EAAE2G,QAAQ5E,GAAG/B,CAAE,IAAGA,EAAEyN,QAAQjM,EAAEI,EAAE5O,QAAQgN,EAAEyN,OAAQ,wBCAn/vB,QAsBEzZ,MAAQT,YAXA,4BAcR,WAEF,IAAI4iC,EAAmB,kCAGnBC,EAAgB7iC,OAAO6Q,SAAW7Q,OAAO6Q,SAASiyB,KAAO,KACzDC,EAAUF,GAAcA,EAAYngC,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,KAAc,KAGvFsgC,EAAU/8B,SAASK,qBAAqB,UAGxC28B,EAA2B,eAAiBD,EAAQ,IAAM/8B,SAASG,cAAc,WAGjF88B,GAAcljC,OAAOm+B,OAAqC,mBAA5Bn+B,OAAOm+B,MAAMlsB,WAG3CkxB,EAAiC,kBAAmBl9B,SAIpD,oBAAqBjD,OAASA,MAAMogC,kBAAoBC,MAC/BrgC,MAAMogC,gBACjCpgC,MAAMogC,gBAAkBC,KAO1B,IAAIC,GAAyB,EACzBC,GAAwB,EAoF5B,SAASC,EAAsBt3B,EAAOu3B,GACpC,IAAIC,EACAljB,EAAM,KACNmjB,EAA0C,iBAAnBF,EA+B3B,OA9BAA,EAAiBE,EAAgBj/B,KAAKiqB,MAAM8U,GAAkB,EACzC,iBAAVv3B,GAAsBA,IAC3By3B,EACFD,EAAUx3B,EAAMtE,MAAM,+GAGtB87B,EAAUx3B,EAAMtE,MAAM,kNAEL87B,EAAQ,KACvBA,EAAUx3B,EAAMtE,MAAM,kHAItB87B,GAAWA,EAAQ,KAGnBljB,EAFEijB,EAAiB,EAEbD,EADWt3B,EAAMP,MAAMO,EAAMhB,QAAQw4B,EAAQ,IAAMA,EAAQ,GAAG3+B,QACvB0+B,EAAiB,GAGxDC,EAAQ,KAWbljB,CACR,CAwHD,SAASojB,IAIP,GAAuB,IAAnBZ,EAAQj+B,OACV,OAAO,KAGT,IAAIQ,EAAG8I,EAAGnC,EAAOsU,EAAKra,EAClB09B,EAAkB,GAClBJ,EAAiBG,EAAwBH,gBAAkB,EAQ/D,IAAKl+B,EAAI,EAAGA,EAAIy9B,EAAQj+B,OAAQQ,IAC1B29B,GAAcD,EACZL,EAAiBxxB,KAAK4xB,EAAQz9B,GAAG+Z,aACnCukB,EAAgBxhC,KAAK2gC,EAAQz9B,IAI/Bs+B,EAAgBxhC,KAAK2gC,EAAQz9B,IAQjC,GAJA8I,EAAI,IAAIrL,MACJsgC,IACFp3B,EAAQmC,EAAEnC,QAEPA,GAASq3B,EACZ,IACE,MAAMl1B,CACP,CACD,MAAOiW,GAELpY,EAAQoY,EAAIpY,KACb,CAgEH,GA7DIA,KAEF/F,EAzQJ,SAA0Bqa,EAAKqjB,GAC7B,IAAIt+B,EACAY,EAAS,KAIb,GAFA09B,EAAkBA,GAAmBb,EAElB,iBAARxiB,GAAoBA,EAC7B,IAAKjb,EAAIs+B,EAAgB9+B,OAAQQ,KAC/B,GAAIs+B,EAAgBt+B,GAAG3C,MAAQ4d,EAAK,CAGlCra,EAAS09B,EAAgBt+B,GACzB,KACD,CAGL,OAAOY,CACR,CAwPY29B,CADTtjB,EAAMgjB,EAAsBt3B,EAAOu3B,GACJI,KAEhBd,GAAWviB,IAAQuiB,IAK9B58B,EAhOR,SAA6B09B,GAC3B,IAAIt+B,EAAGJ,EACHgB,EAAS,KAEb,IAAKZ,EAAI,EAAGJ,GADZ0+B,EAAkBA,GAAmBb,GACHj+B,OAAQQ,EAAIJ,EAAKI,IACjD,IAAKs+B,EAAgBt+B,GAAGw+B,aAAa,OAAQ,CAC3C,GAAI59B,EAAQ,CACVA,EAAS,KACT,KACD,CACDA,EAAS09B,EAAgBt+B,EAC1B,CAEH,OAAOY,CACR,CA8NgB69B,CAAoBH,IAU9B19B,GAK4B,IAA3B09B,EAAgB9+B,SAClBoB,EAAS09B,EAAgB,IAIxB19B,GAeCg9B,IACFh9B,EAASF,SAASg+B,gBAIjB99B,GAeC+8B,GAAcD,EAChB,IAAK19B,EAAIs+B,EAAgB9+B,OAAQQ,KAC/B,GAAsC,gBAAlCs+B,EAAgBt+B,GAAG+Z,WAA8B,CACnDnZ,EAAS09B,EAAgBt+B,GACzB,KACD,CAiCP,OA5BKY,IAyBHA,EAAS09B,EAAgBA,EAAgB9+B,OAAS,IAAM,MAGnDoB,CACR,EA5YD,WACE,IACE,IAAIme,EAAM,IAAIthB,MAEd,MADAsgC,EAA8C,iBAAdhf,EAAIpY,SAAwBoY,EAAIpY,MAC1DoY,CACP,CACD,MAAO4f,GACLX,EAAmD,iBAApBW,EAAUh4B,SAAwBg4B,EAAUh4B,KAC5E,CARH,KA+YA03B,EAAwBH,eAAiB,EAOrC,IAAIj+B,EAA4Bo+B,EAShC,OARAp+B,EAAuB2+B,KAASP,EAChCp+B,EAAuB4+B,IA1R3B,WAME,OAAO,IAwFR,EA6LG5+B,EAAuB6+B,OArL3B,WAIE,OAAO,IACR,EAsLU7+B,CACR,GA/cO,UAAC,IAAD,yCCYV,IAOI8+B,EAPAnQ,EAAuB,iBAAZoQ,QAAuBA,QAAU,KAC5CC,EAAerQ,GAAwB,mBAAZA,EAAE5wB,MAC7B4wB,EAAE5wB,MACF,SAAsBkhC,EAAQC,EAAUvhC,GACxC,OAAOE,SAASJ,UAAUM,MAAM2E,KAAKu8B,EAAQC,EAAUvhC,EACxD,EAIDmhC,EADEnQ,GAA0B,mBAAdA,EAAEwQ,QACCxQ,EAAEwQ,QACVzkC,OAAO0kC,sBACC,SAAwBH,GACvC,OAAOvkC,OAAO2kC,oBAAoBJ,GAC/Bj4B,OAAOtM,OAAO0kC,sBAAsBH,GACxC,EAEgB,SAAwBA,GACvC,OAAOvkC,OAAO2kC,oBAAoBJ,EACnC,EAOH,IAAIK,EAAcn0B,OAAOo0B,OAAS,SAAqBz8B,GACrD,OAAOA,GAAUA,CAClB,EAED,SAAS08B,IACPA,EAAa7qB,KAAKjS,KAAKzH,KACxB,CACDf,EAAOD,QAAUulC,EACjBtlC,EAAOD,QAAQwlC,KAwYf,SAAcC,EAASn3B,GACrB,OAAO,IAAI8M,SAAQ,SAAUC,EAASC,GACpC,SAASoqB,EAAc7gB,GACrB4gB,EAAQE,eAAer3B,EAAMs3B,GAC7BtqB,EAAOuJ,EACR,CAED,SAAS+gB,IAC+B,mBAA3BH,EAAQE,gBACjBF,EAAQE,eAAe,QAASD,GAElCrqB,EAAQ,GAAGnP,MAAMzD,KAAKiB,WACvB,CAEDm8B,EAA+BJ,EAASn3B,EAAMs3B,EAAU,CAAEJ,MAAM,IACnD,UAATl3B,GAMR,SAAuCm3B,EAASphC,EAASyhC,GAC7B,mBAAfL,EAAQM,IACjBF,EAA+BJ,EAAS,QAASphC,EAPO,CAAEmhC,MAAM,GASnE,CATKQ,CAA8BP,EAASC,EAE1C,GACF,EAxZDH,EAAaA,aAAeA,EAE5BA,EAAa/hC,UAAUyiC,aAAUn+B,EACjCy9B,EAAa/hC,UAAU0iC,aAAe,EACtCX,EAAa/hC,UAAU2iC,mBAAgBr+B,EAIvC,IAAIs+B,EAAsB,GAE1B,SAASC,EAAcpsB,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAIyC,UAAU,0EAA4EzC,EAEnG,CAoCD,SAASqsB,EAAiBC,GACxB,YAA2Bz+B,IAAvBy+B,EAAKJ,cACAZ,EAAaa,oBACfG,EAAKJ,aACb,CAkDD,SAASK,EAAaxB,EAAQhzB,EAAMiI,EAAU9T,GAC5C,IAAIwG,EACA85B,EACAC,EA1HsBC,EAgJ1B,GApBAN,EAAcpsB,QAGCnS,KADf2+B,EAASzB,EAAOiB,UAEdQ,EAASzB,EAAOiB,QAAUxlC,OAAO8yB,OAAO,MACxCyR,EAAOkB,aAAe,SAIKp+B,IAAvB2+B,EAAOG,cACT5B,EAAO1hC,KAAK,cAAe0O,EACfiI,EAASA,SAAWA,EAASA,SAAWA,GAIpDwsB,EAASzB,EAAOiB,SAElBS,EAAWD,EAAOz0B,SAGHlK,IAAb4+B,EAEFA,EAAWD,EAAOz0B,GAAQiI,IACxB+qB,EAAOkB,kBAeT,GAbwB,mBAAbQ,EAETA,EAAWD,EAAOz0B,GAChB7L,EAAU,CAAC8T,EAAUysB,GAAY,CAACA,EAAUzsB,GAErC9T,EACTugC,EAASG,QAAQ5sB,GAEjBysB,EAAS9jC,KAAKqX,IAIhBtN,EAAI25B,EAAiBtB,IACb,GAAK0B,EAASphC,OAASqH,IAAM+5B,EAASI,OAAQ,CACpDJ,EAASI,QAAS,EAGlB,IAAInT,EAAI,IAAIpwB,MAAM,+CACEmjC,EAASphC,OAAS,IAAM2L,OAAOe,GADjC,qEAIlB2hB,EAAErlB,KAAO,8BACTqlB,EAAE8R,QAAUT,EACZrR,EAAE3hB,KAAOA,EACT2hB,EAAEppB,MAAQm8B,EAASphC,OA7KGqhC,EA8KHhT,EA7KnBtoB,SAAWA,QAAQiZ,MAAMjZ,QAAQiZ,KAAKqiB,EA8KvC,CAGH,OAAO3B,CACR,CAaD,SAAS+B,IACP,IAAK/lC,KAAKgmC,MAGR,OAFAhmC,KAAKgkC,OAAOW,eAAe3kC,KAAKgR,KAAMhR,KAAKimC,QAC3CjmC,KAAKgmC,OAAQ,EACY,IAArBt9B,UAAUpE,OACLtE,KAAKiZ,SAASxR,KAAKzH,KAAKgkC,QAC1BhkC,KAAKiZ,SAASnW,MAAM9C,KAAKgkC,OAAQt7B,UAE3C,CAED,SAASw9B,EAAUlC,EAAQhzB,EAAMiI,GAC/B,IAAIktB,EAAQ,CAAEH,OAAO,EAAOC,YAAQn/B,EAAWk9B,OAAQA,EAAQhzB,KAAMA,EAAMiI,SAAUA,GACjFmtB,EAAUL,EAAYljC,KAAKsjC,GAG/B,OAFAC,EAAQntB,SAAWA,EACnBktB,EAAMF,OAASG,EACRA,CACR,CAyHD,SAASC,EAAWrC,EAAQhzB,EAAMs1B,GAChC,IAAIb,EAASzB,EAAOiB,QAEpB,QAAen+B,IAAX2+B,EACF,MAAO,GAET,IAAIc,EAAad,EAAOz0B,GACxB,YAAmBlK,IAAfy/B,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAWttB,UAAYstB,GAAc,CAACA,GAElDD,EAsDT,SAAyBjiC,GAEvB,IADA,IAAIM,EAAM,IAAIsG,MAAM5G,EAAIC,QACfQ,EAAI,EAAGA,EAAIH,EAAIL,SAAUQ,EAChCH,EAAIG,GAAKT,EAAIS,GAAGmU,UAAY5U,EAAIS,GAElC,OAAOH,CACR,CA3DG6hC,CAAgBD,GAAcE,EAAWF,EAAYA,EAAWjiC,OACnE,CAmBD,SAASoiC,EAAc11B,GACrB,IAAIy0B,EAASzlC,KAAKilC,QAElB,QAAen+B,IAAX2+B,EAAsB,CACxB,IAAIc,EAAad,EAAOz0B,GAExB,GAA0B,mBAAfu1B,EACT,OAAO,EACF,QAAmBz/B,IAAfy/B,EACT,OAAOA,EAAWjiC,MAErB,CAED,OAAO,CACR,CAMD,SAASmiC,EAAWpiC,EAAKkO,GAEvB,IADA,IAAIo0B,EAAO,IAAI17B,MAAMsH,GACZzN,EAAI,EAAGA,EAAIyN,IAAKzN,EACvB6hC,EAAK7hC,GAAKT,EAAIS,GAChB,OAAO6hC,CACR,CA2CD,SAAS9B,EAA+BJ,EAASn3B,EAAM2L,EAAU6rB,GAC/D,GAA0B,mBAAfL,EAAQM,GACbD,EAAMN,KACRC,EAAQD,KAAKl3B,EAAM2L,GAEnBwrB,EAAQM,GAAGz3B,EAAM2L,OAEd,IAAwC,mBAA7BwrB,EAAQvf,iBAYxB,MAAM,IAAIxJ,UAAU,6EAA+E+oB,GATnGA,EAAQvf,iBAAiB5X,GAAM,SAASs5B,EAAaz9B,GAG/C27B,EAAMN,MACRC,EAAQoC,oBAAoBv5B,EAAMs5B,GAEpC3tB,EAAS9P,EACV,GAGF,CACF,CAraD1J,OAAOwc,eAAesoB,EAAc,sBAAuB,CACzD3K,YAAY,EACZzV,IAAK,WACH,OAAOihB,CACR,EACD0B,IAAK,SAAS39B,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAKk7B,EAAYl7B,GACpD,MAAM,IAAI49B,WAAW,kGAAoG59B,EAAM,KAEjIi8B,EAAsBj8B,CACvB,IAGHo7B,EAAa7qB,KAAO,gBAEG5S,IAAjB9G,KAAKilC,SACLjlC,KAAKilC,UAAYxlC,OAAOunC,eAAehnC,MAAMilC,UAC/CjlC,KAAKilC,QAAUxlC,OAAO8yB,OAAO,MAC7BvyB,KAAKklC,aAAe,GAGtBllC,KAAKmlC,cAAgBnlC,KAAKmlC,oBAAiBr+B,CAC5C,EAIDy9B,EAAa/hC,UAAUykC,gBAAkB,SAAyB10B,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAK8xB,EAAY9xB,GAChD,MAAM,IAAIw0B,WAAW,gFAAkFx0B,EAAI,KAG7G,OADAvS,KAAKmlC,cAAgB5yB,EACdvS,IACR,EAQDukC,EAAa/hC,UAAU0kC,gBAAkB,WACvC,OAAO5B,EAAiBtlC,KACzB,EAEDukC,EAAa/hC,UAAUF,KAAO,SAAc0O,GAE1C,IADA,IAAItO,EAAO,GACFoC,EAAI,EAAGA,EAAI4D,UAAUpE,OAAQQ,IAAKpC,EAAKd,KAAK8G,UAAU5D,IAC/D,IAAIqiC,EAAoB,UAATn2B,EAEXy0B,EAASzlC,KAAKilC,QAClB,QAAen+B,IAAX2+B,EACF0B,EAAWA,QAA4BrgC,IAAjB2+B,EAAO9hC,WAC1B,IAAKwjC,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFI1kC,EAAK4B,OAAS,IAChB8iC,EAAK1kC,EAAK,IACR0kC,aAAc7kC,MAGhB,MAAM6kC,EAGR,IAAIvjB,EAAM,IAAIthB,MAAM,oBAAsB6kC,EAAK,KAAOA,EAAGtjB,QAAU,IAAM,KAEzE,MADAD,EAAIwjB,QAAUD,EACRvjB,CACP,CAED,IAAIxgB,EAAUoiC,EAAOz0B,GAErB,QAAgBlK,IAAZzD,EACF,OAAO,EAET,GAAuB,mBAAZA,EACT0gC,EAAa1gC,EAASrD,KAAM0C,OAE5B,KAAIgC,EAAMrB,EAAQiB,OACdgjC,EAAYb,EAAWpjC,EAASqB,GACpC,IAASI,EAAI,EAAGA,EAAIJ,IAAOI,EACzBi/B,EAAauD,EAAUxiC,GAAI9E,KAAM0C,EAHnC,CAMF,OAAO,CACR,EAgED6hC,EAAa/hC,UAAUH,YAAc,SAAqB2O,EAAMiI,GAC9D,OAAOusB,EAAaxlC,KAAMgR,EAAMiI,GAAU,EAC3C,EAEDsrB,EAAa/hC,UAAUuiC,GAAKR,EAAa/hC,UAAUH,YAEnDkiC,EAAa/hC,UAAU+kC,gBACnB,SAAyBv2B,EAAMiI,GAC7B,OAAOusB,EAAaxlC,KAAMgR,EAAMiI,GAAU,EAC3C,EAoBLsrB,EAAa/hC,UAAUgiC,KAAO,SAAcxzB,EAAMiI,GAGhD,OAFAosB,EAAcpsB,GACdjZ,KAAK+kC,GAAG/zB,EAAMk1B,EAAUlmC,KAAMgR,EAAMiI,IAC7BjZ,IACR,EAEDukC,EAAa/hC,UAAUglC,oBACnB,SAA6Bx2B,EAAMiI,GAGjC,OAFAosB,EAAcpsB,GACdjZ,KAAKunC,gBAAgBv2B,EAAMk1B,EAAUlmC,KAAMgR,EAAMiI,IAC1CjZ,IACR,EAGLukC,EAAa/hC,UAAUmiC,eACnB,SAAwB3zB,EAAMiI,GAC5B,IAAIwuB,EAAMhC,EAAQvN,EAAUpzB,EAAG4iC,EAK/B,GAHArC,EAAcpsB,QAGCnS,KADf2+B,EAASzlC,KAAKilC,SAEZ,OAAOjlC,KAGT,QAAa8G,KADb2gC,EAAOhC,EAAOz0B,IAEZ,OAAOhR,KAET,GAAIynC,IAASxuB,GAAYwuB,EAAKxuB,WAAaA,EACb,KAAtBjZ,KAAKklC,aACTllC,KAAKilC,QAAUxlC,OAAO8yB,OAAO,cAEtBkT,EAAOz0B,GACVy0B,EAAOd,gBACT3kC,KAAKsC,KAAK,iBAAkB0O,EAAMy2B,EAAKxuB,UAAYA,SAElD,GAAoB,mBAATwuB,EAAqB,CAGrC,IAFAvP,GAAY,EAEPpzB,EAAI2iC,EAAKnjC,OAAS,EAAGQ,GAAK,EAAGA,IAChC,GAAI2iC,EAAK3iC,KAAOmU,GAAYwuB,EAAK3iC,GAAGmU,WAAaA,EAAU,CACzDyuB,EAAmBD,EAAK3iC,GAAGmU,SAC3Bif,EAAWpzB,EACX,KACD,CAGH,GAAIozB,EAAW,EACb,OAAOl4B,KAEQ,IAAbk4B,EACFuP,EAAKjZ,QAiIf,SAAmBiZ,EAAMnxB,GACvB,KAAOA,EAAQ,EAAImxB,EAAKnjC,OAAQgS,IAC9BmxB,EAAKnxB,GAASmxB,EAAKnxB,EAAQ,GAC7BmxB,EAAK9rB,KACN,CAnISgsB,CAAUF,EAAMvP,GAGE,IAAhBuP,EAAKnjC,SACPmhC,EAAOz0B,GAAQy2B,EAAK,SAEQ3gC,IAA1B2+B,EAAOd,gBACT3kC,KAAKsC,KAAK,iBAAkB0O,EAAM02B,GAAoBzuB,EACzD,CAED,OAAOjZ,IACR,EAELukC,EAAa/hC,UAAUolC,IAAMrD,EAAa/hC,UAAUmiC,eAEpDJ,EAAa/hC,UAAUqlC,mBACnB,SAA4B72B,GAC1B,IAAIs2B,EAAW7B,EAAQ3gC,EAGvB,QAAegC,KADf2+B,EAASzlC,KAAKilC,SAEZ,OAAOjlC,KAGT,QAA8B8G,IAA1B2+B,EAAOd,eAUT,OATyB,IAArBj8B,UAAUpE,QACZtE,KAAKilC,QAAUxlC,OAAO8yB,OAAO,MAC7BvyB,KAAKklC,aAAe,QACMp+B,IAAjB2+B,EAAOz0B,KACY,KAAtBhR,KAAKklC,aACTllC,KAAKilC,QAAUxlC,OAAO8yB,OAAO,aAEtBkT,EAAOz0B,IAEXhR,KAIT,GAAyB,IAArB0I,UAAUpE,OAAc,CAC1B,IACIsD,EADAU,EAAO7I,OAAO6I,KAAKm9B,GAEvB,IAAK3gC,EAAI,EAAGA,EAAIwD,EAAKhE,SAAUQ,EAEjB,oBADZ8C,EAAMU,EAAKxD,KAEX9E,KAAK6nC,mBAAmBjgC,GAK1B,OAHA5H,KAAK6nC,mBAAmB,kBACxB7nC,KAAKilC,QAAUxlC,OAAO8yB,OAAO,MAC7BvyB,KAAKklC,aAAe,EACbllC,IACR,CAID,GAAyB,mBAFzBsnC,EAAY7B,EAAOz0B,IAGjBhR,KAAK2kC,eAAe3zB,EAAMs2B,QACrB,QAAkBxgC,IAAdwgC,EAET,IAAKxiC,EAAIwiC,EAAUhjC,OAAS,EAAGQ,GAAK,EAAGA,IACrC9E,KAAK2kC,eAAe3zB,EAAMs2B,EAAUxiC,IAIxC,OAAO9E,IACR,EAmBLukC,EAAa/hC,UAAU8kC,UAAY,SAAmBt2B,GACpD,OAAOq1B,EAAWrmC,KAAMgR,GAAM,EAC/B,EAEDuzB,EAAa/hC,UAAUslC,aAAe,SAAsB92B,GAC1D,OAAOq1B,EAAWrmC,KAAMgR,GAAM,EAC/B,EAEDuzB,EAAamC,cAAgB,SAASjC,EAASzzB,GAC7C,MAAqC,mBAA1ByzB,EAAQiC,cACVjC,EAAQiC,cAAc11B,GAEtB01B,EAAcj/B,KAAKg9B,EAASzzB,EAEtC,EAEDuzB,EAAa/hC,UAAUkkC,cAAgBA,EAiBvCnC,EAAa/hC,UAAUulC,WAAa,WAClC,OAAO/nC,KAAKklC,aAAe,EAAIrB,EAAe7jC,KAAKilC,SAAW,EAC/D,sBCzaD,OACC,SAASr3B,EAAE5B,GAAG,aAAsC,iBAAiB/M,EAAOD,QAAQC,EAAOD,QAAQ4O,EAAEpI,SAASwG,EAAE4B,GAAE,GAAI,SAASA,GAAG,IAAIA,EAAEpI,SAAS,MAAM,IAAIjD,MAAM,4CAA4C,OAAOyJ,EAAE4B,EAAG,EAAC5B,EAAE4B,EAAG,CAA/N,CAAgO,oBAAoBrO,OAAOA,OAAOS,MAAK,SAASgb,EAAEpN,GAAG,aAAa,IAAI5B,EAAE,GAAG+B,EAAEtO,OAAOunC,eAAet5B,EAAE1B,EAAEd,MAAMmC,EAAErB,EAAEg8B,KAAK,SAASp6B,GAAG,OAAO5B,EAAEg8B,KAAKvgC,KAAKmG,EAAG,EAAC,SAASA,GAAG,OAAO5B,EAAED,OAAOjJ,MAAM,GAAG8K,EAAG,EAACD,EAAE3B,EAAEpK,KAAKkD,EAAEkH,EAAEvB,QAAQ8H,EAAE,CAAC,EAAE/E,EAAE+E,EAAEf,SAASuJ,EAAExI,EAAE/K,eAAe0G,EAAE6M,EAAEvJ,SAASvF,EAAEiC,EAAEzG,KAAKhI,QAAQkM,EAAE,CAAC,EAAEsC,EAAE,SAASL,GAAG,MAAM,mBAAmBA,GAAG,iBAAiBA,EAAEq6B,UAAU,mBAAmBr6B,EAAEmE,IAAK,EAACM,EAAE,SAASzE,GAAG,OAAO,MAAMA,GAAGA,IAAIA,EAAErO,MAAO,EAACozB,EAAE3X,EAAExV,SAASwI,EAAE,CAACgD,MAAK,EAAG7O,KAAI,EAAG+lC,OAAM,EAAGC,UAAS,GAAI,SAASnV,EAAEplB,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,GAAG+E,EAAEA,GAAGogB,GAAGhtB,cAAc,UAAU,GAAG6H,EAAE7G,KAAKiH,EAAE5B,EAAE,IAAI+B,KAAKC,GAAGlJ,EAAEkH,EAAE+B,IAAI/B,EAAEo8B,cAAcp8B,EAAEo8B,aAAar6B,KAAKP,EAAE66B,aAAat6B,EAAEjJ,GAAGyN,EAAE+1B,KAAKhiC,YAAYkH,GAAGpH,WAAWmiC,YAAY/6B,EAAG,UAAS8lB,EAAE1lB,GAAG,OAAO,MAAMA,EAAEA,EAAE,GAAG,iBAAiBA,GAAG,mBAAmBA,EAAE2E,EAAE/E,EAAE/F,KAAKmG,KAAK,gBAAgBA,CAAE,KAAIkN,EAAE,sNAAsNmY,EAAE,SAASrlB,EAAE5B,GAAG,OAAO,IAAIinB,EAAEuV,GAAG9uB,KAAK9L,EAAE5B,EAAG,EAAC,SAASzG,EAAEqI,GAAG,IAAI5B,IAAI4B,GAAG,WAAWA,GAAGA,EAAEtJ,OAAOiO,EAAE+gB,EAAE1lB,GAAG,OAAOK,EAAEL,KAAKyE,EAAEzE,KAAK,UAAU2E,GAAG,IAAIvG,GAAG,iBAAiBA,GAAG,EAAEA,GAAGA,EAAE,KAAK4B,EAAG,CAAAqlB,EAAEuV,GAAGvV,EAAEzwB,UAAU,CAACimC,OAAO3tB,EAAElb,YAAYqzB,EAAE3uB,OAAO,EAAEokC,QAAQ,WAAW,OAAOh7B,EAAEjG,KAAKzH,KAAM,EAACmkB,IAAI,SAASvW,GAAG,OAAO,MAAMA,EAAEF,EAAEjG,KAAKzH,MAAM4N,EAAE,EAAE5N,KAAK4N,EAAE5N,KAAKsE,QAAQtE,KAAK4N,EAAG,EAAC+6B,UAAU,SAAS/6B,GAAG,IAAI5B,EAAEinB,EAAE2V,MAAM5oC,KAAKJ,cAAcgO,GAAG,OAAO5B,EAAE68B,WAAW7oC,KAAKgM,CAAE,EAAC88B,KAAK,SAASl7B,GAAG,OAAOqlB,EAAE6V,KAAK9oC,KAAK4N,EAAG,EAAC6D,IAAI,SAASc,GAAG,OAAOvS,KAAK2oC,UAAU1V,EAAExhB,IAAIzR,MAAK,SAAS4N,EAAE5B,GAAG,OAAOuG,EAAE9K,KAAKmG,EAAE5B,EAAE4B,EAAG,IAAG,EAAC1C,MAAM,WAAW,OAAOlL,KAAK2oC,UAAUj7B,EAAE5K,MAAM9C,KAAK0I,WAAY,EAACqgC,MAAM,WAAW,OAAO/oC,KAAKgpC,GAAG,EAAG,EAACC,KAAK,WAAW,OAAOjpC,KAAKgpC,IAAI,EAAG,EAACE,KAAK,WAAW,OAAOlpC,KAAK2oC,UAAU1V,EAAEkW,KAAKnpC,MAAK,SAAS4N,EAAE5B,GAAG,OAAOA,EAAE,GAAG,CAAE,IAAG,EAACo9B,IAAI,WAAW,OAAOppC,KAAK2oC,UAAU1V,EAAEkW,KAAKnpC,MAAK,SAAS4N,EAAE5B,GAAG,OAAOA,EAAE,CAAE,IAAG,EAACg9B,GAAG,SAASp7B,GAAG,IAAI5B,EAAEhM,KAAKsE,OAAOiO,GAAG3E,GAAGA,EAAE,EAAE5B,EAAE,GAAG,OAAOhM,KAAK2oC,UAAU,GAAGp2B,GAAGA,EAAEvG,EAAE,CAAChM,KAAKuS,IAAI,GAAI,EAACmnB,IAAI,WAAW,OAAO15B,KAAK6oC,YAAY7oC,KAAKJ,aAAc,EAACgC,KAAK+L,EAAEymB,KAAKpoB,EAAEooB,KAAKxpB,OAAOoB,EAAEpB,QAAQqoB,EAAEoW,OAAOpW,EAAEuV,GAAGa,OAAO,WAAW,IAAIz7B,EAAE5B,EAAEuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAExF,UAAU,IAAI,CAAC,EAAEgF,EAAE,EAAEC,EAAEjF,UAAUpE,OAAO2H,GAAE,EAAG,IAAI,kBAAkBiC,IAAIjC,EAAEiC,EAAEA,EAAExF,UAAUgF,IAAI,CAAC,EAAEA,KAAK,iBAAiBQ,GAAGD,EAAEC,KAAKA,EAAE,CAAC,GAAGR,IAAIC,IAAIO,EAAElO,KAAK0N,KAAKA,EAAEC,EAAED,IAAI,GAAG,OAAOE,EAAElF,UAAUgF,IAAI,IAAI1B,KAAK4B,EAAEG,EAAEH,EAAE5B,GAAG,cAAcA,GAAGkC,IAAIH,IAAI9B,GAAG8B,IAAIklB,EAAEqW,cAAcv7B,KAAKjJ,EAAEmG,MAAMgJ,QAAQlG,MAAMwE,EAAErE,EAAElC,GAAGwB,EAAE1I,IAAImG,MAAMgJ,QAAQ1B,GAAG,GAAGzN,GAAGmuB,EAAEqW,cAAc/2B,GAAGA,EAAE,CAAC,EAAEzN,GAAE,EAAGoJ,EAAElC,GAAGinB,EAAEoW,OAAOp9B,EAAEuB,EAAEO,SAAI,IAASA,IAAIG,EAAElC,GAAG+B,IAAI,OAAOG,CAAE,EAAC+kB,EAAEoW,OAAO,CAACE,QAAQ,UAAUzuB,EAAE7W,KAAKE,UAAUlC,QAAQ,MAAM,IAAI+H,SAAQ,EAAGrG,MAAM,SAASiK,GAAG,MAAM,IAAIrL,MAAMqL,EAAG,EAAC47B,KAAK,WAAY,EAACF,cAAc,SAAS17B,GAAG,IAAI5B,EAAEuG,EAAE,SAAS3E,GAAG,oBAAoBJ,EAAE/F,KAAKmG,KAAQ5B,EAAE+B,EAAEH,MAAK,mBAAmB2E,EAAEwI,EAAEtT,KAAKuE,EAAE,gBAAgBA,EAAEpM,cAAcsO,EAAEzG,KAAK8K,KAAKtG,GAAG,EAACw9B,cAAc,SAAS77B,GAAG,IAAI5B,EAAE,IAAIA,KAAK4B,EAAE,OAAM,EAAG,OAAM,CAAG,EAAC87B,WAAW,SAAS97B,EAAE5B,EAAEuG,GAAGygB,EAAEplB,EAAE,CAACs6B,MAAMl8B,GAAGA,EAAEk8B,OAAO31B,EAAG,EAACu2B,KAAK,SAASl7B,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,EAAE,GAAGxI,EAAEqI,GAAI,IAAI2E,EAAE3E,EAAEtJ,OAAOyJ,EAAEwE,IAAS,IAAKvG,EAAEvE,KAAKmG,EAAEG,GAAGA,EAAEH,EAAEG,IAA5BA,UAA2C,IAAIA,KAAKH,EAAE,IAAG,IAAK5B,EAAEvE,KAAKmG,EAAEG,GAAGA,EAAEH,EAAEG,IAAI,MAAM,OAAOH,CAAE,EAAC+7B,UAAU,SAAS/7B,EAAE5B,GAAG,IAAIuG,EAAEvG,GAAG,GAAG,OAAO,MAAM4B,IAAIrI,EAAE9F,OAAOmO,IAAIqlB,EAAE2V,MAAMr2B,EAAE,iBAAiB3E,EAAE,CAACA,GAAGA,GAAGD,EAAElG,KAAK8K,EAAE3E,IAAI2E,CAAE,EAACq3B,QAAQ,SAASh8B,EAAE5B,EAAEuG,GAAG,OAAO,MAAMvG,GAAG,EAAElH,EAAE2C,KAAKuE,EAAE4B,EAAE2E,EAAG,EAACq2B,MAAM,SAASh7B,EAAE5B,GAAG,IAAI,IAAIuG,GAAGvG,EAAE1H,OAAOyJ,EAAE,EAAEjJ,EAAE8I,EAAEtJ,OAAOyJ,EAAEwE,EAAExE,IAAIH,EAAE9I,KAAKkH,EAAE+B,GAAG,OAAOH,EAAEtJ,OAAOQ,EAAE8I,CAAE,EAACu7B,KAAK,SAASv7B,EAAE5B,EAAEuG,GAAG,IAAI,IAAIxE,EAAE,GAAGjJ,EAAE,EAAE0I,EAAEI,EAAEtJ,OAAO4J,GAAGqE,EAAEzN,EAAE0I,EAAE1I,KAAKkH,EAAE4B,EAAE9I,GAAGA,KAAKoJ,GAAGH,EAAEnM,KAAKgM,EAAE9I,IAAI,OAAOiJ,CAAE,EAAC0D,IAAI,SAAS7D,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAE,EAAEU,EAAE,GAAG,GAAG3I,EAAEqI,GAAG,IAAIG,EAAEH,EAAEtJ,OAAOkJ,EAAEO,EAAEP,IAAI,OAAO1I,EAAEkH,EAAE4B,EAAEJ,GAAGA,EAAE+E,KAAKrE,EAAEtM,KAAKkD,QAAQ,IAAI0I,KAAKI,EAAE,OAAO9I,EAAEkH,EAAE4B,EAAEJ,GAAGA,EAAE+E,KAAKrE,EAAEtM,KAAKkD,GAAG,OAAOuI,EAAEa,EAAG,EAAC27B,KAAK,EAAEC,QAAQn+B,IAAI,mBAAmB4P,SAAS0X,EAAEuV,GAAGjtB,OAAOC,UAAUxP,EAAEuP,OAAOC,WAAWyX,EAAE6V,KAAK,uEAAuEp9B,MAAM,MAAK,SAASkC,EAAE5B,GAAGuG,EAAE,WAAWvG,EAAE,KAAKA,EAAE6lB,aAAc,IAAE,IAAIhkB,EAAE,SAAS0E,GAAG,IAAI3E,EAAEC,EAAEwE,EAAE7E,EAAE1I,EAAEwtB,EAAExX,EAAEE,EAAE2X,EAAEhlB,EAAE1B,EAAE+mB,EAAEM,EAAEplB,EAAE+kB,EAAE5lB,EAAEK,EAAEM,EAAE+M,EAAE+X,EAAE,SAAS,EAAE,IAAI7xB,KAAKsE,EAAEgN,EAAE/M,SAASouB,EAAE,EAAE7lB,EAAE,EAAEpC,EAAEo+B,KAAK97B,EAAE87B,KAAKhX,EAAEgX,KAAKzqB,EAAEyqB,KAAKtW,EAAE,SAAS7lB,EAAE5B,GAAG,OAAO4B,IAAI5B,IAAIC,GAAE,GAAI,CAAE,EAACinB,EAAE,CAAC,EAAE1rB,eAAewE,EAAE,GAAGmF,EAAEnF,EAAE2P,IAAIquB,EAAEh+B,EAAEpK,KAAKyxB,EAAErnB,EAAEpK,KAAKsY,EAAElO,EAAEd,MAAM++B,EAAE,SAASr8B,EAAE5B,GAAG,IAAI,IAAIuG,EAAE,EAAExE,EAAEH,EAAEtJ,OAAOiO,EAAExE,EAAEwE,IAAI,GAAG3E,EAAE2E,KAAKvG,EAAE,OAAOuG,EAAE,OAAO,CAAE,EAACihB,EAAE,6HAA6HE,EAAE,sBAAsBN,EAAE,0BAA0BM,EAAE,0CAA0CP,EAAE,MAAMO,EAAE,KAAKN,EAAE,OAAOM,EAAE,gBAAgBA,EAAE,2DAA2DN,EAAE,OAAOM,EAAE,OAAOI,EAAE,KAAKV,EAAE,wFAAwFD,EAAE,eAAe+W,EAAE,IAAIj7B,OAAOykB,EAAE,IAAI,KAAKyW,EAAE,IAAIl7B,OAAO,IAAIykB,EAAE,8BAA8BA,EAAE,KAAK,KAAK5lB,EAAE,IAAImB,OAAO,IAAIykB,EAAE,KAAKA,EAAE,KAAKzY,EAAE,IAAIhM,OAAO,IAAIykB,EAAE,WAAWA,EAAE,IAAIA,EAAE,KAAKH,EAAE,IAAItkB,OAAOykB,EAAE,MAAM0W,EAAE,IAAIn7B,OAAO6kB,GAAGuW,EAAE,IAAIp7B,OAAO,IAAImkB,EAAE,KAAKkX,EAAE,CAACC,GAAG,IAAIt7B,OAAO,MAAMmkB,EAAE,KAAKoX,MAAM,IAAIv7B,OAAO,QAAQmkB,EAAE,KAAKqX,IAAI,IAAIx7B,OAAO,KAAKmkB,EAAE,SAASsX,KAAK,IAAIz7B,OAAO,IAAIkkB,GAAGwX,OAAO,IAAI17B,OAAO,IAAI6kB,GAAG8W,MAAM,IAAI37B,OAAO,yDAAyDykB,EAAE,+BAA+BA,EAAE,cAAcA,EAAE,aAAaA,EAAE,SAAS,KAAKmX,KAAK,IAAI57B,OAAO,OAAOukB,EAAE,KAAK,KAAKsX,aAAa,IAAI77B,OAAO,IAAIykB,EAAE,mDAAmDA,EAAE,mBAAmBA,EAAE,mBAAmB,MAAMqX,EAAE,SAASpX,EAAE,sCAAsCE,EAAE,SAASmX,EAAE,yBAAyBC,EAAE,mCAAmCC,GAAG,OAAOC,GAAG,IAAIl8B,OAAO,uBAAuBykB,EAAE,uBAAuB,KAAK0X,GAAG,SAASx9B,EAAE5B,GAAG,IAAIuG,EAAE,KAAK3E,EAAE1C,MAAM,GAAG,MAAM,OAAOc,IAAIuG,EAAE,EAAEtC,OAAOmnB,aAAa7kB,EAAE,OAAOtC,OAAOmnB,aAAa7kB,GAAG,GAAG,MAAM,KAAKA,EAAE,OAAQ,EAAC84B,GAAG,sDAAsDjO,GAAG,SAASxvB,EAAE5B,GAAG,OAAOA,EAAE,OAAO4B,EAAE,IAASA,EAAE1C,MAAM,GAAG,GAAG,KAAK0C,EAAEykB,WAAWzkB,EAAEtJ,OAAO,GAAGkN,SAAS,IAAI,IAAI,KAAK5D,CAAE,EAAC09B,GAAG,WAAWtY,GAAI,EAACuY,GAAGC,IAAG,SAAS59B,GAAG,OAAM,IAAKA,EAAE69B,UAAU,aAAa79B,EAAE89B,SAAS7Z,aAAc,GAAC,CAAC8Z,IAAI,aAAatkC,KAAK,WAAW,IAAIgsB,EAAEvwB,MAAMkJ,EAAEkO,EAAEzS,KAAKlC,EAAEqmC,YAAYrmC,EAAEqmC,YAAY5/B,EAAEzG,EAAEqmC,WAAWtnC,QAAQ2jC,QAAS,OAAMr6B,GAAGylB,EAAE,CAACvwB,MAAMkJ,EAAE1H,OAAO,SAASsJ,EAAE5B,GAAGg+B,EAAElnC,MAAM8K,EAAEsM,EAAEzS,KAAKuE,GAAI,EAAC,SAAS4B,EAAE5B,GAAsB,IAAnB,IAAIuG,EAAE3E,EAAEtJ,OAAOyJ,EAAE,EAAQH,EAAE2E,KAAKvG,EAAE+B,OAAMH,EAAEtJ,OAAOiO,EAAE,CAAE,EAAE,UAASs5B,GAAG7/B,EAAE4B,EAAE2E,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE8M,EAAElN,GAAGA,EAAEk+B,cAAcvmC,EAAEqI,EAAEA,EAAEq6B,SAAS,EAAE,GAAG11B,EAAEA,GAAG,GAAG,iBAAiBvG,IAAIA,GAAG,IAAIzG,GAAG,IAAIA,GAAG,KAAKA,EAAE,OAAOgN,EAAE,IAAIxE,IAAIilB,EAAEplB,GAAGA,EAAEA,GAAG0lB,EAAEL,GAAG,CAAC,GAAG,KAAK1tB,IAAIoI,EAAEs9B,EAAEc,KAAK//B,IAAI,GAAGlH,EAAE6I,EAAE,IAAI,GAAG,IAAIpI,EAAE,CAAC,KAAK2I,EAAEN,EAAEo+B,eAAelnC,IAAI,OAAOyN,EAAE,GAAGrE,EAAE9B,KAAKtH,EAAE,OAAOyN,EAAE3Q,KAAKsM,GAAGqE,CAAE,MAAK,GAAGuI,IAAI5M,EAAE4M,EAAEkxB,eAAelnC,KAAKiW,EAAEnN,EAAEM,IAAIA,EAAE9B,KAAKtH,EAAE,OAAOyN,EAAE3Q,KAAKsM,GAAGqE,MAAM,CAAC,GAAG5E,EAAE,GAAG,OAAO0lB,EAAEvwB,MAAMyP,EAAE3E,EAAE/H,qBAAqBmG,IAAIuG,EAAE,IAAIzN,EAAE6I,EAAE,KAAKE,EAAEo+B,wBAAwBr+B,EAAEq+B,uBAAuB,OAAO5Y,EAAEvwB,MAAMyP,EAAE3E,EAAEq+B,uBAAuBnnC,IAAIyN,CAAE,IAAG1E,EAAEq+B,MAAM5sB,EAAEtT,EAAE,QAAQqB,IAAIA,EAAEsD,KAAK3E,MAAM,IAAIzG,GAAG,WAAWqI,EAAE89B,SAAS7Z,eAAe,CAAC,GAAG7jB,EAAEhC,EAAE8O,EAAElN,EAAE,IAAIrI,IAAIguB,EAAE5iB,KAAK3E,IAAIiP,EAAEtK,KAAK3E,IAAI,CAA4I,KAA1I8O,EAAEowB,GAAGv6B,KAAK3E,IAAImgC,GAAGv+B,EAAExH,aAAawH,KAAKA,GAAGC,EAAEu+B,SAAS1+B,EAAEE,EAAEw6B,aAAa,OAAO16B,EAAEA,EAAEzL,QAAQopC,GAAGjO,IAAIxvB,EAAEy6B,aAAa,KAAK36B,EAAEolB,IAAItlB,GAAGvB,EAAEqmB,EAAEtmB,IAAI1H,OAAakJ,KAAIvB,EAAEuB,IAAIE,EAAE,IAAIA,EAAE,UAAU,IAAI2+B,GAAGpgC,EAAEuB,IAAIQ,EAAE/B,EAAEgH,KAAK,IAAK,KAAI,OAAOogB,EAAEvwB,MAAMyP,EAAEuI,EAAEwxB,iBAAiBt+B,IAAIuE,CAAE,OAAM3E,GAAG0R,EAAEtT,GAAE,EAAI,CAA/D,QAAuE0B,IAAIolB,GAAGllB,EAAE2+B,gBAAgB,KAAM,CAAC,CAAC,QAAOvxB,EAAEhP,EAAE/J,QAAQkoC,EAAE,MAAMv8B,EAAE2E,EAAExE,EAAG,UAASg8B,KAAK,IAAIh8B,EAAE,GAAG,OAAO,SAASH,EAAE5B,EAAEuG,GAAG,OAAOxE,EAAEnM,KAAKoK,EAAE,KAAKqG,EAAEm6B,oBAAoB5+B,EAAEG,EAAEygB,SAAS5gB,EAAE5B,EAAE,KAAKuG,CAAE,CAAC,UAASk6B,GAAG7+B,GAAG,OAAOA,EAAEklB,IAAG,EAAGllB,CAAE,UAAS8+B,GAAG9+B,GAAG,IAAI5B,EAAEsnB,EAAE3tB,cAAc,YAAY,IAAI,QAAQiI,EAAE5B,EAAG,OAAM4B,GAAG,OAAM,CAAG,CAAnC,QAA2C5B,EAAE5F,YAAY4F,EAAE5F,WAAWmiC,YAAYv8B,GAAGA,EAAE,IAAK,CAAC,UAAS2gC,GAAG/+B,EAAE5B,GAAiC,IAA9B,IAAIuG,EAAE3E,EAAElC,MAAM,KAAKqC,EAAEwE,EAAEjO,OAAayJ,KAAIsE,EAAEu6B,WAAWr6B,EAAExE,IAAI/B,CAAE,UAAS6gC,GAAGj/B,EAAE5B,GAAG,IAAIuG,EAAEvG,GAAG4B,EAAEG,EAAEwE,GAAG,IAAI3E,EAAEq6B,UAAU,IAAIj8B,EAAEi8B,UAAUr6B,EAAEk/B,YAAY9gC,EAAE8gC,YAAY,GAAG/+B,EAAE,OAAOA,EAAE,GAAGwE,EAAE,KAAMA,EAAEA,EAAEw6B,gBAAex6B,IAAIvG,EAAE,OAAO,EAAE,OAAO4B,EAAE,GAAG,CAAE,UAASo/B,GAAGhhC,GAAG,OAAO,SAAS4B,GAAG,MAAM,UAAUA,EAAE89B,SAAS7Z,eAAejkB,EAAEoD,OAAOhF,CAAE,CAAC,UAASihC,GAAG16B,GAAG,OAAO,SAAS3E,GAAG,IAAI5B,EAAE4B,EAAE89B,SAAS7Z,cAAc,OAAO,UAAU7lB,GAAG,WAAWA,IAAI4B,EAAEoD,OAAOuB,CAAE,CAAC,UAAS26B,GAAGlhC,GAAG,OAAO,SAAS4B,GAAG,MAAM,SAASA,EAAEA,EAAExH,aAAY,IAAKwH,EAAE69B,SAAS,UAAU79B,EAAE,UAAUA,EAAExH,WAAWwH,EAAExH,WAAWqlC,WAAWz/B,EAAE4B,EAAE69B,WAAWz/B,EAAE4B,EAAEu/B,aAAanhC,GAAG4B,EAAEu/B,cAAcnhC,GAAGu/B,GAAG39B,KAAK5B,EAAE4B,EAAE69B,WAAWz/B,EAAE,UAAU4B,GAAGA,EAAE69B,WAAWz/B,CAAE,CAAC,UAASohC,GAAGl/B,GAAG,OAAOu+B,IAAG,SAASj/B,GAAG,OAAOA,GAAGA,EAAEi/B,IAAG,SAAS7+B,EAAE5B,GAAuC,IAApC,IAAIuG,EAAExE,EAAEG,EAAE,GAAGN,EAAEtJ,OAAOkJ,GAAG1I,EAAEiJ,EAAEzJ,OAAaQ,KAAI8I,EAAE2E,EAAExE,EAAEjJ,MAAM8I,EAAE2E,KAAKvG,EAAEuG,GAAG3E,EAAE2E,IAAK,GAAE,GAAE,UAAS45B,GAAGv+B,GAAG,OAAOA,QAAG,IAAoBA,EAAE/H,sBAAsB+H,CAAE,KAAIA,KAAKC,EAAEg+B,GAAG/B,QAAQ,CAAC,EAAEhlC,EAAE+mC,GAAGwB,MAAM,SAASz/B,GAAG,IAAI5B,EAAE4B,GAAGA,EAAE0/B,aAAa/6B,EAAE3E,IAAIA,EAAEk+B,eAAel+B,GAAG2/B,gBAAgB,OAAOxC,EAAEp6B,KAAK3E,GAAGuG,GAAGA,EAAEm5B,UAAU,OAAQ,EAAC1Y,EAAE6Y,GAAG2B,YAAY,SAAS5/B,GAAG,IAAI5B,EAAEuG,EAAExE,EAAEH,EAAEA,EAAEk+B,eAAel+B,EAAErI,EAAE,OAAOwI,GAAGulB,GAAG,IAAIvlB,EAAEk6B,UAAUl6B,EAAEw/B,kBAAkBr/B,GAAGolB,EAAEvlB,GAAGw/B,gBAAgBta,GAAGnuB,EAAEwuB,GAAG/tB,GAAG+tB,IAAI/gB,EAAE+gB,EAAEma,cAAcl7B,EAAEm7B,MAAMn7B,IAAIA,EAAE2S,iBAAiB3S,EAAE2S,iBAAiB,SAASomB,IAAG,GAAI/4B,EAAEo7B,aAAap7B,EAAEo7B,YAAY,WAAWrC,KAAKz9B,EAAEu+B,MAAMM,IAAG,SAAS9+B,GAAG,OAAOM,EAAE5H,YAAYsH,GAAGtH,YAAYgtB,EAAE3tB,cAAc,aAAQ,IAAoBiI,EAAE0+B,mBAAmB1+B,EAAE0+B,iBAAiB,uBAAuBhoC,MAAO,IAAEuJ,EAAE+/B,WAAWlB,IAAG,SAAS9+B,GAAG,OAAOA,EAAEigC,UAAU,KAAKjgC,EAAEw6B,aAAa,YAAa,IAAEv6B,EAAEhI,qBAAqB6mC,IAAG,SAAS9+B,GAAG,OAAOA,EAAEtH,YAAYgtB,EAAEwa,cAAc,MAAMlgC,EAAE/H,qBAAqB,KAAKvB,MAAO,IAAEuJ,EAAEo+B,uBAAuBjB,EAAEr6B,KAAK2iB,EAAE2Y,wBAAwBp+B,EAAEkgC,QAAQrB,IAAG,SAAS9+B,GAAG,OAAOM,EAAE5H,YAAYsH,GAAGxB,GAAG0mB,GAAGQ,EAAE0a,oBAAoB1a,EAAE0a,kBAAkBlb,GAAGxuB,MAAO,IAAEuJ,EAAEkgC,SAAS17B,EAAEtB,OAAOw5B,GAAG,SAAS38B,GAAG,IAAI5B,EAAE4B,EAAE3L,QAAQkpC,GAAGC,IAAI,OAAO,SAASx9B,GAAG,OAAOA,EAAEw6B,aAAa,QAAQp8B,CAAE,CAAC,EAACqG,EAAEoC,KAAK81B,GAAG,SAAS38B,EAAE5B,GAAG,QAAG,IAAoBA,EAAEggC,gBAAgB/Y,EAAE,CAAC,IAAI1gB,EAAEvG,EAAEggC,eAAep+B,GAAG,OAAO2E,EAAE,CAACA,GAAG,EAAG,CAAC,IAAGF,EAAEtB,OAAOw5B,GAAG,SAAS38B,GAAG,IAAI2E,EAAE3E,EAAE3L,QAAQkpC,GAAGC,IAAI,OAAO,SAASx9B,GAAG,IAAI5B,OAAE,IAAoB4B,EAAEqgC,kBAAkBrgC,EAAEqgC,iBAAiB,MAAM,OAAOjiC,GAAGA,EAAEnE,QAAQ0K,CAAE,CAAC,EAACF,EAAEoC,KAAK81B,GAAG,SAAS38B,EAAE5B,GAAG,QAAG,IAAoBA,EAAEggC,gBAAgB/Y,EAAE,CAAC,IAAI1gB,EAAExE,EAAEjJ,EAAE0I,EAAExB,EAAEggC,eAAep+B,GAAG,GAAGJ,EAAE,CAAC,IAAI+E,EAAE/E,EAAEygC,iBAAiB,QAAQ17B,EAAE1K,QAAQ+F,EAAE,MAAM,CAACJ,GAAgC,IAA7B1I,EAAEkH,EAAEgiC,kBAAkBpgC,GAAGG,EAAE,EAAQP,EAAE1I,EAAEiJ,UAASwE,EAAE/E,EAAEygC,iBAAiB,QAAQ17B,EAAE1K,QAAQ+F,EAAE,MAAM,CAACJ,EAAG,OAAM,EAAG,CAAC,GAAE6E,EAAEoC,KAAKg2B,IAAI58B,EAAEhI,qBAAqB,SAAS+H,EAAE5B,GAAG,YAAM,IAAoBA,EAAEnG,qBAAqBmG,EAAEnG,qBAAqB+H,GAAGC,EAAEq+B,IAAIlgC,EAAEsgC,iBAAiB1+B,QAAG,CAAO,EAAC,SAASA,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,GAAGjJ,EAAE,EAAE0I,EAAExB,EAAEnG,qBAAqB+H,GAAG,GAAG,MAAMA,EAAE,CAAC,KAAM2E,EAAE/E,EAAE1I,MAAK,IAAIyN,EAAE01B,UAAUl6B,EAAEnM,KAAK2Q,GAAG,OAAOxE,CAAE,QAAOP,CAAE,EAAC6E,EAAEoC,KAAK+1B,MAAM38B,EAAEo+B,wBAAwB,SAASr+B,EAAE5B,GAAG,QAAG,IAAoBA,EAAEigC,wBAAwBhZ,EAAE,OAAOjnB,EAAEigC,uBAAuBr+B,EAAG,EAACF,EAAE,GAAGL,EAAE,IAAIQ,EAAEq+B,IAAIlB,EAAEr6B,KAAK2iB,EAAEgZ,qBAAqBI,IAAG,SAAS9+B,GAAG,IAAI5B,EAAEkC,EAAE5H,YAAYsH,GAAGsgC,UAAU,UAAUpb,EAAE,qBAAqBA,EAAE,kEAAkEllB,EAAE0+B,iBAAiB,wBAAwBhoC,QAAQ+I,EAAEzL,KAAK,SAAS8xB,EAAE,gBAAgB9lB,EAAE0+B,iBAAiB,cAAchoC,QAAQ+I,EAAEzL,KAAK,MAAM8xB,EAAE,aAAaF,EAAE,KAAK5lB,EAAE0+B,iBAAiB,QAAQxZ,EAAE,MAAMxuB,QAAQ+I,EAAEzL,KAAK,OAAOoK,EAAEsnB,EAAE3tB,cAAc,UAAU0iC,aAAa,OAAO,IAAIz6B,EAAEtH,YAAY0F,GAAG4B,EAAE0+B,iBAAiB,aAAahoC,QAAQ+I,EAAEzL,KAAK,MAAM8xB,EAAE,QAAQA,EAAE,KAAKA,EAAE,gBAAgB9lB,EAAE0+B,iBAAiB,YAAYhoC,QAAQ+I,EAAEzL,KAAK,YAAYgM,EAAE0+B,iBAAiB,KAAKxZ,EAAE,MAAMxuB,QAAQ+I,EAAEzL,KAAK,YAAYgM,EAAE0+B,iBAAiB,QAAQj/B,EAAEzL,KAAK,cAAe,IAAE8qC,IAAG,SAAS9+B,GAAGA,EAAEsgC,UAAU,oFAAoF,IAAIliC,EAAEsnB,EAAE3tB,cAAc,SAASqG,EAAEq8B,aAAa,OAAO,UAAUz6B,EAAEtH,YAAY0F,GAAGq8B,aAAa,OAAO,KAAKz6B,EAAE0+B,iBAAiB,YAAYhoC,QAAQ+I,EAAEzL,KAAK,OAAO8xB,EAAE,eAAe,IAAI9lB,EAAE0+B,iBAAiB,YAAYhoC,QAAQ+I,EAAEzL,KAAK,WAAW,aAAasM,EAAE5H,YAAYsH,GAAG69B,UAAS,EAAG,IAAI79B,EAAE0+B,iBAAiB,aAAahoC,QAAQ+I,EAAEzL,KAAK,WAAW,aAAagM,EAAE0+B,iBAAiB,QAAQj/B,EAAEzL,KAAK,OAAQ,MAAIiM,EAAEsgC,gBAAgBnD,EAAEr6B,KAAK3C,EAAEE,EAAE+0B,SAAS/0B,EAAEkgC,uBAAuBlgC,EAAEmgC,oBAAoBngC,EAAEogC,kBAAkBpgC,EAAEqgC,qBAAqB7B,IAAG,SAAS9+B,GAAGC,EAAE2gC,kBAAkBxgC,EAAEvG,KAAKmG,EAAE,KAAKI,EAAEvG,KAAKmG,EAAE,aAAaF,EAAE9L,KAAK,KAAKkyB,EAAG,IAAEzmB,EAAEA,EAAE/I,QAAQ,IAAI2K,OAAO5B,EAAE4F,KAAK,MAAMvF,EAAEA,EAAEpJ,QAAQ,IAAI2K,OAAOvB,EAAEuF,KAAK,MAAMjH,EAAEg/B,EAAEr6B,KAAKzC,EAAEugC,yBAAyB1zB,EAAE/O,GAAGg/B,EAAEr6B,KAAKzC,EAAEwgC,UAAU,SAAS9gC,EAAE5B,GAAG,IAAIuG,EAAE,IAAI3E,EAAEq6B,SAASr6B,EAAE2/B,gBAAgB3/B,EAAEG,EAAE/B,GAAGA,EAAE5F,WAAW,OAAOwH,IAAIG,MAAMA,GAAG,IAAIA,EAAEk6B,YAAY11B,EAAEm8B,SAASn8B,EAAEm8B,SAAS3gC,GAAGH,EAAE6gC,yBAAyB,GAAG7gC,EAAE6gC,wBAAwB1gC,IAAK,EAAC,SAASH,EAAE5B,GAAG,GAAGA,EAAE,KAAMA,EAAEA,EAAE5F,eAAc4F,IAAI4B,EAAE,OAAM,EAAG,OAAM,CAAG,EAAC6lB,EAAEznB,EAAE,SAAS4B,EAAE5B,GAAG,GAAG4B,IAAI5B,EAAE,OAAOC,GAAE,EAAG,EAAE,IAAIsG,GAAG3E,EAAE6gC,yBAAyBziC,EAAEyiC,wBAAwB,OAAOl8B,IAAI,GAAGA,GAAG3E,EAAEk+B,eAAel+B,KAAK5B,EAAE8/B,eAAe9/B,GAAG4B,EAAE6gC,wBAAwBziC,GAAG,KAAK6B,EAAE8gC,cAAc3iC,EAAEyiC,wBAAwB7gC,KAAK2E,EAAE3E,GAAG0lB,GAAG1lB,EAAEk+B,eAAevmC,GAAGwV,EAAExV,EAAEqI,IAAI,EAAE5B,GAAGsnB,GAAGtnB,EAAE8/B,eAAevmC,GAAGwV,EAAExV,EAAEyG,GAAG,EAAE2B,EAAEs8B,EAAEt8B,EAAEC,GAAGq8B,EAAEt8B,EAAE3B,GAAG,EAAE,EAAEuG,GAAG,EAAE,EAAG,EAAC,SAAS3E,EAAE5B,GAAG,GAAG4B,IAAI5B,EAAE,OAAOC,GAAE,EAAG,EAAE,IAAIsG,EAAExE,EAAE,EAAEjJ,EAAE8I,EAAExH,WAAWoH,EAAExB,EAAE5F,WAAW8H,EAAE,CAACN,GAAGF,EAAE,CAAC1B,GAAG,IAAIlH,IAAI0I,EAAE,OAAOI,GAAG0lB,GAAG,EAAEtnB,GAAGsnB,EAAE,EAAExuB,GAAG,EAAE0I,EAAE,EAAEG,EAAEs8B,EAAEt8B,EAAEC,GAAGq8B,EAAEt8B,EAAE3B,GAAG,EAAE,GAAGlH,IAAI0I,EAAE,OAAOq/B,GAAGj/B,EAAE5B,GAAO,IAAJuG,EAAE3E,EAAQ2E,EAAEA,EAAEnM,YAAW8H,EAAE23B,QAAQtzB,GAAO,IAAJA,EAAEvG,EAAQuG,EAAEA,EAAEnM,YAAWsH,EAAEm4B,QAAQtzB,GAAG,KAAMrE,EAAEH,KAAKL,EAAEK,IAAGA,IAAI,OAAOA,EAAE8+B,GAAG3+B,EAAEH,GAAGL,EAAEK,IAAIG,EAAEH,IAAIxI,GAAG,EAAEmI,EAAEK,IAAIxI,EAAE,EAAE,CAAE,GAAE+tB,CAAE,EAACuY,GAAG5I,QAAQ,SAASr1B,EAAE5B,GAAG,OAAO6/B,GAAGj+B,EAAE,KAAK,KAAK5B,EAAG,EAAC6/B,GAAGsC,gBAAgB,SAASvgC,EAAE5B,GAAG,GAAGgnB,EAAEplB,GAAGC,EAAEsgC,iBAAiBlb,IAAI3T,EAAEtT,EAAE,QAAQ0B,IAAIA,EAAEiD,KAAK3E,OAAOqB,IAAIA,EAAEsD,KAAK3E,IAAI,IAAI,IAAIuG,EAAEvE,EAAEvG,KAAKmG,EAAE5B,GAAG,GAAGuG,GAAG1E,EAAE2gC,mBAAmB5gC,EAAEpI,UAAU,KAAKoI,EAAEpI,SAASyiC,SAAS,OAAO11B,CAAE,OAAM3E,GAAG0R,EAAEtT,GAAE,EAAI,QAAO,EAAE6/B,GAAG7/B,EAAEsnB,EAAE,KAAK,CAAC1lB,IAAItJ,MAAO,EAACunC,GAAG6C,SAAS,SAAS9gC,EAAE5B,GAAG,OAAO4B,EAAEk+B,eAAel+B,IAAI0lB,GAAGN,EAAEplB,GAAGmN,EAAEnN,EAAE5B,EAAG,EAAC6/B,GAAG+C,KAAK,SAAShhC,EAAE5B,IAAI4B,EAAEk+B,eAAel+B,IAAI0lB,GAAGN,EAAEplB,GAAG,IAAI2E,EAAEF,EAAEu6B,WAAW5gC,EAAE6lB,eAAe9jB,EAAEwE,GAAG2gB,EAAEzrB,KAAK4K,EAAEu6B,WAAW5gC,EAAE6lB,eAAetf,EAAE3E,EAAE5B,GAAGinB,QAAG,EAAO,YAAO,IAASllB,EAAEA,EAAEF,EAAE+/B,aAAa3a,EAAErlB,EAAEw6B,aAAap8B,IAAI+B,EAAEH,EAAEqgC,iBAAiBjiC,KAAK+B,EAAE8gC,UAAU9gC,EAAElG,MAAM,IAAK,EAACgkC,GAAGiD,OAAO,SAASlhC,GAAG,OAAOA,EAAE,IAAI3L,QAAQopC,GAAGjO,GAAI,EAACyO,GAAGloC,MAAM,SAASiK,GAAG,MAAM,IAAIrL,MAAM,0CAA0CqL,EAAG,EAACi+B,GAAGkD,WAAW,SAASnhC,GAAG,IAAI5B,EAAEuG,EAAE,GAAGxE,EAAE,EAAEjJ,EAAE,EAAE,GAAGmH,GAAG4B,EAAEmhC,iBAAiBrhC,GAAGE,EAAEohC,YAAYrhC,EAAE1C,MAAM,GAAG0C,EAAEwmB,KAAKX,GAAGxnB,EAAE,CAAC,KAAMD,EAAE4B,EAAE9I,MAAKkH,IAAI4B,EAAE9I,KAAKiJ,EAAEwE,EAAE3Q,KAAKkD,IAAI,KAAMiJ,KAAIH,EAAEhD,OAAO2H,EAAExE,GAAG,EAAG,QAAOJ,EAAE,KAAKC,CAAE,EAACJ,EAAEq+B,GAAGqD,QAAQ,SAASthC,GAAG,IAAI5B,EAAEuG,EAAE,GAAGxE,EAAE,EAAEjJ,EAAE8I,EAAEq6B,SAAS,GAAGnjC,GAAG,GAAG,IAAIA,GAAG,IAAIA,GAAG,KAAKA,EAAE,CAAC,GAAG,iBAAiB8I,EAAEuhC,YAAY,OAAOvhC,EAAEuhC,YAAY,IAAIvhC,EAAEA,EAAEwhC,WAAWxhC,EAAEA,EAAEA,EAAEm/B,YAAYx6B,GAAG/E,EAAEI,EAAG,MAAK,GAAG,IAAI9I,GAAG,IAAIA,EAAE,OAAO8I,EAAEyhC,eAAe,KAAMrjC,EAAE4B,EAAEG,MAAKwE,GAAG/E,EAAExB,GAAG,OAAOuG,CAAE,GAAEF,EAAEw5B,GAAGyD,UAAU,CAAC9C,YAAY,GAAG+C,aAAa9C,GAAGtlC,MAAMmjC,EAAEsC,WAAW,CAAC,EAAEn4B,KAAK,CAAC,EAAE+6B,SAAS,CAAC,IAAI,CAAC7D,IAAI,aAAa5C,OAAM,GAAI,IAAI,CAAC4C,IAAI,cAAc,IAAI,CAACA,IAAI,kBAAkB5C,OAAM,GAAI,IAAI,CAAC4C,IAAI,oBAAoB8D,UAAU,CAAC/E,KAAK,SAAS98B,GAAG,OAAOA,EAAE,GAAGA,EAAE,GAAG3L,QAAQkpC,GAAGC,IAAIx9B,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAIA,EAAE,IAAI,IAAI3L,QAAQkpC,GAAGC,IAAI,OAAOx9B,EAAE,KAAKA,EAAE,GAAG,IAAIA,EAAE,GAAG,KAAKA,EAAE1C,MAAM,EAAE,EAAG,EAAC0/B,MAAM,SAASh9B,GAAG,OAAOA,EAAE,GAAGA,EAAE,GAAGikB,cAAc,QAAQjkB,EAAE,GAAG1C,MAAM,EAAE,IAAI0C,EAAE,IAAIi+B,GAAGloC,MAAMiK,EAAE,IAAIA,EAAE,KAAKA,EAAE,GAAGA,EAAE,IAAIA,EAAE,IAAI,GAAG,GAAG,SAASA,EAAE,IAAI,QAAQA,EAAE,KAAKA,EAAE,KAAKA,EAAE,GAAGA,EAAE,IAAI,QAAQA,EAAE,KAAKA,EAAE,IAAIi+B,GAAGloC,MAAMiK,EAAE,IAAIA,CAAE,EAAC+8B,OAAO,SAAS/8B,GAAG,IAAI5B,EAAEuG,GAAG3E,EAAE,IAAIA,EAAE,GAAG,OAAO08B,EAAEM,MAAMj6B,KAAK/C,EAAE,IAAI,MAAMA,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAAIA,EAAE,IAAI,GAAG2E,GAAG63B,EAAEz5B,KAAK4B,KAAKvG,EAAEsmB,EAAE/f,GAAE,MAAOvG,EAAEuG,EAAE9H,QAAQ,IAAI8H,EAAEjO,OAAO0H,GAAGuG,EAAEjO,UAAUsJ,EAAE,GAAGA,EAAE,GAAG1C,MAAM,EAAEc,GAAG4B,EAAE,GAAG2E,EAAErH,MAAM,EAAEc,IAAI4B,EAAE1C,MAAM,EAAE,GAAI,GAAE6F,OAAO,CAAC05B,IAAI,SAAS78B,GAAG,IAAI5B,EAAE4B,EAAE3L,QAAQkpC,GAAGC,IAAIvZ,cAAc,MAAM,MAAMjkB,EAAE,WAAW,OAAM,CAAG,EAAC,SAASA,GAAG,OAAOA,EAAE89B,UAAU99B,EAAE89B,SAAS7Z,gBAAgB7lB,CAAE,CAAC,EAACw+B,MAAM,SAAS58B,GAAG,IAAI5B,EAAEL,EAAEiC,EAAE,KAAK,OAAO5B,IAAIA,EAAE,IAAIiD,OAAO,MAAMykB,EAAE,IAAI9lB,EAAE,IAAI8lB,EAAE,SAAS/nB,EAAEiC,GAAE,SAASA,GAAG,OAAO5B,EAAE2E,KAAK,iBAAiB/C,EAAEigC,WAAWjgC,EAAEigC,gBAAW,IAAoBjgC,EAAEw6B,cAAcx6B,EAAEw6B,aAAa,UAAU,GAAI,GAAE,EAACsC,KAAK,SAASn4B,EAAExE,EAAEjJ,GAAG,OAAO,SAAS8I,GAAG,IAAI5B,EAAE6/B,GAAG+C,KAAKhhC,EAAE2E,GAAG,OAAO,MAAMvG,EAAE,OAAO+B,GAAGA,IAAI/B,GAAG,GAAG,MAAM+B,EAAE/B,IAAIlH,EAAE,OAAOiJ,EAAE/B,IAAIlH,EAAE,OAAOiJ,EAAEjJ,GAAG,IAAIkH,EAAEvB,QAAQ3F,GAAG,OAAOiJ,EAAEjJ,IAAI,EAAEkH,EAAEvB,QAAQ3F,GAAG,OAAOiJ,EAAEjJ,GAAGkH,EAAEd,OAAOpG,EAAER,UAAUQ,EAAE,OAAOiJ,GAAG,GAAG,IAAI/B,EAAE/J,QAAQioC,EAAE,KAAK,KAAKz/B,QAAQ3F,GAAG,OAAOiJ,IAAI/B,IAAIlH,GAAGkH,EAAEd,MAAM,EAAEpG,EAAER,OAAO,KAAKQ,EAAE,KAAM,CAAC,EAAC8lC,MAAM,SAAStY,EAAE1kB,EAAE5B,EAAEgP,EAAE3N,GAAG,IAAI0N,EAAE,QAAQuX,EAAEpnB,MAAM,EAAE,GAAGS,EAAE,SAAS2mB,EAAEpnB,OAAO,GAAG+C,EAAE,YAAYL,EAAE,OAAO,IAAIoN,GAAG,IAAI3N,EAAE,SAASO,GAAG,QAAQA,EAAExH,UAAW,EAAC,SAASwH,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE8O,IAAIpP,EAAE,cAAc,kBAAkBqC,EAAEJ,EAAExH,WAAW0U,EAAE7M,GAAGL,EAAE89B,SAAS7Z,cAActsB,GAAGgN,IAAItE,EAAEJ,GAAE,EAAG,GAAGG,EAAE,CAAC,GAAG+M,EAAE,CAAC,KAAM9O,GAAE,CAAK,IAAJiC,EAAEN,EAAQM,EAAEA,EAAEjC,OAAMgC,EAAEC,EAAEw9B,SAAS7Z,gBAAgB/W,EAAE,IAAI5M,EAAE+5B,SAAS,OAAM,EAAGt6B,EAAE1B,EAAE,SAASqmB,IAAI3kB,GAAG,aAAc,QAAM,CAAG,IAAGA,EAAE,CAAChC,EAAEqC,EAAEohC,WAAWphC,EAAE0hC,WAAW/jC,GAAGpG,GAAwH,IAArHsI,GAAGH,GAAGK,GAAGjJ,GAAG0I,GAAGU,EAAEF,GAAG8kB,KAAK5kB,EAAE4kB,GAAG,CAAC,IAAI5kB,EAAEyhC,YAAYniC,EAAEU,EAAEyhC,UAAU,CAAC,IAAIrd,IAAI,IAAI,KAAKsB,GAAG7lB,EAAE,KAAKA,EAAE,GAAGG,EAAER,GAAGM,EAAE49B,WAAWl+B,GAASQ,IAAIR,GAAGQ,GAAGA,EAAEjC,KAAK4B,EAAEH,EAAE,IAAIC,EAAEgO,UAAS,IAAIzN,EAAE+5B,YAAYp6B,GAAGK,IAAIN,EAAE,CAAC9I,EAAEwtB,GAAG,CAACsB,EAAElmB,EAAEG,GAAG,KAAM,OAAM,GAAGtI,IAAIsI,EAAEH,GAAGK,GAAGjJ,GAAG0I,GAAGU,EAAEN,GAAGklB,KAAK5kB,EAAE4kB,GAAG,CAAC,IAAI5kB,EAAEyhC,YAAYniC,EAAEU,EAAEyhC,UAAU,CAAC,IAAIrd,IAAI,IAAI,KAAKsB,GAAG7lB,EAAE,KAAI,IAAKF,EAAE,MAAMK,IAAIR,GAAGQ,GAAGA,EAAEjC,KAAK4B,EAAEH,EAAE,IAAIC,EAAEgO,UAAU1N,EAAEC,EAAEw9B,SAAS7Z,gBAAgB/W,EAAE,IAAI5M,EAAE+5B,cAAap6B,IAAItI,KAAKT,GAAG0I,EAAEU,EAAE4kB,KAAK5kB,EAAE4kB,GAAG,CAAC,IAAI5kB,EAAEyhC,YAAYniC,EAAEU,EAAEyhC,UAAU,CAAC,IAAIrd,GAAG,CAACsB,EAAE/lB,IAAIK,IAAIN,MAAS,OAAOC,GAAGR,KAAK2N,GAAGnN,EAAEmN,GAAG,GAAG,GAAGnN,EAAEmN,CAAE,CAAC,CAAC,EAAC2vB,OAAO,SAAS/8B,EAAEJ,GAAG,IAAIxB,EAAEkC,EAAEmE,EAAEu9B,QAAQhiC,IAAIyE,EAAEw9B,WAAWjiC,EAAEikB,gBAAgBga,GAAGloC,MAAM,uBAAuBiK,GAAG,OAAOM,EAAE4kB,GAAG5kB,EAAEV,GAAG,EAAEU,EAAE5J,QAAQ0H,EAAE,CAAC4B,EAAEA,EAAE,GAAGJ,GAAG6E,EAAEw9B,WAAWroC,eAAeoG,EAAEikB,eAAe4a,IAAG,SAAS7+B,EAAE5B,GAA6B,IAA1B,IAAIuG,EAAExE,EAAEG,EAAEN,EAAEJ,GAAG1I,EAAEiJ,EAAEzJ,OAAaQ,KAAI8I,EAAE2E,EAAE03B,EAAEr8B,EAAEG,EAAEjJ,OAAOkH,EAAEuG,GAAGxE,EAAEjJ,GAAI,IAAE,SAAS8I,GAAG,OAAOM,EAAEN,EAAE,EAAE5B,EAAG,GAAEkC,CAAE,GAAE0hC,QAAQ,CAACE,IAAIrD,IAAG,SAAS7+B,GAAG,IAAIG,EAAE,GAAGjJ,EAAE,GAAG4I,EAAEoN,EAAElN,EAAE3L,QAAQkoC,EAAE,OAAO,OAAOz8B,EAAEolB,GAAG2Z,IAAG,SAAS7+B,EAAE5B,EAAEuG,EAAExE,GAAqC,IAAlC,IAAIjJ,EAAE0I,EAAEE,EAAEE,EAAE,KAAKG,EAAE,IAAIG,EAAEN,EAAEtJ,OAAa4J,MAAKpJ,EAAE0I,EAAEU,MAAMN,EAAEM,KAAKlC,EAAEkC,GAAGpJ,GAAI,IAAE,SAAS8I,EAAE5B,EAAEuG,GAAG,OAAOxE,EAAE,GAAGH,EAAEF,EAAEK,EAAE,KAAKwE,EAAEzN,GAAGiJ,EAAE,GAAG,MAAMjJ,EAAE6W,KAAM,CAAC,IAAEuI,IAAIuoB,IAAG,SAASzgC,GAAG,OAAO,SAAS4B,GAAG,OAAO,EAAEi+B,GAAG7/B,EAAE4B,GAAGtJ,MAAO,CAAC,IAAEoqC,SAASjC,IAAG,SAASzgC,GAAG,OAAOA,EAAEA,EAAE/J,QAAQkpC,GAAGC,IAAI,SAASx9B,GAAG,OAAO,GAAGA,EAAEuhC,aAAa3hC,EAAEI,IAAInD,QAAQuB,EAAG,CAAC,IAAE+jC,KAAKtD,IAAG,SAASl6B,GAAG,OAAO83B,EAAE15B,KAAK4B,GAAG,KAAKs5B,GAAGloC,MAAM,qBAAqB4O,GAAGA,EAAEA,EAAEtQ,QAAQkpC,GAAGC,IAAIvZ,cAAc,SAASjkB,GAAG,IAAI5B,EAAE,GAAG,GAAGA,EAAEinB,EAAErlB,EAAEmiC,KAAKniC,EAAEw6B,aAAa,aAAax6B,EAAEw6B,aAAa,QAAQ,OAAOp8B,EAAEA,EAAE6lB,iBAAiBtf,GAAG,IAAIvG,EAAEvB,QAAQ8H,EAAE,YAAY3E,EAAEA,EAAExH,aAAa,IAAIwH,EAAEq6B,UAAU,OAAM,CAAG,CAAC,IAAEjE,OAAO,SAASp2B,GAAG,IAAI5B,EAAEuG,EAAEnC,UAAUmC,EAAEnC,SAAS4/B,KAAK,OAAOhkC,GAAGA,EAAEd,MAAM,KAAK0C,EAAExB,EAAG,EAACtN,KAAK,SAAS8O,GAAG,OAAOA,IAAIM,CAAE,EAAC8uB,MAAM,SAASpvB,GAAG,OAAOA,IAAI0lB,EAAE2c,iBAAiB3c,EAAE4c,UAAU5c,EAAE4c,gBAAgBtiC,EAAEoD,MAAMpD,EAAEy0B,OAAOz0B,EAAEuiC,SAAU,EAAChjB,QAAQ+f,IAAG,GAAIzB,SAASyB,IAAG,GAAIkD,QAAQ,SAASxiC,GAAG,IAAI5B,EAAE4B,EAAE89B,SAAS7Z,cAAc,MAAM,UAAU7lB,KAAK4B,EAAEwiC,SAAS,WAAWpkC,KAAK4B,EAAEyiC,QAAS,EAACA,SAAS,SAASziC,GAAG,OAAOA,EAAExH,YAAYwH,EAAExH,WAAWkqC,eAAc,IAAK1iC,EAAEyiC,QAAS,EAACE,MAAM,SAAS3iC,GAAG,IAAIA,EAAEA,EAAEwhC,WAAWxhC,EAAEA,EAAEA,EAAEm/B,YAAY,GAAGn/B,EAAEq6B,SAAS,EAAE,OAAM,EAAG,OAAM,CAAG,EAACuI,OAAO,SAAS5iC,GAAG,OAAOyE,EAAEu9B,QAAQW,MAAM3iC,EAAG,EAAC6iC,OAAO,SAAS7iC,GAAG,OAAOimB,EAAEljB,KAAK/C,EAAE89B,SAAU,EAACgF,MAAM,SAAS9iC,GAAG,OAAO+lB,EAAEhjB,KAAK/C,EAAE89B,SAAU,EAACiF,OAAO,SAAS/iC,GAAG,IAAI5B,EAAE4B,EAAE89B,SAAS7Z,cAAc,MAAM,UAAU7lB,GAAG,WAAW4B,EAAEoD,MAAM,WAAWhF,CAAE,EAACrF,KAAK,SAASiH,GAAG,IAAI5B,EAAE,MAAM,UAAU4B,EAAE89B,SAAS7Z,eAAe,SAASjkB,EAAEoD,OAAO,OAAOhF,EAAE4B,EAAEw6B,aAAa,UAAU,SAASp8B,EAAE6lB,cAAe,EAACkX,MAAMqE,IAAG,WAAW,MAAM,CAAC,EAAG,IAAEnE,KAAKmE,IAAG,SAASx/B,EAAE5B,GAAG,MAAM,CAACA,EAAE,EAAG,IAAEg9B,GAAGoE,IAAG,SAASx/B,EAAE5B,EAAEuG,GAAG,MAAM,CAACA,EAAE,EAAEA,EAAEvG,EAAEuG,EAAG,IAAE22B,KAAKkE,IAAG,SAASx/B,EAAE5B,GAAG,IAAI,IAAIuG,EAAE,EAAEA,EAAEvG,EAAEuG,GAAG,EAAE3E,EAAEhM,KAAK2Q,GAAG,OAAO3E,CAAE,IAAEw7B,IAAIgE,IAAG,SAASx/B,EAAE5B,GAAG,IAAI,IAAIuG,EAAE,EAAEA,EAAEvG,EAAEuG,GAAG,EAAE3E,EAAEhM,KAAK2Q,GAAG,OAAO3E,CAAE,IAAEgjC,GAAGxD,IAAG,SAASx/B,EAAE5B,EAAEuG,GAAG,IAAI,IAAIxE,EAAEwE,EAAE,EAAEA,EAAEvG,EAAEA,EAAEuG,EAAEvG,EAAEuG,EAAE,KAAKxE,GAAGH,EAAEhM,KAAKmM,GAAG,OAAOH,CAAE,IAAEijC,GAAGzD,IAAG,SAASx/B,EAAE5B,EAAEuG,GAAG,IAAI,IAAIxE,EAAEwE,EAAE,EAAEA,EAAEvG,EAAEuG,IAAIxE,EAAE/B,GAAG4B,EAAEhM,KAAKmM,GAAG,OAAOH,CAAE,OAAKgiC,QAAQkB,IAAIz+B,EAAEu9B,QAAQ5G,GAAG,CAAC+H,OAAM,EAAGC,UAAS,EAAGC,MAAK,EAAGC,UAAS,EAAGC,OAAM,GAAI9+B,EAAEu9B,QAAQhiC,GAAGo/B,GAAGp/B,GAAG,IAAIA,IAAI,CAACwjC,QAAO,EAAGC,OAAM,GAAIh/B,EAAEu9B,QAAQhiC,GAAGq/B,GAAGr/B,GAAG,SAAS0jC,KAAM,UAASjF,GAAGz+B,GAAG,IAAI,IAAI5B,EAAE,EAAEuG,EAAE3E,EAAEtJ,OAAOyJ,EAAE,GAAG/B,EAAEuG,EAAEvG,IAAI+B,GAAGH,EAAE5B,GAAGnE,MAAM,OAAOkG,CAAE,UAASy9B,GAAG99B,EAAEE,EAAE5B,GAAG,IAAI2B,EAAEC,EAAE+9B,IAAI1/B,EAAE2B,EAAEvG,KAAK2G,EAAE/B,GAAG0B,EAAEmN,EAAE9O,GAAG,eAAegC,EAAEzI,EAAEwI,IAAI,OAAOH,EAAEm7B,MAAM,SAASn7B,EAAE5B,EAAEuG,GAAG,KAAM3E,EAAEA,EAAED,OAAM,IAAIC,EAAEq6B,UAAUntB,EAAE,OAAOpN,EAAEE,EAAE5B,EAAEuG,GAAG,OAAM,CAAG,EAAC,SAAS3E,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEU,EAAE,CAAC0lB,EAAEruB,GAAG,GAAGgN,GAAG,KAAM3E,EAAEA,EAAED,QAAO,IAAIC,EAAEq6B,UAAUntB,IAAIpN,EAAEE,EAAE5B,EAAEuG,GAAG,OAAM,OAAQ,KAAM3E,EAAEA,EAAED,OAAM,IAAIC,EAAEq6B,UAAUntB,EAAE,GAAGhW,GAAG0I,EAAEI,EAAEklB,KAAKllB,EAAEklB,GAAG,CAAC,IAAIllB,EAAE+hC,YAAYniC,EAAEI,EAAE+hC,UAAU,CAAC,GAAG1jC,GAAGA,IAAI2B,EAAE89B,SAAS7Z,cAAcjkB,EAAEA,EAAED,IAAIC,MAAM,CAAC,IAAIG,EAAEjJ,EAAEkJ,KAAKD,EAAE,KAAK6lB,GAAG7lB,EAAE,KAAKxI,EAAE,OAAO2I,EAAE,GAAGH,EAAE,GAAG,IAAIjJ,EAAEkJ,GAAGE,GAAG,GAAGR,EAAEE,EAAE5B,EAAEuG,GAAG,OAAM,CAAG,QAAM,CAAG,CAAC,UAASg/B,GAAGzsC,GAAG,OAAO,EAAEA,EAAER,OAAO,SAASsJ,EAAE5B,EAAEuG,GAAkB,IAAf,IAAIxE,EAAEjJ,EAAER,OAAayJ,SAAQjJ,EAAEiJ,GAAGH,EAAE5B,EAAEuG,GAAG,OAAM,EAAG,OAAM,CAAG,EAACzN,EAAE,EAAG,UAAS0sC,GAAG5jC,EAAE5B,EAAEuG,EAAExE,EAAEjJ,GAAG,IAAI,IAAI0I,EAAEU,EAAE,GAAGR,EAAE,EAAEC,EAAEC,EAAEtJ,OAAO2H,EAAE,MAAMD,EAAE0B,EAAEC,EAAED,KAAKF,EAAEI,EAAEF,MAAM6E,IAAIA,EAAE/E,EAAEO,EAAEjJ,KAAKoJ,EAAEtM,KAAK4L,GAAGvB,GAAGD,EAAEpK,KAAK8L,KAAK,OAAOQ,CAAE,UAASujC,GAAG5jC,EAAEykB,EAAEtX,EAAE3N,EAAE0N,EAAEnN,GAAG,OAAOP,IAAIA,EAAEylB,KAAKzlB,EAAEokC,GAAGpkC,IAAI0N,IAAIA,EAAE+X,KAAK/X,EAAE02B,GAAG12B,EAAEnN,IAAI6+B,IAAG,SAAS7+B,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAER,EAAE,GAAGC,EAAE,GAAG1B,EAAED,EAAE1H,OAAO0J,EAAEJ,GAAG,SAASA,EAAE5B,EAAEuG,GAAG,IAAI,IAAIxE,EAAE,EAAEjJ,EAAEkH,EAAE1H,OAAOyJ,EAAEjJ,EAAEiJ,IAAI89B,GAAGj+B,EAAE5B,EAAE+B,GAAGwE,GAAG,OAAOA,CAAE,CAArE,CAAsE+f,GAAG,IAAI/f,EAAE01B,SAAS,CAAC11B,GAAGA,EAAE,IAAIuI,GAAGjN,IAAID,GAAG0kB,EAAEtkB,EAAEwjC,GAAGxjC,EAAEN,EAAEG,EAAE0E,EAAExE,GAAGxI,EAAEyV,EAAED,IAAInN,EAAEC,EAAE5B,GAAGoB,GAAG,GAAGrB,EAAE8O,EAAE,GAAGE,GAAGA,EAAEF,EAAEvV,EAAEgN,EAAExE,GAAGV,EAAoC,IAAjCvI,EAAE0sC,GAAGjsC,EAAEoI,GAAGN,EAAEvI,EAAE,GAAGyN,EAAExE,GAAGP,EAAE1I,EAAER,OAAakJ,MAAKU,EAAEpJ,EAAE0I,MAAMjI,EAAEoI,EAAEH,MAAMsN,EAAEnN,EAAEH,IAAIU,IAAI,GAAGN,GAAG,GAAGmN,GAAGlN,EAAE,CAAC,GAAGkN,EAAE,CAAiB,IAAhBjW,EAAE,GAAG0I,EAAEjI,EAAEjB,OAAakJ,MAAKU,EAAE3I,EAAEiI,KAAK1I,EAAElD,KAAKkZ,EAAEtN,GAAGU,GAAG6M,EAAE,KAAKxV,EAAE,GAAGT,EAAEiJ,EAAG,CAAW,IAAXP,EAAEjI,EAAEjB,OAAakJ,MAAKU,EAAE3I,EAAEiI,MAAM,GAAG1I,EAAEiW,EAAEkvB,EAAEr8B,EAAEM,GAAGR,EAAEF,MAAMI,EAAE9I,KAAKkH,EAAElH,GAAGoJ,GAAI,OAAM3I,EAAEisC,GAAGjsC,IAAIyG,EAAEzG,EAAEqF,OAAOqB,EAAE1G,EAAEjB,QAAQiB,GAAGwV,EAAEA,EAAE,KAAK/O,EAAEzG,EAAEwI,GAAGslB,EAAEvwB,MAAMkJ,EAAEzG,EAAG,GAAE,UAASmsC,GAAG9jC,GAAG,IAAI,IAAI9I,EAAEkH,EAAEuG,EAAExE,EAAEH,EAAEtJ,OAAOkJ,EAAE6E,EAAEm9B,SAAS5hC,EAAE,GAAGoD,MAAM9C,EAAEV,GAAG6E,EAAEm9B,SAAS,KAAK9hC,EAAEF,EAAE,EAAE,EAAEG,EAAE69B,IAAG,SAAS59B,GAAG,OAAOA,IAAI9I,CAAE,GAACoJ,GAAE,GAAIjC,EAAEu/B,IAAG,SAAS59B,GAAG,OAAO,EAAEq8B,EAAEnlC,EAAE8I,EAAG,GAACM,GAAE,GAAIF,EAAE,CAAC,SAASJ,EAAE5B,EAAEuG,GAAG,IAAIxE,GAAGP,IAAI+E,GAAGvG,IAAI2mB,MAAM7tB,EAAEkH,GAAGi8B,SAASt6B,EAAEC,EAAE5B,EAAEuG,GAAGtG,EAAE2B,EAAE5B,EAAEuG,IAAI,OAAOzN,EAAE,KAAKiJ,CAAE,GAAEL,EAAEK,EAAEL,IAAI,GAAG1B,EAAEqG,EAAEm9B,SAAS5hC,EAAEF,GAAGsD,MAAMhD,EAAE,CAACw9B,GAAG+F,GAAGvjC,GAAGhC,QAAQ,CAAC,IAAIA,EAAEqG,EAAEtB,OAAOnD,EAAEF,GAAGsD,MAAMlO,MAAM,KAAK8K,EAAEF,GAAGu1B,UAAUnQ,GAAG,CAAC,IAAIvgB,IAAI7E,EAAE6E,EAAExE,IAASsE,EAAEm9B,SAAS5hC,EAAE2E,GAAGvB,MAAvBuB,KAAmC,OAAOk/B,GAAG,EAAE/jC,GAAG6jC,GAAGvjC,GAAG,EAAEN,GAAG2+B,GAAGz+B,EAAE1C,MAAM,EAAEwC,EAAE,GAAG3B,OAAO,CAAClE,MAAM,MAAM+F,EAAEF,EAAE,GAAGsD,KAAK,IAAI,MAAM/O,QAAQkoC,EAAE,MAAMn+B,EAAE0B,EAAE6E,GAAGm/B,GAAG9jC,EAAE1C,MAAMwC,EAAE6E,IAAIA,EAAExE,GAAG2jC,GAAG9jC,EAAEA,EAAE1C,MAAMqH,IAAIA,EAAExE,GAAGs+B,GAAGz+B,GAAI,CAAAI,EAAEpM,KAAKoK,EAAG,QAAOulC,GAAGvjC,EAAG,QAAOsjC,GAAG9uC,UAAU6P,EAAEs/B,QAAQt/B,EAAEu9B,QAAQv9B,EAAEw9B,WAAW,IAAIyB,GAAGhf,EAAEuZ,GAAG+F,SAAS,SAAShkC,EAAE5B,GAAG,IAAIuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAEgC,EAAEL,EAAE,KAAK,GAAG3B,EAAE,OAAOD,EAAE,EAAEC,EAAEf,MAAM,GAA0B,IAAvBgD,EAAEN,EAAEF,EAAE,GAAGC,EAAE0E,EAAEo9B,UAAgBvhC,GAAE,CAAC,IAAIV,KAAK+E,KAAKxE,EAAED,EAAEi+B,KAAK79B,MAAMH,IAAIG,EAAEA,EAAEhD,MAAM6C,EAAE,GAAGzJ,SAAS4J,GAAGR,EAAE9L,KAAKkD,EAAE,KAAKyN,GAAE,GAAIxE,EAAEkN,EAAE8wB,KAAK79B,MAAMqE,EAAExE,EAAEygB,QAAQ1pB,EAAElD,KAAK,CAACiG,MAAM0K,EAAEvB,KAAKjD,EAAE,GAAG9L,QAAQkoC,EAAE,OAAOj8B,EAAEA,EAAEhD,MAAMqH,EAAEjO,SAAS+N,EAAEtB,SAAShD,EAAEu8B,EAAE98B,GAAGu+B,KAAK79B,KAAKP,EAAEH,MAAMO,EAAEJ,EAAEH,GAAGO,MAAMwE,EAAExE,EAAEygB,QAAQ1pB,EAAElD,KAAK,CAACiG,MAAM0K,EAAEvB,KAAKxD,EAAEy1B,QAAQl1B,IAAIG,EAAEA,EAAEhD,MAAMqH,EAAEjO,SAAS,IAAIiO,EAAE,KAAM,QAAOvG,EAAEkC,EAAE5J,OAAO4J,EAAE29B,GAAGloC,MAAMiK,GAAGK,EAAEL,EAAEF,GAAGxC,MAAM,EAAG,EAAC4P,EAAE+wB,GAAGgG,QAAQ,SAASjkC,EAAE5B,GAAG,IAAIuG,EAAElF,EAAE0N,EAAEpP,EAAEsC,EAAEF,EAAEjJ,EAAE,GAAG0I,EAAE,GAAGU,EAAE6kB,EAAEnlB,EAAE,KAAK,IAAIM,EAAE,CAAwB,IAAvBlC,IAAIA,EAAEsmB,EAAE1kB,IAAI2E,EAAEvG,EAAE1H,OAAaiO,MAAKrE,EAAEwjC,GAAG1lC,EAAEuG,KAAKugB,GAAGhuB,EAAElD,KAAKsM,GAAGV,EAAE5L,KAAKsM,IAAIA,EAAE6kB,EAAEnlB,GAAGP,EAAEG,EAAE7B,EAAE,GAAGoP,EAAEjW,GAAGR,OAAO2J,EAAE,EAAEZ,EAAE/I,OAAOyJ,EAAE,SAASH,EAAE5B,EAAEuG,EAAExE,EAAEjJ,GAAG,IAAI0I,EAAEU,EAAER,EAAEC,EAAE,EAAE1B,EAAE,IAAI+B,EAAEJ,GAAG,GAAGkN,EAAE,GAAGvV,EAAEotB,EAAE9kB,EAAED,GAAGK,GAAGoE,EAAEoC,KAAKg2B,IAAI,IAAI3lC,GAAGwtB,EAAEsB,GAAG,MAAMruB,EAAE,EAAEtB,KAAKE,UAAU,GAAG6W,EAAEnN,EAAEvJ,OAAO,IAAIQ,IAAI6tB,EAAE3mB,GAAGsnB,GAAGtnB,GAAGlH,GAAGmH,IAAI+O,GAAG,OAAOxN,EAAEK,EAAE5B,IAAIA,IAAI,CAAC,GAAGgC,GAAGT,EAAE,CAAwC,IAAvCU,EAAE,EAAElC,GAAGwB,EAAEs+B,eAAexY,IAAIN,EAAExlB,GAAG+E,GAAG0gB,GAASvlB,EAAEL,EAAEa,SAAQR,EAAEF,EAAExB,GAAGsnB,EAAE/gB,GAAG,CAACxE,EAAEnM,KAAK4L,GAAG,KAAM,CAAA1I,IAAI8uB,EAAEtB,EAAG,CAAA3mB,KAAK6B,GAAGE,GAAGF,IAAIG,IAAIC,GAAGI,EAAEpM,KAAK4L,GAAI,IAAGG,GAAG1B,EAAEN,GAAGM,IAAI0B,EAAE,CAAK,IAAJO,EAAE,EAAQR,EAAEqN,EAAE7M,MAAKR,EAAEM,EAAE8M,EAAE9O,EAAEuG,GAAG,GAAG3E,EAAE,CAAC,GAAG,EAAED,EAAE,KAAM1B,KAAI+B,EAAE/B,IAAI6O,EAAE7O,KAAK6O,EAAE7O,GAAGkF,EAAE1J,KAAKsG,IAAI+M,EAAE02B,GAAG12B,EAAG,CAAAuY,EAAEvwB,MAAMiL,EAAE+M,GAAGhW,IAAI8I,GAAG,EAAEkN,EAAExW,QAAQ,EAAEqJ,EAAEoN,EAAEzW,QAAQunC,GAAGkD,WAAWhhC,EAAG,QAAOjJ,IAAI8uB,EAAEtB,EAAEK,EAAEptB,GAAGyI,CAAE,EAACrC,EAAE8gC,GAAG1+B,GAAGA,KAAK+jC,SAASlkC,CAAE,QAAOM,CAAE,EAAC8M,EAAE6wB,GAAGkG,OAAO,SAASnkC,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE,mBAAmB2B,GAAGA,EAAEI,GAAGD,GAAGukB,EAAE1kB,EAAE3B,EAAE6lC,UAAUlkC,GAAG,GAAG2E,EAAEA,GAAG,GAAG,IAAIvE,EAAE1J,OAAO,CAAC,GAAG,GAAGkJ,EAAEQ,EAAE,GAAGA,EAAE,GAAG9C,MAAM,IAAI5G,QAAQ,QAAQ4J,EAAEV,EAAE,IAAIwD,MAAM,IAAIhF,EAAEi8B,UAAUhV,GAAG5gB,EAAEm9B,SAAShiC,EAAE,GAAGwD,MAAM,CAAC,KAAKhF,GAAGqG,EAAEoC,KAAK81B,GAAGr8B,EAAE+0B,QAAQ,GAAGhhC,QAAQkpC,GAAGC,IAAIp/B,IAAI,IAAI,IAAI,OAAOuG,EAAEtG,IAAID,EAAEA,EAAE5F,YAAYwH,EAAEA,EAAE1C,MAAMsC,EAAEghB,QAAQ3mB,MAAMvD,OAAQ,CAAoC,IAApCQ,EAAEwlC,EAAEQ,aAAan6B,KAAK/C,GAAG,EAAEJ,EAAElJ,OAAaQ,MAAQoJ,EAAEV,EAAE1I,IAAGuN,EAAEm9B,SAAS9hC,EAAEQ,EAAE8C,QAAY,IAAIrD,EAAE0E,EAAEoC,KAAK/G,MAAMK,EAAEJ,EAAEO,EAAE+0B,QAAQ,GAAGhhC,QAAQkpC,GAAGC,IAAIF,GAAGv6B,KAAKnD,EAAE,GAAGwD,OAAOm7B,GAAGngC,EAAE5F,aAAa4F,IAAI,CAAC,GAAGwB,EAAE5C,OAAO9F,EAAE,KAAK8I,EAAEG,EAAEzJ,QAAQ+nC,GAAG7+B,IAAI,OAAO6lB,EAAEvwB,MAAMyP,EAAExE,GAAGwE,EAAE,KAAM,CAAE,QAAOtG,GAAG6O,EAAElN,EAAEI,IAAID,EAAE/B,GAAGinB,EAAE1gB,GAAGvG,GAAGk/B,GAAGv6B,KAAK/C,IAAIu+B,GAAGngC,EAAE5F,aAAa4F,GAAGuG,CAAE,EAAC1E,EAAEohC,WAAWnc,EAAEpnB,MAAM,IAAI0oB,KAAKX,GAAGxgB,KAAK,MAAM6f,EAAEjlB,EAAEmhC,mBAAmB/iC,EAAE+mB,IAAInlB,EAAE8gC,aAAajC,IAAG,SAAS9+B,GAAG,OAAO,EAAEA,EAAE6gC,wBAAwBnb,EAAE3tB,cAAc,YAAa,IAAE+mC,IAAG,SAAS9+B,GAAG,OAAOA,EAAEsgC,UAAU,mBAAmB,MAAMtgC,EAAEwhC,WAAWhH,aAAa,OAAQ,KAAGuE,GAAG,0BAAyB,SAAS/+B,EAAE5B,EAAEuG,GAAG,IAAIA,EAAE,OAAO3E,EAAEw6B,aAAap8B,EAAE,SAASA,EAAE6lB,cAAc,EAAE,EAAG,IAAEhkB,EAAE+/B,YAAYlB,IAAG,SAAS9+B,GAAG,OAAOA,EAAEsgC,UAAU,WAAWtgC,EAAEwhC,WAAW/G,aAAa,QAAQ,IAAI,KAAKz6B,EAAEwhC,WAAWhH,aAAa,QAAS,KAAGuE,GAAG,SAAQ,SAAS/+B,EAAE5B,EAAEuG,GAAG,IAAIA,GAAG,UAAU3E,EAAE89B,SAAS7Z,cAAc,OAAOjkB,EAAEokC,YAAa,IAAEtF,IAAG,SAAS9+B,GAAG,OAAO,MAAMA,EAAEw6B,aAAa,WAAY,KAAGuE,GAAGnZ,GAAE,SAAS5lB,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAE,IAAIwE,EAAE,OAAM,IAAK3E,EAAE5B,GAAGA,EAAE6lB,eAAe9jB,EAAEH,EAAEqgC,iBAAiBjiC,KAAK+B,EAAE8gC,UAAU9gC,EAAElG,MAAM,IAAK,IAAEgkC,EAAG,CAA7gnB,CAA8gnB7wB,GAAGiY,EAAExe,KAAK5G,EAAEolB,EAAE3hB,KAAKzD,EAAEyhC,UAAUrc,EAAE3hB,KAAK,KAAK2hB,EAAE3hB,KAAKs+B,QAAQ3c,EAAE8b,WAAW9b,EAAEgf,OAAOpkC,EAAEkhC,WAAW9b,EAAEtsB,KAAKkH,EAAEqhC,QAAQjc,EAAEif,SAASrkC,EAAEw/B,MAAMpa,EAAEyb,SAAS7gC,EAAE6gC,SAASzb,EAAEkf,eAAetkC,EAAEihC,OAAO,IAAIxc,EAAE,SAAS1kB,EAAE5B,EAAEuG,GAAyB,IAAtB,IAAIxE,EAAE,GAAGjJ,OAAE,IAASyN,GAAS3E,EAAEA,EAAE5B,KAAK,IAAI4B,EAAEq6B,aAAY,IAAIr6B,EAAEq6B,SAAS,CAAC,GAAGnjC,GAAGmuB,EAAErlB,GAAGm0B,GAAGxvB,GAAG,MAAMxE,EAAEnM,KAAKgM,EAAG,QAAOG,CAAE,EAAC+kB,EAAE,SAASllB,EAAE5B,GAAG,IAAI,IAAIuG,EAAE,GAAG3E,EAAEA,EAAEA,EAAEm/B,YAAY,IAAIn/B,EAAEq6B,UAAUr6B,IAAI5B,GAAGuG,EAAE3Q,KAAKgM,GAAG,OAAO2E,CAAE,EAACqhB,EAAEX,EAAE3hB,KAAKnK,MAAM2jC,aAAa,SAAS/X,EAAEnlB,EAAE5B,GAAG,OAAO4B,EAAE89B,UAAU99B,EAAE89B,SAAS7Z,gBAAgB7lB,EAAE6lB,aAAc,KAAIvS,EAAE,kEAAkE,SAASmU,EAAE7lB,EAAE2E,EAAExE,GAAG,OAAOE,EAAEsE,GAAG0gB,EAAEkW,KAAKv7B,GAAE,SAASA,EAAE5B,GAAG,QAAQuG,EAAE9K,KAAKmG,EAAE5B,EAAE4B,KAAKG,CAAE,IAAEwE,EAAE01B,SAAShV,EAAEkW,KAAKv7B,GAAE,SAASA,GAAG,OAAOA,IAAI2E,IAAIxE,CAAE,IAAE,iBAAiBwE,EAAE0gB,EAAEkW,KAAKv7B,GAAE,SAASA,GAAG,OAAO,EAAE9I,EAAE2C,KAAK8K,EAAE3E,KAAKG,CAAE,IAAEklB,EAAEliB,OAAOwB,EAAE3E,EAAEG,EAAG,CAAAklB,EAAEliB,OAAO,SAASnD,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAE/B,EAAE,GAAG,OAAOuG,IAAI3E,EAAE,QAAQA,EAAE,KAAK,IAAI5B,EAAE1H,QAAQ,IAAIyJ,EAAEk6B,SAAShV,EAAExe,KAAK05B,gBAAgBpgC,EAAEH,GAAG,CAACG,GAAG,GAAGklB,EAAExe,KAAKwuB,QAAQr1B,EAAEqlB,EAAEkW,KAAKn9B,GAAE,SAAS4B,GAAG,OAAO,IAAIA,EAAEq6B,QAAS,IAAG,EAAChV,EAAEuV,GAAGa,OAAO,CAAC50B,KAAK,SAAS7G,GAAG,IAAI5B,EAAEuG,EAAExE,EAAE/N,KAAKsE,OAAOQ,EAAE9E,KAAK,GAAG,iBAAiB4N,EAAE,OAAO5N,KAAK2oC,UAAU1V,EAAErlB,GAAGmD,QAAO,WAAW,IAAI/E,EAAE,EAAEA,EAAE+B,EAAE/B,IAAI,GAAGinB,EAAEyb,SAAS5pC,EAAEkH,GAAGhM,MAAM,OAAM,CAAG,KAAG,IAAIuS,EAAEvS,KAAK2oC,UAAU,IAAI38B,EAAE,EAAEA,EAAE+B,EAAE/B,IAAIinB,EAAExe,KAAK7G,EAAE9I,EAAEkH,GAAGuG,GAAG,OAAO,EAAExE,EAAEklB,EAAE8b,WAAWx8B,GAAGA,CAAE,EAACxB,OAAO,SAASnD,GAAG,OAAO5N,KAAK2oC,UAAUlV,EAAEzzB,KAAK4N,GAAG,IAAG,GAAK,EAACkiC,IAAI,SAASliC,GAAG,OAAO5N,KAAK2oC,UAAUlV,EAAEzzB,KAAK4N,GAAG,IAAG,GAAK,EAACm0B,GAAG,SAASn0B,GAAG,QAAQ6lB,EAAEzzB,KAAK,iBAAiB4N,GAAGgmB,EAAEjjB,KAAK/C,GAAGqlB,EAAErlB,GAAGA,GAAG,IAAG,GAAItJ,MAAO,IAAG,IAAI4uB,EAAE/hB,EAAE,uCAAuC8hB,EAAEuV,GAAG9uB,KAAK,SAAS9L,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE,IAAI8I,EAAE,OAAO5N,KAAK,GAAGuS,EAAEA,GAAG2gB,EAAE,iBAAiBtlB,EAAE,CAAC,KAAKG,EAAE,MAAMH,EAAE,IAAI,MAAMA,EAAEA,EAAEtJ,OAAO,IAAI,GAAGsJ,EAAEtJ,OAAO,CAAC,KAAKsJ,EAAE,MAAMuD,EAAE46B,KAAKn+B,MAAMG,EAAE,IAAI/B,EAAE,OAAOA,GAAGA,EAAEy8B,QAAQz8B,GAAGuG,GAAGkC,KAAK7G,GAAG5N,KAAKJ,YAAYoM,GAAGyI,KAAK7G,GAAG,GAAGG,EAAE,GAAG,CAAC,GAAG/B,EAAEA,aAAainB,EAAEjnB,EAAE,GAAGA,EAAEinB,EAAE2V,MAAM5oC,KAAKizB,EAAEmf,UAAUrkC,EAAE,GAAG/B,GAAGA,EAAEi8B,SAASj8B,EAAE8/B,eAAe9/B,EAAE2mB,GAAE,IAAKrT,EAAE3O,KAAK5C,EAAE,KAAKklB,EAAEqW,cAAct9B,GAAG,IAAI+B,KAAK/B,EAAEiC,EAAEjO,KAAK+N,IAAI/N,KAAK+N,GAAG/B,EAAE+B,IAAI/N,KAAK4uC,KAAK7gC,EAAE/B,EAAE+B,IAAI,OAAO/N,IAAK,QAAO8E,EAAE6tB,EAAEqZ,eAAej+B,EAAE,OAAO/N,KAAK,GAAG8E,EAAE9E,KAAKsE,OAAO,GAAGtE,IAAK,QAAO4N,EAAEq6B,UAAUjoC,KAAK,GAAG4N,EAAE5N,KAAKsE,OAAO,EAAEtE,MAAMiO,EAAEL,QAAG,IAAS2E,EAAE8/B,MAAM9/B,EAAE8/B,MAAMzkC,GAAGA,EAAEqlB,GAAGA,EAAE0W,UAAU/7B,EAAE5N,KAAM,GAAEwC,UAAUywB,EAAEuV,GAAGtV,EAAED,EAAEN,GAAG,IAAIqX,EAAE,iCAAiC3W,EAAE,CAACif,UAAS,EAAGC,UAAS,EAAGlrC,MAAK,EAAGqb,MAAK,GAAI,SAASxI,EAAEtM,EAAE5B,GAAG,MAAO4B,EAAEA,EAAE5B,KAAK,IAAI4B,EAAEq6B,WAAU,OAAOr6B,CAAE,CAAAqlB,EAAEuV,GAAGa,OAAO,CAACnlB,IAAI,SAAStW,GAAG,IAAI5B,EAAEinB,EAAErlB,EAAE5N,MAAMuS,EAAEvG,EAAE1H,OAAO,OAAOtE,KAAK+Q,QAAO,WAAW,IAAI,IAAInD,EAAE,EAAEA,EAAE2E,EAAE3E,IAAI,GAAGqlB,EAAEyb,SAAS1uC,KAAKgM,EAAE4B,IAAI,OAAM,CAAG,GAAE,EAAC4kC,QAAQ,SAAS5kC,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,EAAEjJ,EAAE9E,KAAKsE,OAAOkJ,EAAE,GAAGU,EAAE,iBAAiBN,GAAGqlB,EAAErlB,GAAG,IAAIgmB,EAAEjjB,KAAK/C,GAAG,KAAKG,EAAEjJ,EAAEiJ,IAAI,IAAIwE,EAAEvS,KAAK+N,GAAGwE,GAAGA,IAAIvG,EAAEuG,EAAEA,EAAEnM,WAAW,GAAGmM,EAAE01B,SAAS,KAAK/5B,GAAG,EAAEA,EAAEoI,MAAM/D,GAAG,IAAIA,EAAE01B,UAAUhV,EAAExe,KAAK05B,gBAAgB57B,EAAE3E,IAAI,CAACJ,EAAE5L,KAAK2Q,GAAG,KAAM,QAAOvS,KAAK2oC,UAAU,EAAEn7B,EAAElJ,OAAO2uB,EAAE8b,WAAWvhC,GAAGA,EAAG,EAAC8I,MAAM,SAAS1I,GAAG,OAAOA,EAAE,iBAAiBA,EAAE9I,EAAE2C,KAAKwrB,EAAErlB,GAAG5N,KAAK,IAAI8E,EAAE2C,KAAKzH,KAAK4N,EAAE66B,OAAO76B,EAAE,GAAGA,GAAG5N,KAAK,IAAIA,KAAK,GAAGoG,WAAWpG,KAAK+oC,QAAQ0J,UAAUnuC,QAAQ,CAAE,EAACyrB,IAAI,SAASniB,EAAE5B,GAAG,OAAOhM,KAAK2oC,UAAU1V,EAAE8b,WAAW9b,EAAE2V,MAAM5oC,KAAKmkB,MAAM8O,EAAErlB,EAAE5B,KAAM,EAAC0mC,QAAQ,SAAS9kC,GAAG,OAAO5N,KAAK+vB,IAAI,MAAMniB,EAAE5N,KAAK6oC,WAAW7oC,KAAK6oC,WAAW93B,OAAOnD,GAAI,IAAGqlB,EAAE6V,KAAK,CAAC0H,OAAO,SAAS5iC,GAAG,IAAI5B,EAAE4B,EAAExH,WAAW,OAAO4F,GAAG,KAAKA,EAAEi8B,SAASj8B,EAAE,IAAK,EAAC2mC,QAAQ,SAAS/kC,GAAG,OAAO0kB,EAAE1kB,EAAE,aAAc,EAACglC,aAAa,SAAShlC,EAAE5B,EAAEuG,GAAG,OAAO+f,EAAE1kB,EAAE,aAAa2E,EAAG,EAAClL,KAAK,SAASuG,GAAG,OAAOsM,EAAEtM,EAAE,cAAe,EAAC8U,KAAK,SAAS9U,GAAG,OAAOsM,EAAEtM,EAAE,kBAAmB,EAACilC,QAAQ,SAASjlC,GAAG,OAAO0kB,EAAE1kB,EAAE,cAAe,EAAC6kC,QAAQ,SAAS7kC,GAAG,OAAO0kB,EAAE1kB,EAAE,kBAAmB,EAACklC,UAAU,SAASllC,EAAE5B,EAAEuG,GAAG,OAAO+f,EAAE1kB,EAAE,cAAc2E,EAAG,EAACwgC,UAAU,SAASnlC,EAAE5B,EAAEuG,GAAG,OAAO+f,EAAE1kB,EAAE,kBAAkB2E,EAAG,EAACygC,SAAS,SAASplC,GAAG,OAAOklB,GAAGllB,EAAExH,YAAY,CAAC,GAAGgpC,WAAWxhC,EAAG,EAAC0kC,SAAS,SAAS1kC,GAAG,OAAOklB,EAAEllB,EAAEwhC,WAAY,EAACmD,SAAS,SAAS3kC,GAAG,OAAO,MAAMA,EAAEqlC,iBAAiBllC,EAAEH,EAAEqlC,iBAAiBrlC,EAAEqlC,iBAAiBlgB,EAAEnlB,EAAE,cAAcA,EAAEA,EAAEyC,SAASzC,GAAGqlB,EAAE2V,MAAM,GAAGh7B,EAAEg+B,YAAa,IAAE,SAAS79B,EAAEjJ,GAAGmuB,EAAEuV,GAAGz6B,GAAG,SAASH,EAAE5B,GAAG,IAAIuG,EAAE0gB,EAAExhB,IAAIzR,KAAK8E,EAAE8I,GAAG,MAAM,UAAUG,EAAE7C,OAAO,KAAKc,EAAE4B,GAAG5B,GAAG,iBAAiBA,IAAIuG,EAAE0gB,EAAEliB,OAAO/E,EAAEuG,IAAI,EAAEvS,KAAKsE,SAAS+uB,EAAEtlB,IAAIklB,EAAE8b,WAAWx8B,GAAGy3B,EAAEr5B,KAAK5C,IAAIwE,EAAEgoB,WAAWv6B,KAAK2oC,UAAUp2B,EAAG,CAAC,IAAE,IAAI03B,EAAE,oBAAoB,SAASzW,EAAE5lB,GAAG,OAAOA,CAAE,UAAS8lB,EAAE9lB,GAAG,MAAMA,CAAE,UAASwlB,EAAExlB,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE,IAAI8I,GAAGK,EAAEnJ,EAAE8I,EAAEslC,SAASpuC,EAAE2C,KAAKmG,GAAG8M,KAAK1O,GAAGmnC,KAAK5gC,GAAG3E,GAAGK,EAAEnJ,EAAE8I,EAAE+M,MAAM7V,EAAE2C,KAAKmG,EAAE5B,EAAEuG,GAAGvG,EAAElJ,WAAM,EAAO,CAAC8K,GAAG1C,MAAM6C,GAAI,OAAMH,GAAG2E,EAAEzP,WAAM,EAAO,CAAC8K,GAAI,CAAC,CAAAqlB,EAAEmgB,UAAU,SAASrlC,GAAG,IAAIH,EAAE2E,EAAExE,EAAE,iBAAiBA,GAAGH,EAAEG,EAAEwE,EAAE,CAAC,EAAE0gB,EAAE6V,KAAKl7B,EAAEzG,MAAM8iC,IAAI,IAAG,SAASr8B,EAAE5B,GAAGuG,EAAEvG,IAAG,CAAG,IAAEuG,GAAG0gB,EAAEoW,OAAO,CAAC,EAAEt7B,GAAG,IAAIjJ,EAAEkH,EAAEwB,EAAEU,EAAER,EAAE,GAAGC,EAAE,GAAG1B,GAAG,EAAE+B,EAAE,WAAW,IAAIE,EAAEA,GAAGH,EAAEy2B,KAAKh3B,EAAE1I,GAAE,EAAG6I,EAAErJ,OAAO2H,GAAG,EAAe,IAAZD,EAAE2B,EAAE6gB,UAAgBviB,EAAEyB,EAAEpJ,SAAO,IAAKoJ,EAAEzB,GAAGnJ,MAAMkJ,EAAE,GAAGA,EAAE,KAAK+B,EAAEslC,cAAcpnC,EAAEyB,EAAEpJ,OAAO0H,GAAE,GAAI+B,EAAEugB,SAAStiB,GAAE,GAAIlH,GAAE,EAAGoJ,IAAIR,EAAE1B,EAAE,GAAG,GAAI,EAAC8O,EAAE,CAACiV,IAAI,WAAW,OAAOriB,IAAI1B,IAAIlH,IAAImH,EAAEyB,EAAEpJ,OAAO,EAAEqJ,EAAE/L,KAAKoK,IAAI,SAASuG,EAAE3E,GAAGqlB,EAAE6V,KAAKl7B,GAAE,SAASA,EAAE5B,GAAGiC,EAAEjC,GAAG+B,EAAEkkC,QAAQn3B,EAAEoJ,IAAIlY,IAAI0B,EAAE9L,KAAKoK,GAAGA,GAAGA,EAAE1H,QAAQ,WAAWgvB,EAAEtnB,IAAIuG,EAAEvG,EAAG,GAAE,CAA7G,CAA8GtD,WAAWsD,IAAIlH,GAAGkJ,KAAKhO,IAAK,EAACszC,OAAO,WAAW,OAAOrgB,EAAE6V,KAAKpgC,WAAU,SAASkF,EAAE5B,GAAS,IAAN,IAAIuG,GAAS,GAAGA,EAAE0gB,EAAE2W,QAAQ59B,EAAE0B,EAAE6E,KAAI7E,EAAE9C,OAAO2H,EAAE,GAAGA,GAAGtG,GAAGA,GAAI,IAAEjM,IAAK,EAACkkB,IAAI,SAAStW,GAAG,OAAOA,GAAG,EAAEqlB,EAAE2W,QAAQh8B,EAAEF,GAAG,EAAEA,EAAEpJ,MAAO,EAACisC,MAAM,WAAW,OAAO7iC,IAAIA,EAAE,IAAI1N,IAAK,EAACuzC,QAAQ,WAAW,OAAOrlC,EAAEP,EAAE,GAAGD,EAAE1B,EAAE,GAAGhM,IAAK,EAACyrC,SAAS,WAAW,OAAO/9B,CAAE,EAAC8lC,KAAK,WAAW,OAAOtlC,EAAEP,EAAE,GAAG3B,GAAGlH,IAAI4I,EAAE1B,EAAE,IAAIhM,IAAK,EAACyzC,OAAO,WAAW,QAAQvlC,CAAE,EAACwlC,SAAS,SAAS9lC,EAAE5B,GAAG,OAAOkC,IAAIlC,EAAE,CAAC4B,GAAG5B,EAAEA,GAAG,IAAId,MAAMc,EAAEd,QAAQc,GAAG2B,EAAE/L,KAAKoK,GAAGlH,GAAGkJ,KAAKhO,IAAK,EAAC2zC,KAAK,WAAW,OAAO74B,EAAE44B,SAAS1zC,KAAK0I,WAAW1I,IAAK,EAACgmC,MAAM,WAAW,QAAQx4B,CAAE,GAAE,OAAOsN,CAAE,EAACmY,EAAEoW,OAAO,CAACuK,SAAS,SAAShmC,GAAG,IAAIJ,EAAE,CAAC,CAAC,SAAS,WAAWylB,EAAEmgB,UAAU,UAAUngB,EAAEmgB,UAAU,UAAU,GAAG,CAAC,UAAU,OAAOngB,EAAEmgB,UAAU,eAAengB,EAAEmgB,UAAU,eAAe,EAAE,YAAY,CAAC,SAAS,OAAOngB,EAAEmgB,UAAU,eAAengB,EAAEmgB,UAAU,eAAe,EAAE,aAAatuC,EAAE,UAAUoJ,EAAE,CAACi4B,MAAM,WAAW,OAAOrhC,CAAE,EAAC+uC,OAAO,WAAW,OAAOnmC,EAAEgN,KAAKhS,WAAWyqC,KAAKzqC,WAAW1I,IAAK,EAAC,MAAQ,SAAS4N,GAAG,OAAOM,EAAEyM,KAAK,KAAK/M,EAAG,EAACkmC,KAAK,WAAW,IAAIhvC,EAAE4D,UAAU,OAAOuqB,EAAE2gB,UAAS,SAAS7lC,GAAGklB,EAAE6V,KAAKt7B,GAAE,SAASI,EAAE5B,GAAG,IAAIuG,EAAEtE,EAAEnJ,EAAEkH,EAAE,MAAMlH,EAAEkH,EAAE,IAAI0B,EAAE1B,EAAE,KAAI,WAAW,IAAI4B,EAAE2E,GAAGA,EAAEzP,MAAM9C,KAAK0I,WAAWkF,GAAGK,EAAEL,EAAEslC,SAAStlC,EAAEslC,UAAUa,SAAShmC,EAAEimC,QAAQt5B,KAAK3M,EAAEsM,SAAS84B,KAAKplC,EAAEuM,QAAQvM,EAAE/B,EAAE,GAAG,QAAQhM,KAAKuS,EAAE,CAAC3E,GAAGlF,UAAW,GAAE,IAAE5D,EAAE,IAAK,IAAEouC,SAAU,EAACv4B,KAAK,SAAS3O,EAAEuG,EAAExE,GAAG,IAAIJ,EAAE,EAAE,SAAS1B,EAAEnH,EAAE0I,EAAEU,EAAER,GAAG,OAAO,WAAW,IAAI6E,EAAEvS,KAAK+N,EAAErF,UAAUkF,EAAE,WAAW,IAAIA,EAAE5B,EAAE,KAAKlH,EAAE6I,GAAG,CAAC,IAAIC,EAAEM,EAAEpL,MAAMyP,EAAExE,MAAMP,EAAE0lC,UAAU,MAAM,IAAIx3B,UAAU,4BAA4B1P,EAAE4B,IAAI,iBAAiBA,GAAG,mBAAmBA,IAAIA,EAAE+M,KAAK1M,EAAEjC,GAAG0B,EAAE1B,EAAEvE,KAAKmG,EAAE3B,EAAE0B,EAAEH,EAAEgmB,EAAE9lB,GAAGzB,EAAE0B,EAAEH,EAAEkmB,EAAEhmB,KAAKC,IAAI3B,EAAEvE,KAAKmG,EAAE3B,EAAE0B,EAAEH,EAAEgmB,EAAE9lB,GAAGzB,EAAE0B,EAAEH,EAAEkmB,EAAEhmB,GAAGzB,EAAE0B,EAAEH,EAAEgmB,EAAEhmB,EAAEymC,eAAe/lC,IAAIslB,IAAIjhB,OAAE,EAAOxE,EAAE,CAACH,KAAKF,GAAGF,EAAE0mC,aAAa3hC,EAAExE,GAAI,CAAC,EAAC/B,EAAE0B,EAAEE,EAAE,WAAW,IAAIA,GAAI,OAAMA,GAAGqlB,EAAE2gB,SAASO,eAAelhB,EAAE2gB,SAASO,cAAcvmC,EAAE5B,EAAEooC,YAAYzmC,GAAG7I,EAAE,IAAIoJ,IAAIwlB,IAAInhB,OAAE,EAAOxE,EAAE,CAACH,IAAIJ,EAAE6mC,WAAW9hC,EAAExE,GAAI,CAAC,EAACjJ,EAAEkH,KAAKinB,EAAE2gB,SAASU,eAAetoC,EAAEooC,WAAWnhB,EAAE2gB,SAASU,gBAAgBt5B,EAAEpR,WAAWoC,GAAI,CAAC,QAAOinB,EAAE2gB,UAAS,SAAShmC,GAAGJ,EAAE,GAAG,GAAGuiB,IAAI9jB,EAAE,EAAE2B,EAAEK,EAAEF,GAAGA,EAAEylB,EAAE5lB,EAAEqmC,aAAazmC,EAAE,GAAG,GAAGuiB,IAAI9jB,EAAE,EAAE2B,EAAEK,EAAEjC,GAAGA,EAAEwnB,IAAIhmB,EAAE,GAAG,GAAGuiB,IAAI9jB,EAAE,EAAE2B,EAAEK,EAAEsE,GAAGA,EAAEmhB,GAAI,IAAEwf,SAAU,EAACA,QAAQ,SAAStlC,GAAG,OAAO,MAAMA,EAAEqlB,EAAEoW,OAAOz7B,EAAEM,GAAGA,CAAE,GAAER,EAAE,CAAC,EAAE,OAAOulB,EAAE6V,KAAKt7B,GAAE,SAASI,EAAE5B,GAAG,IAAIuG,EAAEvG,EAAE,GAAG+B,EAAE/B,EAAE,GAAGkC,EAAElC,EAAE,IAAIuG,EAAEwd,IAAIhiB,GAAGwE,EAAEwd,KAAI,WAAWjrB,EAAEiJ,CAAE,GAACP,EAAE,EAAEI,GAAG,GAAG2lC,QAAQ/lC,EAAE,EAAEI,GAAG,GAAG2lC,QAAQ/lC,EAAE,GAAG,GAAGgmC,KAAKhmC,EAAE,GAAG,GAAGgmC,MAAMjhC,EAAEwd,IAAI/jB,EAAE,GAAG2nC,MAAMjmC,EAAE1B,EAAE,IAAI,WAAW,OAAO0B,EAAE1B,EAAE,GAAG,QAAQhM,OAAO0N,OAAE,EAAO1N,KAAK0I,WAAW1I,IAAK,EAAC0N,EAAE1B,EAAE,GAAG,QAAQuG,EAAEmhC,QAAS,IAAExlC,EAAEglC,QAAQxlC,GAAGE,GAAGA,EAAEnG,KAAKiG,EAAEA,GAAGA,CAAE,EAAC6mC,KAAK,SAAS3mC,GAAG,IAAI2E,EAAE7J,UAAUpE,OAAO0H,EAAEuG,EAAExE,EAAE9C,MAAMe,GAAGlH,EAAE4I,EAAEjG,KAAKiB,WAAW8E,EAAEylB,EAAE2gB,WAAW1lC,EAAE,SAASlC,GAAG,OAAO,SAAS4B,GAAGG,EAAE/B,GAAGhM,KAAK8E,EAAEkH,GAAG,EAAEtD,UAAUpE,OAAOoJ,EAAEjG,KAAKiB,WAAWkF,IAAI2E,GAAG/E,EAAE0mC,YAAYnmC,EAAEjJ,EAAG,CAAC,EAAC,GAAGyN,GAAG,IAAI6gB,EAAExlB,EAAEJ,EAAEkN,KAAKxM,EAAElC,IAAIqO,QAAQ7M,EAAE8M,QAAQ/H,GAAG,YAAY/E,EAAE24B,SAASl4B,EAAEnJ,EAAEkH,IAAIlH,EAAEkH,GAAG2O,OAAO,OAAOnN,EAAEmN,OAAO,KAAM3O,KAAIonB,EAAEtuB,EAAEkH,GAAGkC,EAAElC,GAAGwB,EAAE8M,QAAQ,OAAO9M,EAAE0lC,SAAU,IAAG,IAAI/f,EAAE,yDAAyDF,EAAE2gB,SAASO,cAAc,SAASvmC,EAAE5B,GAAGgP,EAAE3Q,SAAS2Q,EAAE3Q,QAAQiZ,MAAM1V,GAAGulB,EAAExiB,KAAK/C,EAAEN,OAAO0N,EAAE3Q,QAAQiZ,KAAK,8BAA8B1V,EAAEkW,QAAQlW,EAAEnC,MAAMO,EAAG,EAACinB,EAAEuhB,eAAe,SAAS5mC,GAAGoN,EAAEpR,YAAW,WAAW,MAAMgE,CAAE,GAAE,EAAC,IAAIkmB,EAAEb,EAAE2gB,WAAW,SAAS1J,IAAIvX,EAAEkU,oBAAoB,mBAAmBqD,GAAGlvB,EAAE6rB,oBAAoB,OAAOqD,GAAGjX,EAAEof,OAAQ,CAAApf,EAAEuV,GAAG6J,MAAM,SAASzkC,GAAG,OAAOkmB,EAAEnZ,KAAK/M,GAAP,OAAmB,SAASA,GAAGqlB,EAAEuhB,eAAe5mC,EAAG,IAAE5N,IAAK,EAACizB,EAAEoW,OAAO,CAACr/B,SAAQ,EAAGyqC,UAAU,EAAEpC,MAAM,SAASzkC,KAAI,IAAKA,IAAIqlB,EAAEwhB,UAAUxhB,EAAEjpB,WAAWipB,EAAEjpB,SAAQ,KAAM4D,GAAG,IAAIqlB,EAAEwhB,WAAW3gB,EAAEogB,YAAYvhB,EAAE,CAACM,GAAI,IAAGA,EAAEof,MAAM13B,KAAKmZ,EAAEnZ,KAAK,aAAagY,EAAE9T,YAAY,YAAY8T,EAAE9T,aAAa8T,EAAE4a,gBAAgBmH,SAAS15B,EAAEpR,WAAWqpB,EAAEof,QAAQ1f,EAAEzN,iBAAiB,mBAAmBglB,GAAGlvB,EAAEkK,iBAAiB,OAAOglB,IAAI,IAAIC,EAAE,SAASv8B,EAAE5B,EAAEuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,GAAG,IAAIR,EAAE,EAAEC,EAAEC,EAAEtJ,OAAO2H,EAAE,MAAMsG,EAAE,GAAG,WAAW+gB,EAAE/gB,GAAG,IAAI7E,KAAK5I,GAAE,EAAGyN,EAAE43B,EAAEv8B,EAAE5B,EAAE0B,EAAE6E,EAAE7E,IAAG,EAAGF,EAAEU,QAAQ,QAAG,IAASH,IAAIjJ,GAAE,EAAGmJ,EAAEF,KAAKG,GAAE,GAAIjC,IAAIiC,GAAGlC,EAAEvE,KAAKmG,EAAEG,GAAG/B,EAAE,OAAOC,EAAED,EAAEA,EAAE,SAAS4B,EAAE5B,EAAEuG,GAAG,OAAOtG,EAAExE,KAAKwrB,EAAErlB,GAAG2E,EAAG,IAAGvG,GAAG,KAAK0B,EAAEC,EAAED,IAAI1B,EAAE4B,EAAEF,GAAG6E,EAAErE,EAAEH,EAAEA,EAAEtG,KAAKmG,EAAEF,GAAGA,EAAE1B,EAAE4B,EAAEF,GAAG6E,KAAK,OAAOzN,EAAE8I,EAAE3B,EAAED,EAAEvE,KAAKmG,GAAGD,EAAE3B,EAAE4B,EAAE,GAAG2E,GAAG/E,CAAE,EAACM,EAAE,QAAQmN,EAAE,YAAY,SAASsY,EAAE3lB,EAAE5B,GAAG,OAAOA,EAAE2oC,aAAc,UAASvK,EAAEx8B,GAAG,OAAOA,EAAE3L,QAAQ6L,EAAE,OAAO7L,QAAQgZ,EAAEsY,EAAG,KAAI8W,EAAE,SAASz8B,GAAG,OAAO,IAAIA,EAAEq6B,UAAU,IAAIr6B,EAAEq6B,YAAYr6B,EAAEq6B,QAAS,EAAC,SAASqC,IAAItqC,KAAKupC,QAAQtW,EAAEsW,QAAQe,EAAEsK,KAAM,CAAAtK,EAAEsK,IAAI,EAAEtK,EAAE9nC,UAAU,CAACguB,MAAM,SAAS5iB,GAAG,IAAI5B,EAAE4B,EAAE5N,KAAKupC,SAAS,OAAOv9B,IAAIA,EAAE,CAAC,EAAEq+B,EAAEz8B,KAAKA,EAAEq6B,SAASr6B,EAAE5N,KAAKupC,SAASv9B,EAAEvM,OAAOwc,eAAerO,EAAE5N,KAAKupC,QAAQ,CAAC1hC,MAAMmE,EAAEg0B,cAAa,MAAOh0B,CAAE,EAAC86B,IAAI,SAASl5B,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE9E,KAAKwwB,MAAM5iB,GAAG,GAAG,iBAAiB5B,EAAElH,EAAEslC,EAAEp+B,IAAIuG,OAAO,IAAIxE,KAAK/B,EAAElH,EAAEslC,EAAEr8B,IAAI/B,EAAE+B,GAAG,OAAOjJ,CAAE,EAACqf,IAAI,SAASvW,EAAE5B,GAAG,YAAO,IAASA,EAAEhM,KAAKwwB,MAAM5iB,GAAGA,EAAE5N,KAAKupC,UAAU37B,EAAE5N,KAAKupC,SAASa,EAAEp+B,GAAI,EAAC6oC,OAAO,SAASjnC,EAAE5B,EAAEuG,GAAG,YAAO,IAASvG,GAAGA,GAAG,iBAAiBA,QAAG,IAASuG,EAAEvS,KAAKmkB,IAAIvW,EAAE5B,IAAIhM,KAAK8mC,IAAIl5B,EAAE5B,EAAEuG,QAAG,IAASA,EAAEA,EAAEvG,EAAG,EAACsnC,OAAO,SAAS1lC,EAAE5B,GAAG,IAAIuG,EAAExE,EAAEH,EAAE5N,KAAKupC,SAAS,QAAG,IAASx7B,EAAE,CAAC,QAAG,IAAS/B,EAAE,CAACuG,GAAGvG,EAAEf,MAAMgJ,QAAQjI,GAAGA,EAAEyF,IAAI24B,IAAIp+B,EAAEo+B,EAAEp+B,MAAM+B,EAAE,CAAC/B,GAAGA,EAAE7E,MAAM8iC,IAAI,IAAI3lC,OAAO,KAAMiO,YAAWxE,EAAE/B,EAAEuG,GAAI,OAAC,IAASvG,GAAGinB,EAAEwW,cAAc17B,MAAMH,EAAEq6B,SAASr6B,EAAE5N,KAAKupC,cAAS,SAAc37B,EAAE5N,KAAKupC,SAAU,CAAC,EAACuL,QAAQ,SAASlnC,GAAG,IAAI5B,EAAE4B,EAAE5N,KAAKupC,SAAS,YAAO,IAASv9B,IAAIinB,EAAEwW,cAAcz9B,EAAG,GAAE,IAAI++B,EAAE,IAAIT,EAAE3W,EAAE,IAAI2W,EAAEzW,GAAE,gCAAgCmX,GAAE,SAAS,SAASC,GAAEr9B,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE,QAAG,IAASyN,GAAG,IAAI3E,EAAEq6B,SAAS,GAAGl6B,EAAE,QAAQ/B,EAAE/J,QAAQ+oC,GAAE,OAAOnZ,cAAc,iBAAiBtf,EAAE3E,EAAEw6B,aAAar6B,IAAI,CAAC,IAAIwE,EAAE,UAAUzN,EAAEyN,IAAI,UAAUzN,IAAI,SAASA,EAAE,KAAKA,KAAKA,EAAE,IAAIA,EAAE+uB,GAAEljB,KAAK7L,GAAGmC,KAAKP,MAAM5B,GAAGA,EAAG,OAAM8I,GAAI,CAAA+lB,EAAEmT,IAAIl5B,EAAE5B,EAAEuG,EAAG,MAAKA,OAAE,EAAO,OAAOA,CAAE,CAAA0gB,EAAEoW,OAAO,CAACyL,QAAQ,SAASlnC,GAAG,OAAO+lB,EAAEmhB,QAAQlnC,IAAIm9B,EAAE+J,QAAQlnC,EAAG,EAACqS,KAAK,SAASrS,EAAE5B,EAAEuG,GAAG,OAAOohB,EAAEkhB,OAAOjnC,EAAE5B,EAAEuG,EAAG,EAACwiC,WAAW,SAASnnC,EAAE5B,GAAG2nB,EAAE2f,OAAO1lC,EAAE5B,EAAG,EAACgpC,MAAM,SAASpnC,EAAE5B,EAAEuG,GAAG,OAAOw4B,EAAE8J,OAAOjnC,EAAE5B,EAAEuG,EAAG,EAAC0iC,YAAY,SAASrnC,EAAE5B,GAAG++B,EAAEuI,OAAO1lC,EAAE5B,EAAG,IAAGinB,EAAEuV,GAAGa,OAAO,CAACppB,KAAK,SAAS1N,EAAE3E,GAAG,IAAI5B,EAAE+B,EAAEjJ,EAAE0I,EAAExN,KAAK,GAAGkO,EAAEV,GAAGA,EAAEogC,WAAW,QAAG,IAASr7B,EAAE,CAAC,GAAGvS,KAAKsE,SAASQ,EAAE6uB,EAAExP,IAAI3W,GAAG,IAAIA,EAAEy6B,WAAW8C,EAAE5mB,IAAI3W,EAAE,iBAAiB,CAAY,IAAXxB,EAAEkC,EAAE5J,OAAa0H,KAAIkC,EAAElC,IAAI,KAAK+B,EAAEG,EAAElC,GAAGsB,MAAM7C,QAAQ,WAAWsD,EAAEq8B,EAAEr8B,EAAE7C,MAAM,IAAI+/B,GAAEz9B,EAAEO,EAAEjJ,EAAEiJ,KAAKg9B,EAAEjE,IAAIt5B,EAAE,gBAAe,EAAI,QAAO1I,CAAE,OAAM,iBAAiByN,EAAEvS,KAAK8oC,MAAK,WAAWnV,EAAEmT,IAAI9mC,KAAKuS,EAAG,IAAE43B,EAAEnqC,MAAK,SAAS4N,GAAG,IAAI5B,EAAE,GAAGwB,QAAG,IAASI,EAAE,YAAO,KAAU5B,EAAE2nB,EAAExP,IAAI3W,EAAE+E,UAAM,KAAUvG,EAAEi/B,GAAEz9B,EAAE+E,IAAlBvG,OAAwB,EAAOhM,KAAK8oC,MAAK,WAAWnV,EAAEmT,IAAI9mC,KAAKuS,EAAE3E,EAAG,GAAE,GAAC,KAAKA,EAAE,EAAElF,UAAUpE,OAAO,MAAK,EAAI,EAACywC,WAAW,SAASnnC,GAAG,OAAO5N,KAAK8oC,MAAK,WAAWnV,EAAE2f,OAAOtzC,KAAK4N,EAAG,GAAE,IAAGqlB,EAAEoW,OAAO,CAACzgC,MAAM,SAASgF,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAE,GAAGH,EAAE,OAAO5B,GAAGA,GAAG,MAAM,QAAQ+B,EAAEg9B,EAAE5mB,IAAIvW,EAAE5B,GAAGuG,KAAKxE,GAAG9C,MAAMgJ,QAAQ1B,GAAGxE,EAAEg9B,EAAE8J,OAAOjnC,EAAE5B,EAAEinB,EAAE0W,UAAUp3B,IAAIxE,EAAEnM,KAAK2Q,IAAIxE,GAAG,EAAG,EAACmnC,QAAQ,SAAStnC,EAAE5B,GAAGA,EAAEA,GAAG,KAAK,IAAIuG,EAAE0gB,EAAErqB,MAAMgF,EAAE5B,GAAG+B,EAAEwE,EAAEjO,OAAOQ,EAAEyN,EAAEic,QAAQhhB,EAAEylB,EAAEkiB,YAAYvnC,EAAE5B,GAAG,eAAelH,IAAIA,EAAEyN,EAAEic,QAAQzgB,KAAKjJ,IAAI,OAAOkH,GAAGuG,EAAEszB,QAAQ,qBAAqBr4B,EAAErD,KAAKrF,EAAE2C,KAAKmG,GAAE,WAAWqlB,EAAEiiB,QAAQtnC,EAAE5B,EAAG,GAACwB,KAAKO,GAAGP,GAAGA,EAAE+iC,MAAMoD,MAAO,EAACwB,YAAY,SAASvnC,EAAE5B,GAAG,IAAIuG,EAAEvG,EAAE,aAAa,OAAO++B,EAAE5mB,IAAIvW,EAAE2E,IAAIw4B,EAAE8J,OAAOjnC,EAAE2E,EAAE,CAACg+B,MAAMtd,EAAEmgB,UAAU,eAAerjB,KAAI,WAAWgb,EAAEuI,OAAO1lC,EAAE,CAAC5B,EAAE,QAAQuG,GAAI,KAAI,IAAG0gB,EAAEuV,GAAGa,OAAO,CAACzgC,MAAM,SAASoD,EAAEuG,GAAG,IAAI3E,EAAE,EAAE,MAAM,iBAAiB5B,IAAIuG,EAAEvG,EAAEA,EAAE,KAAK4B,KAAKlF,UAAUpE,OAAOsJ,EAAEqlB,EAAErqB,MAAM5I,KAAK,GAAGgM,QAAG,IAASuG,EAAEvS,KAAKA,KAAK8oC,MAAK,WAAW,IAAIl7B,EAAEqlB,EAAErqB,MAAM5I,KAAKgM,EAAEuG,GAAG0gB,EAAEkiB,YAAYn1C,KAAKgM,GAAG,OAAOA,GAAG,eAAe4B,EAAE,IAAIqlB,EAAEiiB,QAAQl1C,KAAKgM,EAAG,GAAE,EAACkpC,QAAQ,SAAStnC,GAAG,OAAO5N,KAAK8oC,MAAK,WAAW7V,EAAEiiB,QAAQl1C,KAAK4N,EAAG,GAAE,EAACwnC,WAAW,SAASxnC,GAAG,OAAO5N,KAAK4I,MAAMgF,GAAG,KAAK,GAAI,EAACslC,QAAQ,SAAStlC,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,EAAEjJ,EAAEmuB,EAAE2gB,WAAWpmC,EAAExN,KAAKkO,EAAElO,KAAKsE,OAAOoJ,EAAE,aAAaK,GAAGjJ,EAAEovC,YAAY1mC,EAAE,CAACA,GAAI,EAA8C,IAA7C,iBAAiBI,IAAI5B,EAAE4B,EAAEA,OAAE,GAAQA,EAAEA,GAAG,KAAWM,MAAKqE,EAAEw4B,EAAE5mB,IAAI3W,EAAEU,GAAGN,EAAE,gBAAgB2E,EAAEg+B,QAAQxiC,IAAIwE,EAAEg+B,MAAMxgB,IAAIriB,IAAI,OAAOA,IAAI5I,EAAEouC,QAAQlnC,EAAG,IAAG,IAAIk/B,GAAG,sCAAsCnzB,OAAOozB,GAAG,IAAIl8B,OAAO,iBAAiBi8B,GAAG,cAAc,KAAKE,GAAG,CAAC,MAAM,QAAQ,SAAS,QAAQC,GAAG1Y,EAAE4a,gBAAgBnQ,GAAG,SAASxvB,GAAG,OAAOqlB,EAAEyb,SAAS9gC,EAAEk+B,cAAcl+B,EAAG,EAAC09B,GAAG,CAAC+J,UAAS,GAAIhK,GAAGiK,cAAclY,GAAG,SAASxvB,GAAG,OAAOqlB,EAAEyb,SAAS9gC,EAAEk+B,cAAcl+B,IAAIA,EAAE0nC,YAAYhK,MAAM19B,EAAEk+B,aAAc,GAAE,IAAIP,GAAG,SAAS39B,EAAE5B,GAAG,MAAM,UAAU4B,EAAE5B,GAAG4B,GAAG2nC,MAAMC,SAAS,KAAK5nC,EAAE2nC,MAAMC,SAASpY,GAAGxvB,IAAI,SAASqlB,EAAEwiB,IAAI7nC,EAAE,UAAW,EAAKi+B,GAAG,CAAC,EAAE,SAAS9B,GAAGn8B,EAAE5B,GAAG,IAAI,IAAIuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE,GAAG+B,EAAE,EAAE8M,EAAElN,EAAEtJ,OAAO0J,EAAE8M,EAAE9M,KAAKD,EAAEH,EAAEI,IAAIunC,QAAQhjC,EAAExE,EAAEwnC,MAAMC,QAAQxpC,GAAG,SAASuG,IAAItG,EAAE+B,GAAG+8B,EAAE5mB,IAAIpW,EAAE,YAAY,KAAK9B,EAAE+B,KAAKD,EAAEwnC,MAAMC,QAAQ,KAAK,KAAKznC,EAAEwnC,MAAMC,SAASjK,GAAGx9B,KAAK9B,EAAE+B,IAAIL,EAAEO,EAAEV,OAAE,EAAOU,GAAGpJ,EAAEiJ,GAAG+9B,cAAcp+B,EAAE5I,EAAE4mC,UAAU/9B,EAAEk+B,GAAGn+B,MAAMF,EAAEU,EAAE2M,KAAKvU,YAAY4H,EAAEvI,cAAc+H,IAAIC,EAAEslB,EAAEwiB,IAAIjoC,EAAE,WAAWA,EAAEpH,WAAWmiC,YAAY/6B,GAAG,SAASG,IAAIA,EAAE,SAASk+B,GAAGn+B,GAAGC,MAAM,SAAS4E,IAAItG,EAAE+B,GAAG,OAAO+8B,EAAEjE,IAAI/4B,EAAE,UAAUwE,KAAK,IAAIvE,EAAE,EAAEA,EAAE8M,EAAE9M,IAAI,MAAM/B,EAAE+B,KAAKJ,EAAEI,GAAGunC,MAAMC,QAAQvpC,EAAE+B,IAAI,OAAOJ,CAAE,CAAAqlB,EAAEuV,GAAGa,OAAO,CAACqM,KAAK,WAAW,OAAO3L,GAAG/pC,MAAK,EAAI,EAAC21C,KAAK,WAAW,OAAO5L,GAAG/pC,KAAM,EAAC41C,OAAO,SAAShoC,GAAG,MAAM,kBAAkBA,EAAEA,EAAE5N,KAAK01C,OAAO11C,KAAK21C,OAAO31C,KAAK8oC,MAAK,WAAWyC,GAAGvrC,MAAMizB,EAAEjzB,MAAM01C,OAAOziB,EAAEjzB,MAAM21C,MAAO,GAAE,IAAG,IAAIlJ,GAAGC,GAAGC,GAAG,wBAAwBE,GAAG,iCAAiCG,GAAG,qCAAqCP,GAAG9Z,EAAEkjB,yBAAyBvvC,YAAYqsB,EAAEhtB,cAAc,SAAS+mC,GAAG/Z,EAAEhtB,cAAc,UAAU0iC,aAAa,OAAO,SAASqE,GAAGrE,aAAa,UAAU,WAAWqE,GAAGrE,aAAa,OAAO,KAAKoE,GAAGnmC,YAAYomC,IAAI/gC,EAAEmqC,WAAWrJ,GAAGsJ,WAAU,GAAIA,WAAU,GAAIrG,UAAUU,QAAQ3D,GAAGyB,UAAU,yBAAyBviC,EAAEqqC,iBAAiBvJ,GAAGsJ,WAAU,GAAIrG,UAAUsC,aAAavF,GAAGyB,UAAU,oBAAoBviC,EAAEsqC,SAASxJ,GAAGiD,UAAU,IAAIzC,GAAG,CAACiJ,MAAM,CAAC,EAAE,UAAU,YAAYC,IAAI,CAAC,EAAE,oBAAoB,uBAAuBC,GAAG,CAAC,EAAE,iBAAiB,oBAAoBC,GAAG,CAAC,EAAE,qBAAqB,yBAAyBC,SAAS,CAAC,EAAE,GAAG,KAAK,SAASpJ,GAAGt/B,EAAE5B,GAAG,IAAIuG,EAAE,OAAOA,OAAE,IAAoB3E,EAAE/H,qBAAqB+H,EAAE/H,qBAAqBmG,GAAG,UAAK,IAAoB4B,EAAE0+B,iBAAiB1+B,EAAE0+B,iBAAiBtgC,GAAG,KAAK,QAAG,IAASA,GAAGA,GAAG+mB,EAAEnlB,EAAE5B,GAAGinB,EAAE2V,MAAM,CAACh7B,GAAG2E,GAAGA,CAAE,UAAS66B,GAAGx/B,EAAE5B,GAAG,IAAI,IAAIuG,EAAE,EAAExE,EAAEH,EAAEtJ,OAAOiO,EAAExE,EAAEwE,IAAIw4B,EAAEjE,IAAIl5B,EAAE2E,GAAG,cAAcvG,GAAG++B,EAAE5mB,IAAInY,EAAEuG,GAAG,cAAe,CAAA06B,GAAGsJ,MAAMtJ,GAAGuJ,MAAMvJ,GAAGwJ,SAASxJ,GAAGyJ,QAAQzJ,GAAGiJ,MAAMjJ,GAAG0J,GAAG1J,GAAGoJ,GAAG1qC,EAAEsqC,SAAShJ,GAAG2J,SAAS3J,GAAGgJ,OAAO,CAAC,EAAE,+BAA+B,cAAc,IAAI9J,GAAG,YAAY,SAASmF,GAAG1jC,EAAE5B,EAAEuG,EAAExE,EAAEjJ,GAAG,IAAI,IAAI0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE8M,EAAE9O,EAAE6pC,yBAAyBtwC,EAAE,GAAGsI,EAAE,EAAEykB,EAAE1kB,EAAEtJ,OAAOuJ,EAAEykB,EAAEzkB,IAAI,IAAIL,EAAEI,EAAEC,KAAK,IAAIL,EAAE,GAAG,WAAW8lB,EAAE9lB,GAAGylB,EAAE2V,MAAMrjC,EAAEiI,EAAEy6B,SAAS,CAACz6B,GAAGA,QAAQ,GAAG2+B,GAAGx7B,KAAKnD,GAAG,CAA0J,IAAzJU,EAAEA,GAAG4M,EAAExU,YAAY0F,EAAErG,cAAc,QAAQ+H,GAAGm/B,GAAGd,KAAKv+B,IAAI,CAAC,GAAG,KAAK,GAAGqkB,cAAclkB,EAAEs/B,GAAGv/B,IAAIu/B,GAAGqJ,SAASpoC,EAAEggC,UAAUvgC,EAAE,GAAGslB,EAAE4jB,cAAcrpC,GAAGG,EAAE,GAAGK,EAAEL,EAAE,GAASK,KAAIE,EAAEA,EAAEwhC,UAAUzc,EAAE2V,MAAMrjC,EAAE2I,EAAE09B,aAAa19B,EAAE4M,EAAEs0B,YAAYD,YAAY,EAAG,MAAK5pC,EAAE3D,KAAKoK,EAAE8qC,eAAetpC,IAAyB,IAArBsN,EAAEq0B,YAAY,GAAGthC,EAAE,EAAQL,EAAEjI,EAAEsI,SAAQE,IAAI,EAAEklB,EAAE2W,QAAQp8B,EAAEO,GAAGjJ,GAAGA,EAAElD,KAAK4L,QAAQ,GAAGvB,EAAEmxB,GAAG5vB,GAAGU,EAAEg/B,GAAGpyB,EAAExU,YAAYkH,GAAG,UAAUvB,GAAGmhC,GAAGl/B,GAAGqE,EAAO,IAAJvE,EAAE,EAAQR,EAAEU,EAAEF,MAAKg/B,GAAGr8B,KAAKnD,EAAEwD,MAAM,KAAKuB,EAAE3Q,KAAK4L,GAAG,OAAOsN,CAAE,KAAIuxB,GAAG,sBAAsB,SAASb,KAAK,OAAM,CAAG,UAAS+F,KAAK,OAAM,CAAG,UAASC,GAAG5jC,EAAE5B,GAAG,OAAO4B,IAAI,WAAW,IAAI,OAAO+kB,EAAEsd,aAAc,OAAMriC,GAAI,CAAC,CAAjD,KAAsD,UAAU5B,EAAG,UAASylC,GAAG7jC,EAAE5B,EAAEuG,EAAExE,EAAEjJ,EAAE0I,GAAG,IAAIU,EAAER,EAAE,GAAG,iBAAiB1B,EAAE,CAAC,IAAI0B,IAAI,iBAAiB6E,IAAIxE,EAAEA,GAAGwE,EAAEA,OAAE,GAAQvG,EAAEylC,GAAG7jC,EAAEF,EAAE6E,EAAExE,EAAE/B,EAAE0B,GAAGF,GAAG,OAAOI,CAAE,IAAG,MAAMG,GAAG,MAAMjJ,GAAGA,EAAEyN,EAAExE,EAAEwE,OAAE,GAAQ,MAAMzN,IAAI,iBAAiByN,GAAGzN,EAAEiJ,EAAEA,OAAE,IAASjJ,EAAEiJ,EAAEA,EAAEwE,EAAEA,OAAE,KAAS,IAAKzN,EAAEA,EAAEysC,QAAQ,IAAIzsC,EAAE,OAAO8I,EAAE,OAAO,IAAIJ,IAAIU,EAAEpJ,GAAGA,EAAE,SAAS8I,GAAG,OAAOqlB,IAAI2U,IAAIh6B,GAAGM,EAAEpL,MAAM9C,KAAK0I,UAAW,GAAEmhC,KAAK37B,EAAE27B,OAAO37B,EAAE27B,KAAK5W,EAAE4W,SAASj8B,EAAEk7B,MAAK,WAAW7V,EAAE3vB,MAAMysB,IAAI/vB,KAAKgM,EAAElH,EAAEiJ,EAAEwE,EAAG,GAAE,UAASm/B,GAAG9jC,EAAE9I,EAAE0I,GAAGA,GAAGu9B,EAAEjE,IAAIl5B,EAAE9I,GAAE,GAAImuB,EAAE3vB,MAAMysB,IAAIniB,EAAE9I,EAAE,CAACiyC,WAAU,EAAG1zC,QAAQ,SAASuK,GAAG,IAAI5B,EAAEuG,EAAExE,EAAEg9B,EAAE5mB,IAAInkB,KAAK8E,GAAG,GAAG,EAAE8I,EAAEopC,WAAWh3C,KAAK8E,IAAI,GAAGiJ,EAAEzJ,QAAQ2uB,EAAE3vB,MAAM2zC,QAAQnyC,IAAI,CAAC,GAAGoyC,cAActpC,EAAEupC,uBAAuB,GAAGppC,EAAEL,EAAEjG,KAAKiB,WAAWqiC,EAAEjE,IAAI9mC,KAAK8E,EAAEiJ,GAAG/B,EAAEwB,EAAExN,KAAK8E,GAAG9E,KAAK8E,KAAKiJ,KAAKwE,EAAEw4B,EAAE5mB,IAAInkB,KAAK8E,KAAKkH,EAAE++B,EAAEjE,IAAI9mC,KAAK8E,GAAE,GAAIyN,EAAE,CAAC,EAAExE,IAAIwE,EAAE,OAAO3E,EAAEwpC,2BAA2BxpC,EAAEypC,iBAAiB9kC,GAAGA,EAAE1K,WAAWkG,EAAEzJ,SAASymC,EAAEjE,IAAI9mC,KAAK8E,EAAE,CAAC+C,MAAMorB,EAAE3vB,MAAMg0C,QAAQrkB,EAAEoW,OAAOt7B,EAAE,GAAGklB,EAAEskB,MAAM/0C,WAAWuL,EAAE7C,MAAM,GAAGlL,QAAQ4N,EAAEwpC,2BAA4B,UAAI,IAASrM,EAAE5mB,IAAIvW,EAAE9I,IAAImuB,EAAE3vB,MAAMysB,IAAIniB,EAAE9I,EAAE0mC,GAAI,CAAAvY,EAAE3vB,MAAM,CAACk0C,OAAO,CAAC,EAAEznB,IAAI,SAAS/jB,EAAE4B,EAAE2E,EAAExE,EAAEjJ,GAAG,IAAI0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE8M,EAAEvV,EAAEsI,EAAEykB,EAAEtX,EAAE3N,EAAE09B,EAAE5mB,IAAInY,GAAG,GAAGq+B,EAAEr+B,GAAsU,IAAlUuG,EAAElP,UAAUkP,GAAG/E,EAAE+E,GAAGlP,QAAQyB,EAAE0I,EAAEskC,UAAUhtC,GAAGmuB,EAAExe,KAAK05B,gBAAgB9C,GAAGvmC,GAAGyN,EAAEs3B,OAAOt3B,EAAEs3B,KAAK5W,EAAE4W,SAASl8B,EAAEN,EAAEo4B,UAAU93B,EAAEN,EAAEo4B,OAAOhmC,OAAO8yB,OAAO,QAAQrkB,EAAEb,EAAEoqC,UAAUvpC,EAAEb,EAAEoqC,OAAO,SAAS7pC,GAAG,YAAM,IAAoBqlB,GAAGA,EAAE3vB,MAAMo0C,YAAY9pC,EAAEoD,KAAKiiB,EAAE3vB,MAAMq0C,SAAS70C,MAAMkJ,EAAEtD,gBAAW,CAAO,GAAEuD,GAAG2B,GAAGA,GAAG,IAAIzG,MAAM8iC,IAAI,CAAC,KAAK3lC,OAAa2H,KAAI4B,EAAEmN,GAAGtN,EAAE2+B,GAAGN,KAAKn+B,EAAE3B,KAAK,IAAI,GAAGqmB,GAAG5kB,EAAE,IAAI,IAAIhC,MAAM,KAAK0oB,OAAOvmB,IAAIiN,EAAEmY,EAAE3vB,MAAM2zC,QAAQppC,IAAI,CAAC,EAAEA,GAAG/I,EAAEgW,EAAEo8B,aAAap8B,EAAE88B,WAAW/pC,EAAEiN,EAAEmY,EAAE3vB,MAAM2zC,QAAQppC,IAAI,CAAC,EAAEG,EAAEilB,EAAEoW,OAAO,CAACr4B,KAAKnD,EAAEgqC,SAAS78B,EAAEiF,KAAKlS,EAAE1K,QAAQkP,EAAEs3B,KAAKt3B,EAAEs3B,KAAKiI,SAAShtC,EAAEgmC,aAAahmC,GAAGmuB,EAAE3hB,KAAKnK,MAAM2jC,aAAan6B,KAAK7L,GAAGiyC,UAAUzkB,EAAErf,KAAK,MAAMzF,IAAIjI,EAAEoI,EAAEE,OAAOtI,EAAEoI,EAAEE,GAAG,IAAIiqC,cAAc,EAAEh9B,EAAEi9B,QAAO,IAAKj9B,EAAEi9B,MAAMtwC,KAAKuE,EAAE+B,EAAEukB,EAAEpkB,IAAIlC,EAAEkZ,kBAAkBlZ,EAAEkZ,iBAAiBrX,EAAEK,IAAI4M,EAAEiV,MAAMjV,EAAEiV,IAAItoB,KAAKuE,EAAEgC,GAAGA,EAAE3K,QAAQwmC,OAAO77B,EAAE3K,QAAQwmC,KAAKt3B,EAAEs3B,OAAO/kC,EAAES,EAAEqF,OAAOrF,EAAEuyC,gBAAgB,EAAE9pC,GAAGzI,EAAE3D,KAAKoM,GAAGilB,EAAE3vB,MAAMk0C,OAAO3pC,IAAG,EAAK,EAACylC,OAAO,SAAS1lC,EAAE5B,EAAEuG,EAAExE,EAAEjJ,GAAG,IAAI0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE8M,EAAEvV,EAAEsI,EAAEykB,EAAEtX,EAAE3N,EAAE09B,EAAE+J,QAAQlnC,IAAIm9B,EAAE5mB,IAAIvW,GAAG,GAAGP,IAAIM,EAAEN,EAAEo4B,QAAQ,CAAqC,IAApCx5B,GAAGD,GAAGA,GAAG,IAAI7E,MAAM8iC,IAAI,CAAC,KAAK3lC,OAAa2H,QAAO4B,EAAEmN,GAAGtN,EAAE2+B,GAAGN,KAAK//B,EAAEC,KAAK,IAAI,GAAGqmB,GAAG5kB,EAAE,IAAI,IAAIhC,MAAM,KAAK0oB,OAAOvmB,EAAE,CAAmJ,IAAlJiN,EAAEmY,EAAE3vB,MAAM2zC,QAAQppC,IAAI,CAAC,EAAEtI,EAAEoI,EAAEE,GAAGE,EAAE+M,EAAEo8B,aAAap8B,EAAE88B,WAAW/pC,IAAI,GAAGH,EAAEA,EAAE,IAAI,IAAIuB,OAAO,UAAUqjB,EAAErf,KAAK,iBAAiB,WAAW/E,EAAEV,EAAEjI,EAAEjB,OAAakJ,KAAIQ,EAAEzI,EAAEiI,IAAI1I,GAAGkW,IAAIhN,EAAE6pC,UAAUtlC,GAAGA,EAAEs3B,OAAO77B,EAAE67B,MAAMn8B,IAAIA,EAAEiD,KAAK3C,EAAE+oC,YAAYhpC,GAAGA,IAAIC,EAAE8jC,WAAW,OAAO/jC,IAAIC,EAAE8jC,YAAYvsC,EAAEqF,OAAO4C,EAAE,GAAGQ,EAAE8jC,UAAUvsC,EAAEuyC,gBAAgBh9B,EAAEw4B,QAAQx4B,EAAEw4B,OAAO7rC,KAAKmG,EAAEI,IAAIE,IAAI3I,EAAEjB,SAASwW,EAAEk9B,WAAU,IAAKl9B,EAAEk9B,SAASvwC,KAAKmG,EAAE0kB,EAAEjlB,EAAEoqC,SAASxkB,EAAEglB,YAAYrqC,EAAEC,EAAER,EAAEoqC,eAAe9pC,EAAEE,GAAI,MAAK,IAAIA,KAAKF,EAAEslB,EAAE3vB,MAAMgwC,OAAO1lC,EAAEC,EAAE7B,EAAEC,GAAGsG,EAAExE,GAAE,GAAIklB,EAAEwW,cAAc97B,IAAIo9B,EAAEuI,OAAO1lC,EAAE,gBAAiB,CAAC,EAAC+pC,SAAS,SAAS/pC,GAAG,IAAI5B,EAAEuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAE,IAAIzC,MAAMvC,UAAUpE,QAAQqJ,EAAEslB,EAAE3vB,MAAM40C,IAAItqC,GAAG3B,GAAG8+B,EAAE5mB,IAAInkB,KAAK,WAAWP,OAAO8yB,OAAO,OAAO5kB,EAAEqD,OAAO,GAAGhD,EAAEilB,EAAE3vB,MAAM2zC,QAAQtpC,EAAEqD,OAAO,CAAC,EAAE,IAAItD,EAAE,GAAGC,EAAE3B,EAAE,EAAEA,EAAEtD,UAAUpE,OAAO0H,IAAI0B,EAAE1B,GAAGtD,UAAUsD,GAAG,GAAG2B,EAAEwqC,eAAen4C,MAAMgO,EAAEoqC,cAAa,IAAKpqC,EAAEoqC,YAAY3wC,KAAKzH,KAAK2N,GAAG,CAAuC,IAAtCO,EAAE+kB,EAAE3vB,MAAMP,SAAS0E,KAAKzH,KAAK2N,EAAE1B,GAAGD,EAAE,GAASlH,EAAEoJ,EAAElC,QAAQ2B,EAAE0qC,wBAAmD,IAA3B1qC,EAAE2qC,cAAcxzC,EAAEyzC,KAAKhmC,EAAE,GAAS/E,EAAE1I,EAAE/B,SAASwP,QAAQ5E,EAAE6qC,iCAAgC7qC,EAAE8qC,aAAY,IAAKjrC,EAAEupC,YAAYppC,EAAE8qC,WAAW9nC,KAAKnD,EAAEupC,aAAappC,EAAE+qC,UAAUlrC,EAAEG,EAAEsS,KAAKzS,EAAEyS,UAAK,KAAUlS,IAAIklB,EAAE3vB,MAAM2zC,QAAQzpC,EAAEqqC,WAAW,CAAC,GAAGJ,QAAQjqC,EAAEnK,SAASP,MAAMgC,EAAEyzC,KAAK7qC,MAAK,KAAMC,EAAE9I,OAAOkJ,KAAKJ,EAAE0pC,iBAAiB1pC,EAAEwpC,oBAAoB,OAAOnpC,EAAE2qC,cAAc3qC,EAAE2qC,aAAalxC,KAAKzH,KAAK2N,GAAGA,EAAE9I,MAAO,CAAC,EAAC9B,SAAS,SAAS6K,EAAE5B,GAAG,IAAIuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAE,GAAGC,EAAE3B,EAAE8rC,cAAc7rC,EAAE2B,EAAEo2B,OAAO,GAAGr2B,GAAG1B,EAAEg8B,YAAY,UAAUr6B,EAAEoD,MAAM,GAAGpD,EAAE+iC,QAAQ,KAAK1kC,IAAIjM,KAAKiM,EAAEA,EAAE7F,YAAYpG,KAAK,GAAG,IAAIiM,EAAEg8B,WAAW,UAAUr6B,EAAEoD,OAAM,IAAK/E,EAAEw/B,UAAU,CAAC,IAAIj+B,EAAE,GAAGU,EAAE,CAAC,EAAEqE,EAAE,EAAEA,EAAE5E,EAAE4E,SAAI,IAASrE,EAAEpJ,GAAGiJ,EAAE/B,EAAEuG,IAAIu/B,SAAS,OAAO5jC,EAAEpJ,GAAGiJ,EAAE+8B,cAAc,EAAE7X,EAAEnuB,EAAE9E,MAAMsW,MAAMrK,GAAGgnB,EAAExe,KAAK3P,EAAE9E,KAAK,KAAK,CAACiM,IAAI3H,QAAQ4J,EAAEpJ,IAAI0I,EAAE5L,KAAKmM,GAAGP,EAAElJ,QAAQoJ,EAAE9L,KAAK,CAAC22C,KAAKtsC,EAAElJ,SAASyK,GAAI,QAAOvB,EAAEjM,KAAK2N,EAAE3B,EAAE1H,QAAQoJ,EAAE9L,KAAK,CAAC22C,KAAKtsC,EAAElJ,SAASiJ,EAAEd,MAAMyC,KAAKD,CAAE,EAACkrC,QAAQ,SAAS5sC,EAAE4B,GAAGnO,OAAOwc,eAAegX,EAAEskB,MAAM/0C,UAAUwJ,EAAE,CAAC4tB,YAAW,EAAGoG,cAAa,EAAG7b,IAAIlW,EAAEL,GAAG,WAAW,GAAG5N,KAAK64C,cAAc,OAAOjrC,EAAE5N,KAAK64C,cAAe,EAAC,WAAW,GAAG74C,KAAK64C,cAAc,OAAO74C,KAAK64C,cAAc7sC,EAAG,EAAC86B,IAAI,SAASl5B,GAAGnO,OAAOwc,eAAejc,KAAKgM,EAAE,CAAC4tB,YAAW,EAAGoG,cAAa,EAAGC,UAAS,EAAGp4B,MAAM+F,GAAI,GAAG,EAACsqC,IAAI,SAAStqC,GAAG,OAAOA,EAAEqlB,EAAEsW,SAAS37B,EAAE,IAAIqlB,EAAEskB,MAAM3pC,EAAG,EAACqpC,QAAQ,CAAC6B,KAAK,CAACC,UAAS,GAAIC,MAAM,CAACjB,MAAM,SAASnqC,GAAG,IAAI5B,EAAEhM,MAAM4N,EAAE,OAAO++B,GAAGh8B,KAAK3E,EAAEgF,OAAOhF,EAAEgtC,OAAOjmB,EAAE/mB,EAAE,UAAU0lC,GAAG1lC,EAAE,QAAQw/B,KAAI,CAAG,EAAC8L,QAAQ,SAAS1pC,GAAG,IAAI5B,EAAEhM,MAAM4N,EAAE,OAAO++B,GAAGh8B,KAAK3E,EAAEgF,OAAOhF,EAAEgtC,OAAOjmB,EAAE/mB,EAAE,UAAU0lC,GAAG1lC,EAAE,UAAS,CAAG,EAACsqC,SAAS,SAAS1oC,GAAG,IAAI5B,EAAE4B,EAAEo2B,OAAO,OAAO2I,GAAGh8B,KAAK3E,EAAEgF,OAAOhF,EAAEgtC,OAAOjmB,EAAE/mB,EAAE,UAAU++B,EAAE5mB,IAAInY,EAAE,UAAU+mB,EAAE/mB,EAAE,IAAK,GAAEitC,aAAa,CAACN,aAAa,SAAS/qC,QAAG,IAASA,EAAE/I,QAAQ+I,EAAEirC,gBAAgBjrC,EAAEirC,cAAcK,YAAYtrC,EAAE/I,OAAQ,KAAIouB,EAAEglB,YAAY,SAASrqC,EAAE5B,EAAEuG,GAAG3E,EAAEi5B,qBAAqBj5B,EAAEi5B,oBAAoB76B,EAAEuG,EAAG,EAAC0gB,EAAEskB,MAAM,SAAS3pC,EAAE5B,GAAG,KAAKhM,gBAAgBizB,EAAEskB,OAAO,OAAO,IAAItkB,EAAEskB,MAAM3pC,EAAE5B,GAAG4B,GAAGA,EAAEoD,MAAMhR,KAAK64C,cAAcjrC,EAAE5N,KAAKgR,KAAKpD,EAAEoD,KAAKhR,KAAKm5C,mBAAmBvrC,EAAEwrC,uBAAkB,IAASxrC,EAAEwrC,mBAAkB,IAAKxrC,EAAEsrC,YAAY1N,GAAG+F,GAAGvxC,KAAKgkC,OAAOp2B,EAAEo2B,QAAQ,IAAIp2B,EAAEo2B,OAAOiE,SAASr6B,EAAEo2B,OAAO59B,WAAWwH,EAAEo2B,OAAOhkC,KAAKs4C,cAAc1qC,EAAE0qC,cAAct4C,KAAKq5C,cAAczrC,EAAEyrC,eAAer5C,KAAKgR,KAAKpD,EAAE5B,GAAGinB,EAAEoW,OAAOrpC,KAAKgM,GAAGhM,KAAKs5C,UAAU1rC,GAAGA,EAAE0rC,WAAWr4C,KAAKC,MAAMlB,KAAKizB,EAAEsW,UAAS,CAAG,EAACtW,EAAEskB,MAAM/0C,UAAU,CAAC5C,YAAYqzB,EAAEskB,MAAM4B,mBAAmB5H,GAAG8G,qBAAqB9G,GAAGiH,8BAA8BjH,GAAGgI,aAAY,EAAGlC,eAAe,WAAW,IAAIzpC,EAAE5N,KAAK64C,cAAc74C,KAAKm5C,mBAAmB3N,GAAG59B,IAAI5N,KAAKu5C,aAAa3rC,EAAEypC,gBAAiB,EAACF,gBAAgB,WAAW,IAAIvpC,EAAE5N,KAAK64C,cAAc74C,KAAKq4C,qBAAqB7M,GAAG59B,IAAI5N,KAAKu5C,aAAa3rC,EAAEupC,iBAAkB,EAACC,yBAAyB,WAAW,IAAIxpC,EAAE5N,KAAK64C,cAAc74C,KAAKw4C,8BAA8BhN,GAAG59B,IAAI5N,KAAKu5C,aAAa3rC,EAAEwpC,2BAA2Bp3C,KAAKm3C,iBAAkB,GAAElkB,EAAE6V,KAAK,CAAC0Q,QAAO,EAAGC,SAAQ,EAAGC,YAAW,EAAGC,gBAAe,EAAGC,SAAQ,EAAGC,QAAO,EAAGC,YAAW,EAAGC,SAAQ,EAAGC,OAAM,EAAGC,OAAM,EAAGC,UAAS,EAAGC,MAAK,EAAG,MAAO,EAAGx4B,MAAK,EAAGy4B,UAAS,EAAGxyC,KAAI,EAAGyyC,SAAQ,EAAG1J,QAAO,EAAG2J,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,WAAU,EAAGC,aAAY,EAAGC,SAAQ,EAAGC,SAAQ,EAAGC,eAAc,EAAGC,WAAU,EAAGC,SAAQ,EAAGC,OAAM,GAAIjoB,EAAE3vB,MAAMs1C,SAAS3lB,EAAE6V,KAAK,CAAC9L,MAAM,UAAUme,KAAK,aAAY,SAASnvC,EAAE4B,GAAGqlB,EAAE3vB,MAAM2zC,QAAQjrC,GAAG,CAAC+rC,MAAM,WAAW,OAAOrG,GAAG1xC,KAAKgM,EAAEwlC,KAAI,CAAG,EAAC8F,QAAQ,WAAW,OAAO5F,GAAG1xC,KAAKgM,IAAG,CAAG,EAACsqC,SAAS,SAAS1oC,GAAG,OAAOm9B,EAAE5mB,IAAIvW,EAAEo2B,OAAOh4B,EAAG,EAACkrC,aAAatpC,EAAG,IAAEqlB,EAAE6V,KAAK,CAACsS,WAAW,YAAYC,WAAW,WAAWC,aAAa,cAAcC,aAAa,eAAc,SAAS3tC,EAAE9I,GAAGmuB,EAAE3vB,MAAM2zC,QAAQrpC,GAAG,CAACspC,aAAapyC,EAAE8yC,SAAS9yC,EAAE2yC,OAAO,SAAS7pC,GAAG,IAAI5B,EAAEuG,EAAE3E,EAAEyrC,cAActrC,EAAEH,EAAE8qC,UAAU,OAAOnmC,IAAIA,IAAIvS,MAAMizB,EAAEyb,SAAS1uC,KAAKuS,MAAM3E,EAAEoD,KAAKjD,EAAE8pC,SAAS7rC,EAAE+B,EAAE1K,QAAQP,MAAM9C,KAAK0I,WAAWkF,EAAEoD,KAAKlM,GAAGkH,CAAE,EAAE,IAAEinB,EAAEuV,GAAGa,OAAO,CAACtE,GAAG,SAASn3B,EAAE5B,EAAEuG,EAAExE,GAAG,OAAO0jC,GAAGzxC,KAAK4N,EAAE5B,EAAEuG,EAAExE,EAAG,EAACytC,IAAI,SAAS5tC,EAAE5B,EAAEuG,EAAExE,GAAG,OAAO0jC,GAAGzxC,KAAK4N,EAAE5B,EAAEuG,EAAExE,EAAE,EAAG,EAAC65B,IAAI,SAASh6B,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE,GAAG8I,GAAGA,EAAEypC,gBAAgBzpC,EAAE8qC,UAAU,OAAO3qC,EAAEH,EAAE8qC,UAAUzlB,EAAErlB,EAAEuqC,gBAAgBvQ,IAAI75B,EAAEgpC,UAAUhpC,EAAE8pC,SAAS,IAAI9pC,EAAEgpC,UAAUhpC,EAAE8pC,SAAS9pC,EAAE+jC,SAAS/jC,EAAE1K,SAASrD,KAAK,GAAG,iBAAiB4N,EAAE,CAAC,IAAI9I,KAAK8I,EAAE5N,KAAK4nC,IAAI9iC,EAAEkH,EAAE4B,EAAE9I,IAAI,OAAO9E,IAAK,QAAM,IAAKgM,GAAG,mBAAmBA,IAAIuG,EAAEvG,EAAEA,OAAE,IAAQ,IAAKuG,IAAIA,EAAEg/B,IAAIvxC,KAAK8oC,MAAK,WAAW7V,EAAE3vB,MAAMgwC,OAAOtzC,KAAK4N,EAAE2E,EAAEvG,EAAG,GAAE,IAAG,IAAIyvC,GAAG,wBAAwBC,GAAG,oCAAoCC,GAAG,6BAA6B,SAASC,GAAGhuC,EAAE5B,GAAG,OAAO+mB,EAAEnlB,EAAE,UAAUmlB,EAAE,KAAK/mB,EAAEi8B,SAASj8B,EAAEA,EAAEojC,WAAW,OAAOnc,EAAErlB,GAAG0kC,SAAS,SAAS,IAAI1kC,CAAE,UAASiuC,GAAGjuC,GAAG,OAAOA,EAAEoD,MAAM,OAAOpD,EAAEw6B,aAAa,SAAS,IAAIx6B,EAAEoD,KAAKpD,CAAE,UAASkuC,GAAGluC,GAAG,MAAM,WAAWA,EAAEoD,MAAM,IAAI9F,MAAM,EAAE,GAAG0C,EAAEoD,KAAKpD,EAAEoD,KAAK9F,MAAM,GAAG0C,EAAE2+B,gBAAgB,QAAQ3+B,CAAE,UAASmuC,GAAGnuC,EAAE5B,GAAG,IAAIuG,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAE,GAAG,IAAI1B,EAAEi8B,SAAS,CAAC,GAAG8C,EAAE+J,QAAQlnC,KAAKF,EAAEq9B,EAAE5mB,IAAIvW,GAAG63B,QAAQ,IAAI3gC,KAAKimC,EAAEuI,OAAOtnC,EAAE,iBAAiB0B,EAAE,IAAI6E,EAAE,EAAExE,EAAEL,EAAE5I,GAAGR,OAAOiO,EAAExE,EAAEwE,IAAI0gB,EAAE3vB,MAAMysB,IAAI/jB,EAAElH,EAAE4I,EAAE5I,GAAGyN,IAAIohB,EAAEmhB,QAAQlnC,KAAKJ,EAAEmmB,EAAEkhB,OAAOjnC,GAAGM,EAAE+kB,EAAEoW,OAAO,CAAC,EAAE77B,GAAGmmB,EAAEmT,IAAI96B,EAAEkC,GAAI,CAAC,UAAS8tC,GAAGzpC,EAAExE,EAAEjJ,EAAE0I,GAAGO,EAAEV,EAAEU,GAAG,IAAIH,EAAE5B,EAAEkC,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE,EAAE8M,EAAEvI,EAAEjO,OAAOiB,EAAEuV,EAAE,EAAEjN,EAAEE,EAAE,GAAGukB,EAAErkB,EAAEJ,GAAG,GAAGykB,GAAG,EAAExX,GAAG,iBAAiBjN,IAAIlC,EAAEmqC,YAAY4F,GAAG/qC,KAAK9C,GAAG,OAAO0E,EAAEu2B,MAAK,SAASl7B,GAAG,IAAI5B,EAAEuG,EAAEy2B,GAAGp7B,GAAG0kB,IAAIvkB,EAAE,GAAGF,EAAEpG,KAAKzH,KAAK4N,EAAE5B,EAAEiwC,SAASD,GAAGhwC,EAAE+B,EAAEjJ,EAAE0I,EAAG,IAAE,GAAGsN,IAAI9O,GAAG4B,EAAE0jC,GAAGvjC,EAAEwE,EAAE,GAAGu5B,eAAc,EAAGv5B,EAAE/E,IAAI4hC,WAAW,IAAIxhC,EAAEg+B,WAAWtnC,SAASsJ,EAAE5B,GAAGA,GAAGwB,GAAG,CAAC,IAAIE,GAAGQ,EAAE+kB,EAAExhB,IAAIy7B,GAAGt/B,EAAE,UAAUiuC,KAAKv3C,OAAO0J,EAAE8M,EAAE9M,IAAIL,EAAEC,EAAEI,IAAIzI,IAAIoI,EAAEslB,EAAEipB,MAAMvuC,GAAE,GAAG,GAAID,GAAGulB,EAAE2V,MAAM16B,EAAEg/B,GAAGv/B,EAAE,YAAY7I,EAAE2C,KAAK8K,EAAEvE,GAAGL,EAAEK,GAAG,GAAGN,EAAE,IAAIzB,EAAEiC,EAAEA,EAAE5J,OAAO,GAAGwnC,cAAc7Y,EAAExhB,IAAIvD,EAAE4tC,IAAI9tC,EAAE,EAAEA,EAAEN,EAAEM,IAAIL,EAAEO,EAAEF,GAAGg/B,GAAGr8B,KAAKhD,EAAEqD,MAAM,MAAM+5B,EAAE8J,OAAOlnC,EAAE,eAAeslB,EAAEyb,SAASziC,EAAE0B,KAAKA,EAAExL,KAAK,YAAYwL,EAAEqD,MAAM,IAAI6gB,cAAcoB,EAAEkpB,WAAWxuC,EAAEw6B,UAAUlV,EAAEkpB,SAASxuC,EAAExL,IAAI,CAAC+lC,MAAMv6B,EAAEu6B,OAAOv6B,EAAEy6B,aAAa,UAAUn8B,GAAG+mB,EAAErlB,EAAEwhC,YAAYltC,QAAQ05C,GAAG,IAAIhuC,EAAE1B,GAAI,QAAOsG,CAAE,UAAS6pC,GAAGxuC,EAAE5B,EAAEuG,GAAG,IAAI,IAAIxE,EAAEjJ,EAAEkH,EAAEinB,EAAEliB,OAAO/E,EAAE4B,GAAGA,EAAEJ,EAAE,EAAE,OAAOO,EAAEjJ,EAAE0I,IAAIA,IAAI+E,GAAG,IAAIxE,EAAEk6B,UAAUhV,EAAEopB,UAAUnP,GAAGn/B,IAAIA,EAAE3H,aAAamM,GAAG6qB,GAAGrvB,IAAIq/B,GAAGF,GAAGn/B,EAAE,WAAWA,EAAE3H,WAAWmiC,YAAYx6B,IAAI,OAAOH,CAAE,CAAAqlB,EAAEoW,OAAO,CAACwN,cAAc,SAASjpC,GAAG,OAAOA,CAAE,EAACsuC,MAAM,SAAStuC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAEJ,EAAEmoC,WAAU,GAAIj7B,EAAEsiB,GAAGxvB,GAAG,KAAKjC,EAAEqqC,gBAAgB,IAAIpoC,EAAEq6B,UAAU,KAAKr6B,EAAEq6B,UAAUhV,EAAEif,SAAStkC,IAAI,IAAIM,EAAEg/B,GAAGl/B,GAAGD,EAAE,EAAEjJ,GAAG0I,EAAE0/B,GAAGt/B,IAAItJ,OAAOyJ,EAAEjJ,EAAEiJ,IAAIL,EAAEF,EAAEO,GAAiB,WAAW9B,GAAzB0B,EAAEO,EAAEH,IAAyB29B,SAAS7Z,gBAAgB8a,GAAGh8B,KAAKjD,EAAEsD,MAAMrD,EAAEyiC,QAAQ1iC,EAAE0iC,QAAQ,UAAUnkC,GAAG,aAAaA,IAAI0B,EAAEqkC,aAAatkC,EAAEskC,cAAc,GAAGhmC,EAAE,GAAGuG,EAAE,IAAI/E,EAAEA,GAAG0/B,GAAGt/B,GAAGM,EAAEA,GAAGg/B,GAAGl/B,GAAGD,EAAE,EAAEjJ,EAAE0I,EAAElJ,OAAOyJ,EAAEjJ,EAAEiJ,IAAIguC,GAAGvuC,EAAEO,GAAGG,EAAEH,SAASguC,GAAGnuC,EAAEI,GAAG,OAAO,GAAGE,EAAEg/B,GAAGl/B,EAAE,WAAW1J,QAAQ8oC,GAAGl/B,GAAG4M,GAAGoyB,GAAGt/B,EAAE,WAAWI,CAAE,EAACquC,UAAU,SAASzuC,GAAG,IAAI,IAAI5B,EAAEuG,EAAExE,EAAEjJ,EAAEmuB,EAAE3vB,MAAM2zC,QAAQzpC,EAAE,OAAE,KAAU+E,EAAE3E,EAAEJ,IAAIA,IAAI,GAAG68B,EAAE93B,GAAG,CAAC,GAAGvG,EAAEuG,EAAEw4B,EAAExB,SAAS,CAAC,GAAGv9B,EAAEy5B,OAAO,IAAI13B,KAAK/B,EAAEy5B,OAAO3gC,EAAEiJ,GAAGklB,EAAE3vB,MAAMgwC,OAAO/gC,EAAExE,GAAGklB,EAAEglB,YAAY1lC,EAAExE,EAAE/B,EAAEyrC,QAAQllC,EAAEw4B,EAAExB,cAAS,CAAO,CAAAh3B,EAAEohB,EAAE4V,WAAWh3B,EAAEohB,EAAE4V,cAAS,EAAQ,CAAC,IAAGtW,EAAEuV,GAAGa,OAAO,CAACiT,OAAO,SAAS1uC,GAAG,OAAOwuC,GAAGp8C,KAAK4N,GAAE,EAAI,EAAC0lC,OAAO,SAAS1lC,GAAG,OAAOwuC,GAAGp8C,KAAK4N,EAAG,EAACjH,KAAK,SAASiH,GAAG,OAAOu8B,EAAEnqC,MAAK,SAAS4N,GAAG,YAAO,IAASA,EAAEqlB,EAAEtsB,KAAK3G,MAAMA,KAAKuwC,QAAQzH,MAAK,WAAW,IAAI9oC,KAAKioC,UAAU,KAAKjoC,KAAKioC,UAAU,IAAIjoC,KAAKioC,WAAWjoC,KAAKmvC,YAAYvhC,EAAG,GAAE,GAAC,KAAKA,EAAElF,UAAUpE,OAAQ,EAACi4C,OAAO,WAAW,OAAOP,GAAGh8C,KAAK0I,WAAU,SAASkF,GAAG,IAAI5N,KAAKioC,UAAU,KAAKjoC,KAAKioC,UAAU,IAAIjoC,KAAKioC,UAAU2T,GAAG57C,KAAK4N,GAAGtH,YAAYsH,EAAG,GAAE,EAACzI,QAAQ,WAAW,OAAO62C,GAAGh8C,KAAK0I,WAAU,SAASkF,GAAG,GAAG,IAAI5N,KAAKioC,UAAU,KAAKjoC,KAAKioC,UAAU,IAAIjoC,KAAKioC,SAAS,CAAC,IAAIj8B,EAAE4vC,GAAG57C,KAAK4N,GAAG5B,EAAE3F,aAAauH,EAAE5B,EAAEojC,WAAY,CAAC,GAAE,EAACoN,OAAO,WAAW,OAAOR,GAAGh8C,KAAK0I,WAAU,SAASkF,GAAG5N,KAAKoG,YAAYpG,KAAKoG,WAAWC,aAAauH,EAAE5N,KAAM,GAAE,EAACy8C,MAAM,WAAW,OAAOT,GAAGh8C,KAAK0I,WAAU,SAASkF,GAAG5N,KAAKoG,YAAYpG,KAAKoG,WAAWC,aAAauH,EAAE5N,KAAK+sC,YAAa,GAAE,EAACwD,MAAM,WAAW,IAAI,IAAI3iC,EAAE5B,EAAE,EAAE,OAAO4B,EAAE5N,KAAKgM,IAAIA,IAAI,IAAI4B,EAAEq6B,WAAWhV,EAAEopB,UAAUnP,GAAGt/B,GAAE,IAAKA,EAAEuhC,YAAY,IAAI,OAAOnvC,IAAK,EAACk8C,MAAM,SAAStuC,EAAE5B,GAAG,OAAO4B,EAAE,MAAMA,GAAGA,EAAE5B,EAAE,MAAMA,EAAE4B,EAAE5B,EAAEhM,KAAKyR,KAAI,WAAW,OAAOwhB,EAAEipB,MAAMl8C,KAAK4N,EAAE5B,EAAG,GAAE,EAACiwC,KAAK,SAASruC,GAAG,OAAOu8B,EAAEnqC,MAAK,SAAS4N,GAAG,IAAI5B,EAAEhM,KAAK,IAAI,CAAC,EAAEuS,EAAE,EAAExE,EAAE/N,KAAKsE,OAAO,QAAG,IAASsJ,GAAG,IAAI5B,EAAEi8B,SAAS,OAAOj8B,EAAEkiC,UAAU,GAAG,iBAAiBtgC,IAAI6tC,GAAG9qC,KAAK/C,KAAKq/B,IAAIJ,GAAGd,KAAKn+B,IAAI,CAAC,GAAG,KAAK,GAAGikB,eAAe,CAACjkB,EAAEqlB,EAAE4jB,cAAcjpC,GAAG,IAAI,KAAK2E,EAAExE,EAAEwE,IAAI,KAAKvG,EAAEhM,KAAKuS,IAAI,CAAC,GAAG01B,WAAWhV,EAAEopB,UAAUnP,GAAGlhC,GAAE,IAAKA,EAAEkiC,UAAUtgC,GAAG5B,EAAE,CAAE,OAAM4B,GAAI,CAAC,CAAA5B,GAAGhM,KAAKuwC,QAAQgM,OAAO3uC,EAAG,GAAC,KAAKA,EAAElF,UAAUpE,OAAQ,EAACo4C,YAAY,WAAW,IAAInqC,EAAE,GAAG,OAAOypC,GAAGh8C,KAAK0I,WAAU,SAASkF,GAAG,IAAI5B,EAAEhM,KAAKoG,WAAW6sB,EAAE2W,QAAQ5pC,KAAKuS,GAAG,IAAI0gB,EAAEopB,UAAUnP,GAAGltC,OAAOgM,GAAGA,EAAE2wC,aAAa/uC,EAAE5N,MAAO,GAACuS,EAAG,IAAG0gB,EAAE6V,KAAK,CAAC8T,SAAS,SAASC,UAAU,UAAUx2C,aAAa,SAASy2C,YAAY,QAAQC,WAAW,gBAAe,SAASnvC,EAAEM,GAAG+kB,EAAEuV,GAAG56B,GAAG,SAASA,GAAG,IAAI,IAAI5B,EAAEuG,EAAE,GAAGxE,EAAEklB,EAAErlB,GAAG9I,EAAEiJ,EAAEzJ,OAAO,EAAEkJ,EAAE,EAAEA,GAAG1I,EAAE0I,IAAIxB,EAAEwB,IAAI1I,EAAE9E,KAAKA,KAAKk8C,OAAM,GAAIjpB,EAAEllB,EAAEP,IAAIU,GAAGlC,GAAG2B,EAAE7K,MAAMyP,EAAEvG,EAAEmY,OAAO,OAAOnkB,KAAK2oC,UAAUp2B,EAAG,CAAC,IAAE,IAAIyqC,GAAG,IAAI/tC,OAAO,KAAKi8B,GAAG,kBAAkB,KAAK+R,GAAG,MAAMC,GAAG,SAAStvC,GAAG,IAAI5B,EAAE4B,EAAEk+B,cAAc2B,YAAY,OAAOzhC,GAAGA,EAAEmxC,SAASnxC,EAAEgP,GAAGhP,EAAEoxC,iBAAiBxvC,EAAG,EAACyvC,GAAG,SAASzvC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAE,CAAC,EAAE,IAAI1I,KAAKkH,EAAEwB,EAAE1I,GAAG8I,EAAE2nC,MAAMzwC,GAAG8I,EAAE2nC,MAAMzwC,GAAGkH,EAAElH,GAAG,IAAIA,KAAKiJ,EAAEwE,EAAE9K,KAAKmG,GAAG5B,EAAE4B,EAAE2nC,MAAMzwC,GAAG0I,EAAE1I,GAAG,OAAOiJ,CAAE,EAACuvC,GAAG,IAAIruC,OAAOm8B,GAAGn4B,KAAK,KAAK,KAAKsqC,GAAG,sBAAsBC,GAAG,IAAIvuC,OAAO,IAAIsuC,GAAG,8BAA8BA,GAAG,KAAK,KAAK,SAASE,GAAG7vC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEuvC,GAAGtsC,KAAK3E,GAAG2B,EAAEC,EAAE2nC,MAAM,OAAOhjC,EAAEA,GAAG2qC,GAAGtvC,MAAMM,EAAEqE,EAAEmrC,iBAAiB1xC,IAAIuG,EAAEvG,GAAG0B,IAAIQ,EAAEA,EAAEjM,QAAQu7C,GAAG,OAAO,KAAKtvC,GAAGkvB,GAAGxvB,KAAKM,EAAE+kB,EAAEsiB,MAAM3nC,EAAE5B,KAAKL,EAAEgyC,kBAAkBX,GAAGrsC,KAAKzC,IAAIovC,GAAG3sC,KAAK3E,KAAK+B,EAAEJ,EAAE4mB,MAAMzvB,EAAE6I,EAAEiwC,SAASpwC,EAAEG,EAAEkwC,SAASlwC,EAAEiwC,SAASjwC,EAAEkwC,SAASlwC,EAAE4mB,MAAMrmB,EAAEA,EAAEqE,EAAEgiB,MAAM5mB,EAAE4mB,MAAMxmB,EAAEJ,EAAEiwC,SAAS94C,EAAE6I,EAAEkwC,SAASrwC,SAAI,IAASU,EAAEA,EAAE,GAAGA,CAAE,UAAS4vC,GAAGlwC,EAAE5B,GAAG,MAAM,CAACmY,IAAI,WAAW,IAAIvW,IAAI,OAAO5N,KAAKmkB,IAAInY,GAAGlJ,MAAM9C,KAAK0I,kBAAkB1I,KAAKmkB,GAAI,EAAE,EAAC,WAAW,SAASvW,IAAI,GAAG3B,EAAE,CAAC0B,EAAE4nC,MAAMwI,QAAQ,+EAA+E9xC,EAAEspC,MAAMwI,QAAQ,4HAA4H1S,GAAG/kC,YAAYqH,GAAGrH,YAAY2F,GAAG,IAAI2B,EAAEoN,EAAEoiC,iBAAiBnxC,GAAGsG,EAAE,OAAO3E,EAAE8/B,IAAIhgC,EAAE,KAAK1B,EAAE4B,EAAEowC,YAAY/xC,EAAEspC,MAAM0I,MAAM,MAAMzwC,EAAE,KAAKxB,EAAE4B,EAAEqwC,OAAOlwC,EAAE,KAAK/B,EAAE4B,EAAE2mB,OAAOtoB,EAAEspC,MAAMrd,SAAS,WAAWpzB,EAAE,KAAKkH,EAAEC,EAAEiyC,YAAY,GAAG7S,GAAG9C,YAAY56B,GAAG1B,EAAE,IAAK,CAAC,UAASD,EAAE4B,GAAG,OAAO3J,KAAKiqB,MAAMiwB,WAAWvwC,GAAI,KAAI2E,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAEglB,EAAEhtB,cAAc,OAAOsG,EAAE0mB,EAAEhtB,cAAc,OAAOsG,EAAEspC,QAAQtpC,EAAEspC,MAAM6I,eAAe,cAAcnyC,EAAE8pC,WAAU,GAAIR,MAAM6I,eAAe,GAAGzyC,EAAE0yC,gBAAgB,gBAAgBpyC,EAAEspC,MAAM6I,eAAenrB,EAAEoW,OAAO19B,EAAE,CAAC2yC,kBAAkB,WAAW,OAAO1wC,IAAIG,CAAE,EAAC4vC,eAAe,WAAW,OAAO/vC,IAAIJ,CAAE,EAAC+wC,cAAc,WAAW,OAAO3wC,IAAI2E,CAAE,EAACisC,mBAAmB,WAAW,OAAO5wC,IAAIF,CAAE,EAAC+wC,cAAc,WAAW,OAAO7wC,IAAI9I,CAAE,EAAC45C,qBAAqB,WAAW,IAAI9wC,EAAE5B,EAAEuG,EAAExE,EAAE,OAAO,MAAMG,IAAIN,EAAE+kB,EAAEhtB,cAAc,SAASqG,EAAE2mB,EAAEhtB,cAAc,MAAM4M,EAAEogB,EAAEhtB,cAAc,OAAOiI,EAAE2nC,MAAMwI,QAAQ,2DAA2D/xC,EAAEupC,MAAMwI,QAAQ,mBAAmB/xC,EAAEupC,MAAM/gB,OAAO,MAAMjiB,EAAEgjC,MAAM/gB,OAAO,MAAMjiB,EAAEgjC,MAAMC,QAAQ,QAAQnK,GAAG/kC,YAAYsH,GAAGtH,YAAY0F,GAAG1F,YAAYiM,GAAGxE,EAAEiN,EAAEoiC,iBAAiBpxC,GAAGkC,EAAE2G,SAAS9G,EAAEymB,OAAO,IAAI3f,SAAS9G,EAAE4wC,eAAe,IAAI9pC,SAAS9G,EAAE6wC,kBAAkB,MAAM5yC,EAAE6yC,aAAaxT,GAAG9C,YAAY36B,IAAIM,CAAE,IAAI,CAAh9C,GAAm9C,IAAI4wC,GAAG,CAAC,SAAS,MAAM,MAAMpgC,GAAGiU,EAAEhtB,cAAc,OAAO4vC,MAAMwJ,GAAG,CAAC,EAAE,SAASC,GAAGpxC,GAA8B,OAArBqlB,EAAEgsB,SAASrxC,IAAImxC,GAAGnxC,KAAcA,KAAK8Q,GAAG9Q,EAAEmxC,GAAGnxC,GAAG,SAASA,GAAmD,IAAhD,IAAI5B,EAAE4B,EAAE,GAAG+mC,cAAc/mC,EAAE1C,MAAM,GAAGqH,EAAEusC,GAAGx6C,OAAaiO,SAAQ3E,EAAEkxC,GAAGvsC,GAAGvG,KAAK0S,GAAG,OAAO9Q,CAAE,CAAnG,CAAoGA,IAAIA,EAAG,KAAIsxC,GAAGC,GAAGC,GAAG,4BAA4BC,GAAG,CAACnnB,SAAS,WAAWonB,WAAW,SAAS9J,QAAQ,SAAS+J,GAAG,CAACC,cAAc,IAAIC,WAAW,OAAO,SAASC,GAAG9xC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEo9B,GAAGY,KAAK//B,GAAG,OAAO+B,EAAE9J,KAAKD,IAAI,EAAE+J,EAAE,IAAIwE,GAAG,KAAKxE,EAAE,IAAI,MAAM/B,CAAE,UAAS2zC,GAAG/xC,EAAE5B,EAAEuG,EAAExE,EAAEjJ,EAAE0I,GAAG,IAAIU,EAAE,UAAUlC,EAAE,EAAE,EAAE0B,EAAE,EAAEC,EAAE,EAAE,GAAG4E,KAAKxE,EAAE,SAAS,WAAW,OAAO,EAAE,KAAKG,EAAE,EAAEA,GAAG,EAAE,WAAWqE,IAAI5E,GAAGslB,EAAEwiB,IAAI7nC,EAAE2E,EAAE64B,GAAGl9B,IAAG,EAAGpJ,IAAIiJ,GAAG,YAAYwE,IAAI5E,GAAGslB,EAAEwiB,IAAI7nC,EAAE,UAAUw9B,GAAGl9B,IAAG,EAAGpJ,IAAI,WAAWyN,IAAI5E,GAAGslB,EAAEwiB,IAAI7nC,EAAE,SAASw9B,GAAGl9B,GAAG,SAAQ,EAAGpJ,MAAM6I,GAAGslB,EAAEwiB,IAAI7nC,EAAE,UAAUw9B,GAAGl9B,IAAG,EAAGpJ,GAAG,YAAYyN,EAAE5E,GAAGslB,EAAEwiB,IAAI7nC,EAAE,SAASw9B,GAAGl9B,GAAG,SAAQ,EAAGpJ,GAAG4I,GAAGulB,EAAEwiB,IAAI7nC,EAAE,SAASw9B,GAAGl9B,GAAG,SAAQ,EAAGpJ,IAAI,OAAOiJ,GAAG,GAAGP,IAAIG,GAAG1J,KAAKD,IAAI,EAAEC,KAAK27C,KAAKhyC,EAAE,SAAS5B,EAAE,GAAG2oC,cAAc3oC,EAAEd,MAAM,IAAIsC,EAAEG,EAAED,EAAE,MAAM,GAAGC,CAAE,UAASkyC,GAAGjyC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEmvC,GAAGtvC,GAAG9I,IAAI6G,EAAE2yC,qBAAqB/rC,IAAI,eAAe0gB,EAAEwiB,IAAI7nC,EAAE,aAAY,EAAGG,GAAGP,EAAE1I,EAAEoJ,EAAEuvC,GAAG7vC,EAAE5B,EAAE+B,GAAGL,EAAE,SAAS1B,EAAE,GAAG2oC,cAAc3oC,EAAEd,MAAM,GAAG,GAAG8xC,GAAGrsC,KAAKzC,GAAG,CAAC,IAAIqE,EAAE,OAAOrE,EAAEA,EAAE,MAAO,SAAQvC,EAAE2yC,qBAAqBx5C,IAAI6G,EAAE+yC,wBAAwB3rB,EAAEnlB,EAAE,OAAO,SAASM,IAAIiwC,WAAWjwC,IAAI,WAAW+kB,EAAEwiB,IAAI7nC,EAAE,WAAU,EAAGG,KAAKH,EAAEkyC,iBAAiBx7C,SAASQ,EAAE,eAAemuB,EAAEwiB,IAAI7nC,EAAE,aAAY,EAAGG,IAAIP,EAAEE,KAAKE,KAAKM,EAAEN,EAAEF,MAAMQ,EAAEiwC,WAAWjwC,IAAI,GAAGyxC,GAAG/xC,EAAE5B,EAAEuG,IAAIzN,EAAE,SAAS,WAAW0I,EAAEO,EAAEG,GAAG,IAAK,CAAA+kB,EAAEoW,OAAO,CAAC0W,SAAS,CAACC,QAAQ,CAAC77B,IAAI,SAASvW,EAAE5B,GAAG,GAAGA,EAAE,CAAC,IAAIuG,EAAEkrC,GAAG7vC,EAAE,WAAW,MAAM,KAAK2E,EAAE,IAAIA,CAAE,CAAC,IAAG0tC,UAAU,CAACC,yBAAwB,EAAGC,aAAY,EAAGC,aAAY,EAAGC,UAAS,EAAGC,YAAW,EAAGb,YAAW,EAAGc,UAAS,EAAGC,YAAW,EAAGC,eAAc,EAAGC,iBAAgB,EAAGC,SAAQ,EAAGC,YAAW,EAAGC,cAAa,EAAGC,YAAW,EAAGd,SAAQ,EAAGlpC,OAAM,EAAGiqC,SAAQ,EAAGC,QAAO,EAAGC,QAAO,EAAGC,MAAK,GAAIjC,SAAS,CAAC,EAAE1J,MAAM,SAAS3nC,EAAE5B,EAAEuG,EAAExE,GAAG,GAAGH,GAAG,IAAIA,EAAEq6B,UAAU,IAAIr6B,EAAEq6B,UAAUr6B,EAAE2nC,MAAM,CAAC,IAAIzwC,EAAE0I,EAAEU,EAAER,EAAE08B,EAAEp+B,GAAG2B,EAAEsvC,GAAGtsC,KAAK3E,GAAGC,EAAE2B,EAAE2nC,MAAM,GAAG5nC,IAAI3B,EAAEgzC,GAAGtxC,IAAIQ,EAAE+kB,EAAE8sB,SAAS/zC,IAAIinB,EAAE8sB,SAASryC,QAAG,IAAS6E,EAAE,OAAOrE,GAAG,QAAQA,QAAG,KAAUpJ,EAAEoJ,EAAEiW,IAAIvW,GAAE,EAAGG,IAAIjJ,EAAEmH,EAAED,GAAG,WAAYwB,SAAS+E,KAAKzN,EAAEqmC,GAAGY,KAAKx5B,KAAKzN,EAAE,KAAKyN,EAAE,SAAS3E,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAE,GAAGR,EAA+B,WAAW,OAAOulB,EAAEwiB,IAAI7nC,EAAE5B,EAAE,GAAI,EAAC2B,EAAED,IAAIzB,EAAEsG,GAAGA,EAAE,KAAK0gB,EAAEgtB,UAAUj0C,GAAG,GAAG,MAAMgC,EAAEJ,EAAEq6B,WAAWhV,EAAEgtB,UAAUj0C,IAAI,OAAOC,IAAI0B,IAAIw9B,GAAGY,KAAK9Y,EAAEwiB,IAAI7nC,EAAE5B,IAAI,GAAGgC,GAAGA,EAAE,KAAK/B,EAAE,CAAwB,IAAvB0B,GAAG,EAAE1B,EAAEA,GAAG+B,EAAE,GAAGA,GAAGL,GAAG,EAAQO,KAAI+kB,EAAEsiB,MAAM3nC,EAAE5B,EAAEgC,EAAE/B,IAAI,EAAEuB,IAAI,GAAGA,EAAEE,IAAIC,GAAG,MAAM,IAAIO,EAAE,GAAGF,GAAGR,EAAEQ,GAAG,EAAEilB,EAAEsiB,MAAM3nC,EAAE5B,EAAEgC,EAAE/B,GAAGsG,EAAEA,GAAG,EAAG,QAAOA,IAAIvE,GAAGA,IAAIL,GAAG,EAAE7I,EAAEyN,EAAE,GAAGvE,GAAGuE,EAAE,GAAG,GAAGA,EAAE,IAAIA,EAAE,IAAoCzN,CAAE,CAAza,CAA0a8I,EAAE5B,EAAElH,GAAG0I,EAAE,UAAU,MAAM+E,GAAGA,GAAGA,IAAI,WAAW/E,GAAGG,IAAI4E,GAAGzN,GAAGA,EAAE,KAAKmuB,EAAEgtB,UAAUvyC,GAAG,GAAG,OAAO/B,EAAE0yC,iBAAiB,KAAK9rC,GAAG,IAAIvG,EAAEvB,QAAQ,gBAAgBwB,EAAED,GAAG,WAAWkC,GAAG,QAAQA,QAAG,KAAUqE,EAAErE,EAAE44B,IAAIl5B,EAAE2E,EAAExE,MAAMJ,EAAE1B,EAAEk1C,YAAYn1C,EAAEuG,GAAGtG,EAAED,GAAGuG,GAAI,CAAC,EAACkjC,IAAI,SAAS7nC,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAER,EAAE08B,EAAEp+B,GAAG,OAAOixC,GAAGtsC,KAAK3E,KAAKA,EAAEgzC,GAAGtxC,KAAKQ,EAAE+kB,EAAE8sB,SAAS/zC,IAAIinB,EAAE8sB,SAASryC,KAAK,QAAQQ,IAAIpJ,EAAEoJ,EAAEiW,IAAIvW,GAAE,EAAG2E,SAAI,IAASzN,IAAIA,EAAE24C,GAAG7vC,EAAE5B,EAAE+B,IAAI,WAAWjJ,GAAGkH,KAAKuzC,KAAKz6C,EAAEy6C,GAAGvzC,IAAI,KAAKuG,GAAGA,GAAG/E,EAAE2wC,WAAWr5C,IAAG,IAAKyN,GAAG6uC,SAAS5zC,GAAGA,GAAG,EAAE1I,GAAGA,CAAE,IAAGmuB,EAAE6V,KAAK,CAAC,SAAS,UAAS,SAASl7B,EAAED,GAAGslB,EAAE8sB,SAASpyC,GAAG,CAACwW,IAAI,SAASvW,EAAE5B,EAAEuG,GAAG,GAAGvG,EAAE,OAAOozC,GAAGzuC,KAAKsiB,EAAEwiB,IAAI7nC,EAAE,aAAaA,EAAEkyC,iBAAiBx7C,QAAQsJ,EAAEyzC,wBAAwB9sB,MAAMsrB,GAAGjyC,EAAED,EAAE4E,GAAG8qC,GAAGzvC,EAAEyxC,IAAG,WAAW,OAAOQ,GAAGjyC,EAAED,EAAE4E,EAAG,GAAE,EAACu0B,IAAI,SAASl5B,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAEo4C,GAAGtvC,GAAGJ,GAAG7B,EAAE8yC,iBAAiB,aAAa35C,EAAEozB,SAAShqB,GAAGV,GAAG+E,IAAI,eAAe0gB,EAAEwiB,IAAI7nC,EAAE,aAAY,EAAG9I,GAAG4I,EAAE6E,EAAEotC,GAAG/xC,EAAED,EAAE4E,EAAErE,EAAEpJ,GAAG,EAAE,OAAOoJ,GAAGV,IAAIE,GAAGzJ,KAAK27C,KAAKhyC,EAAE,SAASD,EAAE,GAAGgnC,cAAchnC,EAAEzC,MAAM,IAAIizC,WAAWr5C,EAAE6I,IAAIgyC,GAAG/xC,EAAED,EAAE,UAAS,EAAG7I,GAAG,KAAK4I,IAAIK,EAAEo9B,GAAGY,KAAK//B,KAAK,QAAQ+B,EAAE,IAAI,QAAQH,EAAE2nC,MAAM5nC,GAAG3B,EAAEA,EAAEinB,EAAEwiB,IAAI7nC,EAAED,IAAI+xC,GAAG,EAAE1zC,EAAE0B,EAAG,EAAE,IAAEulB,EAAE8sB,SAAS/B,WAAWF,GAAGnyC,EAAE6yC,oBAAmB,SAAS5wC,EAAE5B,GAAG,GAAGA,EAAE,OAAOmyC,WAAWV,GAAG7vC,EAAE,gBAAgBA,EAAEyzC,wBAAwBC,KAAKjE,GAAGzvC,EAAE,CAACowC,WAAW,IAAG,WAAW,OAAOpwC,EAAEyzC,wBAAwBC,IAAK,KAAG,IAAK,IAAEruB,EAAE6V,KAAK,CAACyY,OAAO,GAAGC,QAAQ,GAAGC,OAAO,UAAS,SAAS38C,EAAE0I,GAAGylB,EAAE8sB,SAASj7C,EAAE0I,GAAG,CAACk0C,OAAO,SAAS9zC,GAAG,IAAI,IAAI5B,EAAE,EAAEuG,EAAE,CAAC,EAAExE,EAAE,iBAAiBH,EAAEA,EAAElC,MAAM,KAAK,CAACkC,GAAG5B,EAAE,EAAEA,IAAIuG,EAAEzN,EAAEsmC,GAAGp/B,GAAGwB,GAAGO,EAAE/B,IAAI+B,EAAE/B,EAAE,IAAI+B,EAAE,GAAG,OAAOwE,CAAE,GAAE,WAAWzN,IAAImuB,EAAE8sB,SAASj7C,EAAE0I,GAAGs5B,IAAI4Y,GAAI,IAAEzsB,EAAEuV,GAAGa,OAAO,CAACoM,IAAI,SAAS7nC,EAAE5B,GAAG,OAAOm+B,EAAEnqC,MAAK,SAAS4N,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAE,CAAC,EAAEU,EAAE,EAAE,GAAGjD,MAAMgJ,QAAQjI,GAAG,CAAC,IAAI+B,EAAEmvC,GAAGtvC,GAAG9I,EAAEkH,EAAE1H,OAAO4J,EAAEpJ,EAAEoJ,IAAIV,EAAExB,EAAEkC,IAAI+kB,EAAEwiB,IAAI7nC,EAAE5B,EAAEkC,IAAG,EAAGH,GAAG,OAAOP,CAAE,aAAO,IAAS+E,EAAE0gB,EAAEsiB,MAAM3nC,EAAE5B,EAAEuG,GAAG0gB,EAAEwiB,IAAI7nC,EAAE5B,EAAG,GAAC4B,EAAE5B,EAAE,EAAEtD,UAAUpE,OAAQ,IAAG2uB,EAAEuV,GAAGmZ,MAAM,SAAS5zC,EAAEH,GAAG,OAAOG,EAAEklB,EAAE2uB,IAAI3uB,EAAE2uB,GAAGC,OAAO9zC,IAAIA,EAAEH,EAAEA,GAAG,KAAK5N,KAAK4I,MAAMgF,GAAE,SAASA,EAAE5B,GAAG,IAAIuG,EAAEyI,EAAEpR,WAAWgE,EAAEG,GAAG/B,EAAE7B,KAAK,WAAW6Q,EAAErR,aAAa4I,EAAG,CAAC,GAAE,EAAC2sC,GAAGvsB,EAAEhtB,cAAc,SAASw5C,GAAGxsB,EAAEhtB,cAAc,UAAUW,YAAYqsB,EAAEhtB,cAAc,WAAWu5C,GAAGluC,KAAK,WAAWrF,EAAEm2C,QAAQ,KAAK5C,GAAGr3C,MAAM8D,EAAEo2C,YAAY5C,GAAG9O,UAAU6O,GAAGvsB,EAAEhtB,cAAc,UAAUkC,MAAM,IAAIq3C,GAAGluC,KAAK,QAAQrF,EAAEq2C,WAAW,MAAM9C,GAAGr3C,MAAM,IAAIo6C,GAAGC,GAAGjvB,EAAE3hB,KAAKs7B,WAAW3Z,EAAEuV,GAAGa,OAAO,CAACuF,KAAK,SAAShhC,EAAE5B,GAAG,OAAOm+B,EAAEnqC,KAAKizB,EAAE2b,KAAKhhC,EAAE5B,EAAE,EAAEtD,UAAUpE,OAAQ,EAAC69C,WAAW,SAASv0C,GAAG,OAAO5N,KAAK8oC,MAAK,WAAW7V,EAAEkvB,WAAWniD,KAAK4N,EAAG,GAAE,IAAGqlB,EAAEoW,OAAO,CAACuF,KAAK,SAAShhC,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEI,EAAEq6B,SAAS,GAAG,IAAIz6B,GAAG,IAAIA,GAAG,IAAIA,EAAE,YAAM,IAAoBI,EAAEw6B,aAAanV,EAAEqF,KAAK1qB,EAAE5B,EAAEuG,IAAI,IAAI/E,GAAGylB,EAAEif,SAAStkC,KAAK9I,EAAEmuB,EAAEmvB,UAAUp2C,EAAE6lB,iBAAiBoB,EAAE3hB,KAAKnK,MAAM0jC,KAAKl6B,KAAK3E,GAAGi2C,QAAG,SAAS,IAAS1vC,EAAE,OAAOA,OAAO0gB,EAAEkvB,WAAWv0C,EAAE5B,GAAGlH,GAAG,QAAQA,QAAG,KAAUiJ,EAAEjJ,EAAEgiC,IAAIl5B,EAAE2E,EAAEvG,IAAI+B,GAAGH,EAAEy6B,aAAar8B,EAAEuG,EAAE,IAAIA,GAAGzN,GAAG,QAAQA,GAAG,QAAQiJ,EAAEjJ,EAAEqf,IAAIvW,EAAE5B,IAAI+B,EAAE,OAAOA,EAAEklB,EAAExe,KAAKm6B,KAAKhhC,EAAE5B,SAAI,EAAO+B,EAAG,EAACq0C,UAAU,CAACpxC,KAAK,CAAC81B,IAAI,SAASl5B,EAAE5B,GAAG,IAAIL,EAAEq2C,YAAY,UAAUh2C,GAAG+mB,EAAEnlB,EAAE,SAAS,CAAC,IAAI2E,EAAE3E,EAAE/F,MAAM,OAAO+F,EAAEy6B,aAAa,OAAOr8B,GAAGuG,IAAI3E,EAAE/F,MAAM0K,GAAGvG,CAAE,CAAC,IAAGm2C,WAAW,SAASv0C,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,EAAEjJ,EAAEkH,GAAGA,EAAE7E,MAAM8iC,GAAG,GAAGnlC,GAAG,IAAI8I,EAAEq6B,SAAS,KAAM11B,EAAEzN,EAAEiJ,MAAKH,EAAE2+B,gBAAgBh6B,EAAG,IAAG0vC,GAAG,CAACnb,IAAI,SAASl5B,EAAE5B,EAAEuG,GAAG,OAAM,IAAKvG,EAAEinB,EAAEkvB,WAAWv0C,EAAE2E,GAAG3E,EAAEy6B,aAAa91B,EAAEA,GAAGA,CAAE,GAAE0gB,EAAE6V,KAAK7V,EAAE3hB,KAAKnK,MAAM0jC,KAAK9yB,OAAO5Q,MAAM,SAAQ,SAASyG,EAAE5B,GAAG,IAAIkC,EAAEg0C,GAAGl2C,IAAIinB,EAAExe,KAAKm6B,KAAKsT,GAAGl2C,GAAG,SAAS4B,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAExB,EAAE6lB,cAAc,OAAOtf,IAAIzN,EAAEo9C,GAAG10C,GAAG00C,GAAG10C,GAAGO,EAAEA,EAAE,MAAMG,EAAEN,EAAE5B,EAAEuG,GAAG/E,EAAE,KAAK00C,GAAG10C,GAAG1I,GAAGiJ,CAAE,CAAC,IAAE,IAAIs0C,GAAG,sCAAsCC,GAAG,gBAAgB,SAASC,GAAG30C,GAAG,OAAOA,EAAEzG,MAAM8iC,IAAI,IAAIh3B,KAAK,IAAK,UAASuvC,GAAG50C,GAAG,OAAOA,EAAEw6B,cAAcx6B,EAAEw6B,aAAa,UAAU,EAAG,UAASqa,GAAG70C,GAAG,OAAO3C,MAAMgJ,QAAQrG,GAAGA,EAAE,iBAAiBA,GAAGA,EAAEzG,MAAM8iC,IAAI,EAAG,CAAAhX,EAAEuV,GAAGa,OAAO,CAAC/Q,KAAK,SAAS1qB,EAAE5B,GAAG,OAAOm+B,EAAEnqC,KAAKizB,EAAEqF,KAAK1qB,EAAE5B,EAAE,EAAEtD,UAAUpE,OAAQ,EAACo+C,WAAW,SAAS90C,GAAG,OAAO5N,KAAK8oC,MAAK,kBAAkB9oC,KAAKizB,EAAE0vB,QAAQ/0C,IAAIA,EAAG,GAAE,IAAGqlB,EAAEoW,OAAO,CAAC/Q,KAAK,SAAS1qB,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEI,EAAEq6B,SAAS,GAAG,IAAIz6B,GAAG,IAAIA,GAAG,IAAIA,EAAE,OAAO,IAAIA,GAAGylB,EAAEif,SAAStkC,KAAK5B,EAAEinB,EAAE0vB,QAAQ32C,IAAIA,EAAElH,EAAEmuB,EAAE2vB,UAAU52C,SAAI,IAASuG,EAAEzN,GAAG,QAAQA,QAAG,KAAUiJ,EAAEjJ,EAAEgiC,IAAIl5B,EAAE2E,EAAEvG,IAAI+B,EAAEH,EAAE5B,GAAGuG,EAAEzN,GAAG,QAAQA,GAAG,QAAQiJ,EAAEjJ,EAAEqf,IAAIvW,EAAE5B,IAAI+B,EAAEH,EAAE5B,EAAG,EAAC42C,UAAU,CAACzS,SAAS,CAAChsB,IAAI,SAASvW,GAAG,IAAI5B,EAAEinB,EAAExe,KAAKm6B,KAAKhhC,EAAE,YAAY,OAAO5B,EAAE6I,SAAS7I,EAAE,IAAIq2C,GAAG1xC,KAAK/C,EAAE89B,WAAW4W,GAAG3xC,KAAK/C,EAAE89B,WAAW99B,EAAEy0B,KAAK,GAAG,CAAE,IAAGsgB,QAAQ,CAAC,IAAM,UAAU,MAAQ,eAAeh3C,EAAEo2C,cAAc9uB,EAAE2vB,UAAUvS,SAAS,CAAClsB,IAAI,SAASvW,GAAG,IAAI5B,EAAE4B,EAAExH,WAAW,OAAO4F,GAAGA,EAAE5F,YAAY4F,EAAE5F,WAAWkqC,cAAc,IAAK,EAACxJ,IAAI,SAASl5B,GAAG,IAAI5B,EAAE4B,EAAExH,WAAW4F,IAAIA,EAAEskC,cAActkC,EAAE5F,YAAY4F,EAAE5F,WAAWkqC,cAAe,IAAGrd,EAAE6V,KAAK,CAAC,WAAW,WAAW,YAAY,cAAc,cAAc,UAAU,UAAU,SAAS,cAAc,oBAAmB,WAAW7V,EAAE0vB,QAAQ3iD,KAAK6xB,eAAe7xB,IAAK,IAAEizB,EAAEuV,GAAGa,OAAO,CAACwZ,SAAS,SAAS72C,GAAG,IAAI4B,EAAE2E,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAE,OAAOD,EAAEjC,GAAGhM,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAEjzB,MAAM6iD,SAAS72C,EAAEvE,KAAKzH,KAAK4N,EAAE40C,GAAGxiD,OAAQ,KAAG4N,EAAE60C,GAAGz2C,IAAI1H,OAAOtE,KAAK8oC,MAAK,WAAW,GAAG/6B,EAAEy0C,GAAGxiD,MAAMuS,EAAE,IAAIvS,KAAKioC,UAAU,IAAIsa,GAAGx0C,GAAG,IAAI,CAAC,IAAIP,EAAE,EAAEA,EAAEI,EAAEtJ,OAAOkJ,IAAI1I,EAAE8I,EAAEJ,GAAG+E,EAAE9H,QAAQ,IAAI3F,EAAE,KAAK,IAAIyN,GAAGzN,EAAE,KAAKoJ,EAAEq0C,GAAGhwC,GAAGxE,IAAIG,GAAGlO,KAAKqoC,aAAa,QAAQn6B,EAAG,CAAC,IAAElO,IAAK,EAAC8iD,YAAY,SAAS92C,GAAG,IAAI4B,EAAE2E,EAAExE,EAAEjJ,EAAE0I,EAAEU,EAAE,OAAOD,EAAEjC,GAAGhM,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAEjzB,MAAM8iD,YAAY92C,EAAEvE,KAAKzH,KAAK4N,EAAE40C,GAAGxiD,OAAQ,IAAE0I,UAAUpE,QAAQsJ,EAAE60C,GAAGz2C,IAAI1H,OAAOtE,KAAK8oC,MAAK,WAAW,GAAG/6B,EAAEy0C,GAAGxiD,MAAMuS,EAAE,IAAIvS,KAAKioC,UAAU,IAAIsa,GAAGx0C,GAAG,IAAI,CAAC,IAAIP,EAAE,EAAEA,EAAEI,EAAEtJ,OAAOkJ,IAAY,IAAP1I,EAAE8I,EAAEJ,IAAU,EAAE+E,EAAE9H,QAAQ,IAAI3F,EAAE,MAAKyN,EAAEA,EAAEtQ,QAAQ,IAAI6C,EAAE,IAAI,KAAKoJ,EAAEq0C,GAAGhwC,GAAGxE,IAAIG,GAAGlO,KAAKqoC,aAAa,QAAQn6B,EAAG,CAAC,IAAElO,KAAKA,KAAK4uC,KAAK,QAAQ,GAAI,EAACmU,YAAY,SAAS/2C,EAAEuG,GAAG,IAAI3E,EAAEG,EAAEjJ,EAAE0I,EAAEU,SAASlC,EAAE0B,EAAE,WAAWQ,GAAGjD,MAAMgJ,QAAQjI,GAAG,OAAOiC,EAAEjC,GAAGhM,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAEjzB,MAAM+iD,YAAY/2C,EAAEvE,KAAKzH,KAAK4N,EAAE40C,GAAGxiD,MAAMuS,GAAGA,EAAG,IAAE,kBAAkBA,GAAG7E,EAAE6E,EAAEvS,KAAK6iD,SAAS72C,GAAGhM,KAAK8iD,YAAY92C,IAAI4B,EAAE60C,GAAGz2C,GAAGhM,KAAK8oC,MAAK,WAAW,GAAGp7B,EAAE,IAAIF,EAAEylB,EAAEjzB,MAAM8E,EAAE,EAAEA,EAAE8I,EAAEtJ,OAAOQ,IAAIiJ,EAAEH,EAAE9I,GAAG0I,EAAEw1C,SAASj1C,GAAGP,EAAEs1C,YAAY/0C,GAAGP,EAAEq1C,SAAS90C,aAAQ,IAAS/B,GAAG,YAAYkC,KAAKH,EAAEy0C,GAAGxiD,QAAQ+qC,EAAEjE,IAAI9mC,KAAK,gBAAgB+N,GAAG/N,KAAKqoC,cAAcroC,KAAKqoC,aAAa,QAAQt6B,IAAG,IAAK/B,EAAE,GAAG++B,EAAE5mB,IAAInkB,KAAK,kBAAkB,IAAK,IAAG,EAACgjD,SAAS,SAASp1C,GAAG,IAAI5B,EAAEuG,EAAExE,EAAE,EAAc,IAAZ/B,EAAE,IAAI4B,EAAE,IAAU2E,EAAEvS,KAAK+N,SAAQ,IAAIwE,EAAE01B,WAAW,GAAG,IAAIsa,GAAGC,GAAGjwC,IAAI,KAAK9H,QAAQuB,GAAG,OAAM,EAAG,OAAM,CAAG,IAAG,IAAIi3C,GAAG,MAAMhwB,EAAEuV,GAAGa,OAAO,CAACpR,IAAI,SAAS1lB,GAAG,IAAIxE,EAAEH,EAAE9I,EAAEkH,EAAEhM,KAAK,GAAG,OAAO0I,UAAUpE,QAAQQ,EAAEmJ,EAAEsE,GAAGvS,KAAK8oC,MAAK,SAASl7B,GAAG,IAAI5B,EAAE,IAAIhM,KAAKioC,WAAW,OAAOj8B,EAAElH,EAAEyN,EAAE9K,KAAKzH,KAAK4N,EAAEqlB,EAAEjzB,MAAMi4B,OAAO1lB,GAAGvG,EAAE,GAAG,iBAAiBA,EAAEA,GAAG,GAAGf,MAAMgJ,QAAQjI,KAAKA,EAAEinB,EAAExhB,IAAIzF,GAAE,SAAS4B,GAAG,OAAO,MAAMA,EAAE,GAAGA,EAAE,EAAG,MAAIG,EAAEklB,EAAEiwB,SAASljD,KAAKgR,OAAOiiB,EAAEiwB,SAASljD,KAAK0rC,SAAS7Z,iBAAiB,QAAQ9jB,QAAG,IAASA,EAAE+4B,IAAI9mC,KAAKgM,EAAE,WAAWhM,KAAK6H,MAAMmE,GAAI,KAAGA,GAAG+B,EAAEklB,EAAEiwB,SAASl3C,EAAEgF,OAAOiiB,EAAEiwB,SAASl3C,EAAE0/B,SAAS7Z,iBAAiB,QAAQ9jB,QAAG,KAAUH,EAAEG,EAAEoW,IAAInY,EAAE,UAAU4B,EAAE,iBAAiBA,EAAE5B,EAAEnE,OAAO+F,EAAE3L,QAAQghD,GAAG,IAAI,MAAMr1C,EAAE,GAAGA,OAAE,CAAO,IAAGqlB,EAAEoW,OAAO,CAAC6Z,SAAS,CAACjN,OAAO,CAAC9xB,IAAI,SAASvW,GAAG,IAAI5B,EAAEinB,EAAExe,KAAKm6B,KAAKhhC,EAAE,SAAS,OAAO,MAAM5B,EAAEA,EAAEu2C,GAAGtvB,EAAEtsB,KAAKiH,GAAI,GAAEmkC,OAAO,CAAC5tB,IAAI,SAASvW,GAAG,IAAI5B,EAAEuG,EAAExE,EAAEjJ,EAAE8I,EAAE7G,QAAQyG,EAAEI,EAAE0iC,cAAcpiC,EAAE,eAAeN,EAAEoD,KAAKtD,EAAEQ,EAAE,KAAK,GAAGP,EAAEO,EAAEV,EAAE,EAAE1I,EAAER,OAAO,IAAIyJ,EAAEP,EAAE,EAAEG,EAAEO,EAAEV,EAAE,EAAEO,EAAEJ,EAAEI,IAAI,KAAKwE,EAAEzN,EAAEiJ,IAAIsiC,UAAUtiC,IAAIP,KAAK+E,EAAEk5B,YAAYl5B,EAAEnM,WAAWqlC,WAAW1Y,EAAExgB,EAAEnM,WAAW,aAAa,CAAC,GAAG4F,EAAEinB,EAAE1gB,GAAG0lB,MAAM/pB,EAAE,OAAOlC,EAAE0B,EAAE9L,KAAKoK,EAAG,QAAO0B,CAAE,EAACo5B,IAAI,SAASl5B,EAAE5B,GAAmD,IAAhD,IAAIuG,EAAExE,EAAEjJ,EAAE8I,EAAE7G,QAAQyG,EAAEylB,EAAE0W,UAAU39B,GAAGkC,EAAEpJ,EAAER,OAAa4J,OAAMH,EAAEjJ,EAAEoJ,IAAImiC,UAAU,EAAEpd,EAAE2W,QAAQ3W,EAAEiwB,SAASjN,OAAO9xB,IAAIpW,GAAGP,MAAM+E,GAAE,GAAI,OAAOA,IAAI3E,EAAE0iC,eAAe,GAAG9iC,CAAE,MAAKylB,EAAE6V,KAAK,CAAC,QAAQ,aAAY,WAAW7V,EAAEiwB,SAASljD,MAAM,CAAC8mC,IAAI,SAASl5B,EAAE5B,GAAG,GAAGf,MAAMgJ,QAAQjI,GAAG,OAAO4B,EAAEwiC,SAAS,EAAEnd,EAAE2W,QAAQ3W,EAAErlB,GAAGqqB,MAAMjsB,EAAG,GAAEL,EAAEm2C,UAAU7uB,EAAEiwB,SAASljD,MAAMmkB,IAAI,SAASvW,GAAG,OAAO,OAAOA,EAAEw6B,aAAa,SAAS,KAAKx6B,EAAE/F,KAAM,EAAE,IAAE8D,EAAEw3C,QAAQ,cAAcnoC,EAAE,IAAI41B,GAAG,kCAAkCwS,GAAG,SAASx1C,GAAGA,EAAEupC,iBAAkB,EAAClkB,EAAEoW,OAAOpW,EAAE3vB,MAAM,CAACg0C,QAAQ,SAAS1pC,EAAE5B,EAAEuG,EAAExE,GAAG,IAAIjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAE+B,EAAE8M,EAAEvV,EAAE,CAACgN,GAAGogB,GAAG9kB,EAAEkN,EAAEtT,KAAKmG,EAAE,QAAQA,EAAEoD,KAAKpD,EAAE0kB,EAAEvX,EAAEtT,KAAKmG,EAAE,aAAaA,EAAEmpC,UAAUrrC,MAAM,KAAK,GAAG,GAAG8B,EAAEsN,EAAE5M,EAAEqE,EAAEA,GAAGogB,EAAE,IAAIpgB,EAAE01B,UAAU,IAAI11B,EAAE01B,WAAW2I,GAAGjgC,KAAK9C,EAAEolB,EAAE3vB,MAAMo0C,cAAc,EAAE7pC,EAAEpD,QAAQ,OAAOoD,GAAGykB,EAAEzkB,EAAEnC,MAAM,MAAM8iB,QAAQ8D,EAAE8B,QAAQzmB,EAAEE,EAAEpD,QAAQ,KAAK,GAAG,KAAKoD,GAAGD,EAAEA,EAAEqlB,EAAEsW,SAAS37B,EAAE,IAAIqlB,EAAEskB,MAAM1pC,EAAE,iBAAiBD,GAAGA,IAAIopC,UAAUjpC,EAAE,EAAE,EAAEH,EAAEmpC,UAAUzkB,EAAErf,KAAK,KAAKrF,EAAE6qC,WAAW7qC,EAAEmpC,UAAU,IAAI9nC,OAAO,UAAUqjB,EAAErf,KAAK,iBAAiB,WAAW,KAAKrF,EAAE/I,YAAO,EAAO+I,EAAEo2B,SAASp2B,EAAEo2B,OAAOzxB,GAAGvG,EAAE,MAAMA,EAAE,CAAC4B,GAAGqlB,EAAE0W,UAAU39B,EAAE,CAAC4B,IAAII,EAAEilB,EAAE3vB,MAAM2zC,QAAQppC,IAAI,CAAC,EAAEE,IAAIC,EAAEspC,UAAS,IAAKtpC,EAAEspC,QAAQx0C,MAAMyP,EAAEvG,IAAI,CAAC,IAAI+B,IAAIC,EAAE+qC,WAAW1mC,EAAEE,GAAG,CAAC,IAAI7E,EAAEM,EAAEkpC,cAAcrpC,EAAE+iC,GAAGjgC,KAAKjD,EAAEG,KAAKL,EAAEA,EAAEpH,YAAYoH,EAAEA,EAAEA,EAAEpH,WAAWb,EAAE3D,KAAK4L,GAAGU,EAAEV,EAAEU,KAAKqE,EAAEu5B,eAAenZ,IAAIptB,EAAE3D,KAAKsM,EAAEu/B,aAAav/B,EAAEm1C,cAAcroC,EAAG,CAAI,IAAJlW,EAAE,GAAS0I,EAAEjI,EAAET,QAAQ8I,EAAEyqC,wBAAuBv9B,EAAEtN,EAAEI,EAAEoD,KAAK,EAAElM,EAAE4I,EAAEM,EAAE4pC,UAAU/pC,GAAG5B,GAAG8+B,EAAE5mB,IAAI3W,EAAE,WAAW/N,OAAO8yB,OAAO,OAAO3kB,EAAEoD,OAAO+5B,EAAE5mB,IAAI3W,EAAE,YAAYvB,EAAEnJ,MAAM0K,EAAExB,IAAIC,EAAE0B,GAAGH,EAAEG,KAAK1B,EAAEnJ,OAAOunC,EAAE78B,KAAKI,EAAE/I,OAAOoH,EAAEnJ,MAAM0K,EAAExB,IAAG,IAAK4B,EAAE/I,QAAQ+I,EAAEypC,kBAAkB,OAAOzpC,EAAEoD,KAAKnD,EAAEE,GAAGH,EAAEurC,sBAAsBnrC,EAAEsoC,WAAU,IAAKtoC,EAAEsoC,SAASxzC,MAAMyC,EAAEoW,MAAM3P,KAAKq+B,EAAE93B,IAAI5E,GAAGM,EAAEsE,EAAE1E,MAAMwE,EAAEE,MAAMrE,EAAEqE,EAAE5E,MAAM4E,EAAE5E,GAAG,MAAMslB,EAAE3vB,MAAMo0C,UAAU7pC,EAAED,EAAEyqC,wBAAwBv9B,EAAEoK,iBAAiBrX,EAAEu1C,IAAI7wC,EAAE1E,KAAKD,EAAEyqC,wBAAwBv9B,EAAE+rB,oBAAoBh5B,EAAEu1C,IAAInwB,EAAE3vB,MAAMo0C,eAAU,EAAOxpC,IAAIqE,EAAE5E,GAAGO,IAAIN,EAAE/I,MAAO,CAAC,EAACy+C,SAAS,SAAS11C,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEklB,EAAEoW,OAAO,IAAIpW,EAAEskB,MAAMhlC,EAAE,CAACvB,KAAKpD,EAAE2rC,aAAY,IAAKtmB,EAAE3vB,MAAMg0C,QAAQvpC,EAAE,KAAK/B,EAAG,IAAGinB,EAAEuV,GAAGa,OAAO,CAACiO,QAAQ,SAAS1pC,EAAE5B,GAAG,OAAOhM,KAAK8oC,MAAK,WAAW7V,EAAE3vB,MAAMg0C,QAAQ1pC,EAAE5B,EAAEhM,KAAM,GAAE,EAACujD,eAAe,SAAS31C,EAAE5B,GAAG,IAAIuG,EAAEvS,KAAK,GAAG,GAAGuS,EAAE,OAAO0gB,EAAE3vB,MAAMg0C,QAAQ1pC,EAAE5B,EAAEuG,GAAE,EAAI,IAAG5G,EAAEw3C,SAASlwB,EAAE6V,KAAK,CAAC9L,MAAM,UAAUme,KAAK,aAAY,SAAS5oC,EAAExE,GAAG,IAAIjJ,EAAE,SAAS8I,GAAGqlB,EAAE3vB,MAAMggD,SAASv1C,EAAEH,EAAEo2B,OAAO/Q,EAAE3vB,MAAM40C,IAAItqC,GAAI,EAACqlB,EAAE3vB,MAAM2zC,QAAQlpC,GAAG,CAACgqC,MAAM,WAAW,IAAInqC,EAAE5N,KAAK8rC,eAAe9rC,KAAKwF,UAAUxF,KAAKgM,EAAE++B,EAAE8J,OAAOjnC,EAAEG,GAAG/B,GAAG4B,EAAEsX,iBAAiB3S,EAAEzN,GAAE,GAAIimC,EAAE8J,OAAOjnC,EAAEG,GAAG/B,GAAG,GAAG,EAAG,EAACgsC,SAAS,WAAW,IAAIpqC,EAAE5N,KAAK8rC,eAAe9rC,KAAKwF,UAAUxF,KAAKgM,EAAE++B,EAAE8J,OAAOjnC,EAAEG,GAAG,EAAE/B,EAAE++B,EAAE8J,OAAOjnC,EAAEG,EAAE/B,IAAI4B,EAAEi5B,oBAAoBt0B,EAAEzN,GAAE,GAAIimC,EAAEuI,OAAO1lC,EAAEG,GAAI,EAAE,IAAEklB,EAAEuwB,SAAS,SAAS51C,GAAG,IAAI5B,EAAEuG,EAAE,IAAI3E,GAAG,iBAAiBA,EAAE,OAAO,KAAK,IAAI5B,GAAG,IAAIgP,EAAEyoC,WAAWC,gBAAgB91C,EAAE,WAAY,OAAMA,GAAI,QAAO2E,EAAEvG,GAAGA,EAAEnG,qBAAqB,eAAe,GAAGmG,IAAIuG,GAAG0gB,EAAEtvB,MAAM,iBAAiB4O,EAAE0gB,EAAExhB,IAAIc,EAAEq5B,YAAW,SAASh+B,GAAG,OAAOA,EAAEuhC,WAAY,IAAEl8B,KAAK,MAAMrF,IAAI5B,CAAE,EAAC,IAAI23C,GAAGC,GAAG,QAAQC,GAAG,SAASC,GAAG,wCAAwCjT,GAAG,qCAAqC,SAASkT,GAAGxxC,EAAE3E,EAAEG,EAAEjJ,GAAG,IAAIkH,EAAE,GAAGf,MAAMgJ,QAAQrG,GAAGqlB,EAAE6V,KAAKl7B,GAAE,SAASA,EAAE5B,GAAG+B,GAAG61C,GAAGjzC,KAAK4B,GAAGzN,EAAEyN,EAAEvG,GAAG+3C,GAAGxxC,EAAE,KAAK,iBAAiBvG,GAAG,MAAMA,EAAE4B,EAAE,IAAI,IAAI5B,EAAE+B,EAAEjJ,EAAG,SAAO,GAAGiJ,GAAG,WAAWulB,EAAE1lB,GAAG9I,EAAEyN,EAAE3E,QAAQ,IAAI5B,KAAK4B,EAAEm2C,GAAGxxC,EAAE,IAAIvG,EAAE,IAAI4B,EAAE5B,GAAG+B,EAAEjJ,EAAG,CAAAmuB,EAAE+wB,MAAM,SAASp2C,EAAE5B,GAAG,IAAIuG,EAAExE,EAAE,GAAGjJ,EAAE,SAAS8I,EAAE5B,GAAG,IAAIuG,EAAEtE,EAAEjC,GAAGA,IAAIA,EAAE+B,EAAEA,EAAEzJ,QAAQ2/C,mBAAmBr2C,GAAG,IAAIq2C,mBAAmB,MAAM1xC,EAAE,GAAGA,EAAG,EAAC,GAAG,MAAM3E,EAAE,MAAM,GAAG,GAAG3C,MAAMgJ,QAAQrG,IAAIA,EAAE66B,SAASxV,EAAEqW,cAAc17B,GAAGqlB,EAAE6V,KAAKl7B,GAAE,WAAW9I,EAAE9E,KAAKsN,KAAKtN,KAAK6H,MAAO,SAAO,IAAI0K,KAAK3E,EAAEm2C,GAAGxxC,EAAE3E,EAAE2E,GAAGvG,EAAElH,GAAG,OAAOiJ,EAAEkF,KAAK,IAAK,EAACggB,EAAEuV,GAAGa,OAAO,CAAC6a,UAAU,WAAW,OAAOjxB,EAAE+wB,MAAMhkD,KAAKmkD,iBAAkB,EAACA,eAAe,WAAW,OAAOnkD,KAAKyR,KAAI,WAAW,IAAI7D,EAAEqlB,EAAEqF,KAAKt4B,KAAK,YAAY,OAAO4N,EAAEqlB,EAAE0W,UAAU/7B,GAAG5N,IAAK,IAAE+Q,QAAO,WAAW,IAAInD,EAAE5N,KAAKgR,KAAK,OAAOhR,KAAKsN,OAAO2lB,EAAEjzB,MAAM+hC,GAAG,cAAc8O,GAAGlgC,KAAK3Q,KAAK0rC,YAAYoY,GAAGnzC,KAAK/C,KAAK5N,KAAKowC,UAAUzD,GAAGh8B,KAAK/C,GAAI,IAAE6D,KAAI,SAAS7D,EAAE5B,GAAG,IAAIuG,EAAE0gB,EAAEjzB,MAAMi4B,MAAM,OAAO,MAAM1lB,EAAE,KAAKtH,MAAMgJ,QAAQ1B,GAAG0gB,EAAExhB,IAAIc,GAAE,SAAS3E,GAAG,MAAM,CAACN,KAAKtB,EAAEsB,KAAKzF,MAAM+F,EAAE3L,QAAQ4hD,GAAG,QAAS,IAAE,CAACv2C,KAAKtB,EAAEsB,KAAKzF,MAAM0K,EAAEtQ,QAAQ4hD,GAAG,QAAS,IAAE1/B,KAAM,IAAG8O,EAAEuV,GAAGa,OAAO,CAAC+a,QAAQ,SAASx2C,GAAG,IAAI5B,EAAE,OAAOhM,KAAK,KAAKiO,EAAEL,KAAKA,EAAEA,EAAEnG,KAAKzH,KAAK,KAAKgM,EAAEinB,EAAErlB,EAAE5N,KAAK,GAAG8rC,eAAe9C,GAAG,GAAGkT,OAAM,GAAIl8C,KAAK,GAAGoG,YAAY4F,EAAE3F,aAAarG,KAAK,IAAIgM,EAAEyF,KAAI,WAAsB,IAAX,IAAI7D,EAAE5N,KAAW4N,EAAEy2C,mBAAkBz2C,EAAEA,EAAEy2C,kBAAkB,OAAOz2C,CAAE,IAAE2uC,OAAOv8C,OAAOA,IAAK,EAACskD,UAAU,SAAS/xC,GAAG,OAAOtE,EAAEsE,GAAGvS,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAEjzB,MAAMskD,UAAU/xC,EAAE9K,KAAKzH,KAAK4N,GAAI,IAAE5N,KAAK8oC,MAAK,WAAW,IAAIl7B,EAAEqlB,EAAEjzB,MAAMgM,EAAE4B,EAAE2kC,WAAWvmC,EAAE1H,OAAO0H,EAAEo4C,QAAQ7xC,GAAG3E,EAAE2uC,OAAOhqC,EAAG,GAAE,EAACgyC,KAAK,SAASv4C,GAAG,IAAIuG,EAAEtE,EAAEjC,GAAG,OAAOhM,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAEjzB,MAAMokD,QAAQ7xC,EAAEvG,EAAEvE,KAAKzH,KAAK4N,GAAG5B,EAAG,GAAE,EAACs6B,OAAO,SAAS14B,GAAG,OAAO5N,KAAKwwC,OAAO5iC,GAAGkiC,IAAI,QAAQhH,MAAK,WAAW7V,EAAEjzB,MAAM08C,YAAY18C,KAAK4rC,WAAY,IAAE5rC,IAAK,IAAGizB,EAAE3hB,KAAKs+B,QAAQ4U,OAAO,SAAS52C,GAAG,OAAOqlB,EAAE3hB,KAAKs+B,QAAQ6U,QAAQ72C,EAAG,EAACqlB,EAAE3hB,KAAKs+B,QAAQ6U,QAAQ,SAAS72C,GAAG,SAASA,EAAEswC,aAAatwC,EAAEixC,cAAcjxC,EAAEkyC,iBAAiBx7C,OAAQ,EAACqH,EAAE+4C,qBAAqBf,GAAGhxB,EAAEgyB,eAAeD,mBAAmB,IAAI7pC,MAAMqzB,UAAU,6BAA6B,IAAIyV,GAAG/X,WAAWtnC,QAAQ2uB,EAAEmf,UAAU,SAASxkC,EAAE5B,EAAEuG,GAAG,MAAM,iBAAiB3E,EAAE,IAAI,kBAAkB5B,IAAIuG,EAAEvG,EAAEA,GAAE,GAAIA,IAAIL,EAAE+4C,qBAAqB32C,GAAG/B,EAAE2mB,EAAEgyB,eAAeD,mBAAmB,KAAK/+C,cAAc,SAAS08B,KAAK1P,EAAEviB,SAASiyB,KAAKr2B,EAAEs8B,KAAKhiC,YAAYyH,IAAI/B,EAAE2mB,GAAGnlB,GAAG+E,GAAG,IAAIzN,EAAEwa,EAAEysB,KAAKn+B,IAAI,CAAC5B,EAAErG,cAAcb,EAAE,MAAMA,EAAEwsC,GAAG,CAAC1jC,GAAG5B,EAAEwB,GAAGA,GAAGA,EAAElJ,QAAQ2uB,EAAEzlB,GAAG8lC,SAASrgB,EAAE2V,MAAM,GAAG9jC,EAAE8mC,cAAc,IAAI79B,EAAEjJ,EAAE0I,CAAE,EAACylB,EAAE2xB,OAAO,CAACC,UAAU,SAASj3C,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAEjJ,EAAE0I,EAAEU,EAAER,EAAEC,EAAE1B,EAAEgnB,EAAEwiB,IAAI7nC,EAAE,YAAYI,EAAEilB,EAAErlB,GAAGkN,EAAE,CAAC,EAAE,WAAW7O,IAAI2B,EAAE2nC,MAAMrd,SAAS,YAAYxqB,EAAEM,EAAE42C,SAASp3C,EAAEylB,EAAEwiB,IAAI7nC,EAAE,OAAOD,EAAEslB,EAAEwiB,IAAI7nC,EAAE,SAAS,aAAa3B,GAAG,UAAUA,KAAK,GAAGuB,EAAEG,GAAGlD,QAAQ,SAASyD,GAAGH,EAAEC,EAAEkqB,YAAYwV,IAAI5oC,EAAEiJ,EAAEuzC,OAAOpzC,EAAEiwC,WAAW3wC,IAAI,EAAE1I,EAAEq5C,WAAWxwC,IAAI,GAAGM,EAAEjC,KAAKA,EAAEA,EAAEvE,KAAKmG,EAAE2E,EAAE0gB,EAAEoW,OAAO,CAAC,EAAE37B,KAAK,MAAM1B,EAAE0hC,MAAM5yB,EAAE4yB,IAAI1hC,EAAE0hC,IAAIhgC,EAAEggC,IAAIx/B,GAAG,MAAMlC,EAAEs1C,OAAOxmC,EAAEwmC,KAAKt1C,EAAEs1C,KAAK5zC,EAAE4zC,KAAKx8C,GAAG,UAAUkH,EAAEA,EAAE84C,MAAMr9C,KAAKmG,EAAEkN,GAAG9M,EAAEynC,IAAI36B,EAAG,GAAEmY,EAAEuV,GAAGa,OAAO,CAACub,OAAO,SAAS54C,GAAG,GAAGtD,UAAUpE,OAAO,YAAO,IAAS0H,EAAEhM,KAAKA,KAAK8oC,MAAK,SAASl7B,GAAGqlB,EAAE2xB,OAAOC,UAAU7kD,KAAKgM,EAAE4B,EAAG,IAAE,IAAIA,EAAE2E,EAAExE,EAAE/N,KAAK,GAAG,OAAO+N,EAAEA,EAAE+xC,iBAAiBx7C,QAAQsJ,EAAEG,EAAEszC,wBAAwB9uC,EAAExE,EAAE+9B,cAAc2B,YAAY,CAACC,IAAI9/B,EAAE8/B,IAAIn7B,EAAEwyC,YAAYzD,KAAK1zC,EAAE0zC,KAAK/uC,EAAEyyC,cAAc,CAACtX,IAAI,EAAE4T,KAAK,QAAG,CAAO,EAACppB,SAAS,WAAW,GAAGl4B,KAAK,GAAG,CAAC,IAAI4N,EAAE5B,EAAEuG,EAAExE,EAAE/N,KAAK,GAAG8E,EAAE,CAAC4oC,IAAI,EAAE4T,KAAK,GAAG,GAAG,UAAUruB,EAAEwiB,IAAI1nC,EAAE,YAAY/B,EAAE+B,EAAEszC,4BAA4B,CAAuE,IAAtEr1C,EAAEhM,KAAK4kD,SAASryC,EAAExE,EAAE+9B,cAAcl+B,EAAEG,EAAEk3C,cAAc1yC,EAAEg7B,gBAAsB3/B,IAAIA,IAAI2E,EAAEsI,MAAMjN,IAAI2E,EAAEg7B,kBAAkB,WAAWta,EAAEwiB,IAAI7nC,EAAE,aAAYA,EAAEA,EAAExH,WAAWwH,GAAGA,IAAIG,GAAG,IAAIH,EAAEq6B,YAAYnjC,EAAEmuB,EAAErlB,GAAGg3C,UAAUlX,KAAKza,EAAEwiB,IAAI7nC,EAAE,kBAAiB,GAAI9I,EAAEw8C,MAAMruB,EAAEwiB,IAAI7nC,EAAE,mBAAkB,GAAK,OAAM,CAAC8/B,IAAI1hC,EAAE0hC,IAAI5oC,EAAE4oC,IAAIza,EAAEwiB,IAAI1nC,EAAE,aAAY,GAAIuzC,KAAKt1C,EAAEs1C,KAAKx8C,EAAEw8C,KAAKruB,EAAEwiB,IAAI1nC,EAAE,cAAa,GAAK,CAAC,EAACk3C,aAAa,WAAW,OAAOjlD,KAAKyR,KAAI,WAAmC,IAAxB,IAAI7D,EAAE5N,KAAKilD,aAAmBr3C,GAAG,WAAWqlB,EAAEwiB,IAAI7nC,EAAE,aAAYA,EAAEA,EAAEq3C,aAAa,OAAOr3C,GAAGy9B,EAAG,GAAE,IAAGpY,EAAE6V,KAAK,CAACoc,WAAW,cAAcC,UAAU,gBAAe,SAASn5C,EAAElH,GAAG,IAAI0I,EAAE,gBAAgB1I,EAAEmuB,EAAEuV,GAAGx8B,GAAG,SAAS4B,GAAG,OAAOu8B,EAAEnqC,MAAK,SAAS4N,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAE,GAAGsE,EAAEzE,GAAGG,EAAEH,EAAE,IAAIA,EAAEq6B,WAAWl6B,EAAEH,EAAE6/B,kBAAa,IAASl7B,EAAE,OAAOxE,EAAEA,EAAEjJ,GAAG8I,EAAE5B,GAAG+B,EAAEA,EAAEq3C,SAAS53C,EAAEO,EAAEi3C,YAAYzyC,EAAE/E,EAAE+E,EAAExE,EAAEg3C,aAAan3C,EAAE5B,GAAGuG,CAAE,GAACvG,EAAE4B,EAAElF,UAAUpE,OAAQ,CAAC,IAAE2uB,EAAE6V,KAAK,CAAC,MAAM,SAAQ,SAASl7B,EAAE2E,GAAG0gB,EAAE8sB,SAASxtC,GAAGurC,GAAGnyC,EAAE4yC,eAAc,SAAS3wC,EAAE5B,GAAG,GAAGA,EAAE,OAAOA,EAAEyxC,GAAG7vC,EAAE2E,GAAGyqC,GAAGrsC,KAAK3E,GAAGinB,EAAErlB,GAAGsqB,WAAW3lB,GAAG,KAAKvG,CAAE,GAAE,IAAEinB,EAAE6V,KAAK,CAACuc,OAAO,SAASC,MAAM,UAAS,SAASp3C,EAAER,GAAGulB,EAAE6V,KAAK,CAAC0Y,QAAQ,QAAQtzC,EAAEmC,QAAQ3C,EAAE,GAAG,QAAQQ,IAAG,SAASH,EAAEP,GAAGylB,EAAEuV,GAAGh7B,GAAG,SAASI,EAAE5B,GAAG,IAAIuG,EAAE7J,UAAUpE,SAASyJ,GAAG,kBAAkBH,GAAG9I,EAAEiJ,KAAI,IAAKH,IAAG,IAAK5B,EAAE,SAAS,UAAU,OAAOm+B,EAAEnqC,MAAK,SAAS4N,EAAE5B,EAAEuG,GAAG,IAAIxE,EAAE,OAAOsE,EAAEzE,GAAG,IAAIJ,EAAE/C,QAAQ,SAASmD,EAAE,QAAQM,GAAGN,EAAEpI,SAAS+nC,gBAAgB,SAASr/B,GAAG,IAAIN,EAAEq6B,UAAUl6B,EAAEH,EAAE2/B,gBAAgBtpC,KAAKD,IAAI4J,EAAEiN,KAAK,SAAS3M,GAAGH,EAAE,SAASG,GAAGN,EAAEiN,KAAK,SAAS3M,GAAGH,EAAE,SAASG,GAAGH,EAAE,SAASG,UAAK,IAASqE,EAAE0gB,EAAEwiB,IAAI7nC,EAAE5B,EAAElH,GAAGmuB,EAAEsiB,MAAM3nC,EAAE5B,EAAEuG,EAAEzN,EAAG,GAAC4I,EAAE6E,EAAE3E,OAAE,EAAO2E,EAAG,CAAC,GAAE,IAAE0gB,EAAEuV,GAAGa,OAAO,CAACxmC,KAAK,SAAS+K,EAAE5B,EAAEuG,GAAG,OAAOvS,KAAK+kC,GAAGn3B,EAAE,KAAK5B,EAAEuG,EAAG,EAACgzC,OAAO,SAAS33C,EAAE5B,GAAG,OAAOhM,KAAK4nC,IAAIh6B,EAAE,KAAK5B,EAAG,EAACw5C,SAAS,SAAS53C,EAAE5B,EAAEuG,EAAExE,GAAG,OAAO/N,KAAK+kC,GAAG/4B,EAAE4B,EAAE2E,EAAExE,EAAG,EAAC03C,WAAW,SAAS73C,EAAE5B,EAAEuG,GAAG,OAAO,IAAI7J,UAAUpE,OAAOtE,KAAK4nC,IAAIh6B,EAAE,MAAM5N,KAAK4nC,IAAI57B,EAAE4B,GAAG,KAAK2E,EAAG,EAACmzC,MAAM,SAAS93C,EAAE5B,GAAG,OAAOhM,KAAKo7C,WAAWxtC,GAAGytC,WAAWrvC,GAAG4B,EAAG,IAAGqlB,EAAE6V,KAAK,wLAAwLp9B,MAAM,MAAK,SAASkC,EAAE2E,GAAG0gB,EAAEuV,GAAGj2B,GAAG,SAAS3E,EAAE5B,GAAG,OAAO,EAAEtD,UAAUpE,OAAOtE,KAAK+kC,GAAGxyB,EAAE,KAAK3E,EAAE5B,GAAGhM,KAAKs3C,QAAQ/kC,EAAG,CAAC,IAAE,IAAIozC,GAAG,sDAAsD1yB,EAAE2yB,MAAM,SAASh4C,EAAE5B,GAAG,IAAIuG,EAAExE,EAAEjJ,EAAE,GAAG,iBAAiBkH,IAAIuG,EAAE3E,EAAE5B,GAAGA,EAAE4B,EAAEA,EAAE2E,GAAGtE,EAAEL,GAAG,OAAOG,EAAEL,EAAEjG,KAAKiB,UAAU,IAAI5D,EAAE,WAAW,OAAO8I,EAAE9K,MAAMkJ,GAAGhM,KAAK+N,EAAEhC,OAAO2B,EAAEjG,KAAKiB,YAAa,GAAEmhC,KAAKj8B,EAAEi8B,KAAKj8B,EAAEi8B,MAAM5W,EAAE4W,OAAO/kC,CAAE,EAACmuB,EAAE4yB,UAAU,SAASj4C,GAAGA,EAAEqlB,EAAEwhB,YAAYxhB,EAAEof,OAAM,EAAI,EAACpf,EAAEhf,QAAQhJ,MAAMgJ,QAAQgf,EAAE6yB,UAAU7+C,KAAKP,MAAMusB,EAAEyY,SAAS3Y,EAAEE,EAAE8yB,WAAW93C,EAAEglB,EAAE+yB,SAAS3zC,EAAE4gB,EAAEgzB,UAAU7b,EAAEnX,EAAEjiB,KAAKsiB,EAAEL,EAAE/xB,IAAID,KAAKC,IAAI+xB,EAAEizB,UAAU,SAASt4C,GAAG,IAAI5B,EAAEinB,EAAEjiB,KAAKpD,GAAG,OAAO,WAAW5B,GAAG,WAAWA,KAAKs4B,MAAM12B,EAAEuwC,WAAWvwC,GAAI,EAACqlB,EAAEkzB,KAAK,SAASv4C,GAAG,OAAO,MAAMA,EAAE,IAAIA,EAAE,IAAI3L,QAAQ0jD,GAAG,KAAM,OAA8C,kBAAwB,OAAO1yB,CAA/B,UAAU,OAAV,aAAmC,IAAImzB,GAAGprC,EAAEqrC,OAAOC,GAAGtrC,EAAEmvB,EAAE,OAAOlX,EAAEszB,WAAW,SAAS34C,GAAG,OAAOoN,EAAEmvB,IAAIlX,IAAIjY,EAAEmvB,EAAEmc,IAAI14C,GAAGoN,EAAEqrC,SAASpzB,IAAIjY,EAAEqrC,OAAOD,IAAInzB,CAAE,OAAC,IAAoBrlB,IAAIoN,EAAEqrC,OAAOrrC,EAAEmvB,EAAElX,GAAGA,CAAE,iDCD7itE,mCASA,WACE,aAEA,IAAI7pB,MAAQ,wBACRo9C,OAA2B,iBAAXjnD,OAChBT,KAAO0nD,OAASjnD,OAAS,CAAC,EAC1BT,KAAK2nD,mBACPD,QAAS,GAEX,IAAIE,YAAcF,QAA0B,iBAATpnD,KAC/BunD,SAAW7nD,KAAK8nD,mBAAwC,iBAAZC,SAAwBA,QAAQC,UAAYD,QAAQC,SAASv/C,KACzGo/C,QACF7nD,KAAO04C,oBAAAA,EACEkP,aACT5nD,KAAOM,MAET,IAAI2nD,WAAajoD,KAAKkoD,qBAAqD/nD,OAAOD,QAC9EioD,IAAsC/nD,oBAAAA,KACtCgoD,cAAgBpoD,KAAKqoD,wBAAiD,oBAAhBC,YACtDC,UAAY,mBAAmB37C,MAAM,IACrC47C,MAAQ,CAAC,IAAK,MAAO,SAAU,YAC/BC,MAAQ,CAAC,EAAG,EAAG,GAAI,IACnBC,aAAe,CAAC,MAAO,QAAS,SAAU,SAAU,cAAe,UACnEC,mBAAqB,mEAAmE/7C,MAAM,IAE9Fg8C,OAAS,GAAIC,QACjB,GAAIT,aAAc,CAChB,IAAIvmC,OAAS,IAAIymC,YAAY,IAC7BO,QAAU,IAAIjxB,WAAW/V,QACzB+mC,OAAS,IAAIE,YAAYjnC,OAC1B,EAEG7hB,KAAK8nD,mBAAsB37C,MAAMgJ,UACnChJ,MAAMgJ,QAAU,SAAUjN,GACxB,MAA+C,mBAAxCvH,OAAO+C,UAAUgP,SAAS/J,KAAKT,EACvC,IAGCkgD,eAAiBpoD,KAAK+oD,gCAAmCT,YAAYU,SACvEV,YAAYU,OAAS,SAAU9gD,GAC7B,MAAsB,iBAARA,GAAoBA,EAAI2Z,QAAU3Z,EAAI2Z,OAAO/gB,cAAgBwnD,WAC5E,GA4DH,IAAIW,mBAAqB,SAAUC,GACjC,OAAO,SAAUlkC,GACf,OAAO,IAAImkC,KAAI,GAAMC,OAAOpkC,GAASkkC,IACtC,CACF,EAsBGG,aAAe,WACjB,IAAIhhC,EAAS4gC,mBAAmB,OAC5BpB,UACFx/B,EAASihC,SAASjhC,IAEpBA,EAAOoL,OAAS,WACd,OAAO,IAAI01B,GACZ,EACD9gC,EAAO+gC,OAAS,SAAUpkC,GACxB,OAAOqD,EAAOoL,SAAS21B,OAAOpkC,EAC/B,EACD,IAAK,IAAIhf,EAAI,EAAGA,EAAI0iD,aAAaljD,SAAUQ,EAAG,CAC5C,IAAIkM,EAAOw2C,aAAa1iD,GACxBqiB,EAAOnW,GAAQ+2C,mBAAmB/2C,EACnC,CACD,OAAOmW,CACR,EAEGihC,SAAW,SAAUjhC,QACvB,IAAIkhC,OAASC,KAAK,qBACdC,OAASD,KAAK,4BACdE,WAAa,SAAU1kC,GACzB,GAAuB,iBAAZA,EACT,OAAOukC,OAAOI,WAAW,OAAOP,OAAOpkC,EAAS,QAAQ4kC,OAAO,OAE/D,GAAI5kC,QACF,MAAM1a,MAKV,OAJa0a,EAAQlkB,cAAgBwnD,cACjCtjC,EAAU,IAAI4S,WAAW5S,IAGzB7Y,MAAMgJ,QAAQ6P,IAAYsjC,YAAYU,OAAOhkC,IAC/CA,EAAQlkB,cAAgB2oD,OACjBF,OAAOI,WAAW,OAAOP,OAAO,IAAIK,OAAOzkC,IAAU4kC,OAAO,OAE5DvhC,OAAOrD,EAEjB,EACD,OAAO0kC,UACR,EAQD,SAASP,IAAIU,GACX,GAAIA,EACFjB,OAAO,GAAKA,OAAO,IAAMA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GACxDA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAC3CA,OAAO,GAAKA,OAAO,GAAKA,OAAO,IAAMA,OAAO,IAC5CA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAM,EACpD1nD,KAAK0nD,OAASA,OACd1nD,KAAK2nD,QAAUA,aAEf,GAAIT,aAAc,CAChB,IAAIvmC,EAAS,IAAIymC,YAAY,IAC7BpnD,KAAK2nD,QAAU,IAAIjxB,WAAW/V,GAC9B3gB,KAAK0nD,OAAS,IAAIE,YAAYjnC,EAC/B,MACC3gB,KAAK0nD,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnE1nD,KAAK4oD,GAAK5oD,KAAK6oD,GAAK7oD,KAAK8oD,GAAK9oD,KAAK+oD,GAAK/oD,KAAKyJ,MAAQzJ,KAAKgpD,MAAQhpD,KAAKipD,OAAS,EAChFjpD,KAAKkpD,UAAYlpD,KAAKmpD,QAAS,EAC/BnpD,KAAK+oC,OAAQ,CACd,CAWDkf,IAAIzlD,UAAU0lD,OAAS,SAAUpkC,GAC/B,IAAI9jB,KAAKkpD,UAAT,CAIA,IAAIE,EAAWp4C,SAAc8S,EAC7B,GAAa,WAAT9S,EAAmB,CACrB,GAAa,WAATA,EAWF,MAAM5H,MAVN,GAAgB,OAAZ0a,EACF,MAAM1a,MACD,GAAI89C,cAAgBpjC,EAAQlkB,cAAgBwnD,YACjDtjC,EAAU,IAAI4S,WAAW5S,QACpB,KAAK7Y,MAAMgJ,QAAQ6P,IACnBojC,cAAiBE,YAAYU,OAAOhkC,IACvC,MAAM1a,MAMZggD,GAAY,CACb,CAID,IAHA,IAAIznC,EAAiB7c,EAAXwR,EAAQ,EAAMhS,EAASwf,EAAQxf,OAAQojD,EAAS1nD,KAAK0nD,OAC3DC,EAAU3nD,KAAK2nD,QAEZrxC,EAAQhS,GAAQ,CAUrB,GATItE,KAAKmpD,SACPnpD,KAAKmpD,QAAS,EACdzB,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAGlD0B,EACF,GAAIlC,aACF,IAAKpiD,EAAI9E,KAAKyJ,MAAO6M,EAAQhS,GAAUQ,EAAI,KAAMwR,EAC/CqxC,EAAQ7iD,KAAOgf,EAAQxN,QAGzB,IAAKxR,EAAI9E,KAAKyJ,MAAO6M,EAAQhS,GAAUQ,EAAI,KAAMwR,EAC/CoxC,EAAO5iD,GAAK,IAAMgf,EAAQxN,IAAUixC,MAAY,EAANziD,UAI9C,GAAIoiD,aACF,IAAKpiD,EAAI9E,KAAKyJ,MAAO6M,EAAQhS,GAAUQ,EAAI,KAAMwR,GAC/CqL,EAAOmC,EAAQuO,WAAW/b,IACf,IACTqxC,EAAQ7iD,KAAO6c,EACNA,EAAO,MAChBgmC,EAAQ7iD,KAAO,IAAQ6c,GAAQ,EAC/BgmC,EAAQ7iD,KAAO,IAAe,GAAP6c,GACdA,EAAO,OAAUA,GAAQ,OAClCgmC,EAAQ7iD,KAAO,IAAQ6c,GAAQ,GAC/BgmC,EAAQ7iD,KAAO,IAAS6c,GAAQ,EAAK,GACrCgmC,EAAQ7iD,KAAO,IAAe,GAAP6c,IAEvBA,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9BmC,EAAQuO,aAAa/b,IACjEqxC,EAAQ7iD,KAAO,IAAQ6c,GAAQ,GAC/BgmC,EAAQ7iD,KAAO,IAAS6c,GAAQ,GAAM,GACtCgmC,EAAQ7iD,KAAO,IAAS6c,GAAQ,EAAK,GACrCgmC,EAAQ7iD,KAAO,IAAe,GAAP6c,QAI3B,IAAK7c,EAAI9E,KAAKyJ,MAAO6M,EAAQhS,GAAUQ,EAAI,KAAMwR,GAC/CqL,EAAOmC,EAAQuO,WAAW/b,IACf,IACToxC,EAAO5iD,GAAK,IAAM6c,GAAQ4lC,MAAY,EAANziD,KACvB6c,EAAO,MAChB+lC,EAAO5iD,GAAK,KAAO,IAAQ6c,GAAQ,IAAO4lC,MAAY,EAANziD,KAChD4iD,EAAO5iD,GAAK,KAAO,IAAe,GAAP6c,IAAiB4lC,MAAY,EAANziD,MACzC6c,EAAO,OAAUA,GAAQ,OAClC+lC,EAAO5iD,GAAK,KAAO,IAAQ6c,GAAQ,KAAQ4lC,MAAY,EAANziD,KACjD4iD,EAAO5iD,GAAK,KAAO,IAAS6c,GAAQ,EAAK,KAAU4lC,MAAY,EAANziD,KACzD4iD,EAAO5iD,GAAK,KAAO,IAAe,GAAP6c,IAAiB4lC,MAAY,EAANziD,OAElD6c,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9BmC,EAAQuO,aAAa/b,IACjEoxC,EAAO5iD,GAAK,KAAO,IAAQ6c,GAAQ,KAAQ4lC,MAAY,EAANziD,KACjD4iD,EAAO5iD,GAAK,KAAO,IAAS6c,GAAQ,GAAM,KAAU4lC,MAAY,EAANziD,KAC1D4iD,EAAO5iD,GAAK,KAAO,IAAS6c,GAAQ,EAAK,KAAU4lC,MAAY,EAANziD,KACzD4iD,EAAO5iD,GAAK,KAAO,IAAe,GAAP6c,IAAiB4lC,MAAY,EAANziD,MAK1D9E,KAAKqpD,cAAgBvkD,EACrB9E,KAAKgpD,OAASlkD,EAAI9E,KAAKyJ,MACnB3E,GAAK,IACP9E,KAAKyJ,MAAQ3E,EAAI,GACjB9E,KAAKgwC,OACLhwC,KAAKmpD,QAAS,GAEdnpD,KAAKyJ,MAAQ3E,CAEhB,CAKD,OAJI9E,KAAKgpD,MAAQ,aACfhpD,KAAKipD,QAAUjpD,KAAKgpD,MAAQ,YAAc,EAC1ChpD,KAAKgpD,MAAQhpD,KAAKgpD,MAAQ,YAErBhpD,IAnGN,CAoGF,EAEDioD,IAAIzlD,UAAU8mD,SAAW,WACvB,IAAItpD,KAAKkpD,UAAT,CAGAlpD,KAAKkpD,WAAY,EACjB,IAAIxB,EAAS1nD,KAAK0nD,OAAQ5iD,EAAI9E,KAAKqpD,cACnC3B,EAAO5iD,GAAK,IAAMwiD,MAAU,EAAJxiD,GACpBA,GAAK,KACF9E,KAAKmpD,QACRnpD,KAAKgwC,OAEP0X,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAEtDA,EAAO,IAAM1nD,KAAKgpD,OAAS,EAC3BtB,EAAO,IAAM1nD,KAAKipD,QAAU,EAAIjpD,KAAKgpD,QAAU,GAC/ChpD,KAAKgwC,MAhBJ,CAiBF,EAEDiY,IAAIzlD,UAAUwtC,KAAO,WACnB,IAAI9hC,EAAGD,EAAGD,EAAGzI,EAAGgkD,EAAIC,EAAI9B,EAAS1nD,KAAK0nD,OAElC1nD,KAAK+oC,MAQP96B,IADAA,IALAC,IADAA,EAAIw5C,EAAO,GAAK,YACN,EAAIx5C,IAAM,IAAM,WAAa,IAIvCF,IADAA,IAAM,WADNzI,IADAA,IAAM,WAAiB,WAAJ2I,GAAkBw5C,EAAO,GAAK,YACvC,GAAKniD,IAAM,IAAM2I,GAAK,KACH,UAALA,IAAoBw5C,EAAO,GAAK,aAC9C,GAAK15C,IAAM,IAAMzI,GAAK,IACjBA,EAAI2I,IAAOw5C,EAAO,GAAK,aAC5B,GAAKz5C,IAAM,IAAMD,GAAK,GAEhCE,EAAIlO,KAAK4oD,GACT36C,EAAIjO,KAAK6oD,GACT76C,EAAIhO,KAAK8oD,GAST76C,IADAA,KALAC,IADAA,KADA3I,EAAIvF,KAAK+oD,IACE96C,GAAKD,EAAIzI,IAAOmiD,EAAO,GAAK,YAC7B,EAAIx5C,IAAM,IAAMD,GAAK,IAI/BD,IADAA,IAAMC,GADN1I,IADAA,IAAMyI,EAAKE,GAAKD,EAAID,IAAO05C,EAAO,GAAK,YAC7B,GAAKniD,IAAM,IAAM2I,GAAK,IAChBA,EAAID,IAAOy5C,EAAO,GAAK,YAC7B,GAAK15C,IAAM,IAAMzI,GAAK,IAChBA,EAAI2I,IAAOw5C,EAAO,GAAK,aAC7B,GAAKz5C,IAAM,IAAMD,GAAK,GAUlCC,IADAA,KALAC,IADAA,IAAM3I,EAAK0I,GAAKD,EAAIzI,IAAOmiD,EAAO,GAAK,YAC7B,EAAIx5C,IAAM,IAAMD,GAAK,IAI/BD,IADAA,IAAMC,GADN1I,IADAA,IAAMyI,EAAKE,GAAKD,EAAID,IAAO05C,EAAO,GAAK,aAC7B,GAAKniD,IAAM,IAAM2I,GAAK,IAChBA,EAAID,IAAOy5C,EAAO,GAAK,aAC7B,GAAK15C,IAAM,IAAMzI,GAAK,IAChBA,EAAI2I,IAAOw5C,EAAO,GAAK,WAC7B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KALAC,IADAA,IAAM3I,EAAK0I,GAAKD,EAAIzI,IAAOmiD,EAAO,GAAK,aAC7B,EAAIx5C,IAAM,IAAMD,GAAK,IAI/BD,IADAA,IAAMC,GADN1I,IADAA,IAAMyI,EAAKE,GAAKD,EAAID,IAAO05C,EAAO,GAAK,aAC7B,GAAKniD,IAAM,IAAM2I,GAAK,IAChBA,EAAID,IAAOy5C,EAAO,IAAM,QAC9B,GAAK15C,IAAM,IAAMzI,GAAK,IAChBA,EAAI2I,IAAOw5C,EAAO,IAAM,aAC9B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KALAC,IADAA,IAAM3I,EAAK0I,GAAKD,EAAIzI,IAAOmiD,EAAO,IAAM,aAC9B,EAAIx5C,IAAM,IAAMD,GAAK,IAI/BD,IADAA,IAAMC,GADN1I,IADAA,IAAMyI,EAAKE,GAAKD,EAAID,IAAO05C,EAAO,IAAM,WAC9B,GAAKniD,IAAM,IAAM2I,GAAK,IAChBA,EAAID,IAAOy5C,EAAO,IAAM,aAC9B,GAAK15C,IAAM,IAAMzI,GAAK,IAChBA,EAAI2I,IAAOw5C,EAAO,IAAM,aAC9B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,EAAKD,IADXE,IADAA,IAAMF,EAAKzI,GAAK0I,EAAID,IAAO05C,EAAO,GAAK,YAC7B,EAAIx5C,IAAM,IAAMD,GAAK,GACXA,IAAOy5C,EAAO,GAAK,aAC7B,EAAIniD,IAAM,IAAM2I,GAAK,GAGpBA,IADXF,IADAA,IAAME,EAAKD,GAAK1I,EAAI2I,IAAOw5C,EAAO,IAAM,YAC9B,GAAK15C,IAAM,IAAMzI,GAAK,GACZA,IAAOmiD,EAAO,GAAK,YAC7B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,EAAKD,IADXE,IADAA,IAAMF,EAAKzI,GAAK0I,EAAID,IAAO05C,EAAO,GAAK,YAC7B,EAAIx5C,IAAM,IAAMD,GAAK,GACXA,IAAOy5C,EAAO,IAAM,WAC9B,EAAIniD,IAAM,IAAM2I,GAAK,GAGpBA,IADXF,IADAA,IAAME,EAAKD,GAAK1I,EAAI2I,IAAOw5C,EAAO,IAAM,YAC9B,GAAK15C,IAAM,IAAMzI,GAAK,GACZA,IAAOmiD,EAAO,GAAK,YAC7B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,EAAKD,IADXE,IADAA,IAAMF,EAAKzI,GAAK0I,EAAID,IAAO05C,EAAO,GAAK,YAC7B,EAAIx5C,IAAM,IAAMD,GAAK,GACXA,IAAOy5C,EAAO,IAAM,aAC9B,EAAIniD,IAAM,IAAM2I,GAAK,GAGpBA,IADXF,IADAA,IAAME,EAAKD,GAAK1I,EAAI2I,IAAOw5C,EAAO,GAAK,YAC7B,GAAK15C,IAAM,IAAMzI,GAAK,GACZA,IAAOmiD,EAAO,GAAK,aAC7B,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,EAAKD,IADXE,IADAA,IAAMF,EAAKzI,GAAK0I,EAAID,IAAO05C,EAAO,IAAM,aAC9B,EAAIx5C,IAAM,IAAMD,GAAK,GACXA,IAAOy5C,EAAO,GAAK,WAC7B,EAAIniD,IAAM,IAAM2I,GAAK,GAGpBA,IADXF,IADAA,IAAME,EAAKD,GAAK1I,EAAI2I,IAAOw5C,EAAO,GAAK,aAC7B,GAAK15C,IAAM,IAAMzI,GAAK,GACZA,IAAOmiD,EAAO,IAAM,aAC9B,GAAKz5C,IAAM,IAAMD,GAAK,EAUhCC,IADAA,KAHAu7C,GADAjkD,IADAA,KAHAgkD,EAAKt7C,EAAID,IAETE,IADAA,IAAMq7C,EAAKhkD,GAAKmiD,EAAO,GAAK,SAClB,EAAIx5C,IAAM,IAAMD,GAAK,IACfy5C,EAAO,GAAK,aAClB,GAAKniD,IAAM,IAAM2I,GAAK,GACvBA,IAETF,IADAA,IAAMw7C,EAAKv7C,GAAKy5C,EAAO,IAAM,aACnB,GAAK15C,IAAM,IAAMzI,GAAK,IAChBmiD,EAAO,IAAM,WACnB,GAAKz5C,IAAM,GAAKD,GAAK,EAU/BC,IADAA,KAHAu7C,GADAjkD,IADAA,KAHAgkD,EAAKt7C,EAAID,IAETE,IADAA,IAAMq7C,EAAKhkD,GAAKmiD,EAAO,GAAK,aAClB,EAAIx5C,IAAM,IAAMD,GAAK,IACfy5C,EAAO,GAAK,aAClB,GAAKniD,IAAM,IAAM2I,GAAK,GACvBA,IAETF,IADAA,IAAMw7C,EAAKv7C,GAAKy5C,EAAO,GAAK,YAClB,GAAK15C,IAAM,IAAMzI,GAAK,IAChBmiD,EAAO,IAAM,aACnB,GAAKz5C,IAAM,GAAKD,GAAK,EAU/BC,IADAA,KAHAu7C,GADAjkD,IADAA,KAHAgkD,EAAKt7C,EAAID,IAETE,IADAA,IAAMq7C,EAAKhkD,GAAKmiD,EAAO,IAAM,YACnB,EAAIx5C,IAAM,IAAMD,GAAK,IACfy5C,EAAO,GAAK,YAClB,GAAKniD,IAAM,IAAM2I,GAAK,GACvBA,IAETF,IADAA,IAAMw7C,EAAKv7C,GAAKy5C,EAAO,GAAK,YAClB,GAAK15C,IAAM,IAAMzI,GAAK,IAChBmiD,EAAO,GAAK,WAClB,GAAKz5C,IAAM,GAAKD,GAAK,EAU/BC,IADAA,KAHAu7C,GADAjkD,IADAA,KAHAgkD,EAAKt7C,EAAID,IAETE,IADAA,IAAMq7C,EAAKhkD,GAAKmiD,EAAO,GAAK,YAClB,EAAIx5C,IAAM,IAAMD,GAAK,IACfy5C,EAAO,IAAM,YACnB,GAAKniD,IAAM,IAAM2I,GAAK,GACvBA,IAETF,IADAA,IAAMw7C,EAAKv7C,GAAKy5C,EAAO,IAAM,YACnB,GAAK15C,IAAM,IAAMzI,GAAK,IAChBmiD,EAAO,GAAK,YAClB,GAAKz5C,IAAM,GAAKD,GAAK,EAQ/BC,IADAA,KAHA1I,IADAA,IAAM0I,IADNC,IADAA,IAAMF,GAAKC,GAAK1I,IAAMmiD,EAAO,GAAK,YACxB,EAAIx5C,IAAM,IAAMD,GAAK,IACfD,IAAM05C,EAAO,GAAK,aACxB,GAAKniD,IAAM,IAAM2I,GAAK,KAEhCF,IADAA,IAAME,GAAK3I,GAAK0I,IAAMy5C,EAAO,IAAM,aACzB,GAAK15C,IAAM,IAAMzI,GAAK,IAChB2I,IAAMw5C,EAAO,GAAK,WACxB,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,IADNC,IADAA,IAAMF,GAAKC,GAAK1I,IAAMmiD,EAAO,IAAM,aACzB,EAAIx5C,IAAM,IAAMD,GAAK,IACfD,IAAM05C,EAAO,GAAK,aACxB,GAAKniD,IAAM,IAAM2I,GAAK,KAEhCF,IADAA,IAAME,GAAK3I,GAAK0I,IAAMy5C,EAAO,IAAM,UACzB,GAAK15C,IAAM,IAAMzI,GAAK,IAChB2I,IAAMw5C,EAAO,GAAK,aACxB,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,IADNC,IADAA,IAAMF,GAAKC,GAAK1I,IAAMmiD,EAAO,GAAK,aACxB,EAAIx5C,IAAM,IAAMD,GAAK,IACfD,IAAM05C,EAAO,IAAM,WACzB,GAAKniD,IAAM,IAAM2I,GAAK,KAEhCF,IADAA,IAAME,GAAK3I,GAAK0I,IAAMy5C,EAAO,GAAK,aACxB,GAAK15C,IAAM,IAAMzI,GAAK,IAChB2I,IAAMw5C,EAAO,IAAM,aACzB,GAAKz5C,IAAM,IAAMD,GAAK,EAQhCC,IADAA,KAHA1I,IADAA,IAAM0I,IADNC,IADAA,IAAMF,GAAKC,GAAK1I,IAAMmiD,EAAO,GAAK,YACxB,EAAIx5C,IAAM,IAAMD,GAAK,IACfD,IAAM05C,EAAO,IAAM,aACzB,GAAKniD,IAAM,IAAM2I,GAAK,KAEhCF,IADAA,IAAME,GAAK3I,GAAK0I,IAAMy5C,EAAO,GAAK,YACxB,GAAK15C,IAAM,IAAMzI,GAAK,IAChB2I,IAAMw5C,EAAO,GAAK,YACxB,GAAKz5C,IAAM,IAAMD,GAAK,EAE5BhO,KAAK+oC,OACP/oC,KAAK4oD,GAAK16C,EAAI,YAAc,EAC5BlO,KAAK6oD,GAAK56C,EAAI,WAAa,EAC3BjO,KAAK8oD,GAAK96C,EAAI,YAAc,EAC5BhO,KAAK+oD,GAAKxjD,EAAI,WAAa,EAC3BvF,KAAK+oC,OAAQ,IAEb/oC,KAAK4oD,GAAK5oD,KAAK4oD,GAAK16C,GAAK,EACzBlO,KAAK6oD,GAAK7oD,KAAK6oD,GAAK56C,GAAK,EACzBjO,KAAK8oD,GAAK9oD,KAAK8oD,GAAK96C,GAAK,EACzBhO,KAAK+oD,GAAK/oD,KAAK+oD,GAAKxjD,GAAK,EAE5B,EAYD0iD,IAAIzlD,UAAUinD,IAAM,WAClBzpD,KAAKspD,WAEL,IAAIV,EAAK5oD,KAAK4oD,GAAIC,EAAK7oD,KAAK6oD,GAAIC,EAAK9oD,KAAK8oD,GAAIC,EAAK/oD,KAAK+oD,GAExD,OAAO1B,UAAWuB,GAAM,EAAK,IAAQvB,UAAe,GAALuB,GAC7CvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,EAAK,IACrDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWwB,GAAM,EAAK,IAAQxB,UAAe,GAALwB,GACxCxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,EAAK,IACrDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,IACtDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,IACtDxB,UAAWyB,GAAM,EAAK,IAAQzB,UAAe,GAALyB,GACxCzB,UAAWyB,GAAM,GAAM,IAAQzB,UAAWyB,GAAM,EAAK,IACrDzB,UAAWyB,GAAM,GAAM,IAAQzB,UAAWyB,GAAM,GAAM,IACtDzB,UAAWyB,GAAM,GAAM,IAAQzB,UAAWyB,GAAM,GAAM,IACtDzB,UAAW0B,GAAM,EAAK,IAAQ1B,UAAe,GAAL0B,GACxC1B,UAAW0B,GAAM,GAAM,IAAQ1B,UAAW0B,GAAM,EAAK,IACrD1B,UAAW0B,GAAM,GAAM,IAAQ1B,UAAW0B,GAAM,GAAM,IACtD1B,UAAW0B,GAAM,GAAM,IAAQ1B,UAAW0B,GAAM,GAAM,GACzD,EAYDd,IAAIzlD,UAAUgP,SAAWy2C,IAAIzlD,UAAUinD,IAYvCxB,IAAIzlD,UAAUkmD,OAAS,WACrB1oD,KAAKspD,WAEL,IAAIV,EAAK5oD,KAAK4oD,GAAIC,EAAK7oD,KAAK6oD,GAAIC,EAAK9oD,KAAK8oD,GAAIC,EAAK/oD,KAAK+oD,GACxD,MAAO,CACA,IAALH,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IAEhE,EAYDd,IAAIzlD,UAAU+T,MAAQ0xC,IAAIzlD,UAAUkmD,OAYpCT,IAAIzlD,UAAUknD,YAAc,WAC1B1pD,KAAKspD,WAEL,IAAI3oC,EAAS,IAAIymC,YAAY,IACzBM,EAAS,IAAIE,YAAYjnC,GAK7B,OAJA+mC,EAAO,GAAK1nD,KAAK4oD,GACjBlB,EAAO,GAAK1nD,KAAK6oD,GACjBnB,EAAO,GAAK1nD,KAAK8oD,GACjBpB,EAAO,GAAK1nD,KAAK+oD,GACVpoC,CACR,EAaDsnC,IAAIzlD,UAAUme,OAASsnC,IAAIzlD,UAAUknD,YAYrCzB,IAAIzlD,UAAUmnD,OAAS,WAErB,IADA,IAAIC,EAAIC,EAAIC,EAAIC,EAAY,GAAIf,EAAQhpD,KAAKuW,QACpCzR,EAAI,EAAGA,EAAI,IAClB8kD,EAAKZ,EAAMlkD,KACX+kD,EAAKb,EAAMlkD,KACXglD,EAAKd,EAAMlkD,KACXilD,GAAatC,mBAAmBmC,IAAO,GACrCnC,mBAA0C,IAAtBmC,GAAM,EAAIC,IAAO,IACrCpC,mBAA0C,IAAtBoC,GAAM,EAAIC,IAAO,IACrCrC,mBAAwB,GAALqC,GAMvB,OAJAF,EAAKZ,EAAMlkD,GACXilD,GAAatC,mBAAmBmC,IAAO,GACrCnC,mBAAoBmC,GAAM,EAAK,IAC/B,KAEH,EAED,IAAI5qD,QAAUmpD,eAEVpB,UACF9nD,OAAOD,QAAUA,SAmBjBF,KAAKkrD,IAAMhrD,QACPioD,MACF/nD,8BAAAA,WACE,OAAOF,OADH,2IA5pBZ,gCCCA,IAGIirD,EAAiB,4BAGjBC,EAAmB,iBAGnBC,EAAU,qBAEVC,EAAU,mBACVC,EAAU,gBAEVC,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBACbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBACdC,EAAa,wBACbC,EAAa,wBACbC,EAAU,qBACVC,EAAW,sBACXC,EAAW,sBACXC,EAAW,sBACXC,EAAkB,6BAClBC,EAAY,uBACZC,EAAY,uBASZC,EAAU,OAGVC,EAAe,8BAGfC,EAAW,mBAGXC,EAAgB,CAAC,EACrBA,EAAc5B,GAAW4B,EA7CV,kBA8CfA,EAAcd,GAAkBc,EAAcb,GAC9Ca,EAAc3B,GAAW2B,EAAc1B,GACvC0B,EAAcZ,GAAcY,EAAcX,GAC1CW,EAAcV,GAAWU,EAAcT,GACvCS,EAAcR,GAAYQ,EAAcvB,GACxCuB,EAActB,GAAasB,EAAcrB,GACzCqB,EAAcnB,GAAamB,EAAclB,GACzCkB,EAAcjB,GAAaiB,EAAchB,GACzCgB,EAAcP,GAAYO,EAAcN,GACxCM,EAAcL,GAAaK,EAAcJ,IAAa,EACtDI,EArDe,kBAqDWA,EAAczB,GACxCyB,EAAcf,IAAc,EAG5B,IAAIgB,EAA8B,iBAAVxU,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAO/3C,SAAWA,QAAU+3C,EAAAA,EAGhFyU,EAA0B,iBAAR7sD,MAAoBA,MAAQA,KAAKK,SAAWA,QAAUL,KAGxEN,EAAOktD,GAAcC,GAAYrpD,SAAS,cAATA,GAGjCspD,EAA4CltD,IAAYA,EAAQipC,UAAYjpC,EAG5EmtD,EAAaD,GAA4CjtD,IAAWA,EAAOgpC,UAAYhpC,EAGvFmtD,EAAgBD,GAAcA,EAAWntD,UAAYktD,EAUzD,SAASG,EAAY56C,EAAK66C,GAGxB,OADA76C,EAAIq1B,IAAIwlB,EAAK,GAAIA,EAAK,IACf76C,CACR,CAUD,SAAS86C,EAAYzlB,EAAKj/B,GAGxB,OADAi/B,EAAI/W,IAAIloB,GACDi/B,CACR,CAsDD,SAAS0lB,EAAYj2C,EAAOk2C,EAAUC,EAAaC,GACjD,IAAIr2C,GAAS,EACThS,EAASiS,EAAQA,EAAMjS,OAAS,EAKpC,IAHIqoD,GAAaroD,IACfooD,EAAcn2C,IAAQD,MAEfA,EAAQhS,GACfooD,EAAcD,EAASC,EAAan2C,EAAMD,GAAQA,EAAOC,GAE3D,OAAOm2C,CACR,CAwCD,SAASE,EAAa/kD,GAGpB,IAAIhD,GAAS,EACb,GAAa,MAATgD,GAA0C,mBAAlBA,EAAM2J,SAChC,IACE3M,KAAYgD,EAAQ,GACrB,CAAC,MAAO+F,GAAK,CAEhB,OAAO/I,CACR,CASD,SAASgoD,EAAWp7C,GAClB,IAAI6E,GAAS,EACTzR,EAASoG,MAAMwG,EAAIq7C,MAKvB,OAHAr7C,EAAIrO,SAAQ,SAASyE,EAAOD,GAC1B/C,IAASyR,GAAS,CAAC1O,EAAKC,EACzB,IACMhD,CACR,CAUD,SAASkoD,EAAQC,EAAM95C,GACrB,OAAO,SAAS/J,GACd,OAAO6jD,EAAK95C,EAAU/J,GACvB,CACF,CASD,SAAS8jD,EAAWnmB,GAClB,IAAIxwB,GAAS,EACTzR,EAASoG,MAAM67B,EAAIgmB,MAKvB,OAHAhmB,EAAI1jC,SAAQ,SAASyE,GACnBhD,IAASyR,GAASzO,CACnB,IACMhD,CACR,CAGD,IASM+vC,EATFsY,EAAajiD,MAAMzI,UACnB2qD,EAAYvqD,SAASJ,UACrB4qD,EAAc3tD,OAAO+C,UAGrB6qD,EAAavuD,EAAK,sBAGlBwuD,GACE1Y,EAAM,SAAS7I,KAAKshB,GAAcA,EAAW/kD,MAAQ+kD,EAAW/kD,KAAKilD,UAAY,KACvE,iBAAmB3Y,EAAO,GAItC4Y,EAAeL,EAAU37C,SAGzBhK,GAAiB4lD,EAAY5lD,eAO7BimD,GAAiBL,EAAY57C,SAG7Bk8C,GAAaz+C,OAAO,IACtBu+C,EAAa/lD,KAAKD,IAAgBvF,QAzQjB,sBAyQuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EsmD,GAAS6D,EAAgBttD,EAAKypD,YAASzhD,EACvCyU,GAASzc,EAAKyc,OACdmb,GAAa53B,EAAK43B,WAClBi3B,GAAeZ,EAAQttD,OAAOunC,eAAgBvnC,QAC9CmuD,GAAenuD,OAAO8yB,OACtBs7B,GAAuBT,EAAYS,qBACnCjjD,GAASsiD,EAAWtiD,OAGpBkjD,GAAmBruD,OAAO0kC,sBAC1B4pB,GAAiBxF,GAASA,GAAOyF,cAAWlnD,EAC5CmnD,GAAalB,EAAQttD,OAAO6I,KAAM7I,QAGlCyuD,GAAWC,GAAUrvD,EAAM,YAC3BsvD,GAAMD,GAAUrvD,EAAM,OACtBsb,GAAU+zC,GAAUrvD,EAAM,WAC1BuvD,GAAMF,GAAUrvD,EAAM,OACtBwvD,GAAUH,GAAUrvD,EAAM,WAC1ByvD,GAAeJ,GAAU1uD,OAAQ,UAGjC+uD,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAASr0C,IAC7Bw0C,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcvzC,GAASA,GAAO/Y,eAAYsE,EAC1CioD,GAAgBD,GAAcA,GAAYE,aAAUloD,EASxD,SAASmoD,GAAK9uC,GACZ,IAAI7J,GAAS,EACThS,EAAS6b,EAAUA,EAAQ7b,OAAS,EAGxC,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CAyFD,SAASC,GAAUhvC,GACjB,IAAI7J,GAAS,EACThS,EAAS6b,EAAUA,EAAQ7b,OAAS,EAGxC,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CAuGD,SAASE,GAASjvC,GAChB,IAAI7J,GAAS,EACThS,EAAS6b,EAAUA,EAAQ7b,OAAS,EAGxC,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CAqFD,SAASG,GAAMlvC,GACbngB,KAAKsvD,SAAW,IAAIH,GAAUhvC,EAC/B,CAwHD,SAASovC,GAAY9iC,EAAQ7kB,EAAKC,GAChC,IAAI2nD,EAAW/iC,EAAO7kB,GAChBJ,GAAeC,KAAKglB,EAAQ7kB,IAAQohC,GAAGwmB,EAAU3nD,UACxCf,IAAVe,GAAyBD,KAAO6kB,KACnCA,EAAO7kB,GAAOC,EAEjB,CAUD,SAAS4nD,GAAal5C,EAAO3O,GAE3B,IADA,IAAItD,EAASiS,EAAMjS,OACZA,KACL,GAAI0kC,GAAGzyB,EAAMjS,GAAQ,GAAIsD,GACvB,OAAOtD,EAGX,OAAQ,CACT,CA6BD,SAASorD,GAAU7nD,EAAO8nD,EAAQC,EAAQC,EAAYjoD,EAAK6kB,EAAQhhB,GACjE,IAAI5G,EAIJ,GAHIgrD,IACFhrD,EAAS4nB,EAASojC,EAAWhoD,EAAOD,EAAK6kB,EAAQhhB,GAASokD,EAAWhoD,SAExDf,IAAXjC,EACF,OAAOA,EAET,IAAKirD,GAASjoD,GACZ,OAAOA,EAET,IAAIkoD,EAAQ97C,GAAQpM,GACpB,GAAIkoD,GAEF,GADAlrD,EA2XJ,SAAwB0R,GACtB,IAAIjS,EAASiS,EAAMjS,OACfO,EAAS0R,EAAM3W,YAAY0E,GAO/B,OAJIA,GAA6B,iBAAZiS,EAAM,IAAkB/O,GAAeC,KAAK8O,EAAO,WACtE1R,EAAOyR,MAAQC,EAAMD,MACrBzR,EAAO6rC,MAAQn6B,EAAMm6B,OAEhB7rC,CACR,CArYYmrD,CAAenoD,IACnB8nD,EACH,OA6ON,SAAmB53C,EAAQxB,GACzB,IAAID,GAAS,EACThS,EAASyT,EAAOzT,OAGpB,IADAiS,IAAUA,EAAQtL,MAAM3G,MACfgS,EAAQhS,GACfiS,EAAMD,GAASyB,EAAOzB,GAExB,OAAOC,CACR,CAtPY05C,CAAUpoD,EAAOhD,OAErB,CACL,IAAIqrD,EAAMC,GAAOtoD,GACbuoD,EAASF,GAAO5F,GAAW4F,GAAO3F,EAEtC,GAAIyD,GAASnmD,GACX,OA0HN,SAAqB8Y,EAAQgvC,GAC3B,GAAIA,EACF,OAAOhvC,EAAOzV,QAEhB,IAAIrG,EAAS,IAAI8b,EAAO/gB,YAAY+gB,EAAOrc,QAE3C,OADAqc,EAAOgmB,KAAK9hC,GACLA,CACR,CAjIYwrD,CAAYxoD,EAAO8nD,GAE5B,GAAIO,GAAOxF,GAAawF,GAAO/F,GAAYiG,IAAW3jC,EAAS,CAC7D,GAAImgC,EAAa/kD,GACf,OAAO4kB,EAAS5kB,EAAQ,CAAC,EAG3B,GADAhD,EA+XN,SAAyB4nB,GACvB,MAAqC,mBAAtBA,EAAO7sB,aAA8B0wD,GAAY7jC,GAE5D,CAAC,EAxVEqjC,GADWS,EAwVH5C,GAAalhC,IAvVHmhC,GAAa2C,GAAS,CAAC,EADlD,IAAoBA,CA0VnB,CAnYcC,CAAgBJ,EAAS,CAAC,EAAIvoD,IAClC8nD,EACH,OA6QR,SAAqB53C,EAAQ0U,GAC3B,OAAOgkC,GAAW14C,EAAQ24C,GAAW34C,GAAS0U,EAC/C,CA/QckkC,CAAY9oD,EAhD3B,SAAoB4kB,EAAQ1U,GAC1B,OAAO0U,GAAUgkC,GAAW14C,EAAQzP,GAAKyP,GAAS0U,EACnD,CA8CiCmkC,CAAW/rD,EAAQgD,GAEhD,KAAM,CACL,IAAKkkD,EAAcmE,GACjB,OAAOzjC,EAAS5kB,EAAQ,CAAC,EAE3BhD,EA0YN,SAAwB4nB,EAAQyjC,EAAKW,EAAWlB,GAC9C,IA5MmBmB,EA4MfC,EAAOtkC,EAAO7sB,YAClB,OAAQswD,GACN,KAAKjF,EACH,OAAO+F,GAAiBvkC,GAE1B,KAAK29B,EACL,KAAKC,EACH,OAAO,IAAI0G,GAAMtkC,GAEnB,KAAKy+B,EACH,OA3QN,SAAuB+F,EAAUtB,GAC/B,IAAIhvC,EAASgvC,EAASqB,GAAiBC,EAAStwC,QAAUswC,EAAStwC,OACnE,OAAO,IAAIswC,EAASrxD,YAAY+gB,EAAQswC,EAASC,WAAYD,EAAS14B,WACvE,CAwQY44B,CAAc1kC,EAAQkjC,GAE/B,KAAKxE,EAAY,KAAKC,EACtB,KAAKC,EAAS,KAAKC,EAAU,KAAKC,EAClC,KAAKC,EAAU,KAAKC,EAAiB,KAAKC,EAAW,KAAKC,EACxD,OA/MN,SAAyByF,EAAYzB,GACnC,IAAIhvC,EAASgvC,EAASqB,GAAiBI,EAAWzwC,QAAUywC,EAAWzwC,OACvE,OAAO,IAAIywC,EAAWxxD,YAAY+gB,EAAQywC,EAAWF,WAAYE,EAAW9sD,OAC7E,CA4MY+sD,CAAgB5kC,EAAQkjC,GAEjC,KAAKnF,EACH,OArQN,SAAkB/4C,EAAKk+C,EAAQkB,GAE7B,OAAOrE,EADKmD,EAASkB,EAAUhE,EAAWp7C,IAAM,GAAQo7C,EAAWp7C,GACzC46C,EAAa,IAAI56C,EAAI7R,YAChD,CAkQY0xD,CAAS7kC,EAAQkjC,EAAQkB,GAElC,KAAKpG,EACL,KAAKK,EACH,OAAO,IAAIiG,EAAKtkC,GAElB,KAAKm+B,EACH,OAhQN,SAAqB2G,GACnB,IAAI1sD,EAAS,IAAI0sD,EAAO3xD,YAAY2xD,EAAOx5C,OAAQ6zC,EAAQ7f,KAAKwlB,IAEhE,OADA1sD,EAAO2sD,UAAYD,EAAOC,UACnB3sD,CACR,CA4PY4sD,CAAYhlC,GAErB,KAAKo+B,EACH,OApPN,SAAkB/jB,EAAK6oB,EAAQkB,GAE7B,OAAOrE,EADKmD,EAASkB,EAAU5D,EAAWnmB,IAAM,GAAQmmB,EAAWnmB,GACzCylB,EAAa,IAAIzlB,EAAIlnC,YAChD,CAiPY8xD,CAASjlC,EAAQkjC,EAAQkB,GAElC,KAAK9F,EACH,OA3Oe+F,EA2OIrkC,EA1OhBsiC,GAAgBtvD,OAAOsvD,GAActnD,KAAKqpD,IAAW,CAAC,EA4O9D,CA5aca,CAAe9pD,EAAOqoD,EAAKR,GAAWC,EAChD,CACF,CAEDlkD,IAAUA,EAAQ,IAAI4jD,IACtB,IAAIuC,EAAUnmD,EAAM0Y,IAAItc,GACxB,GAAI+pD,EACF,OAAOA,EAIT,GAFAnmD,EAAMq7B,IAAIj/B,EAAOhD,IAEZkrD,EACH,IAAI8B,EAAQjC,EAsQhB,SAAoBnjC,GAClB,OAnOF,SAAwBA,EAAQqlC,EAAUC,GACxC,IAAIltD,EAASitD,EAASrlC,GACtB,OAAOxY,GAAQwY,GAAU5nB,EApwB3B,SAAmB0R,EAAOb,GAKxB,IAJA,IAAIY,GAAS,EACThS,EAASoR,EAAOpR,OAChBsgD,EAASruC,EAAMjS,SAEVgS,EAAQhS,GACfiS,EAAMquC,EAAStuC,GAASZ,EAAOY,GAEjC,OAAOC,CACR,CA2vBmCy7C,CAAUntD,EAAQktD,EAAYtlC,GACjE,CAgOQwlC,CAAexlC,EAAQnkB,GAAMooD,GACrC,CAxQwBwB,CAAWrqD,GAASS,GAAKT,GAUhD,OA5vBF,SAAmB0O,EAAOk2C,GAIxB,IAHA,IAAIn2C,GAAS,EACThS,EAASiS,EAAQA,EAAMjS,OAAS,IAE3BgS,EAAQhS,IAC8B,IAAzCmoD,EAASl2C,EAAMD,GAAQA,KAK9B,CA0uBC67C,CAAUN,GAAShqD,GAAO,SAASuqD,EAAUxqD,GACvCiqD,IAEFO,EAAWvqD,EADXD,EAAMwqD,IAIR7C,GAAY1qD,EAAQ+C,EAAK8nD,GAAU0C,EAAUzC,EAAQC,EAAQC,EAAYjoD,EAAKC,EAAO4D,GACtF,IACM5G,CACR,CAqGD,SAASmsD,GAAiBtH,GACxB,IAAI7kD,EAAS,IAAI6kD,EAAY9pD,YAAY8pD,EAAYnxB,YAErD,OADA,IAAI7B,GAAW7xB,GAAQiiC,IAAI,IAAIpQ,GAAWgzB,IACnC7kD,CACR,CA6GD,SAAS4rD,GAAW14C,EAAQ85C,EAAOplC,EAAQojC,GACzCpjC,IAAWA,EAAS,CAAC,GAKrB,IAHA,IAAInW,GAAS,EACThS,EAASutD,EAAMvtD,SAEVgS,EAAQhS,GAAQ,CACvB,IAAIsD,EAAMiqD,EAAMv7C,GAEZ+7C,EAAWxC,EACXA,EAAWpjC,EAAO7kB,GAAMmQ,EAAOnQ,GAAMA,EAAK6kB,EAAQ1U,QAClDjR,EAEJyoD,GAAY9iC,EAAQ7kB,OAAkBd,IAAburD,EAAyBt6C,EAAOnQ,GAAOyqD,EACjE,CACD,OAAO5lC,CACR,CAiCD,SAAS6lC,GAAW7gD,EAAK7J,GACvB,IAqKiBC,EACbmJ,EAtKAiP,EAAOxO,EAAI69C,SACf,OAsKgB,WADZt+C,SADanJ,EApKAD,KAsKmB,UAARoJ,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVnJ,EACU,OAAVA,GAvKDoY,EAAmB,iBAAPrY,EAAkB,SAAW,QACzCqY,EAAKxO,GACV,CAUD,SAAS08C,GAAU1hC,EAAQ7kB,GACzB,IAAIC,EAj8BN,SAAkB4kB,EAAQ7kB,GACxB,OAAiB,MAAV6kB,OAAiB3lB,EAAY2lB,EAAO7kB,EAC5C,CA+7Ba2qD,CAAS9lC,EAAQ7kB,GAC7B,OAvOF,SAAsBC,GACpB,SAAKioD,GAASjoD,KAyYEmlD,EAzYiBnlD,EA0YxBylD,GAAeA,KAAcN,MAvYvBjH,GAAWl+C,IAAU+kD,EAAa/kD,GAAU6lD,GAAa7B,GACzDl7C,KAAK89C,GAAS5mD,IAqY/B,IAAkBmlD,CApYjB,CAiOQwF,CAAa3qD,GAASA,OAAQf,CACtC,CA9tBDmoD,GAAKzsD,UAAU+zB,MAnEf,WACEv2B,KAAKsvD,SAAWf,GAAeA,GAAa,MAAQ,CAAC,CACtD,EAkEDU,GAAKzsD,UAAL,OAtDA,SAAoBoF,GAClB,OAAO5H,KAAKkkB,IAAItc,WAAe5H,KAAKsvD,SAAS1nD,EAC9C,EAqDDqnD,GAAKzsD,UAAU2hB,IA1Cf,SAAiBvc,GACf,IAAIqY,EAAOjgB,KAAKsvD,SAChB,GAAIf,GAAc,CAChB,IAAI1pD,EAASob,EAAKrY,GAClB,OAAO/C,IAAWolD,OAAiBnjD,EAAYjC,CAChD,CACD,OAAO2C,GAAeC,KAAKwY,EAAMrY,GAAOqY,EAAKrY,QAAOd,CACrD,EAoCDmoD,GAAKzsD,UAAU0hB,IAzBf,SAAiBtc,GACf,IAAIqY,EAAOjgB,KAAKsvD,SAChB,OAAOf,QAA6BznD,IAAdmZ,EAAKrY,GAAqBJ,GAAeC,KAAKwY,EAAMrY,EAC3E,EAuBDqnD,GAAKzsD,UAAUskC,IAXf,SAAiBl/B,EAAKC,GAGpB,OAFW7H,KAAKsvD,SACX1nD,GAAQ2mD,SAA0BznD,IAAVe,EAAuBoiD,EAAiBpiD,EAC9D7H,IACR,EAmHDmvD,GAAU3sD,UAAU+zB,MAjFpB,WACEv2B,KAAKsvD,SAAW,EACjB,EAgFDH,GAAU3sD,UAAV,OArEA,SAAyBoF,GACvB,IAAIqY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAE/B,QAAI0O,EAAQ,IAIRA,GADY2J,EAAK3b,OAAS,EAE5B2b,EAAKtE,MAEL/Q,GAAOnD,KAAKwY,EAAM3J,EAAO,GAEpB,GACR,EAwDD64C,GAAU3sD,UAAU2hB,IA7CpB,SAAsBvc,GACpB,IAAIqY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAE/B,OAAO0O,EAAQ,OAAIxP,EAAYmZ,EAAK3J,GAAO,EAC5C,EAyCD64C,GAAU3sD,UAAU0hB,IA9BpB,SAAsBtc,GACpB,OAAO6nD,GAAazvD,KAAKsvD,SAAU1nD,IAAQ,CAC5C,EA6BDunD,GAAU3sD,UAAUskC,IAjBpB,SAAsBl/B,EAAKC,GACzB,IAAIoY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAO/B,OALI0O,EAAQ,EACV2J,EAAKre,KAAK,CAACgG,EAAKC,IAEhBoY,EAAK3J,GAAO,GAAKzO,EAEZ7H,IACR,EAiGDovD,GAAS5sD,UAAU+zB,MA/DnB,WACEv2B,KAAKsvD,SAAW,CACd,KAAQ,IAAIL,GACZ,IAAO,IAAKb,IAAOe,IACnB,OAAU,IAAIF,GAEjB,EA0DDG,GAAS5sD,UAAT,OA/CA,SAAwBoF,GACtB,OAAO0qD,GAAWtyD,KAAM4H,GAAjB,OAAgCA,EACxC,EA8CDwnD,GAAS5sD,UAAU2hB,IAnCnB,SAAqBvc,GACnB,OAAO0qD,GAAWtyD,KAAM4H,GAAKuc,IAAIvc,EAClC,EAkCDwnD,GAAS5sD,UAAU0hB,IAvBnB,SAAqBtc,GACnB,OAAO0qD,GAAWtyD,KAAM4H,GAAKsc,IAAItc,EAClC,EAsBDwnD,GAAS5sD,UAAUskC,IAVnB,SAAqBl/B,EAAKC,GAExB,OADAyqD,GAAWtyD,KAAM4H,GAAKk/B,IAAIl/B,EAAKC,GACxB7H,IACR,EA+FDqvD,GAAM7sD,UAAU+zB,MApEhB,WACEv2B,KAAKsvD,SAAW,IAAIH,EACrB,EAmEDE,GAAM7sD,UAAN,OAxDA,SAAqBoF,GACnB,OAAO5H,KAAKsvD,SAAL,OAAwB1nD,EAChC,EAuDDynD,GAAM7sD,UAAU2hB,IA5ChB,SAAkBvc,GAChB,OAAO5H,KAAKsvD,SAASnrC,IAAIvc,EAC1B,EA2CDynD,GAAM7sD,UAAU0hB,IAhChB,SAAkBtc,GAChB,OAAO5H,KAAKsvD,SAASprC,IAAItc,EAC1B,EA+BDynD,GAAM7sD,UAAUskC,IAnBhB,SAAkBl/B,EAAKC,GACrB,IAAI2oB,EAAQxwB,KAAKsvD,SACjB,GAAI9+B,aAAiB2+B,GAAW,CAC9B,IAAIsD,EAAQjiC,EAAM8+B,SAClB,IAAKlB,IAAQqE,EAAMnuD,OAASouD,IAE1B,OADAD,EAAM7wD,KAAK,CAACgG,EAAKC,IACV7H,KAETwwB,EAAQxwB,KAAKsvD,SAAW,IAAIF,GAASqD,EACtC,CAED,OADAjiC,EAAMsW,IAAIl/B,EAAKC,GACR7H,IACR,EAgcD,IAAI0wD,GAAa5C,GAAmBf,EAAQe,GAAkBruD,QAyhB9D,WACE,MAAO,EACR,EAlhBG0wD,GAtQJ,SAAoBtoD,GAClB,OAAO4lD,GAAehmD,KAAKI,EAC5B,EAwXD,SAAS8qD,GAAQ9qD,EAAOvD,GAEtB,SADAA,EAAmB,MAAVA,EAAiB4lD,EAAmB5lD,KAE1B,iBAATuD,GAAqBikD,EAASn7C,KAAK9I,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQvD,CAC5C,CAkCD,SAASgsD,GAAYzoD,GACnB,IAAIkpD,EAAOlpD,GAASA,EAAMjI,YAG1B,OAAOiI,KAFqB,mBAARkpD,GAAsBA,EAAKvuD,WAAc4qD,EAG9D,CASD,SAASqB,GAASzB,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOQ,EAAa/lD,KAAKulD,EAC1B,CAAC,MAAOp/C,GAAK,CACd,IACE,OAAQo/C,EAAO,EAChB,CAAC,MAAOp/C,GAAK,CACf,CACD,MAAO,EACR,CAwDD,SAASo7B,GAAGnhC,EAAO+qD,GACjB,OAAO/qD,IAAU+qD,GAAU/qD,GAAUA,GAAS+qD,GAAUA,CACzD,EAzOI1E,IAAYiC,GAAO,IAAIjC,GAAS,IAAI9G,YAAY,MAAQ8D,GACxDkD,IAAO+B,GAAO,IAAI/B,KAAQ5D,GAC1BpwC,IAAW+1C,GAAO/1C,GAAQC,YAAcswC,GACxC0D,IAAO8B,GAAO,IAAI9B,KAAQxD,GAC1ByD,IAAW6B,GAAO,IAAI7B,KAAYtD,KACrCmF,GAAS,SAAStoD,GAChB,IAAIhD,EAAS4oD,GAAehmD,KAAKI,GAC7BkpD,EAAOlsD,GAAU6lD,EAAY7iD,EAAMjI,iBAAckH,EACjD+rD,EAAa9B,EAAOtC,GAASsC,QAAQjqD,EAEzC,GAAI+rD,EACF,OAAQA,GACN,KAAKrE,GAAoB,OAAOtD,EAChC,KAAKwD,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAC/B,KAAKiE,GAAe,OAAO/D,EAC3B,KAAKgE,GAAmB,OAAO7D,EAGnC,OAAOnmD,CACR,GAsQH,IAAIoP,GAAUhJ,MAAMgJ,QA2BpB,SAAS6+C,GAAYjrD,GACnB,OAAgB,MAATA,GAqGT,SAAkBA,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAASqiD,CAC5C,CAxGyB6I,CAASlrD,EAAMvD,UAAYyhD,GAAWl+C,EAC/D,CAgDD,IAAImmD,GAAWD,IAsLf,WACE,OAAO,CACR,EArKD,SAAShI,GAAWl+C,GAGlB,IAAIqoD,EAAMJ,GAASjoD,GAAS4lD,GAAehmD,KAAKI,GAAS,GACzD,OAAOqoD,GAAO5F,GAAW4F,GAAO3F,CACjC,CA0DD,SAASuF,GAASjoD,GAChB,IAAImJ,SAAcnJ,EAClB,QAASA,IAAkB,UAARmJ,GAA4B,YAARA,EACxC,CA0DD,SAAS1I,GAAKmkB,GACZ,OAAOqmC,GAAYrmC,GAn7BrB,SAAuB5kB,EAAOmrD,GAG5B,IAAInuD,EAAUoP,GAAQpM,IAsrBxB,SAAqBA,GAEnB,OAmFF,SAA2BA,GACzB,OAmIF,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,CAC1B,CArIQorD,CAAaprD,IAAUirD,GAAYjrD,EAC3C,CArFQqrD,CAAkBrrD,IAAUL,GAAeC,KAAKI,EAAO,aAC1DgmD,GAAqBpmD,KAAKI,EAAO,WAAa4lD,GAAehmD,KAAKI,IAAUsiD,EACjF,CA1rBiCgJ,CAAYtrD,GAljB9C,SAAmB0K,EAAGk6C,GAIpB,IAHA,IAAIn2C,GAAS,EACTzR,EAASoG,MAAMsH,KAEV+D,EAAQ/D,GACf1N,EAAOyR,GAASm2C,EAASn2C,GAE3B,OAAOzR,CACR,CA2iBKuuD,CAAUvrD,EAAMvD,OAAQ2L,QACxB,GAEA3L,EAASO,EAAOP,OAChB+uD,IAAgB/uD,EAEpB,IAAK,IAAIsD,KAAOC,GACTmrD,IAAaxrD,GAAeC,KAAKI,EAAOD,IACvCyrD,IAAuB,UAAPzrD,GAAmB+qD,GAAQ/qD,EAAKtD,KACpDO,EAAOjD,KAAKgG,GAGhB,OAAO/C,CACR,CAk6B8ByuD,CAAc7mC,GAtuB7C,SAAkBA,GAChB,IAAK6jC,GAAY7jC,GACf,OAAOwhC,GAAWxhC,GAEpB,IAAI5nB,EAAS,GACb,IAAK,IAAI+C,KAAOnI,OAAOgtB,GACjBjlB,GAAeC,KAAKglB,EAAQ7kB,IAAe,eAAPA,GACtC/C,EAAOjD,KAAKgG,GAGhB,OAAO/C,CACR,CA2tBsD0uD,CAAS9mC,EAC/D,CAyCDxtB,EAAOD,QA9VP,SAAmB6I,GACjB,OAAO6nD,GAAU7nD,GAAO,GAAM,EAC/B,kBC72CD,IAGI2rD,EAAM,IAGNzI,EAAY,kBAGZ0I,EAAS,aAGTC,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAeh/C,SAGfm3C,EAA8B,iBAAVxU,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAO/3C,SAAWA,QAAU+3C,EAAAA,EAGhFyU,EAA0B,iBAAR7sD,MAAoBA,MAAQA,KAAKK,SAAWA,QAAUL,KAGxEN,EAAOktD,GAAcC,GAAYrpD,SAAS,cAATA,GAUjC6qD,EAPchuD,OAAO+C,UAOQgP,SAG7BsiD,EAAY7vD,KAAKD,IACjB+vD,EAAY9vD,KAAKF,IAkBjB7C,EAAM,WACR,OAAOpC,EAAKmC,KAAKC,KAClB,EA2MD,SAAS4uD,EAASjoD,GAChB,IAAImJ,SAAcnJ,EAClB,QAASA,IAAkB,UAARmJ,GAA4B,YAARA,EACxC,CA2ED,SAASgjD,EAASnsD,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,CAC1B,CAqBIorD,CAAaprD,IAAU4lD,EAAehmD,KAAKI,IAAUkjD,CACzD,CA6BKkJ,CAASpsD,GACX,OAAO2rD,EAET,GAAI1D,EAASjoD,GAAQ,CACnB,IAAI+qD,EAAgC,mBAAjB/qD,EAAMmnD,QAAwBnnD,EAAMmnD,UAAYnnD,EACnEA,EAAQioD,EAAS8C,GAAUA,EAAQ,GAAMA,CAC1C,CACD,GAAoB,iBAAT/qD,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAM5F,QAAQwxD,EAAQ,IAC9B,IAAIS,EAAWP,EAAWhjD,KAAK9I,GAC/B,OAAQqsD,GAAYN,EAAUjjD,KAAK9I,GAC/BgsD,EAAahsD,EAAMqD,MAAM,GAAIgpD,EAAW,EAAI,GAC3CR,EAAW/iD,KAAK9I,GAAS2rD,GAAO3rD,CACtC,CAED5I,EAAOD,QAtPP,SAAkBguD,EAAMmH,EAAMptD,GAC5B,IAAIqtD,EACAC,EACAC,EACAzvD,EACA0vD,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAAR5H,EACT,MAAM,IAAItxC,UArIQ,uBA+IpB,SAASm5C,EAAWC,GAClB,IAAIpyD,EAAO0xD,EACPp6C,EAAUq6C,EAKd,OAHAD,EAAWC,OAAWvtD,EACtB2tD,EAAiBK,EACjBjwD,EAASmoD,EAAKlqD,MAAMkX,EAAStX,EAE9B,CAmBD,SAASqyD,EAAaD,GACpB,IAAIE,EAAoBF,EAAON,EAM/B,YAAyB1tD,IAAjB0tD,GAA+BQ,GAAqBb,GACzDa,EAAoB,GAAOL,GANJG,EAAOL,GAM8BH,CAChE,CAED,SAASW,IACP,IAAIH,EAAO5zD,IACX,GAAI6zD,EAAaD,GACf,OAAOI,EAAaJ,GAGtBP,EAAU3qD,WAAWqrD,EAzBvB,SAAuBH,GACrB,IAEIjwD,EAASsvD,GAFWW,EAAON,GAI/B,OAAOG,EAASZ,EAAUlvD,EAAQyvD,GAHRQ,EAAOL,IAGkC5vD,CACpE,CAmBoCswD,CAAcL,GAClD,CAED,SAASI,EAAaJ,GAKpB,OAJAP,OAAUztD,EAIN8tD,GAAYR,EACPS,EAAWC,IAEpBV,EAAWC,OAAWvtD,EACfjC,EACR,CAcD,SAASuwD,IACP,IAAIN,EAAO5zD,IACPm0D,EAAaN,EAAaD,GAM9B,GAJAV,EAAW1rD,UACX2rD,EAAWr0D,KACXw0D,EAAeM,EAEXO,EAAY,CACd,QAAgBvuD,IAAZytD,EACF,OAvEN,SAAqBO,GAMnB,OAJAL,EAAiBK,EAEjBP,EAAU3qD,WAAWqrD,EAAcd,GAE5BO,EAAUG,EAAWC,GAAQjwD,CACrC,CAgEYywD,CAAYd,GAErB,GAAIG,EAGF,OADAJ,EAAU3qD,WAAWqrD,EAAcd,GAC5BU,EAAWL,EAErB,CAID,YAHgB1tD,IAAZytD,IACFA,EAAU3qD,WAAWqrD,EAAcd,IAE9BtvD,CACR,CAGD,OAxGAsvD,EAAOH,EAASG,IAAS,EACrBrE,EAAS/oD,KACX2tD,IAAY3tD,EAAQ2tD,QAEpBJ,GADAK,EAAS,YAAa5tD,GACH+sD,EAAUE,EAASjtD,EAAQutD,UAAY,EAAGH,GAAQG,EACrEM,EAAW,aAAc7tD,IAAYA,EAAQ6tD,SAAWA,GAiG1DQ,EAAUG,OAnCV,gBACkBzuD,IAAZytD,GACF5qD,aAAa4qD,GAEfE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAUztD,CAChD,EA8BDsuD,EAAUvrD,MA5BV,WACE,YAAmB/C,IAAZytD,EAAwB1vD,EAASqwD,EAAah0D,IACtD,EA2BMk0D,CACR,6BChPD,IAGInL,EAAiB,4BAGjBuL,EAAuB,EACvBC,EAAyB,EAGzBvL,EAAmB,iBAGnBC,EAAU,qBACVuL,EAAW,iBACXC,EAAW,yBACXvL,EAAU,mBACVC,EAAU,gBACVuL,EAAW,iBACXtL,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZoL,EAAU,gBACVnL,EAAY,kBACZC,EAAa,mBACbmL,EAAW,iBACXlL,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZgL,EAAe,qBACf/K,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBAkBdW,EAAe,8BAGfC,EAAW,mBAGXkK,EAAiB,CAAC,EACtBA,EAxBiB,yBAwBYA,EAvBZ,yBAwBjBA,EAvBc,sBAuBYA,EAtBX,uBAuBfA,EAtBe,uBAsBYA,EArBZ,uBAsBfA,EArBsB,8BAqBYA,EApBlB,wBAqBhBA,EApBgB,yBAoBY,EAC5BA,EAAe7L,GAAW6L,EAAeN,GACzCM,EAAe/K,GAAkB+K,EAAe5L,GAChD4L,EAAe9K,GAAe8K,EAAe3L,GAC7C2L,EAAeJ,GAAYI,EAAe1L,GAC1C0L,EAAexL,GAAUwL,EAAevL,GACxCuL,EAAetL,GAAasL,EAAepL,GAC3CoL,EAAenL,GAAUmL,EAAelL,GACxCkL,EAAehL,IAAc,EAG7B,IAAIgB,EAA8B,iBAAVxU,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAO/3C,SAAWA,QAAU+3C,EAAAA,EAGhFyU,EAA0B,iBAAR7sD,MAAoBA,MAAQA,KAAKK,SAAWA,QAAUL,KAGxEN,EAAOktD,GAAcC,GAAYrpD,SAAS,cAATA,GAGjCspD,EAA4CltD,IAAYA,EAAQipC,UAAYjpC,EAG5EmtD,EAAaD,GAA4CjtD,IAAWA,EAAOgpC,UAAYhpC,EAGvFmtD,EAAgBD,GAAcA,EAAWntD,UAAYktD,EAGrD+J,EAAc7J,GAAiBJ,EAAWnF,QAG1CqP,EAAY,WACd,IACE,OAAOD,GAAeA,EAAYE,SAAWF,EAAYE,QAAQ,OAClE,CAAC,MAAOvoD,GAAK,CACf,CAJe,GAOZwoD,EAAmBF,GAAYA,EAASG,aAuD5C,SAASC,EAAU//C,EAAOggD,GAIxB,IAHA,IAAIjgD,GAAS,EACThS,EAAkB,MAATiS,EAAgB,EAAIA,EAAMjS,SAE9BgS,EAAQhS,GACf,GAAIiyD,EAAUhgD,EAAMD,GAAQA,EAAOC,GACjC,OAAO,EAGX,OAAO,CACR,CAiED,SAASs2C,EAAWp7C,GAClB,IAAI6E,GAAS,EACTzR,EAASoG,MAAMwG,EAAIq7C,MAKvB,OAHAr7C,EAAIrO,SAAQ,SAASyE,EAAOD,GAC1B/C,IAASyR,GAAS,CAAC1O,EAAKC,EACzB,IACMhD,CACR,CAuBD,SAASooD,EAAWnmB,GAClB,IAAIxwB,GAAS,EACTzR,EAASoG,MAAM67B,EAAIgmB,MAKvB,OAHAhmB,EAAI1jC,SAAQ,SAASyE,GACnBhD,IAASyR,GAASzO,CACnB,IACMhD,CACR,CAGD,IAeM+vC,EAvCWoY,EAAM95C,EAwBnBg6C,EAAajiD,MAAMzI,UACnB2qD,EAAYvqD,SAASJ,UACrB4qD,EAAc3tD,OAAO+C,UAGrB6qD,EAAavuD,EAAK,sBAGlB0uD,EAAeL,EAAU37C,SAGzBhK,EAAiB4lD,EAAY5lD,eAG7B8lD,GACE1Y,EAAM,SAAS7I,KAAKshB,GAAcA,EAAW/kD,MAAQ+kD,EAAW/kD,KAAKilD,UAAY,KACvE,iBAAmB3Y,EAAO,GAQtC4hB,GAAuBpJ,EAAY57C,SAGnCk8C,GAAaz+C,OAAO,IACtBu+C,EAAa/lD,KAAKD,GAAgBvF,QA7PjB,sBA6PuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EsmD,GAAS6D,EAAgBttD,EAAKypD,YAASzhD,EACvCyU,GAASzc,EAAKyc,OACdmb,GAAa53B,EAAK43B,WAClBm3B,GAAuBT,EAAYS,qBACnCjjD,GAASsiD,EAAWtiD,OACpB6rD,GAAiBl7C,GAASA,GAAOse,iBAAc/yB,EAG/CgnD,GAAmBruD,OAAO0kC,sBAC1B4pB,GAAiBxF,GAASA,GAAOyF,cAAWlnD,EAC5CmnD,IAnEajB,EAmEQvtD,OAAO6I,KAnET4K,EAmEezT,OAlE7B,SAAS0J,GACd,OAAO6jD,EAAK95C,EAAU/J,GACvB,GAmEC+kD,GAAWC,GAAUrvD,EAAM,YAC3BsvD,GAAMD,GAAUrvD,EAAM,OACtBsb,GAAU+zC,GAAUrvD,EAAM,WAC1BuvD,GAAMF,GAAUrvD,EAAM,OACtBwvD,GAAUH,GAAUrvD,EAAM,WAC1ByvD,GAAeJ,GAAU1uD,OAAQ,UAGjC+uD,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAASr0C,IAC7Bw0C,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcvzC,GAASA,GAAO/Y,eAAYsE,EAC1CioD,GAAgBD,GAAcA,GAAYE,aAAUloD,EASxD,SAASmoD,GAAK9uC,GACZ,IAAI7J,GAAS,EACThS,EAAoB,MAAX6b,EAAkB,EAAIA,EAAQ7b,OAG3C,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CA6FD,SAASC,GAAUhvC,GACjB,IAAI7J,GAAS,EACThS,EAAoB,MAAX6b,EAAkB,EAAIA,EAAQ7b,OAG3C,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CA0GD,SAASE,GAASjvC,GAChB,IAAI7J,GAAS,EACThS,EAAoB,MAAX6b,EAAkB,EAAIA,EAAQ7b,OAG3C,IADAtE,KAAKu2B,UACIjgB,EAAQhS,GAAQ,CACvB,IAAI4qD,EAAQ/uC,EAAQ7J,GACpBtW,KAAK8mC,IAAIooB,EAAM,GAAIA,EAAM,GAC1B,CACF,CA6FD,SAASwH,GAAShhD,GAChB,IAAIY,GAAS,EACThS,EAAmB,MAAVoR,EAAiB,EAAIA,EAAOpR,OAGzC,IADAtE,KAAKsvD,SAAW,IAAIF,KACX94C,EAAQhS,GACftE,KAAK+vB,IAAIra,EAAOY,GAEnB,CAyCD,SAAS+4C,GAAMlvC,GACb,IAAIF,EAAOjgB,KAAKsvD,SAAW,IAAIH,GAAUhvC,GACzCngB,KAAK8sD,KAAO7sC,EAAK6sC,IAClB,CAqID,SAAS2C,GAAal5C,EAAO3O,GAE3B,IADA,IAAItD,EAASiS,EAAMjS,OACZA,KACL,GAAI0kC,GAAGzyB,EAAMjS,GAAQ,GAAIsD,GACvB,OAAOtD,EAGX,OAAQ,CACT,CAyBD,SAASqyD,GAAW9uD,GAClB,OAAa,MAATA,OACef,IAAVe,EAAsBkuD,EAAeF,EAEtCY,IAAkBA,MAAkBh3D,OAAOoI,GA0arD,SAAmBA,GACjB,IAAI+uD,EAAQpvD,EAAeC,KAAKI,EAAO4uD,IACnCvG,EAAMroD,EAAM4uD,IAEhB,IACE5uD,EAAM4uD,SAAkB3vD,EACxB,IAAI+vD,GAAW,CAChB,CAAC,MAAOjpD,GAAK,CAEd,IAAI/I,EAAS2xD,GAAqB/uD,KAAKI,GAQvC,OAPIgvD,IACED,EACF/uD,EAAM4uD,IAAkBvG,SAEjBroD,EAAM4uD,KAGV5xD,CACR,CA3bKiyD,CAAUjvD,GA4iBhB,SAAwBA,GACtB,OAAO2uD,GAAqB/uD,KAAKI,EAClC,CA7iBK4lD,CAAe5lD,EACpB,CASD,SAASkvD,GAAgBlvD,GACvB,OAAOorD,GAAaprD,IAAU8uD,GAAW9uD,IAAUsiD,CACpD,CAgBD,SAAS6M,GAAYnvD,EAAO+qD,EAAOqE,EAASpH,EAAYpkD,GACtD,OAAI5D,IAAU+qD,IAGD,MAAT/qD,GAA0B,MAAT+qD,IAAmBK,GAAaprD,KAAWorD,GAAaL,GACpE/qD,GAAUA,GAAS+qD,GAAUA,EAmBxC,SAAyBnmC,EAAQmmC,EAAOqE,EAASpH,EAAYqH,EAAWzrD,GACtE,IAAI0rD,EAAWljD,GAAQwY,GACnB2qC,EAAWnjD,GAAQ2+C,GACnByE,EAASF,EAAWzB,EAAWvF,GAAO1jC,GACtC6qC,EAASF,EAAW1B,EAAWvF,GAAOyC,GAKtC2E,GAHJF,EAASA,GAAUlN,EAAUO,EAAY2M,IAGhB3M,EACrB8M,GAHJF,EAASA,GAAUnN,EAAUO,EAAY4M,IAGhB5M,EACrB+M,EAAYJ,GAAUC,EAE1B,GAAIG,GAAazJ,GAASvhC,GAAS,CACjC,IAAKuhC,GAAS4E,GACZ,OAAO,EAETuE,GAAW,EACXI,GAAW,CACZ,CACD,GAAIE,IAAcF,EAEhB,OADA9rD,IAAUA,EAAQ,IAAI4jD,IACd8H,GAAYd,GAAa5pC,GAC7BirC,GAAYjrC,EAAQmmC,EAAOqE,EAASpH,EAAYqH,EAAWzrD,GAiKnE,SAAoBghB,EAAQmmC,EAAO1C,EAAK+G,EAASpH,EAAYqH,EAAWzrD,GACtE,OAAQykD,GACN,KAAKhF,EACH,GAAKz+B,EAAO8L,YAAcq6B,EAAMr6B,YAC3B9L,EAAOykC,YAAc0B,EAAM1B,WAC9B,OAAO,EAETzkC,EAASA,EAAO9L,OAChBiyC,EAAQA,EAAMjyC,OAEhB,KAAKsqC,EACH,QAAKx+B,EAAO8L,YAAcq6B,EAAMr6B,aAC3B2+B,EAAU,IAAIxgC,GAAWjK,GAAS,IAAIiK,GAAWk8B,KAKxD,KAAKxI,EACL,KAAKC,EACL,KAAKI,EAGH,OAAOzhB,IAAIvc,GAASmmC,GAEtB,KAAKgD,EACH,OAAOnpC,EAAOnf,MAAQslD,EAAMtlD,MAAQmf,EAAO3I,SAAW8uC,EAAM9uC,QAE9D,KAAK8mC,EACL,KAAKE,EAIH,OAAOr+B,GAAWmmC,EAAQ,GAE5B,KAAKpI,EACH,IAAImN,EAAU9K,EAEhB,KAAKhC,EACH,IAAI+M,EAAYX,EAAUzB,EAG1B,GAFAmC,IAAYA,EAAU1K,GAElBxgC,EAAOqgC,MAAQ8F,EAAM9F,OAAS8K,EAChC,OAAO,EAGT,IAAIhG,EAAUnmD,EAAM0Y,IAAIsI,GACxB,GAAImlC,EACF,OAAOA,GAAWgB,EAEpBqE,GAAWxB,EAGXhqD,EAAMq7B,IAAIra,EAAQmmC,GAClB,IAAI/tD,EAAS6yD,GAAYC,EAAQlrC,GAASkrC,EAAQ/E,GAAQqE,EAASpH,EAAYqH,EAAWzrD,GAE1F,OADAA,EAAK,OAAWghB,GACT5nB,EAET,KAAKkmD,EACH,GAAIgE,GACF,OAAOA,GAActnD,KAAKglB,IAAWsiC,GAActnD,KAAKmrD,GAG9D,OAAO,CACR,CA/NOiF,CAAWprC,EAAQmmC,EAAOyE,EAAQJ,EAASpH,EAAYqH,EAAWzrD,GAExE,KAAMwrD,EAAUzB,GAAuB,CACrC,IAAIsC,EAAeP,GAAY/vD,EAAeC,KAAKglB,EAAQ,eACvDsrC,EAAeP,GAAYhwD,EAAeC,KAAKmrD,EAAO,eAE1D,GAAIkF,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAerrC,EAAO5kB,QAAU4kB,EAC/CwrC,EAAeF,EAAenF,EAAM/qD,QAAU+qD,EAGlD,OADAnnD,IAAUA,EAAQ,IAAI4jD,IACf6H,EAAUc,EAAcC,EAAchB,EAASpH,EAAYpkD,EACnE,CACF,CACD,QAAKgsD,IAGLhsD,IAAUA,EAAQ,IAAI4jD,IA6NxB,SAAsB5iC,EAAQmmC,EAAOqE,EAASpH,EAAYqH,EAAWzrD,GACnE,IAAImsD,EAAYX,EAAUzB,EACtB0C,EAAWhG,GAAWzlC,GACtB0rC,EAAYD,EAAS5zD,OAIzB,GAAI6zD,GAHWjG,GAAWU,GACDtuD,SAEMszD,EAC7B,OAAO,EAGT,IADA,IAAIthD,EAAQ6hD,EACL7hD,KAAS,CACd,IAAI1O,EAAMswD,EAAS5hD,GACnB,KAAMshD,EAAYhwD,KAAOgrD,EAAQprD,EAAeC,KAAKmrD,EAAOhrD,IAC1D,OAAO,CAEV,CAED,IAAIgqD,EAAUnmD,EAAM0Y,IAAIsI,GACxB,GAAImlC,GAAWnmD,EAAM0Y,IAAIyuC,GACvB,OAAOhB,GAAWgB,EAEpB,IAAI/tD,GAAS,EACb4G,EAAMq7B,IAAIra,EAAQmmC,GAClBnnD,EAAMq7B,IAAI8rB,EAAOnmC,GAGjB,IADA,IAAI2rC,EAAWR,IACNthD,EAAQ6hD,GAAW,CAE1B,IAAI3I,EAAW/iC,EADf7kB,EAAMswD,EAAS5hD,IAEX+hD,EAAWzF,EAAMhrD,GAErB,GAAIioD,EACF,IAAIyI,EAAWV,EACX/H,EAAWwI,EAAU7I,EAAU5nD,EAAKgrD,EAAOnmC,EAAQhhB,GACnDokD,EAAWL,EAAU6I,EAAUzwD,EAAK6kB,EAAQmmC,EAAOnnD,GAGzD,UAAmB3E,IAAbwxD,EACG9I,IAAa6I,GAAYnB,EAAU1H,EAAU6I,EAAUpB,EAASpH,EAAYpkD,GAC7E6sD,GACD,CACLzzD,GAAS,EACT,KACD,CACDuzD,IAAaA,EAAkB,eAAPxwD,EACzB,CACD,GAAI/C,IAAWuzD,EAAU,CACvB,IAAIG,EAAU9rC,EAAO7sB,YACjB44D,EAAU5F,EAAMhzD,YAGhB24D,GAAWC,KACV,gBAAiB/rC,MAAU,gBAAiBmmC,IACzB,mBAAX2F,GAAyBA,aAAmBA,GACjC,mBAAXC,GAAyBA,aAAmBA,IACvD3zD,GAAS,EAEZ,CAGD,OAFA4G,EAAK,OAAWghB,GAChBhhB,EAAK,OAAWmnD,GACT/tD,CACR,CA1RQ4zD,CAAahsC,EAAQmmC,EAAOqE,EAASpH,EAAYqH,EAAWzrD,GACpE,CA5DQitD,CAAgB7wD,EAAO+qD,EAAOqE,EAASpH,EAAYmH,GAAavrD,GACxE,CA0HD,SAASisD,GAAYnhD,EAAOq8C,EAAOqE,EAASpH,EAAYqH,EAAWzrD,GACjE,IAAImsD,EAAYX,EAAUzB,EACtBmD,EAAYpiD,EAAMjS,OAClBs0D,EAAYhG,EAAMtuD,OAEtB,GAAIq0D,GAAaC,KAAehB,GAAagB,EAAYD,GACvD,OAAO,EAGT,IAAI/G,EAAUnmD,EAAM0Y,IAAI5N,GACxB,GAAIq7C,GAAWnmD,EAAM0Y,IAAIyuC,GACvB,OAAOhB,GAAWgB,EAEpB,IAAIt8C,GAAS,EACTzR,GAAS,EACTg0D,EAAQ5B,EAAUxB,EAA0B,IAAIiB,QAAW5vD,EAM/D,IAJA2E,EAAMq7B,IAAIvwB,EAAOq8C,GACjBnnD,EAAMq7B,IAAI8rB,EAAOr8C,KAGRD,EAAQqiD,GAAW,CAC1B,IAAIG,EAAWviD,EAAMD,GACjB+hD,EAAWzF,EAAMt8C,GAErB,GAAIu5C,EACF,IAAIyI,EAAWV,EACX/H,EAAWwI,EAAUS,EAAUxiD,EAAOs8C,EAAOr8C,EAAO9K,GACpDokD,EAAWiJ,EAAUT,EAAU/hD,EAAOC,EAAOq8C,EAAOnnD,GAE1D,QAAiB3E,IAAbwxD,EAAwB,CAC1B,GAAIA,EACF,SAEFzzD,GAAS,EACT,KACD,CAED,GAAIg0D,GACF,IAAKvC,EAAU1D,GAAO,SAASyF,EAAUU,GACnC,GA72BanxD,EA62BOmxD,GAANF,EA52BX30C,IAAItc,KA62BFkxD,IAAaT,GAAYnB,EAAU4B,EAAUT,EAAUpB,EAASpH,EAAYpkD,IAC/E,OAAOotD,EAAKj3D,KAAKm3D,GA/2B/B,IAAyBnxD,CAi3Bd,IAAG,CACN/C,GAAS,EACT,KACD,OACI,GACDi0D,IAAaT,IACXnB,EAAU4B,EAAUT,EAAUpB,EAASpH,EAAYpkD,GACpD,CACL5G,GAAS,EACT,KACD,CACF,CAGD,OAFA4G,EAAK,OAAW8K,GAChB9K,EAAK,OAAWmnD,GACT/tD,CACR,CAwKD,SAASqtD,GAAWzlC,GAClB,OApZF,SAAwBA,EAAQqlC,EAAUC,GACxC,IAAIltD,EAASitD,EAASrlC,GACtB,OAAOxY,GAAQwY,GAAU5nB,EAhuB3B,SAAmB0R,EAAOb,GAKxB,IAJA,IAAIY,GAAS,EACThS,EAASoR,EAAOpR,OAChBsgD,EAASruC,EAAMjS,SAEVgS,EAAQhS,GACfiS,EAAMquC,EAAStuC,GAASZ,EAAOY,GAEjC,OAAOC,CACR,CAutBmCy7C,CAAUntD,EAAQktD,EAAYtlC,GACjE,CAiZQwlC,CAAexlC,EAAQnkB,GAAMooD,GACrC,CAUD,SAAS4B,GAAW7gD,EAAK7J,GACvB,IAsHiBC,EACbmJ,EAvHAiP,EAAOxO,EAAI69C,SACf,OAuHgB,WADZt+C,SADanJ,EArHAD,KAuHmB,UAARoJ,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVnJ,EACU,OAAVA,GAxHDoY,EAAmB,iBAAPrY,EAAkB,SAAW,QACzCqY,EAAKxO,GACV,CAUD,SAAS08C,GAAU1hC,EAAQ7kB,GACzB,IAAIC,EAxjCN,SAAkB4kB,EAAQ7kB,GACxB,OAAiB,MAAV6kB,OAAiB3lB,EAAY2lB,EAAO7kB,EAC5C,CAsjCa2qD,CAAS9lC,EAAQ7kB,GAC7B,OArTF,SAAsBC,GACpB,SAAKioD,GAASjoD,IAwahB,SAAkBmlD,GAChB,QAASM,GAAeA,KAAcN,CACvC,CA1ayBgM,CAASnxD,MAGnBk+C,GAAWl+C,GAAS6lD,GAAa7B,GAChCl7C,KAAK89C,GAAS5mD,GAC9B,CA+SQ2qD,CAAa3qD,GAASA,OAAQf,CACtC,CAr2BDmoD,GAAKzsD,UAAU+zB,MAvEf,WACEv2B,KAAKsvD,SAAWf,GAAeA,GAAa,MAAQ,CAAC,EACrDvuD,KAAK8sD,KAAO,CACb,EAqEDmC,GAAKzsD,UAAL,OAzDA,SAAoBoF,GAClB,IAAI/C,EAAS7E,KAAKkkB,IAAItc,WAAe5H,KAAKsvD,SAAS1nD,GAEnD,OADA5H,KAAK8sD,MAAQjoD,EAAS,EAAI,EACnBA,CACR,EAsDDoqD,GAAKzsD,UAAU2hB,IA3Cf,SAAiBvc,GACf,IAAIqY,EAAOjgB,KAAKsvD,SAChB,GAAIf,GAAc,CAChB,IAAI1pD,EAASob,EAAKrY,GAClB,OAAO/C,IAAWolD,OAAiBnjD,EAAYjC,CAChD,CACD,OAAO2C,EAAeC,KAAKwY,EAAMrY,GAAOqY,EAAKrY,QAAOd,CACrD,EAqCDmoD,GAAKzsD,UAAU0hB,IA1Bf,SAAiBtc,GACf,IAAIqY,EAAOjgB,KAAKsvD,SAChB,OAAOf,QAA8BznD,IAAdmZ,EAAKrY,GAAsBJ,EAAeC,KAAKwY,EAAMrY,EAC7E,EAwBDqnD,GAAKzsD,UAAUskC,IAZf,SAAiBl/B,EAAKC,GACpB,IAAIoY,EAAOjgB,KAAKsvD,SAGhB,OAFAtvD,KAAK8sD,MAAQ9sD,KAAKkkB,IAAItc,GAAO,EAAI,EACjCqY,EAAKrY,GAAQ2mD,SAA0BznD,IAAVe,EAAuBoiD,EAAiBpiD,EAC9D7H,IACR,EAsHDmvD,GAAU3sD,UAAU+zB,MApFpB,WACEv2B,KAAKsvD,SAAW,GAChBtvD,KAAK8sD,KAAO,CACb,EAkFDqC,GAAU3sD,UAAV,OAvEA,SAAyBoF,GACvB,IAAIqY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAE/B,QAAI0O,EAAQ,IAIRA,GADY2J,EAAK3b,OAAS,EAE5B2b,EAAKtE,MAEL/Q,GAAOnD,KAAKwY,EAAM3J,EAAO,KAEzBtW,KAAK8sD,KACA,GACR,EAyDDqC,GAAU3sD,UAAU2hB,IA9CpB,SAAsBvc,GACpB,IAAIqY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAE/B,OAAO0O,EAAQ,OAAIxP,EAAYmZ,EAAK3J,GAAO,EAC5C,EA0CD64C,GAAU3sD,UAAU0hB,IA/BpB,SAAsBtc,GACpB,OAAO6nD,GAAazvD,KAAKsvD,SAAU1nD,IAAQ,CAC5C,EA8BDunD,GAAU3sD,UAAUskC,IAlBpB,SAAsBl/B,EAAKC,GACzB,IAAIoY,EAAOjgB,KAAKsvD,SACZh5C,EAAQm5C,GAAaxvC,EAAMrY,GAQ/B,OANI0O,EAAQ,KACRtW,KAAK8sD,KACP7sC,EAAKre,KAAK,CAACgG,EAAKC,KAEhBoY,EAAK3J,GAAO,GAAKzO,EAEZ7H,IACR,EAwGDovD,GAAS5sD,UAAU+zB,MAtEnB,WACEv2B,KAAK8sD,KAAO,EACZ9sD,KAAKsvD,SAAW,CACd,KAAQ,IAAIL,GACZ,IAAO,IAAKb,IAAOe,IACnB,OAAU,IAAIF,GAEjB,EAgEDG,GAAS5sD,UAAT,OArDA,SAAwBoF,GACtB,IAAI/C,EAASytD,GAAWtyD,KAAM4H,GAAjB,OAAgCA,GAE7C,OADA5H,KAAK8sD,MAAQjoD,EAAS,EAAI,EACnBA,CACR,EAkDDuqD,GAAS5sD,UAAU2hB,IAvCnB,SAAqBvc,GACnB,OAAO0qD,GAAWtyD,KAAM4H,GAAKuc,IAAIvc,EAClC,EAsCDwnD,GAAS5sD,UAAU0hB,IA3BnB,SAAqBtc,GACnB,OAAO0qD,GAAWtyD,KAAM4H,GAAKsc,IAAItc,EAClC,EA0BDwnD,GAAS5sD,UAAUskC,IAdnB,SAAqBl/B,EAAKC,GACxB,IAAIoY,EAAOqyC,GAAWtyD,KAAM4H,GACxBklD,EAAO7sC,EAAK6sC,KAIhB,OAFA7sC,EAAK6mB,IAAIl/B,EAAKC,GACd7H,KAAK8sD,MAAQ7sC,EAAK6sC,MAAQA,EAAO,EAAI,EAC9B9sD,IACR,EAwDD02D,GAASl0D,UAAUutB,IAAM2mC,GAASl0D,UAAUZ,KAnB5C,SAAqBiG,GAEnB,OADA7H,KAAKsvD,SAASxoB,IAAIj/B,EAAOoiD,GAClBjqD,IACR,EAiBD02D,GAASl0D,UAAU0hB,IANnB,SAAqBrc,GACnB,OAAO7H,KAAKsvD,SAASprC,IAAIrc,EAC1B,EAoGDwnD,GAAM7sD,UAAU+zB,MA3EhB,WACEv2B,KAAKsvD,SAAW,IAAIH,GACpBnvD,KAAK8sD,KAAO,CACb,EAyEDuC,GAAM7sD,UAAN,OA9DA,SAAqBoF,GACnB,IAAIqY,EAAOjgB,KAAKsvD,SACZzqD,EAASob,EAAI,OAAWrY,GAG5B,OADA5H,KAAK8sD,KAAO7sC,EAAK6sC,KACVjoD,CACR,EAyDDwqD,GAAM7sD,UAAU2hB,IA9ChB,SAAkBvc,GAChB,OAAO5H,KAAKsvD,SAASnrC,IAAIvc,EAC1B,EA6CDynD,GAAM7sD,UAAU0hB,IAlChB,SAAkBtc,GAChB,OAAO5H,KAAKsvD,SAASprC,IAAItc,EAC1B,EAiCDynD,GAAM7sD,UAAUskC,IArBhB,SAAkBl/B,EAAKC,GACrB,IAAIoY,EAAOjgB,KAAKsvD,SAChB,GAAIrvC,aAAgBkvC,GAAW,CAC7B,IAAIsD,EAAQxyC,EAAKqvC,SACjB,IAAKlB,IAAQqE,EAAMnuD,OAASouD,IAG1B,OAFAD,EAAM7wD,KAAK,CAACgG,EAAKC,IACjB7H,KAAK8sD,OAAS7sC,EAAK6sC,KACZ9sD,KAETigB,EAAOjgB,KAAKsvD,SAAW,IAAIF,GAASqD,EACrC,CAGD,OAFAxyC,EAAK6mB,IAAIl/B,EAAKC,GACd7H,KAAK8sD,KAAO7sC,EAAK6sC,KACV9sD,IACR,EA8hBD,IAAI0wD,GAAc5C,GAA+B,SAASrhC,GACxD,OAAc,MAAVA,EACK,IAETA,EAAShtB,OAAOgtB,GA9sClB,SAAqBlW,EAAOggD,GAM1B,IALA,IAAIjgD,GAAS,EACThS,EAAkB,MAATiS,EAAgB,EAAIA,EAAMjS,OACnC20D,EAAW,EACXp0D,EAAS,KAEJyR,EAAQhS,GAAQ,CACvB,IAAIuD,EAAQ0O,EAAMD,GAwsCkCw6C,EAvsCtCjpD,EAwsCPgmD,GAAqBpmD,KAAKglB,EAAQqkC,KAvsCvCjsD,EAAOo0D,KAAcpxD,EAExB,CAosC4C,IAASipD,EAnsCtD,OAAOjsD,CACR,CAksCQq0D,CAAYpL,GAAiBrhC,IAGrC,EAodD,WACE,MAAO,EACR,EA7cG0jC,GAASwG,GAkCb,SAAShE,GAAQ9qD,EAAOvD,GAEtB,SADAA,EAAmB,MAAVA,EAAiB4lD,EAAmB5lD,KAE1B,iBAATuD,GAAqBikD,EAASn7C,KAAK9I,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQvD,CAC5C,CA2DD,SAASmqD,GAASzB,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOQ,EAAa/lD,KAAKulD,EAC1B,CAAC,MAAOp/C,GAAK,CACd,IACE,OAAQo/C,EAAO,EAChB,CAAC,MAAOp/C,GAAK,CACf,CACD,MAAO,EACR,CAkCD,SAASo7B,GAAGnhC,EAAO+qD,GACjB,OAAO/qD,IAAU+qD,GAAU/qD,GAAUA,GAAS+qD,GAAUA,CACzD,EA7II1E,IAAYiC,GAAO,IAAIjC,GAAS,IAAI9G,YAAY,MAAQ8D,GACxDkD,IAAO+B,GAAO,IAAI/B,KAAQ5D,GAC1BpwC,IAAW+1C,GAAO/1C,GAAQC,YAAcswC,GACxC0D,IAAO8B,GAAO,IAAI9B,KAAQxD,GAC1ByD,IAAW6B,GAAO,IAAI7B,KAAYtD,KACrCmF,GAAS,SAAStoD,GAChB,IAAIhD,EAAS8xD,GAAW9uD,GACpBkpD,EAAOlsD,GAAU6lD,EAAY7iD,EAAMjI,iBAAckH,EACjD+rD,EAAa9B,EAAOtC,GAASsC,GAAQ,GAEzC,GAAI8B,EACF,OAAQA,GACN,KAAKrE,GAAoB,OAAOtD,EAChC,KAAKwD,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAC/B,KAAKiE,GAAe,OAAO/D,EAC3B,KAAKgE,GAAmB,OAAO7D,EAGnC,OAAOnmD,CACR,GA6IH,IAAIsuD,GAAc4D,GAAgB,WAAa,OAAOruD,SAAY,CAAhC,IAAsCquD,GAAkB,SAASlvD,GACjG,OAAOorD,GAAaprD,IAAUL,EAAeC,KAAKI,EAAO,YACtDgmD,GAAqBpmD,KAAKI,EAAO,SACrC,EAyBGoM,GAAUhJ,MAAMgJ,QAgDhB+5C,GAAWD,IA4Of,WACE,OAAO,CACR,EA3LD,SAAShI,GAAWl+C,GAClB,IAAKioD,GAASjoD,GACZ,OAAO,EAIT,IAAIqoD,EAAMyG,GAAW9uD,GACrB,OAAOqoD,GAAO5F,GAAW4F,GAAO3F,GAAU2F,GAAOyF,GAAYzF,GAAO4F,CACrE,CA4BD,SAAS/C,GAASlrD,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAASqiD,CAC5C,CA2BD,SAAS4F,GAASjoD,GAChB,IAAImJ,SAAcnJ,EAClB,OAAgB,MAATA,IAA0B,UAARmJ,GAA4B,YAARA,EAC9C,CA0BD,SAASiiD,GAAaprD,GACpB,OAAgB,MAATA,GAAiC,iBAATA,CAChC,CAmBD,IAAIwuD,GAAeD,EAhiDnB,SAAmBpJ,GACjB,OAAO,SAASnlD,GACd,OAAOmlD,EAAKnlD,EACb,CACF,CA4hDqCsxD,CAAU/C,GAnvBhD,SAA0BvuD,GACxB,OAAOorD,GAAaprD,IAClBkrD,GAASlrD,EAAMvD,WAAa0xD,EAAeW,GAAW9uD,GACzD,EA8wBD,SAASS,GAAKmkB,GACZ,OA1NgB,OADG5kB,EA2NA4kB,IA1NKsmC,GAASlrD,EAAMvD,UAAYyhD,GAAWl+C,GA1vBhE,SAAuBA,EAAOmrD,GAC5B,IAAIjD,EAAQ97C,GAAQpM,GAChBuxD,GAASrJ,GAASoD,GAAYtrD,GAC9BwxD,GAAUtJ,IAAUqJ,GAASpL,GAASnmD,GACtCyxD,GAAUvJ,IAAUqJ,IAAUC,GAAUhD,GAAaxuD,GACrDwrD,EAActD,GAASqJ,GAASC,GAAUC,EAC1Cz0D,EAASwuD,EAloBf,SAAmB9gD,EAAGk6C,GAIpB,IAHA,IAAIn2C,GAAS,EACTzR,EAASoG,MAAMsH,KAEV+D,EAAQ/D,GACf1N,EAAOyR,GAASm2C,EAASn2C,GAE3B,OAAOzR,CACR,CA0nB4BuuD,CAAUvrD,EAAMvD,OAAQ2L,QAAU,GACzD3L,EAASO,EAAOP,OAEpB,IAAK,IAAIsD,KAAOC,GACTmrD,IAAaxrD,EAAeC,KAAKI,EAAOD,IACvCyrD,IAEQ,UAAPzrD,GAECyxD,IAAkB,UAAPzxD,GAA0B,UAAPA,IAE9B0xD,IAAkB,UAAP1xD,GAA0B,cAAPA,GAA8B,cAAPA,IAEtD+qD,GAAQ/qD,EAAKtD,KAElBO,EAAOjD,KAAKgG,GAGhB,OAAO/C,CACR,CA27B8ByuD,CAAc7mC,GAtwB7C,SAAkBA,GAChB,GAyZIskC,GADelpD,EAxZF4kB,IAyZG5kB,EAAMjI,YAGnBiI,KAFqB,mBAARkpD,GAAsBA,EAAKvuD,WAAc4qD,GAzZ3D,OAAOa,GAAWxhC,GAuZtB,IAAqB5kB,EACfkpD,EAtZAlsD,EAAS,GACb,IAAK,IAAI+C,KAAOnI,OAAOgtB,GACjBjlB,EAAeC,KAAKglB,EAAQ7kB,IAAe,eAAPA,GACtC/C,EAAOjD,KAAKgG,GAGhB,OAAO/C,CACR,CA2vBsD0uD,CAAS9mC,GA3NhE,IAAqB5kB,CA4NpB,CAyCD5I,EAAOD,QAlNP,SAAiB6I,EAAO+qD,GACtB,OAAOoE,GAAYnvD,EAAO+qD,EAC3B,YCvmDD,IAAIxlD,EAAUnO,EAAOD,QAAU,CAC7BqO,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAEFF,KAAM,SACNC,IAAK,wCACLhH,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEkH,OAAQ,wBAGVC,EAAG,CAAC,CAAEJ,KAAM,SACZxI,EAAG,CAAC,CAAEwI,KAAM,gBACZK,EAAG,CAAC,CAAEL,KAAM,QACZM,EAAG,CAAC,CAAEN,KAAM,UACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,cACZS,EAAG,CAAC,CAAET,KAAM,YAEZtB,EAAG,CAAC,CACFsB,KAAM,SACNC,IAAK,eACLhH,MAAO,CAAC,QAAS,QACjBkH,OAAQ,UAEVO,EAAG,CAAC,CACFV,KAAM,aACNC,IAAK,mBACLhH,MAAO,CAAC,UAAW,MACnBkH,OAAQ,eAEVQ,EAAG,CAAC,CACFrM,KAAM,YACN2L,IAAK,4BACLhH,MAAO,CAAC,OAAQ,SAChBkH,OAAQ,UAEV9B,EAAG,CAAC,CAGF4B,IAAK,mCACLhH,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCkH,OAAQ,gBAEVS,EAAG,CACD,CACEtM,KAAM,MACN2L,IAAK,0DACLhH,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCkH,OAAQ,SAAUD,GAChB,OAAQA,EAAEW,SACR,qBACAX,EAAEY,KACF,kBACA,cACH,GAEH,CAEExM,KAAM,OACN2L,IAAK,wBACLhH,MAAO,CAAC,UAAW,UACnBkH,OAAQ,cAEV,CACEH,KAAM,UACNC,IAAK,gBACLE,OAAQ,cAEV,CACEH,KAAM,OACNC,IAAK,sCACLhH,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCkH,OAAQ,SAAUD,GAChB,OAAqB,MAAbA,EAAEa,QACR,qBACA,SACH,GAEH,CACEzM,KAAM,eACN2L,IAAK,kCACLhH,MAAO,CAAC,UAAW,SACnBkH,OAAQ,yBAEV,CACE7L,KAAM,SACN2L,IAAK,6CACLhH,MAAO,CAAC,UAAW,OAAQ,WAC3BkH,OAAQ,SAAUD,GAChB,OAAqB,MAAbA,EAAEc,QACR,mBACA,eACH,GAEH,CAEE1M,KAAM,MACN2L,IAAK,6CACLhH,MAAO,CAAC,QAAS,YAAa,MAAO,UACrCkH,OAAQ,SAAUD,GAChB,MAAO,aAAeA,EAAEe,UAAY,MAAQ,MAAQ,OAASf,EAAEgB,OAAS,MAAQ,GACjF,GAEH,CACE5M,KAAM,SACN2L,IAAK,0CACLhH,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCkH,OAAQ,SAAUD,GAChB,OAA2B,MAAnBA,EAAEiB,cACR,qBACA,iBACH,GAEH,CACEnB,KAAM,QACNC,IAAK,eACLE,OAAQ,YAEV,CACEH,KAAM,MACNC,IAAK,gBACLE,OAAQ,UAEV,CACEH,KAAM,OACNC,IAAK,aACLE,OAAQ,WAEV,CACEH,KAAM,QACNC,IAAK,eACLE,OAAQ,YAEV,CACEH,KAAM,WACNC,IAAK,kBACLE,OAAQ,eAEV,CACEH,KAAM,YACNC,IAAK,0CAEP,CACED,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,WACNC,IAAK,mBACLE,OAAQ,gBAEV,CACEH,KAAM,SACNC,IAAK,iBACLE,OAAQ,cAEV,CACEH,KAAM,cACNC,IAAK,2BACLhH,MAAO,CAAC,OAAQ,QAChBkH,OAAQ,qBAEV,CAKE7L,KAAK,aACL2L,IAAK,+KACLhH,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IkH,OAAQ,SAAUD,GAChB,IAAIkB,EAAM,qCAaV,OAXAA,GAAmB,MAAXlB,EAAEmB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAblB,EAAEoB,QAAmB,cAAgB,KAEzB,MAAhBpB,EAAEqB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBlB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,KAE3D,GAEH,CACEF,KAAM,kBACNC,IAAK,wBAEP,CACED,KAAM,mBACNC,IAAK,0BACLE,OAAQ,wBAEV,CACEH,KAAM,aACNC,IAAK,qBACLE,OAAQ,kBAEV,CACE7L,KAAM,QACN2L,IAAK,iCACLhH,MAAO,CAAC,KAAM,YAAa,SAC3BkH,OAAQ,SAAUD,GAChB,IAAIkB,EAAM,UAOV,OANmB,MAAflB,EAAEsB,YACJJ,GAAO,MACQ,MAAXlB,EAAE3F,QACJ6G,GAAO,QAGJA,CACR,GAEH,CAEE9M,KAAM,aAEN2L,IAAK,mEACLhH,MAAO,CAAC,YAAa,SACrBkH,OAAQ,oBAEV,CACEH,KAAM,eACNC,IAAK,gCACLhH,MAAO,CAAC,WAAY,SACpBkH,OAAQ,wBAEV,CACE7L,KAAM,SACN2L,IAAK,oBACLhH,MAAO,CAAC,OAAQ,QAChBkH,OAAQ,eAEV,CACEH,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,YACNC,IAAK,iBAEP,CACED,KAAM,UACNC,IAAK,uCACLhH,MAAO,CAAC,gBAAiB,MAAO,kBAChCkH,OAAQ,SAAUD,GAChB,OAA4B,MAApBA,EAAEuB,eACR,mBACA,eACH,GAEH,CACEzB,KAAM,cACNC,IAAK,0BACLE,OAAQ,oBAEV,CACE7L,KAAM,OACN2L,IAAK,sCACLhH,MAAO,CAAC,KAAM,YAAa,UAC3BkH,OAAQ,SAAUD,GAChB,OAAQA,EAAEwB,OAAU,eAAiB,WACtC,GAEH,CAGEpN,KAAM,aACN2L,IAAK,IAAI0B,OAEP,wKAMF1I,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCkH,OAAQ,SAAUD,GAChB,MAAO,sBAAwBA,EAAE0B,KAAO,SAAW,GACpD,GAEH,CAEE5B,KAAM,YACNC,IAAK,IAAI0B,OAEP,2FAQF1I,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCkH,OAAQ,SAAUD,GAChB,MAAO,mBAAqBA,EAAE0B,KAAO,SAAW,GACjD,GAEH,CAIE5B,KAAM,eACNC,IAAK,kCACLhH,MAAO,CAAC,SACRkH,OAAQ,iBAEV,CAGEH,KAAM,YACNC,IAAK,8BACLE,OAAQ,gBAEV,CACE7L,KAAM,UACN2E,MAAO,CAAC,YAMd9G,OAAO6I,KAAK8E,GAAShK,SAAQ,SAAUwE,GAC1BwF,EAAQxF,GACdxE,SAAQ,SAAU4D,GAChBA,EAAIuG,MACPvG,EAAIuG,IAAM,QAEPvG,EAAIyG,SACPzG,EAAIyG,OAAS,KAEhB,GACF,oBCnVD,IAAI8B,EAASjQ,EAAQ,MACjBkQ,EAASlQ,EAAQ,MAErBN,EAAQyQ,MAAQD,EAChBxQ,EAAQ0H,MAAQ6I,EAAO7I,MACvB1H,EAAQ2Q,gBAAkBJ,EAAOI,gBACjC3Q,EAAQ0Q,YAAcH,EAAOG,YAC7B1Q,EAAQ4Q,cAAgBL,EAAOK,cAC/B5Q,EAAQ6Q,sBAAwBN,EAAOM,sBACvC7Q,EAAQ8Q,qBAAuBP,EAAOO,qBACtC9Q,EAAQ+Q,yBAA2BR,EAAOQ,yCCV1C,IAAIC,EAAa,SAAU3C,GACzB,OAAO4C,OAAOC,OAAO7C,MAAQA,EAAI6C,OAAO7C,GAAKA,CAC9C,EAeG8C,EAAW,SAAUnJ,EAAKoJ,EAAUC,GACtC,IAAIC,EAAatJ,EAAIsG,MAAQtG,EAAIT,MAC7BS,EAAIpF,OAASwO,EAASpJ,EAAIpF,MAC5BwO,EAASpJ,EAAIpF,MAAQ,GAEd0O,IAAeF,EAASpJ,EAAIsG,QACnC8C,EAASpJ,EAAIsG,MAAQ,CAAC,GAExB,IAAIiD,EAAcvJ,EAAIpF,KACpB,CAAC,EACD0O,EAAaF,EAASpJ,EAAIsG,MAAQ8C,GAvBf,SAAUjJ,EAAOiJ,EAAU7J,EAAOiK,GACvD,GAAIA,IAAYjK,EACd6J,EAASI,GAAWR,EAAW7I,EAAM,SAGrC,IAAK,IAAIrC,EAAI,EAAGA,EAAIyB,EAAMjC,OAAQQ,GAAK,EACnB,MAAdqC,EAAMrC,EAAE,KACVsL,EAAS7J,EAAMzB,IAAMkL,EAAW7I,EAAMrC,EAAE,IAI/C,CAcC2L,CAAiBJ,EAAQlJ,MAAMH,EAAIuG,KAAMgD,EAAavJ,EAAIT,MAAOS,EAAIsG,MAEjEtG,EAAIpF,MACNwO,EAASpJ,EAAIpF,MAAMA,KAAK2O,EAE3B,EAEGnD,EAAU9N,EAAQ,MAClBoR,EAAYzB,OAAOzM,UAAUmO,KAAK9N,KAAK,iBAE3C7D,EAAQ0H,MAAQ,SAAUkK,GACxB,IAAIC,EAAU,CAAC,EACXC,EAAQ,GACRV,EAAWS,EAoBf,OAjBAD,EAAIlF,MAAM,gBAAgBqF,OAAOL,GAAWtN,SAAQ,SAAU6I,GAC5D,IAAI+E,EAAO/E,EAAE,GACToE,EAAUpE,EAAEf,MAAM,GACT,MAAT8F,IACFF,EAAMlP,KAAK,CAACqP,IAAK,GAAIC,KAAM,KAC3Bd,EAAWU,EAAMA,EAAMxM,OAAO,IAGhC,IAAK,IAAI6M,EAAI,EAAGA,GAAK/D,EAAQ4D,IAAS,IAAI1M,OAAQ6M,GAAK,EAAG,CACxD,IAAInK,EAAMoG,EAAQ4D,GAAMG,GACxB,GAAInK,EAAIuG,IAAIoD,KAAKN,GACf,OAAOF,EAASnJ,EAAKoJ,EAAUC,EAElC,CACF,IAEDQ,EAAQC,MAAQA,EACTD,CACR,EAED,IAAIO,EAAe,SAAUC,EAAKC,GAChC,IAAI5D,EAAI4D,EAAK5F,MAAM,QAAS,GAI5B,OAHiB,IAAbgC,EAAEpJ,SACJ+M,EAAI3D,EAAE,IAAMsC,EAAWtC,EAAE,KAEpB2D,CACR,EAEDrS,EAAQ0Q,YAAc,SAAUhB,GAC9B,OAAOA,EAAIhD,MAAM,SAAS6F,OAAOH,EAAc,CAAC,EACjD,EAGDpS,EAAQ2Q,gBAAkB3Q,EAAQ0Q,YAElC1Q,EAAQ4Q,cAAgB,SAAUlB,GAChC,OAAOA,EAAIhD,MAAM,KAAK+F,IAAIvB,OAC3B,EAEDlR,EAAQ6Q,sBAAwB,SAAUnB,GAGxC,IAFA,IAAIgD,EAAa,GACbC,EAAQjD,EAAIhD,MAAM,KAAK+F,IAAIzB,GACtBlL,EAAI,EAAGA,EAAI6M,EAAMrN,OAAQQ,GAAK,EACrC4M,EAAW9P,KAAK,CACdgQ,UAAWD,EAAM7M,GACjB+M,GAAIF,EAAM7M,EAAI,GACdgN,KAAMH,EAAM7M,EAAI,KAGpB,OAAO4M,CACR,EAED1S,EAAQ8Q,qBAAuB,SAAUpB,GACvC,OAAOA,EAAIhD,MAAM,KAAK+F,KAAI,SAAUM,GAClC,OAAOA,EAAK9L,UAAU,EAAG8L,EAAKzN,OAAO,GAAGoH,MAAM,KAAK6F,OAAOH,EAAc,CAAC,EAC1E,GACF,EAEDpS,EAAQ+Q,yBAA2B,SAAUrB,GAC3C,OAAOA,EAAIhD,MAAM,KAAK+F,KAAI,SAAUO,GAClC,OAAOA,EAAOtG,MAAM,KAAK+F,KAAI,SAAUhE,GACrC,IAAIwE,EAAMC,GAAS,EASnB,MAPkB,MAAdzE,EAAO,GACTwE,EAAOjC,EAAWvC,IAElBwE,EAAOjC,EAAWvC,EAAOxH,UAAU,EAAGwH,EAAOnJ,SAC7C4N,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,EAEX,GACF,GACF,kBCzHD,IAAI9E,EAAU9N,EAAQ,MAGlB6S,EAAe,WACf1E,EAAS,SAAU2E,GACrB,IAAItN,EAAI,EACJpC,EAAOgG,UACPhE,EAAMhC,EAAK4B,OACf,OAAO8N,EAAUnQ,QAAQkQ,GAAc,SAAUE,GAC/C,GAAIvN,GAAKJ,EACP,OAAO2N,EAET,IAAIlJ,EAAMzG,EAAKoC,GAEf,OADAA,GAAK,EACGuN,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAOpC,OAAO9G,GAChB,IAAK,KACH,OAAO+G,OAAO/G,GAChB,IAAK,KACH,MAAO,GAEV,GAEF,EAEGmJ,EAAW,SAAUtB,EAAMhK,EAAKoJ,GAClC,IAII1N,EAAO,CAACsO,EAAO,KAJThK,EAAIyG,kBAAkB7K,SAC7BoE,EAAIyG,OAAOzG,EAAIpF,KAAOwO,EAAWA,EAASpJ,EAAIsG,OAC/CtG,EAAIyG,SAGN,GAAIzG,EAAIT,MACN,IAAK,IAAIzB,EAAI,EAAGA,EAAIkC,EAAIT,MAAMjC,OAAQQ,GAAK,EAAG,CAC5C,IAAIyN,EAAIvL,EAAIT,MAAMzB,GACdkC,EAAIsG,KACN5K,EAAKd,KAAKwO,EAASpJ,EAAIsG,MAAMiF,IAG7B7P,EAAKd,KAAKwO,EAASpJ,EAAIT,MAAMzB,IAEhC,MAGDpC,EAAKd,KAAKwO,EAASpJ,EAAIsG,OAEzB,OAAOG,EAAO3K,MAAM,KAAMJ,EAC3B,EAIG8P,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCxT,EAAOD,QAAU,SAAU6R,EAAS6B,GAClCA,EAAOA,GAAQ,CAAC,EAEO,MAAnB7B,EAAQ8B,UACV9B,EAAQ8B,QAAU,GAEA,MAAhB9B,EAAQvD,OACVuD,EAAQvD,KAAO,KAEjBuD,EAAQC,MAAM1N,SAAQ,SAAUwP,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,GAEpB,IAED,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChC7B,EAAM,GAkCV,OA/BAkC,EAAW1P,SAAQ,SAAU4N,GAC3B5D,EAAQ4D,GAAM5N,SAAQ,SAAU4D,GAC1BA,EAAIsG,QAAQuD,GAAgC,MAArBA,EAAQ7J,EAAIsG,MACrCsD,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAK6J,IAEtB7J,EAAIpF,QAAQiP,GAAgC,MAArBA,EAAQ7J,EAAIpF,OAC1CiP,EAAQ7J,EAAIpF,MAAMwB,SAAQ,SAAU4P,GAClCpC,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAKgM,GAC9B,GAEJ,GACF,IAGDnC,EAAQC,MAAM1N,SAAQ,SAAUwP,GAC9BhC,EAAIhP,KAAK0Q,EAAS,IAAKlF,EAAQzB,EAAE,GAAIiH,IAErCG,EAAW3P,SAAQ,SAAU4N,GAC3B5D,EAAQ4D,GAAM5N,SAAQ,SAAU4D,GAC1BA,EAAIsG,QAAQsF,GAA4B,MAAnBA,EAAM5L,EAAIsG,MACjCsD,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAK4L,IAEtB5L,EAAIpF,QAAQgR,GAA4B,MAAnBA,EAAM5L,EAAIpF,OACtCgR,EAAM5L,EAAIpF,MAAMwB,SAAQ,SAAU4P,GAChCpC,EAAIhP,KAAK0Q,EAAStB,EAAMhK,EAAKgM,GAC9B,GAEJ,GACF,GACF,IAEMpC,EAAIqC,KAAK,QAAU,MAC3B,yBC7GD,MAAMsmD,EAAW,CAIjBA,mBAA8B,WAC5B,OAAOt1D,KAAKE,SAASqN,SAAS,IAAI5F,OAAO,EAAG,GAC7C,GAGD2tD,EAASC,WAAaD,EAASE,qBAG/BF,EAASG,WAAa,SAASC,GAC7B,OAAOA,EAAKxT,OAAOz6C,MAAM,MAAM+F,KAAIlG,GAAQA,EAAK46C,QACjD,EAEDoT,EAASK,cAAgB,SAASD,GAEhC,OADcA,EAAKjuD,MAAM,QACZ+F,KAAI,CAACooD,EAAMvjD,KAAWA,EAAQ,EACzC,KAAOujD,EAAOA,GAAM1T,OAAS,QAChC,EAGDoT,EAASO,eAAiB,SAASH,GACjC,MAAMI,EAAWR,EAASK,cAAcD,GACxC,OAAOI,GAAYA,EAAS,EAC7B,EAGDR,EAASS,iBAAmB,SAASL,GACnC,MAAMI,EAAWR,EAASK,cAAcD,GAExC,OADAI,EAASvrC,QACFurC,CACR,EAGDR,EAASU,YAAc,SAASN,EAAMp1C,GACpC,OAAOg1C,EAASG,WAAWC,GAAM5oD,QAAOxF,GAAiC,IAAzBA,EAAKd,QAAQ8Z,IAC9D,EAMDg1C,EAASW,eAAiB,SAAS3uD,GACjC,IAAIoG,EAGFA,EADmC,IAAjCpG,EAAKd,QAAQ,gBACPc,EAAKtF,UAAU,IAAIyF,MAAM,KAEzBH,EAAKtF,UAAU,IAAIyF,MAAM,KAGnC,MAAMyZ,EAAY,CAChBg1C,WAAYxoD,EAAM,GAClBC,UAAW,CAAC,EAAG,MAAO,EAAG,QAAQD,EAAM,KAAOA,EAAM,GACpDyoD,SAAUzoD,EAAM,GAAGkgB,cACnBwoC,SAAUxlD,SAASlD,EAAM,GAAI,IAC7BE,GAAIF,EAAM,GACVtD,QAASsD,EAAM,GACfG,KAAM+C,SAASlD,EAAM,GAAI,IAEzBX,KAAMW,EAAM,IAGd,IAAK,IAAI7M,EAAI,EAAGA,EAAI6M,EAAMrN,OAAQQ,GAAK,EACrC,OAAQ6M,EAAM7M,IACZ,IAAK,QACHqgB,EAAUm1C,eAAiB3oD,EAAM7M,EAAI,GACrC,MACF,IAAK,QACHqgB,EAAUo1C,YAAc1lD,SAASlD,EAAM7M,EAAI,GAAI,IAC/C,MACF,IAAK,UACHqgB,EAAUq1C,QAAU7oD,EAAM7M,EAAI,GAC9B,MACF,IAAK,QACHqgB,EAAUs1C,MAAQ9oD,EAAM7M,EAAI,GAC5BqgB,EAAUu1C,iBAAmB/oD,EAAM7M,EAAI,GACvC,MACF,aAC8BgC,IAAxBqe,EAAUxT,EAAM7M,MAClBqgB,EAAUxT,EAAM7M,IAAM6M,EAAM7M,EAAI,IAKxC,OAAOqgB,CACR,EAIDo0C,EAASoB,eAAiB,SAASx1C,GACjC,MAAMvU,EAAM,GACZA,EAAIhP,KAAKujB,EAAUg1C,YAEnB,MAAMvoD,EAAYuT,EAAUvT,UACV,QAAdA,EACFhB,EAAIhP,KAAK,GACc,SAAdgQ,EACThB,EAAIhP,KAAK,GAETgP,EAAIhP,KAAKgQ,GAEXhB,EAAIhP,KAAKujB,EAAUi1C,SAASzlB,eAC5B/jC,EAAIhP,KAAKujB,EAAUk1C,UACnBzpD,EAAIhP,KAAKujB,EAAU9W,SAAW8W,EAAUtT,IACxCjB,EAAIhP,KAAKujB,EAAUrT,MAEnB,MAAMd,EAAOmU,EAAUnU,KAkBvB,OAjBAJ,EAAIhP,KAAK,OACTgP,EAAIhP,KAAKoP,GACI,SAATA,GAAmBmU,EAAUm1C,gBAC7Bn1C,EAAUo1C,cACZ3pD,EAAIhP,KAAK,SACTgP,EAAIhP,KAAKujB,EAAUm1C,gBACnB1pD,EAAIhP,KAAK,SACTgP,EAAIhP,KAAKujB,EAAUo1C,cAEjBp1C,EAAUq1C,SAAgD,QAArCr1C,EAAUi1C,SAASvoC,gBAC1CjhB,EAAIhP,KAAK,WACTgP,EAAIhP,KAAKujB,EAAUq1C,WAEjBr1C,EAAUu1C,kBAAoBv1C,EAAUs1C,SAC1C7pD,EAAIhP,KAAK,SACTgP,EAAIhP,KAAKujB,EAAUu1C,kBAAoBv1C,EAAUs1C,QAE5C,aAAe7pD,EAAIqC,KAAK,IAChC,EAKDsmD,EAASqB,gBAAkB,SAASrvD,GAClC,OAAOA,EAAKK,OAAO,IAAIF,MAAM,IAC9B,EAID6tD,EAASsB,YAAc,SAAStvD,GAC9B,IAAIoG,EAAQpG,EAAKK,OAAO,GAAGF,MAAM,KACjC,MAAMovD,EAAS,CACbC,YAAalmD,SAASlD,EAAM6c,QAAS,KAUvC,OAPA7c,EAAQA,EAAM,GAAGjG,MAAM,KAEvBovD,EAAOxtD,KAAOqE,EAAM,GACpBmpD,EAAOE,UAAYnmD,SAASlD,EAAM,GAAI,IACtCmpD,EAAOG,SAA4B,IAAjBtpD,EAAMrN,OAAeuQ,SAASlD,EAAM,GAAI,IAAM,EAEhEmpD,EAAOI,YAAcJ,EAAOG,SACrBH,CACR,EAIDvB,EAAS4B,YAAc,SAASC,GAC9B,IAAIvX,EAAKuX,EAAML,iBACoBj0D,IAA/Bs0D,EAAMC,uBACRxX,EAAKuX,EAAMC,sBAEb,MAAMJ,EAAWG,EAAMH,UAAYG,EAAMF,aAAe,EACxD,MAAO,YAAcrX,EAAK,IAAMuX,EAAM9tD,KAAO,IAAM8tD,EAAMJ,WACvC,IAAbC,EAAiB,IAAMA,EAAW,IAAM,MAC9C,EAKD1B,EAAS+B,YAAc,SAAS/vD,GAC9B,MAAMoG,EAAQpG,EAAKK,OAAO,GAAGF,MAAM,KACnC,MAAO,CACLU,GAAIyI,SAASlD,EAAM,GAAI,IACvBpD,UAAWoD,EAAM,GAAGlH,QAAQ,KAAO,EAAIkH,EAAM,GAAGjG,MAAM,KAAK,GAAK,WAChE6vD,IAAK5pD,EAAM,GAEd,EAID4nD,EAASiC,YAAc,SAASC,GAC9B,MAAO,aAAeA,EAAgBrvD,IAAMqvD,EAAgBC,cACvDD,EAAgBltD,WAA2C,aAA9BktD,EAAgBltD,UAC1C,IAAMktD,EAAgBltD,UACtB,IACJ,IAAMktD,EAAgBF,IAAM,MACjC,EAKDhC,EAASoC,UAAY,SAASpwD,GAC5B,MAAMuvD,EAAS,CAAC,EAChB,IAAIc,EACJ,MAAMjqD,EAAQpG,EAAKK,OAAOL,EAAKd,QAAQ,KAAO,GAAGiB,MAAM,KACvD,IAAK,IAAIyF,EAAI,EAAGA,EAAIQ,EAAMrN,OAAQ6M,IAChCyqD,EAAKjqD,EAAMR,GAAGg1C,OAAOz6C,MAAM,KAC3BovD,EAAOc,EAAG,GAAGzV,QAAUyV,EAAG,GAE5B,OAAOd,CACR,EAGDvB,EAASsC,UAAY,SAAST,GAC5B,IAAI7vD,EAAO,GACPs4C,EAAKuX,EAAML,YAIf,QAHmCj0D,IAA/Bs0D,EAAMC,uBACRxX,EAAKuX,EAAMC,sBAETD,EAAMrtC,YAActuB,OAAO6I,KAAK8yD,EAAMrtC,YAAYzpB,OAAQ,CAC5D,MAAM0K,EAAS,GACfvP,OAAO6I,KAAK8yD,EAAMrtC,YAAY3qB,SAAQ4gD,SACJl9C,IAA5Bs0D,EAAMrtC,WAAWi2B,GACnBh1C,EAAOpN,KAAKoiD,EAAQ,IAAMoX,EAAMrtC,WAAWi2B,IAE3Ch1C,EAAOpN,KAAKoiD,EACb,IAEHz4C,GAAQ,UAAYs4C,EAAK,IAAM70C,EAAOiE,KAAK,KAAO,MACnD,CACD,OAAO1H,CACR,EAIDguD,EAASuC,YAAc,SAASvwD,GAC9B,MAAMoG,EAAQpG,EAAKK,OAAOL,EAAKd,QAAQ,KAAO,GAAGiB,MAAM,KACvD,MAAO,CACLsF,KAAMW,EAAM6c,QACZutC,UAAWpqD,EAAMsB,KAAK,KAEzB,EAGDsmD,EAASyC,YAAc,SAASZ,GAC9B,IAAIpqC,EAAQ,GACR6yB,EAAKuX,EAAML,YAYf,YAXmCj0D,IAA/Bs0D,EAAMC,uBACRxX,EAAKuX,EAAMC,sBAETD,EAAMa,cAAgBb,EAAMa,aAAa33D,QAE3C82D,EAAMa,aAAa74D,SAAQ84D,IACzBlrC,GAAS,aAAe6yB,EAAK,IAAMqY,EAAGlrD,MACrCkrD,EAAGH,WAAaG,EAAGH,UAAUz3D,OAAS,IAAM43D,EAAGH,UAAY,IACxD,MAFJ,IAKG/qC,CACR,EAIDuoC,EAAS4C,eAAiB,SAAS5wD,GACjC,MAAM6wD,EAAK7wD,EAAKd,QAAQ,KAClBkH,EAAQ,CACZ6B,KAAMqB,SAAStJ,EAAKK,OAAO,EAAGwwD,EAAK,GAAI,KAEnCC,EAAQ9wD,EAAKd,QAAQ,IAAK2xD,GAOhC,OANIC,GAAS,GACX1qD,EAAM7C,UAAYvD,EAAKK,OAAOwwD,EAAK,EAAGC,EAAQD,EAAK,GACnDzqD,EAAM9J,MAAQ0D,EAAKK,OAAOywD,EAAQ,IAElC1qD,EAAM7C,UAAYvD,EAAKK,OAAOwwD,EAAK,GAE9BzqD,CACR,EAID4nD,EAAS+C,eAAiB,SAAS/wD,GACjC,MAAMoG,EAAQpG,EAAKK,OAAO,IAAIF,MAAM,KACpC,MAAO,CACLiJ,UAAWhD,EAAM6c,QACjB9a,MAAO/B,EAAMF,KAAI+B,GAAQqB,SAASrB,EAAM,MAE3C,EAID+lD,EAASgD,OAAS,SAASC,GACzB,MAAMC,EAAMlD,EAASU,YAAYuC,EAAc,UAAU,GACzD,GAAIC,EACF,OAAOA,EAAI7wD,OAAO,EAErB,EAGD2tD,EAASmD,iBAAmB,SAASnxD,GACnC,MAAMoG,EAAQpG,EAAKK,OAAO,IAAIF,MAAM,KACpC,MAAO,CACLixD,UAAWhrD,EAAM,GAAGkgB,cACpBhqB,MAAO8J,EAAM,GAAGgjC,cAEnB,EAKD4kB,EAASqD,kBAAoB,SAASJ,EAAcK,GAIlD,MAAO,CACLC,KAAM,OACNC,aALYxD,EAASU,YAAYuC,EAAeK,EAChD,kBAIoBprD,IAAI8nD,EAASmD,kBAEpC,EAGDnD,EAASyD,oBAAsB,SAAShuD,EAAQiuD,GAC9C,IAAIrsD,EAAM,WAAaqsD,EAAY,OAInC,OAHAjuD,EAAO+tD,aAAa35D,SAAQ85D,IAC1BtsD,GAAO,iBAAmBssD,EAAGP,UAAY,IAAMO,EAAGr1D,MAAQ,MAA1D,IAEK+I,CACR,EAID2oD,EAAS4D,gBAAkB,SAAS5xD,GAClC,MAAMoG,EAAQpG,EAAKK,OAAO,GAAGF,MAAM,KACnC,MAAO,CACLwkD,IAAKr7C,SAASlD,EAAM,GAAI,IACxByrD,YAAazrD,EAAM,GACnB0rD,UAAW1rD,EAAM,GACjB2rD,cAAe3rD,EAAMzG,MAAM,GAE9B,EAEDquD,EAASgE,gBAAkB,SAASxvC,GAClC,MAAO,YAAcA,EAAWmiC,IAAM,IACpCniC,EAAWqvC,YAAc,KACQ,iBAAzBrvC,EAAWsvC,UACf9D,EAASiE,qBAAqBzvC,EAAWsvC,WACzCtvC,EAAWsvC,YACdtvC,EAAWuvC,cAAgB,IAAMvvC,EAAWuvC,cAAcrqD,KAAK,KAAO,IACvE,MACH,EAIDsmD,EAASkE,qBAAuB,SAASJ,GACvC,GAAqC,IAAjCA,EAAU5yD,QAAQ,WACpB,OAAO,KAET,MAAMkH,EAAQ0rD,EAAUzxD,OAAO,GAAGF,MAAM,KACxC,MAAO,CACLgyD,UAAW,SACXC,QAAShsD,EAAM,GACfisD,SAAUjsD,EAAM,GAChBksD,SAAUlsD,EAAM,GAAKA,EAAM,GAAGjG,MAAM,KAAK,QAAK5E,EAC9Cg3D,UAAWnsD,EAAM,GAAKA,EAAM,GAAGjG,MAAM,KAAK,QAAK5E,EAElD,EAEDyyD,EAASiE,qBAAuB,SAASH,GACvC,OAAOA,EAAUK,UAAY,IACzBL,EAAUM,SACXN,EAAUO,SAAW,IAAMP,EAAUO,SAAW,KAChDP,EAAUQ,UAAYR,EAAUS,UAC7B,IAAMT,EAAUQ,SAAW,IAAMR,EAAUS,UAC3C,GACP,EAGDvE,EAASwE,oBAAsB,SAASvB,EAAcK,GAGpD,OAFctD,EAASU,YAAYuC,EAAeK,EAChD,aACWprD,IAAI8nD,EAAS4D,gBAC3B,EAKD5D,EAASyE,iBAAmB,SAASxB,EAAcK,GACjD,MAAMpC,EAAQlB,EAASU,YAAYuC,EAAeK,EAChD,gBAAgB,GACZoB,EAAM1E,EAASU,YAAYuC,EAAeK,EAC9C,cAAc,GAChB,OAAMpC,GAASwD,EAGR,CACLvD,iBAAkBD,EAAM7uD,OAAO,IAC/BslC,SAAU+sB,EAAIryD,OAAO,KAJd,IAMV,EAGD2tD,EAAS2E,mBAAqB,SAASlvD,GACrC,IAAI4B,EAAM,eAAiB5B,EAAO0rD,iBAAxB,iBACS1rD,EAAOkiC,SAAW,OAIrC,OAHIliC,EAAOmvD,UACTvtD,GAAO,kBAEFA,CACR,EAGD2oD,EAAS6E,mBAAqB,SAAS5B,GACrC,MAAM30C,EAAc,CAClBw2C,OAAQ,GACRC,iBAAkB,GAClBC,cAAe,GACfC,KAAM,IAGFC,EADQlF,EAASG,WAAW8C,GACd,GAAG9wD,MAAM,KAC7B,IAAK,IAAI5G,EAAI,EAAGA,EAAI25D,EAAMn6D,OAAQQ,IAAK,CACrC,MAAM++C,EAAK4a,EAAM35D,GACX45D,EAAanF,EAASU,YAC1BuC,EAAc,YAAc3Y,EAAK,KAAK,GACxC,GAAI6a,EAAY,CACd,MAAMtD,EAAQ7B,EAASsB,YAAY6D,GAC7BC,EAAQpF,EAASU,YACrBuC,EAAc,UAAY3Y,EAAK,KAQjC,OANAuX,EAAMrtC,WAAa4wC,EAAMr6D,OAASi1D,EAASoC,UAAUgD,EAAM,IAAM,CAAC,EAClEvD,EAAMa,aAAe1C,EAASU,YAC5BuC,EAAc,aAAe3Y,EAAK,KACjCpyC,IAAI8nD,EAASuC,aAChBj0C,EAAYw2C,OAAOz8D,KAAKw5D,GAEhBA,EAAM9tD,KAAKqnC,eACjB,IAAK,MACL,IAAK,SACH9sB,EAAY02C,cAAc38D,KAAKw5D,EAAM9tD,KAAKqnC,eAK/C,CACF,CAKD,OAJA4kB,EAASU,YAAYuC,EAAc,aAAap5D,SAAQmI,IACtDsc,EAAYy2C,iBAAiB18D,KAAK23D,EAAS+B,YAAY/vD,GAAvD,IAGKsc,CACR,EAID0xC,EAASqF,oBAAsB,SAASv5C,EAAMw5C,GAC5C,IAAIjuD,EAAM,GAGVA,GAAO,KAAOyU,EAAO,IACrBzU,GAAOiuD,EAAKR,OAAO/5D,OAAS,EAAI,IAAM,IACtCsM,GAAO,sBACPA,GAAOiuD,EAAKR,OAAO5sD,KAAI2pD,QACct0D,IAA/Bs0D,EAAMC,qBACDD,EAAMC,qBAERD,EAAML,cACZ9nD,KAAK,KAAO,OAEfrC,GAAO,uBACPA,GAAO,8BAGPiuD,EAAKR,OAAOj7D,SAAQg4D,IAClBxqD,GAAO2oD,EAAS4B,YAAYC,GAC5BxqD,GAAO2oD,EAASsC,UAAUT,GAC1BxqD,GAAO2oD,EAASyC,YAAYZ,EAA5B,IAEF,IAAI0D,EAAW,EAgBf,OAfAD,EAAKR,OAAOj7D,SAAQg4D,IACdA,EAAM0D,SAAWA,IACnBA,EAAW1D,EAAM0D,SAClB,IAECA,EAAW,IACbluD,GAAO,cAAgBkuD,EAAW,QAGhCD,EAAKP,kBACPO,EAAKP,iBAAiBl7D,SAAQ27D,IAC5BnuD,GAAO2oD,EAASiC,YAAYuD,EAA5B,IAIGnuD,CACR,EAID2oD,EAASyF,2BAA6B,SAASxC,GAC7C,MAAMyC,EAAqB,GACrBp3C,EAAc0xC,EAAS6E,mBAAmB5B,GAC1C0C,GAAuD,IAA9Cr3C,EAAY02C,cAAc9zD,QAAQ,OAC3C00D,GAA6D,IAAjDt3C,EAAY02C,cAAc9zD,QAAQ,UAG9CiJ,EAAQ6lD,EAASU,YAAYuC,EAAc,WAC9C/qD,KAAIlG,GAAQguD,EAAS4C,eAAe5wD,KACpCwF,QAAOY,GAA6B,UAApBA,EAAM7C,YACnB8G,EAAclC,EAAMpP,OAAS,GAAKoP,EAAM,GAAGF,KACjD,IAAI4rD,EAEJ,MAAMC,EAAQ9F,EAASU,YAAYuC,EAAc,oBAC9C/qD,KAAIlG,GACWA,EAAKK,OAAO,IAAIF,MAAM,KACvB+F,KAAIooD,GAAQhlD,SAASglD,EAAM,QAExCwF,EAAM/6D,OAAS,GAAK+6D,EAAM,GAAG/6D,OAAS,GAAK+6D,EAAM,GAAG,KAAOzpD,IAC7DwpD,EAAgBC,EAAM,GAAG,IAG3Bx3C,EAAYw2C,OAAOj7D,SAAQg4D,IACzB,GAAiC,QAA7BA,EAAM9tD,KAAKqnC,eAA2BymB,EAAMrtC,WAAWuxC,IAAK,CAC9D,IAAIC,EAAW,CACb/rD,KAAMoC,EACN4pD,iBAAkB3qD,SAASumD,EAAMrtC,WAAWuxC,IAAK,KAE/C1pD,GAAewpD,IACjBG,EAASE,IAAM,CAACjsD,KAAM4rD,IAExBH,EAAmBr9D,KAAK29D,GACpBL,IACFK,EAAWt4D,KAAKP,MAAMO,KAAK8B,UAAUw2D,IACrCA,EAASG,IAAM,CACblsD,KAAMoC,EACN+pD,UAAWR,EAAY,aAAe,OAExCF,EAAmBr9D,KAAK29D,GAE3B,KAE+B,IAA9BN,EAAmB36D,QAAgBsR,GACrCqpD,EAAmBr9D,KAAK,CACtB4R,KAAMoC,IAKV,IAAIgqD,EAAYrG,EAASU,YAAYuC,EAAc,MAenD,OAdIoD,EAAUt7D,SAEVs7D,EADsC,IAApCA,EAAU,GAAGn1D,QAAQ,WACXoK,SAAS+qD,EAAU,GAAGh0D,OAAO,GAAI,IACF,IAAlCg0D,EAAU,GAAGn1D,QAAQ,SAEqB,IAAvCoK,SAAS+qD,EAAU,GAAGh0D,OAAO,GAAI,IAAa,IACnD,UAEK9E,EAEdm4D,EAAmB77D,SAAQ4L,IACzBA,EAAO6wD,WAAaD,CAApB,KAGGX,CACR,EAGD1F,EAASuG,oBAAsB,SAAStD,GACtC,MAAMuD,EAAiB,CAAC,EAIlBC,EAAazG,EAASU,YAAYuC,EAAc,WACnD/qD,KAAIlG,GAAQguD,EAAS4C,eAAe5wD,KACpCwF,QAAO/J,GAAyB,UAAlBA,EAAI8H,YAAuB,GACxCkxD,IACFD,EAAe/oD,MAAQgpD,EAAWn4D,MAClCk4D,EAAevsD,KAAOwsD,EAAWxsD,MAKnC,MAAMysD,EAAQ1G,EAASU,YAAYuC,EAAc,gBACjDuD,EAAeG,YAAcD,EAAM37D,OAAS,EAC5Cy7D,EAAeI,SAA4B,IAAjBF,EAAM37D,OAIhC,MAAM87D,EAAM7G,EAASU,YAAYuC,EAAc,cAG/C,OAFAuD,EAAeK,IAAMA,EAAI97D,OAAS,EAE3By7D,CACR,EAEDxG,EAAS8G,oBAAsB,SAASN,GACtC,IAAInvD,EAAM,GAWV,OAVImvD,EAAeG,cACjBtvD,GAAO,oBAELmvD,EAAeK,MACjBxvD,GAAO,uBAEmB9J,IAAxBi5D,EAAevsD,MAAsBusD,EAAe/oD,QACtDpG,GAAO,UAAYmvD,EAAevsD,KAChC,UAAYusD,EAAe/oD,MAAQ,QAEhCpG,CACR,EAKD2oD,EAAS+G,UAAY,SAAS9D,GAC5B,IAAI7qD,EACJ,MAAM4uD,EAAOhH,EAASU,YAAYuC,EAAc,WAChD,GAAoB,IAAhB+D,EAAKj8D,OAEP,OADAqN,EAAQ4uD,EAAK,GAAG30D,OAAO,GAAGF,MAAM,KACzB,CAACsG,OAAQL,EAAM,GAAI2T,MAAO3T,EAAM,IAEzC,MAAM6uD,EAAQjH,EAASU,YAAYuC,EAAc,WAC9C/qD,KAAIlG,GAAQguD,EAAS4C,eAAe5wD,KACpCwF,QAAO0vD,GAAqC,SAAxBA,EAAU3xD,YACjC,OAAI0xD,EAAMl8D,OAAS,GACjBqN,EAAQ6uD,EAAM,GAAG34D,MAAM6D,MAAM,KACtB,CAACsG,OAAQL,EAAM,GAAI2T,MAAO3T,EAAM,UAFzC,CAID,EAKD4nD,EAASmH,qBAAuB,SAASlE,GACvC,MAAMiC,EAAQlF,EAASoH,WAAWnE,GAC5BoE,EAAcrH,EAASU,YAAYuC,EAAc,uBACvD,IAAIztD,EACA6xD,EAAYt8D,OAAS,IACvByK,EAAiB8F,SAAS+rD,EAAY,GAAGh1D,OAAO,IAAK,KAEnD04B,MAAMv1B,KACRA,EAAiB,OAEnB,MAAM8xD,EAAWtH,EAASU,YAAYuC,EAAc,gBACpD,GAAIqE,EAASv8D,OAAS,EACpB,MAAO,CACLwN,KAAM+C,SAASgsD,EAAS,GAAGj1D,OAAO,IAAK,IACvCwuD,SAAUqE,EAAMqC,IAChB/xD,kBAGJ,MAAMgyD,EAAexH,EAASU,YAAYuC,EAAc,cACxD,GAAIuE,EAAaz8D,OAAS,EAAG,CAC3B,MAAMqN,EAAQovD,EAAa,GACxBn1D,OAAO,IACPF,MAAM,KACT,MAAO,CACLoG,KAAM+C,SAASlD,EAAM,GAAI,IACzByoD,SAAUzoD,EAAM,GAChB5C,iBAEH,CACF,EAODwqD,EAASyH,qBAAuB,SAASlwD,EAAOmwD,GAC9C,IAAItnC,EAAS,GAiBb,OAfEA,EADqB,cAAnB7oB,EAAMspD,SACC,CACP,KAAOtpD,EAAMuU,KAAO,MAAQvU,EAAMspD,SAAW,IAAM6G,EAAK7G,SAAW,OACnE,uBACA,eAAiB6G,EAAKnvD,KAAO,QAGtB,CACP,KAAOhB,EAAMuU,KAAO,MAAQvU,EAAMspD,SAAW,IAAM6G,EAAKnvD,KAAO,OAC/D,uBACA,aAAemvD,EAAKnvD,KAAO,IAAMmvD,EAAK7G,SAAW,mBAGzBtzD,IAAxBm6D,EAAKlyD,gBACP4qB,EAAO/3B,KAAK,sBAAwBq/D,EAAKlyD,eAAiB,QAErD4qB,EAAO1mB,KAAK,GACpB,EAMDsmD,EAAS2H,kBAAoB,WAC3B,OAAOj9D,KAAKE,SAASqN,WAAW5F,OAAO,EAAG,GAC3C,EAOD2tD,EAAS4H,wBAA0B,SAASC,EAAQC,EAASC,GAC3D,IAAIC,EACJ,MAAM5uD,OAAsB7L,IAAZu6D,EAAwBA,EAAU,EAQlD,OANEE,EADEH,GAGU7H,EAAS2H,oBAIhB,aAFMI,GAAY,qBAGP,IAAMC,EAAY,IAAM5uD,EADnC,uCAKR,EAGD4mD,EAASiI,aAAe,SAAShF,EAAcK,GAE7C,MAAM7rC,EAAQuoC,EAASG,WAAW8C,GAClC,IAAK,IAAI13D,EAAI,EAAGA,EAAIksB,EAAM1sB,OAAQQ,IAChC,OAAQksB,EAAMlsB,IACZ,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACH,OAAOksB,EAAMlsB,GAAG8G,OAAO,GAK7B,OAAIixD,EACKtD,EAASiI,aAAa3E,GAExB,UACR,EAEDtD,EAASkI,QAAU,SAASjF,GAG1B,OAFcjD,EAASG,WAAW8C,GACd,GAAG9wD,MAAM,KAChB,GAAGE,OAAO,EACxB,EAED2tD,EAASmI,WAAa,SAASlF,GAC7B,MAAyC,MAAlCA,EAAa9wD,MAAM,IAAK,GAAG,EACnC,EAED6tD,EAASoH,WAAa,SAASnE,GAC7B,MACM7qD,EADQ4nD,EAASG,WAAW8C,GACd,GAAG5wD,OAAO,GAAGF,MAAM,KACvC,MAAO,CACL2Z,KAAM1T,EAAM,GACZG,KAAM+C,SAASlD,EAAM,GAAI,IACzByoD,SAAUzoD,EAAM,GAChBmvD,IAAKnvD,EAAMzG,MAAM,GAAG+H,KAAK,KAE5B,EAEDsmD,EAASoI,WAAa,SAASnF,GAC7B,MACM7qD,EADO4nD,EAASU,YAAYuC,EAAc,MAAM,GACnC5wD,OAAO,GAAGF,MAAM,KACnC,MAAO,CACLk2D,SAAUjwD,EAAM,GAChB4vD,UAAW5vD,EAAM,GACjBkwD,eAAgBhtD,SAASlD,EAAM,GAAI,IACnCmwD,QAASnwD,EAAM,GACfowD,YAAapwD,EAAM,GACnBtD,QAASsD,EAAM,GAElB,EAGD4nD,EAASyI,WAAa,SAASrI,GAC7B,GAAoB,iBAATA,GAAqC,IAAhBA,EAAKr1D,OACnC,OAAO,EAET,MAAM0sB,EAAQuoC,EAASG,WAAWC,GAClC,IAAK,IAAI70D,EAAI,EAAGA,EAAIksB,EAAM1sB,OAAQQ,IAChC,GAAIksB,EAAMlsB,GAAGR,OAAS,GAA4B,MAAvB0sB,EAAMlsB,GAAGqyB,OAAO,GACzC,OAAO,EAIX,OAAO,CACR,EAICl4B,EAAOD,QAAUu6D,yBC3wBT,SAAUv6D,GAAW,aAEnB,IAAIijE,OAA6B,IAAXzqB,EAAAA,EAAyBA,EAAAA,EAAyB,oBAATp4C,KAAuBA,KAAyB,oBAAXG,OAAyBA,OAAS,CAAC,EAwCvI,MAAMuf,EAdN,WACE,IAAIojD,EAA0BD,EAASnjD,UAEvC,QAAuC,IAA5BojD,EACT,IACEA,EAA0B5iE,EAAQ,mGACnC,CAAC,MAAOukB,GACP,MAAM,IAAIthB,MAAM,8DACjB,CAGH,OAAO2/D,CACR,CAEiBC,GA4BlB,MAAM1e,EAdN,WACE,IAAI2e,EAA0BH,EAASxe,UAEvC,QAAuC,IAA5B2e,EACT,IACEA,EAA0B9iE,OAAAA,WAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uCAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,CAAAA,CAAAA,GAC3B,CAAC,MAAOukB,GACP,MAAM,IAAIthB,MAAM,0EACjB,CAGH,OAAO6/D,CACR,CAEiBC,GAiClB,SAASC,IAEP,GAAwB,oBAAb98D,SACT,IAGE,OAAO,IAFmBlG,OAAAA,WAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uCAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,CAAAA,CAAAA,MAEKijE,eAAe,gBAAiB,UAAW,KAC3E,CAAC,MAAO1+C,GACP,MAAM,IAAIthB,MAAM,0EACjB,CAIH,QAA+CuE,IAA3CtB,SAASm/C,eAAe4d,gBAAgC/8D,SAASm/C,eAAe4d,gBAAkB/8D,SAASg9D,cAAgBh9D,SAASg9D,aAAe,GAAI,CACzJ,MAAMC,EArCV,WACE,MAAMC,EAAa,CAAC,yBAA0B,yBAA0B,yBAA0B,yBAA0B,qBAAsB,oBAAqB,oBAEvK,IAAK,IAAIn9D,EAAI,EAAGA,EAAIm9D,EAAWp+D,OAAQiB,IACrC,IAGE,OADY,IAAIo9D,cAAcD,EAAWn9D,GAE1C,CAAC,MAAOqI,GACR,CAEJ,CA0Beg1D,GAGZ,OADAH,EAAIn8D,YAAYm8D,EAAI98D,cAAc,YAC3B88D,CACR,CAGD,OAAOj9D,SAASm/C,eAAe4d,eAAe,gBAAiB,UAAW,KAC3E,CAmBD,MAAMM,EAAa,SAAUxwD,EAAG0I,GAC9B,MAAM+nD,GAAW,MAAJzwD,IAAmB,MAAJ0I,GAE5B,OADa1I,GAAK,KAAO0I,GAAK,KAAO+nD,GAAO,KAC9B,GAAW,MAANA,CACpB,EAcKC,EAAW,SAAUr0D,GACzB,GAAmB,iBAARA,EACT,MAAM,IAAInM,MAAM,oCAGlB,MAAMygE,EAAM,GAEZ,IAAK,IAAIl+D,EAAI,EAAGA,EAAiB,EAAb4J,EAAIpK,OAAYQ,GAAK,EACvCk+D,EAAIl+D,GAAK,KAA+B,IAAxB4J,EAAI2jB,WAAWvtB,EAAI,KAAaA,EAAI,GAGtD,OAAOk+D,CACR,EAmCKC,EAAU,SAAUj5B,EAAG97B,EAAGD,EAAGoE,EAAG3E,EAAG1B,GACvC,OAAO62D,GAxDiB50C,EAwDE40C,EAAWA,EAAW30D,EAAG87B,GAAI64B,EAAWxwD,EAAGrG,OAxDxCk3D,EAwD6Cx1D,GAvDtDugB,IAAQ,GAAKi1C,EAuD6Cj1D,GAxDhE,IAAUggB,EAAKi1C,CAyD9B,EAEKC,EAAS,SAAUj1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GACzC,OAAOi3D,EAAQh1D,EAAID,GAAKC,EAAI1I,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EAC5C,EAEKo3D,EAAS,SAAUl1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GACzC,OAAOi3D,EAAQh1D,EAAI1I,EAAIyI,GAAKzI,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EAC5C,EAEKq3D,EAAS,SAAUn1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GACzC,OAAOi3D,EAAQh1D,EAAID,EAAIzI,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EACvC,EAEKs3D,EAAS,SAAUp1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GACzC,OAAOi3D,EAAQj1D,GAAKC,GAAK1I,GAAI2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EAC1C,EAMKu3D,EAAW,SAAUlxD,EAAG3N,GAE5B2N,EAAE3N,GAAO,IAAM,KAAQA,EAAM,GAC7B2N,EAA0B,IAAvB3N,EAAM,KAAO,GAAK,IAAWA,EAChC,IAII8+D,EAAMC,EAAMC,EAAMC,EAJlBz1D,EAAI,WACJD,GAAK,UACLD,GAAK,WACLzI,EAAI,UAGR,IAAK,IAAIT,EAAI,EAAGA,EAAIuN,EAAE/N,OAAQQ,GAAK,GACjC0+D,EAAOt1D,EACPu1D,EAAOx1D,EACPy1D,EAAO11D,EACP21D,EAAOp+D,EACP2I,EAAIi1D,EAAOj1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI49D,EAAO59D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,WACtCkJ,EAAIm1D,EAAOn1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,WACrCmJ,EAAIk1D,EAAOl1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,YACtCoJ,EAAIi1D,EAAOj1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI49D,EAAO59D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACrCkJ,EAAIm1D,EAAOn1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,YACtCmJ,EAAIk1D,EAAOl1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,UACtCoJ,EAAIi1D,EAAOj1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,YACpCS,EAAI49D,EAAO59D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACtCkJ,EAAIm1D,EAAOn1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,OACvCmJ,EAAIk1D,EAAOl1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACvCoJ,EAAIi1D,EAAOj1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,YACrCS,EAAI49D,EAAO59D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,UACvCkJ,EAAIm1D,EAAOn1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,YACvCmJ,EAAIk1D,EAAOl1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,GAAI,YACtCoJ,EAAIk1D,EAAOl1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI69D,EAAO79D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACrCkJ,EAAIo1D,EAAOp1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,WACtCmJ,EAAIm1D,EAAOn1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACtCoJ,EAAIk1D,EAAOl1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI69D,EAAO79D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,EAAG,UACrCkJ,EAAIo1D,EAAOp1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,WACvCmJ,EAAIm1D,EAAOn1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACtCoJ,EAAIk1D,EAAOl1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,WACpCS,EAAI69D,EAAO79D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,GAAI,YACtCkJ,EAAIo1D,EAAOp1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACtCmJ,EAAIm1D,EAAOn1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,GAAI,YACrCoJ,EAAIk1D,EAAOl1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,GAAI,YACtCS,EAAI69D,EAAO79D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,UACrCkJ,EAAIo1D,EAAOp1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,YACrCmJ,EAAIm1D,EAAOn1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACvCoJ,EAAIm1D,EAAOn1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,QACrCS,EAAI89D,EAAO99D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACtCkJ,EAAIq1D,EAAOr1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,YACtCmJ,EAAIo1D,EAAOp1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,UACvCoJ,EAAIm1D,EAAOn1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,YACrCS,EAAI89D,EAAO99D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACrCkJ,EAAIq1D,EAAOr1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACtCmJ,EAAIo1D,EAAOp1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACvCoJ,EAAIm1D,EAAOn1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,WACrCS,EAAI89D,EAAO99D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,WACtCkJ,EAAIq1D,EAAOr1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACtCmJ,EAAIo1D,EAAOp1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,GAAI,UACrCoJ,EAAIm1D,EAAOn1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI89D,EAAO99D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,WACvCkJ,EAAIq1D,EAAOr1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,WACtCmJ,EAAIo1D,EAAOp1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACtCoJ,EAAIo1D,EAAOp1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI+9D,EAAO/9D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACrCkJ,EAAIs1D,EAAOt1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,YACvCmJ,EAAIq1D,EAAOr1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,UACtCoJ,EAAIo1D,EAAOp1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,YACrCS,EAAI+9D,EAAO/9D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACtCkJ,EAAIs1D,EAAOt1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,SACvCmJ,EAAIq1D,EAAOr1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,YACtCoJ,EAAIo1D,EAAOp1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,YACpCS,EAAI+9D,EAAO/9D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,UACvCkJ,EAAIs1D,EAAOt1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,YACtCmJ,EAAIq1D,EAAOr1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,GAAI,YACtCoJ,EAAIo1D,EAAOp1D,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACrCS,EAAI+9D,EAAO/9D,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,YACvCkJ,EAAIs1D,EAAOt1D,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,WACrCmJ,EAAIq1D,EAAOr1D,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACtCoJ,EAAI20D,EAAW30D,EAAGs1D,GAClBv1D,EAAI40D,EAAW50D,EAAGw1D,GAClBz1D,EAAI60D,EAAW70D,EAAG01D,GAClBn+D,EAAIs9D,EAAWt9D,EAAGo+D,GAGpB,MAAO,CAACz1D,EAAGD,EAAGD,EAAGzI,EAClB,EAQKq+D,EAAM,CACVC,UAAW,SAAUn2D,GACnB,OAvIa,SAAUo2D,GACzB,MAAMC,EAAU,mBAChB,IAAIr1D,EAAM,GAEV,IAAK,IAAI5J,EAAI,EAAGA,EAAsB,EAAlBg/D,EAASx/D,OAAYQ,IACvC4J,GAAOq1D,EAAQ5sC,OAAO2sC,EAASh/D,GAAK,IAAMA,EAAI,EAAI,EAAI,EAAI,IAAOi/D,EAAQ5sC,OAAO2sC,EAASh/D,GAAK,IAAMA,EAAI,EAAI,EAAI,IAGlH,OAAO4J,CACR,CA8HUs1D,CAAST,EAASR,EAASr1D,GAAe,EAAXA,EAAEpJ,QACzC,EACD0rC,KAAM,SAAUtiC,GACd,OAxJa,SAAUs1D,GACzB,IAAIt0D,EAAM,GAEV,IAAK,IAAI5J,EAAI,EAAGA,EAAiB,GAAbk+D,EAAI1+D,OAAaQ,GAAK,EACxC4J,GAAOuB,OAAOmnB,aAAa4rC,EAAIl+D,GAAK,KAAOA,EAAI,GAAK,KAGtD,OAAO4J,CACR,CAgJUu1D,CAASV,EAASR,EAASr1D,GAAe,EAAXA,EAAEpJ,QACzC,GAsBH,MAAM4/D,EAaJtkE,YAAY0N,EAAM62D,EAAe9J,GAI/Br6D,KAAKokE,SAAW92D,EAKhBtN,KAAKmkE,cAAgBA,EAarBnkE,KAAKq6D,SAAWA,CACjB,CAqBD1pD,OAEE,OAAO,CACR,CASD0zD,QAAQzlD,GACN5e,KAAKskE,YAAc1lD,CACpB,CAiBD2lD,YAAY3lD,EAAY4lD,GAEtB,MAAM,IAAIjiE,MAAM,2CACjB,CAaDkiE,gBAAgB7lD,GACd,IAAK5e,KAAKmkE,cACR,MAAM,IAAI5hE,MAAM,mEAGlB,OAAOvC,KAAKukE,YAAY3lD,EACzB,CAMD8lD,YACE1kE,KAAKskE,YAAc,IACpB,CAMDK,YACE3kE,KAAKskE,YAAc,IACpB,EAqDH,MAAMM,EACM,SAAUl2D,GAClB,IAAI5J,EAAGkJ,EACH62D,EAAM,GACNngE,EAAMgK,EAAIpK,OAEd,IAAKQ,EAAI,EAAGA,EAAIJ,EAAKI,KACnBkJ,EAAIU,EAAI2jB,WAAWvtB,KAEV,GAAUkJ,GAAK,IACtB62D,GAAOn2D,EAAIyoB,OAAOryB,GACTkJ,EAAI,MACb62D,GAAO50D,OAAOmnB,aAAa,IAAOppB,GAAK,GAAK,IAC5C62D,GAAO50D,OAAOmnB,aAAa,IAAOppB,GAAK,EAAI,IAC3C62D,GAAO50D,OAAOmnB,aAAa,IAAOppB,GAAK,EAAI,MAE3C62D,GAAO50D,OAAOmnB,aAAa,IAAOppB,GAAK,EAAI,IAC3C62D,GAAO50D,OAAOmnB,aAAa,IAAOppB,GAAK,EAAI,KAI/C,OAAO62D,CACR,EAtBGD,EAuBQ,SAAUE,GAoBpBA,EAAUA,GAAW,CAAC,EAEtB,IAAK,MAAMC,KAAcD,EACvB,GAAIrlE,OAAO+C,UAAUgF,eAAeC,KAAKq9D,EAASC,GAAa,CAC7D,IAAIC,EAAU,GACVC,EAAS,GACTC,EAAO,GACX,MAAMC,EAAYL,EAAQC,GACpBK,EAA6B,iBAAdD,EACfE,EAAcv2B,OAAOw2B,SAASF,EAAQD,EAAUt9D,MAAQs9D,IAE1DC,IACFJ,EAAUG,EAAUH,QAAU,YAAcG,EAAUH,QAAU,GAChEC,EAASE,EAAUF,OAAS,WAAaE,EAAUF,OAAS,GAC5DC,EAAOC,EAAUD,KAAO,SAAWC,EAAUD,KAAO,IAGtD1/D,SAAS+/D,OAASR,EAAa,IAAMM,EAAcL,EAAUC,EAASC,CACvE,CAEJ,EA+FH,SAASM,EAAUnzD,EAAG3N,GAEpB2N,EAAE3N,GAAO,IAAM,KAAQ,GAAKA,EAAM,GAClC2N,EAAyB,IAAtB3N,EAAM,IAAM,GAAK,IAAWA,EAC/B,IAMII,EAAGqM,EAAGnF,EAAGw3D,EAAMC,EAAMC,EAAMC,EAAM8B,EANjC9yC,EAAI,IAAI1nB,MAAM,IACdiD,EAAI,WACJD,GAAK,UACLD,GAAK,WACLzI,EAAI,UACJqI,GAAK,WAGT,IAAK9I,EAAI,EAAGA,EAAIuN,EAAE/N,OAAQQ,GAAK,GAAI,CAOjC,IANA0+D,EAAOt1D,EACPu1D,EAAOx1D,EACPy1D,EAAO11D,EACP21D,EAAOp+D,EACPkgE,EAAO73D,EAEFuD,EAAI,EAAGA,EAAI,GAAIA,IAEhBwhB,EAAExhB,GADAA,EAAI,GACCkB,EAAEvN,EAAIqM,GAENu0D,EAAI/yC,EAAExhB,EAAI,GAAKwhB,EAAExhB,EAAI,GAAKwhB,EAAExhB,EAAI,IAAMwhB,EAAExhB,EAAI,IAAK,GAG1DnF,EAAI25D,EAASA,EAASD,EAAIx3D,EAAG,GAAI03D,EAAQz0D,EAAGlD,EAAGD,EAAGzI,IAAKogE,EAASA,EAAS/3D,EAAG+kB,EAAExhB,IAAK00D,EAAQ10D,KAC3FvD,EAAIrI,EACJA,EAAIyI,EACJA,EAAI03D,EAAIz3D,EAAG,IACXA,EAAIC,EACJA,EAAIlC,EAGNkC,EAAIy3D,EAASz3D,EAAGs1D,GAChBv1D,EAAI03D,EAAS13D,EAAGw1D,GAChBz1D,EAAI23D,EAAS33D,EAAG01D,GAChBn+D,EAAIogE,EAASpgE,EAAGo+D,GAChB/1D,EAAI+3D,EAAS/3D,EAAG63D,EACjB,CAED,MAAO,CAACv3D,EAAGD,EAAGD,EAAGzI,EAAGqI,EACrB,CAOD,SAASg4D,EAAQ55D,EAAGiC,EAAGD,EAAGzI,GACxB,OAAIyG,EAAI,GACCiC,EAAID,GAAKC,EAAI1I,EAGlByG,EAAI,GACCiC,EAAID,EAAIzI,EAGbyG,EAAI,GACCiC,EAAID,EAAIC,EAAI1I,EAAIyI,EAAIzI,EAGtB0I,EAAID,EAAIzI,CAChB,CAMD,SAASsgE,EAAQ75D,GACf,OAAOA,EAAI,GAAK,WAAaA,EAAI,GAAK,WAAaA,EAAI,IAAM,YAAc,SAC5E,CAMD,SAAS85D,EAAel+D,EAAKqY,GAC3B,IAAI8lD,EAAOC,EAASp+D,GAEhBm+D,EAAKzhE,OAAS,KAChByhE,EAAOP,EAAUO,EAAmB,EAAbn+D,EAAItD,SAM7B,IAHA,IAAI2hE,EAAO,IAAIh7D,MAAM,IACjBi7D,EAAO,IAAIj7D,MAAM,IAEZnG,EAAI,EAAGA,EAAI,GAAIA,IACtBmhE,EAAKnhE,GAAe,UAAVihE,EAAKjhE,GACfohE,EAAKphE,GAAe,WAAVihE,EAAKjhE,GAGjB,IAAIkrC,EAAOw1B,EAAUS,EAAKl6D,OAAOi6D,EAAS/lD,IAAQ,IAAoB,EAAdA,EAAK3b,QAC7D,OAAOkhE,EAAUU,EAAKn6D,OAAOikC,GAAO,IACrC,CAOD,SAAS21B,EAAStzD,EAAG0I,GACnB,IAAI+nD,GAAW,MAAJzwD,IAAmB,MAAJ0I,GAE1B,OADW1I,GAAK,KAAO0I,GAAK,KAAO+nD,GAAO,KAC5B,GAAW,MAANA,CACpB,CAMD,SAAS4C,EAAIz3C,EAAKi1C,GAChB,OAAOj1C,GAAOi1C,EAAMj1C,IAAQ,GAAKi1C,CAClC,CAOD,SAAS8C,EAASt3D,GAIhB,IAHA,IAAIs0D,EAAM,GAGDl+D,EAAI,EAAGA,EAAiB,EAAb4J,EAAIpK,OAAYQ,GAAK,EACvCk+D,EAAIl+D,GAAK,KAHA,IAGO4J,EAAI2jB,WAAWvtB,EAAI,KAAc,GAAKA,EAAI,GAG5D,OAAOk+D,CACR,CAMD,SAASmD,EAASrC,GAKhB,IAJA,IAEIsC,EAASj1D,EADTzC,EAAM,GAGD5J,EAAI,EAAGA,EAAsB,EAAlBg/D,EAASx/D,OAAYQ,GAAK,EAG5C,IAFAshE,GAAWtC,EAASh/D,GAAK,IAAM,GAAK,EAAIA,EAAI,GAAK,MAAS,IAAMg/D,EAASh/D,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,MAAS,EAAIg/D,EAASh/D,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,IAExKqM,EAAI,EAAGA,EAAI,EAAGA,IACT,EAAJrM,EAAY,EAAJqM,EAA0B,GAAlB2yD,EAASx/D,OAC3BoK,GAAO,IAEPA,GAXI,mEAWOyoB,OAAOivC,GAAW,GAAK,EAAIj1D,GAAK,IAKjD,OAAOzC,CACR,CAMD,SAAS23D,EAASrD,GAIhB,IAHA,IAAIt0D,EAAM,GAGD5J,EAAI,EAAGA,EAAiB,GAAbk+D,EAAI1+D,OAAaQ,GAAK,EACxC4J,GAAOuB,OAAOmnB,aAAa4rC,EAAIl+D,GAAK,KAAO,GAAKA,EAAI,GAH3C,KAMX,OAAO4J,CACR,CAOD,MAAM43D,EAAO,CACXC,cAAe,SAAU3+D,EAAKqY,GAC5B,OAAOkmD,EAASL,EAAel+D,EAAKqY,GACrC,EACDumD,SAAU,SAAU94D,GAClB,OAAOy4D,EAASX,EAAUQ,EAASt4D,GAAe,EAAXA,EAAEpJ,QAC1C,EACD+hE,SAAUA,EACVP,eAAgBA,EAChBW,cAAe,SAAU7+D,EAAKqY,GAC5B,OAAOomD,EAASP,EAAel+D,EAAKqY,GACrC,EACDymD,SAAU,SAAUh5D,GAClB,OAAO24D,EAASb,EAAUQ,EAASt4D,GAAe,EAAXA,EAAEpJ,QAC1C,GA8NH,MAAMqiE,EAAW,mEAEjB,SAASC,EAAWC,GAClB,MAAMvwD,EAAQqwD,EAASl8D,QAAQo8D,GAE/B,OAAOvwD,EAAQ,OAAIxP,EAAYwP,CAChC,CA2DD,MAAMwwD,EAAS,mEAEf,SAASC,EAAWzwD,GAClB,GAAIA,GAAS,GAAKA,EAAQ,GACxB,OAAOwwD,EAAOxwD,EAKjB,CAQD,IAAI0wD,EAAO,CACTC,KA7KF,SAAgBhnD,GACd,GAAyB,IAArBvX,UAAUpE,OACZ,MAAM,IAAIoX,UAAU,4CAwBtB,IAjBAuE,GAFAA,EAAQ,GAAEA,KAEEhe,QAAQ,eAAgB,KAG3BqC,OAAS,GAAM,IACtB2b,EAAOA,EAAKhe,QAAQ,OAAQ,KAa1Bge,EAAK3b,OAAS,GAAM,GAAK,iBAAiBqM,KAAKsP,GACjD,OAAO,KAIT,IAAI0Z,EAAS,GAKThZ,EAAS,EACTumD,EAAkB,EAKtB,IAAK,IAAIpiE,EAAI,EAAGA,EAAImb,EAAK3b,OAAQQ,IAS/B6b,IAAW,EACXA,GAAUimD,EAAW3mD,EAAKnb,IAC1BoiE,GAAmB,EAIK,KAApBA,IACFvtC,GAAU1pB,OAAOmnB,cAAuB,SAATzW,IAAsB,IACrDgZ,GAAU1pB,OAAOmnB,cAAuB,MAATzW,IAAoB,GACnDgZ,GAAU1pB,OAAOmnB,aAAsB,IAATzW,GAC9BA,EAASumD,EAAkB,GAqB/B,OAVwB,KAApBA,GACFvmD,IAAW,EACXgZ,GAAU1pB,OAAOmnB,aAAazW,IACD,KAApBumD,IACTvmD,IAAW,EACXgZ,GAAU1pB,OAAOmnB,cAAuB,MAATzW,IAAoB,GACnDgZ,GAAU1pB,OAAOmnB,aAAsB,IAATzW,IAIzBgZ,CACR,EA2FCwtC,KArEF,SAAgBz5D,GACd,GAAyB,IAArBhF,UAAUpE,OACZ,MAAM,IAAIoX,UAAU,4CAGtB,IAAI5W,EAKJ,IAHA4I,EAAK,GAAEA,IAGF5I,EAAI,EAAGA,EAAI4I,EAAEpJ,OAAQQ,IACxB,GAAI4I,EAAE2kB,WAAWvtB,GAAK,IACpB,OAAO,KAIX,IAAI+/D,EAAM,GAEV,IAAK//D,EAAI,EAAGA,EAAI4I,EAAEpJ,OAAQQ,GAAK,EAAG,CAChC,MAAMsiE,EAAc,MAACtgE,OAAWA,OAAWA,OAAWA,GACtDsgE,EAAY,GAAK15D,EAAE2kB,WAAWvtB,IAAM,EACpCsiE,EAAY,IAAwB,EAAlB15D,EAAE2kB,WAAWvtB,KAAc,EAEzC4I,EAAEpJ,OAASQ,EAAI,IACjBsiE,EAAY,IAAM15D,EAAE2kB,WAAWvtB,EAAI,IAAM,EACzCsiE,EAAY,IAA4B,GAAtB15D,EAAE2kB,WAAWvtB,EAAI,KAAc,GAG/C4I,EAAEpJ,OAASQ,EAAI,IACjBsiE,EAAY,IAAM15D,EAAE2kB,WAAWvtB,EAAI,IAAM,EACzCsiE,EAAY,GAA2B,GAAtB15D,EAAE2kB,WAAWvtB,EAAI,IAGpC,IAAK,IAAIqM,EAAI,EAAGA,EAAIi2D,EAAY9iE,OAAQ6M,SACR,IAAnBi2D,EAAYj2D,GACrB0zD,GAAO,IAEPA,GAAOkC,EAAWK,EAAYj2D,GAGnC,CAED,OAAO0zD,CACR,GA+CD,SAASwC,EAAO/5D,EAAMg6D,GACpB,OAAO,IAAIC,EAAQC,QAAQl6D,EAAMg6D,EAClC,CAWD,SAASG,EAAKH,GACZ,OAAO,IAAIC,EAAQC,QAAQ,UAAWF,EACvC,CAWD,SAASI,EAAIJ,GACX,OAAO,IAAIC,EAAQC,QAAQ,KAAMF,EAClC,CAWD,SAASK,EAAML,GACb,OAAO,IAAIC,EAAQC,QAAQ,WAAYF,EACxC,CASD,MAAMC,EAAU,CAEdK,QAAS,QAqBTC,GAAI,CACFC,SAAU,sCACVC,KAAM,iBACNC,OAAQ,gBACRC,KAAM,iBACNC,OAAQ,mBACRC,QAAS,oBACTC,WAAY,wCACZC,YAAa,yCACbC,IAAK,iCACLC,KAAM,mCACNC,OAAQ,mCACRC,QAAS,sCACTC,KAAM,mCACNC,QAAS,sCACTf,QAAS,oBACTgB,QAAS,sCACTC,SAAU,sCACVC,MAAO,gCASTA,MAAO,CACLC,KAAM,CAAC,IAAK,aAAc,KAAM,OAAQ,KAAM,MAAO,KAAM,KAAM,IAAK,OAAQ,SAAU,KAAM,QAC9Fn7B,WAAY,CACV,EAAK,CAAC,QACN,WAAc,CAAC,SACf,GAAM,GACN,KAAQ,CAAC,SACT,GAAM,GACN,IAAO,CAAC,MAAO,MAAO,QAAS,SAAU,SACzC,GAAM,CAAC,SACP,GAAM,CAAC,SACP,EAAK,CAAC,SACN,KAAQ,CAAC,SACT,OAAU,GACV,GAAM,CAAC,SACP,KAAQ,IAEV6H,IAAK,CAAC,mBAAoB,QAAS,cAAe,YAAa,aAAc,cAAe,cAAe,eAAgB,aAAc,mBASzIuzB,SAAS9Y,GACP,IAAK,IAAIprD,EAAI,EAAGA,EAAIyiE,EAAQuB,MAAMC,KAAKzkE,OAAQQ,IAC7C,GAAIorD,IAAQqX,EAAQuB,MAAMC,KAAKjkE,GAC7B,OAAO,EAIX,OAAO,CACR,EASDmkE,eAAe/Y,EAAKphD,GAClB,QAA6C,IAAlCy4D,EAAQuB,MAAMl7B,WAAWsiB,IAAwBqX,EAAQuB,MAAMl7B,WAAWsiB,GAAK5rD,OAAS,EACjG,IAAK,IAAIQ,EAAI,EAAGA,EAAIyiE,EAAQuB,MAAMl7B,WAAWsiB,GAAK5rD,OAAQQ,IACxD,GAAIgK,IAAcy4D,EAAQuB,MAAMl7B,WAAWsiB,GAAKprD,GAC9C,OAAO,EAKb,OAAO,CACR,EAEDokE,SAAS3zB,GACP,IAAK,IAAIzwC,EAAI,EAAGA,EAAIyiE,EAAQuB,MAAMrzB,IAAInxC,OAAQQ,IAC5C,GAAIywC,IAAUgyB,EAAQuB,MAAMrzB,IAAI3wC,GAC9B,OAAO,EAIX,OAAO,CACR,GAoBHqkE,OAAQ,CACN//D,MAAO,EACPggE,WAAY,EACZC,SAAU,EACVC,eAAgB,EAChBC,SAAU,EACVC,UAAW,EACXC,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,YAAa,GACbC,aAAc,GACdC,WAAY,IAEdC,eAAgB,CACdC,WAAY,aACZC,SAAU,WACVC,iBAAkB,6BAClBC,aAAc,eACdC,eAAgB,WAYlBC,SAAU,CACR59D,MAAO,EACPC,KAAM,EACNE,KAAM,EACNzD,MAAO,EACPmhE,MAAO,GAUTC,YAAa,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,IAiBZC,QAAS,IACTC,kBAAmB,GAcnBC,aAAaz9D,EAAMzF,GACjB0/D,EAAQM,GAAGv6D,GAAQzF,CACpB,EAgBDmjE,aAAazyB,EAAM0yB,EAAUje,GAC3B,IAAK,IAAIloD,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAAK,CAC/C,MAAMomE,EAAY3yB,EAAK3M,WAAW9mC,GAE9BomE,EAAUjjC,WAAas/B,EAAQiD,YAAYC,QAAYQ,IAAYjrE,KAAKmrE,WAAWD,EAAWD,IAChGje,EAAKke,EAER,CACF,EAeDC,WAAU,CAACn4D,EAAI1F,IACN0F,EAAGvN,UAAY6H,EAOxB89D,cAAe,KAQfC,aAAY,KACL9D,EAAQ6D,gBACX7D,EAAQ6D,cAAgB9I,KAGnBiF,EAAQ6D,eAqBjBE,WAAWh+D,GACT,IAAKA,EACH,OAAO,KAGT,MAAM/F,EAAOggE,EAAQ8D,eAAe1lE,cAAc2H,GAGlD,IAAK,IAAIY,EAAI,EAAGA,EAAIxF,UAAUpE,OAAQ4J,IAAK,CACzC,MAAM/E,EAAMT,UAAUwF,GAEtB,GAAK/E,EAIL,GAAmB,iBAARA,GAAmC,iBAARA,EACpC5B,EAAKjB,YAAYihE,EAAQgE,YAAYpiE,SAChC,GAAmB,iBAARA,GAAwC,mBAAbA,EAAIirB,KAC/C,IAAK,IAAItvB,EAAI,EAAGA,EAAIqE,EAAI7E,OAAQQ,IAAK,CACnC,MAAM8pC,EAAOzlC,EAAIrE,GAEG,iBAAT8pC,GAA0C,mBAAdA,EAAKxa,WAAmCttB,IAAZ8nC,EAAK,IAAgC,OAAZA,EAAK,IAC/FrnC,EAAK8gC,aAAauG,EAAK,GAAIA,EAAK,GAEnC,MACI,GAAmB,iBAARzlC,EAChB,IAAK,MAAMmW,KAAKnW,EACV1J,OAAO+C,UAAUgF,eAAeC,KAAK0B,EAAKmW,SAAiBxY,IAAXqC,EAAImW,IAA+B,OAAXnW,EAAImW,IAC9E/X,EAAK8gC,aAAa/oB,EAAGnW,EAAImW,GAIhC,CAED,OAAO/X,CACR,EAWDikE,UAAU7kE,IAIRA,GADAA,GADAA,GADAA,EAAOA,EAAK1E,QAAQ,MAAO,UACfA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,WACdA,QAAQ,KAAM,UAa5BwpE,YAAY9kE,IAIVA,GADAA,GADAA,GADAA,EAAOA,EAAK1E,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,KAejCspE,YAAY5kE,GACH4gE,EAAQ8D,eAAev0B,eAAenwC,GAY/C+kE,YAAYzvB,GACV,IAAI10C,EAWJ,OATIk8C,EAEFl8C,GADe,IAAIk8C,GACLC,gBAAgBzH,EAAM,aAEpC10C,EAAO,IAAIo7D,cAAc,oBACzBp7D,EAAKrC,MAAQ,QACbqC,EAAKokE,QAAQ1vB,IAGR10C,CACR,EAWD2nC,QAAQqJ,GACN,IAAKA,EACH,OAAO,KAGT,IAAI7pC,EAAM,GAEqB,IAA3B6pC,EAAK3M,WAAWtnC,QAAgBi0C,EAAKtQ,WAAas/B,EAAQiD,YAAYE,OACxEh8D,GAAO6pC,EAAKlJ,WAGd,IAAK,IAAIvqC,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IACtCyzC,EAAK3M,WAAW9mC,GAAGmjC,WAAas/B,EAAQiD,YAAYE,OACtDh8D,GAAO6pC,EAAK3M,WAAW9mC,GAAGuqC,WAI9B,OAAOk4B,EAAQiE,UAAU98D,EAC1B,EAcDk9D,YAAYrzB,GACV,IAAIvlC,EAEJ,GAAIulC,EAAKtQ,WAAas/B,EAAQiD,YAAYC,OAAQ,CAChDz3D,EAAKu0D,EAAQ+D,WAAW/yB,EAAK9yC,SAE7B,IAAK,IAAIX,EAAI,EAAGA,EAAIyzC,EAAK3K,WAAWtpC,OAAQQ,IAC1CkO,EAAGq1B,aAAakQ,EAAK3K,WAAW9oC,GAAG4mC,SAAU6M,EAAK3K,WAAW9oC,GAAG+C,OAGlE,IAAK,IAAI/C,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAC1CkO,EAAG1M,YAAYihE,EAAQqE,YAAYrzB,EAAK3M,WAAW9mC,IAEtD,MAAUyzC,EAAKtQ,WAAas/B,EAAQiD,YAAYE,OAC/C13D,EAAKu0D,EAAQ8D,eAAev0B,eAAeyB,EAAKlJ,YAGlD,OAAOr8B,CACR,EAcD64D,WAAWtzB,GACT,IAAIvlC,EAEJ,GAAIulC,EAAKtQ,WAAas/B,EAAQiD,YAAYC,OAAQ,CAChD,MAAMva,EAAM3X,EAAK7M,SAAS7Z,cAE1B,GAAI01C,EAAQuB,MAAME,SAAS9Y,GACzB,IACEl9C,EAAKu0D,EAAQ+D,WAAWpb,GAExB,IAAK,IAAIprD,EAAI,EAAGA,EAAIyiE,EAAQuB,MAAMl7B,WAAWsiB,GAAK5rD,OAAQQ,IAAK,CAC7D,MAAMgK,EAAYy4D,EAAQuB,MAAMl7B,WAAWsiB,GAAKprD,GAChD,IAAI+C,EAAQ0wC,EAAKnQ,aAAat5B,GAE9B,GAAI,MAAOjH,GAAqD,KAAVA,IAA0B,IAAVA,GAA6B,IAAVA,EASzF,GALkB,UAAdiH,GAA0C,iBAAVjH,QAA+C,IAAlBA,EAAMk2C,UACrEl2C,EAAQA,EAAMk2C,SAIE,UAAdjvC,EAAuB,CACzB,MAAM2mC,EAAM,GACNq2B,EAAWjkE,EAAM6D,MAAM,KAE7B,IAAK,IAAIyF,EAAI,EAAGA,EAAI26D,EAASxnE,OAAQ6M,IAAK,CACxC,MAAMy9B,EAAOk9B,EAAS36D,GAAGzF,MAAM,KACzBqgE,EAAUn9B,EAAK,GAAG3sC,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAI4vB,cAEhE,GAAI01C,EAAQuB,MAAMI,SAAS6C,GAAU,CACnC,MAAMC,EAAWp9B,EAAK,GAAG3sC,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAC7DwzC,EAAI7zC,KAAKmqE,EAAU,KAAOC,EAC3B,CACF,CAEGv2B,EAAInxC,OAAS,IACfuD,EAAQ4tC,EAAIxiC,KAAK,MACjBD,EAAGq1B,aAAav5B,EAAWjH,GAE9B,MACCmL,EAAGq1B,aAAav5B,EAAWjH,EAE9B,CAED,IAAK,IAAI/C,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAC1CkO,EAAG1M,YAAYihE,EAAQsE,WAAWtzB,EAAK3M,WAAW9mC,IAErD,CAAC,MAAO8I,GAEPoF,EAAKu0D,EAAQgE,YAAY,GAC1B,KACI,CACLv4D,EAAKu0D,EAAQ8D,eAAex1B,yBAE5B,IAAK,IAAI/wC,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAC1CkO,EAAG1M,YAAYihE,EAAQsE,WAAWtzB,EAAK3M,WAAW9mC,IAErD,CACF,MAAM,GAAIyzC,EAAKtQ,WAAas/B,EAAQiD,YAAYI,SAAU,CACzD53D,EAAKu0D,EAAQ8D,eAAex1B,yBAE5B,IAAK,IAAI/wC,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAC1CkO,EAAG1M,YAAYihE,EAAQsE,WAAWtzB,EAAK3M,WAAW9mC,IAErD,MAAUyzC,EAAKtQ,WAAas/B,EAAQiD,YAAYE,OAC/C13D,EAAKu0D,EAAQgE,YAAYhzB,EAAKlJ,YAGhC,OAAOr8B,CACR,EAWDi5D,WAAW1kE,GACW,iBAATA,EACFA,EAGFA,EAAKtF,QAAQ,aAAc,IAAIA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAYjQiqE,aAAa3kE,GACS,iBAATA,EACFA,EAGFA,EAAKtF,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,MAYrOkqE,eAAeC,GACTA,EAAI3hE,QAAQ,KAAO,EACd,KAGF2hE,EAAI1gE,MAAM,KAAK,GAYxB2gE,iBAAiBD,GACf,MAAME,EAAO/E,EAAQgF,kBAAkBH,GAEvC,GAAIE,EAAK7hE,QAAQ,KAAO,EACtB,OAAO6hE,EACF,CACL,MAAM36D,EAAQ26D,EAAK5gE,MAAM,KAEzB,OADAiG,EAAM/G,OAAO,EAAG,GACT+G,EAAMsB,KAAK,IACnB,CACF,EAWDu5D,mBAAmBJ,GACjB,IAAKA,EACH,OAAO,KAGT,MAAM1+D,EAAI0+D,EAAI1gE,MAAM,KAEpB,OAAIgC,EAAEpJ,OAAS,EACN,MAGToJ,EAAE9C,OAAO,EAAG,GACL8C,EAAEuF,KAAK,KACf,EAWDs5D,kBAAkBH,GACTA,EAAMA,EAAI1gE,MAAM,KAAK,GAAK,KAMnC+gE,aAAa7+D,QACY,IAAZA,EAAEnC,OACX87D,EAAQmF,MAAM9+D,EAAEnC,OAGdmC,EAAE++D,UACJpF,EAAQmF,MAAM,UAAY1sE,KAAKqD,QAAU,IAAMuK,EAAE++D,UAAY,IAAM/+D,EAAErC,KAAO,MAAQqC,EAAEN,KAAO,KAAOM,EAAEkW,SAC7FlW,EAAE2gB,SACXg5C,EAAQmF,MAAM,UAAY1sE,KAAKqD,QAAU,IAAMuK,EAAE2gB,SAAW,IAAM3gB,EAAEg/D,WAAa,MAAQh/D,EAAEN,KAAO,KAAOM,EAAEkW,SAE3GyjD,EAAQmF,MAAM,UAAY9+D,EAAEkW,QAE/B,EA+BDhZ,IAAIE,EAAO9B,GAEP,IAAI2jE,EADF7hE,IAAUhL,KAAKsqE,SAASC,QAGD,QAAxBsC,EAAWxiE,eAAkC,IAAbwiE,GAA+BA,EAASlpE,MAAMuF,GAElF,EAQD+U,MAAM/U,GACJlJ,KAAK8K,IAAI9K,KAAKsqE,SAAS59D,MAAOxD,EAC/B,EAQDmO,KAAKnO,GACHlJ,KAAK8K,IAAI9K,KAAKsqE,SAAS39D,KAAMzD,EAC9B,EAQDoa,KAAKpa,GACHlJ,KAAK8K,IAAI9K,KAAKsqE,SAASz9D,KAAM3D,EAC9B,EAQDvF,MAAMuF,GACJlJ,KAAK8K,IAAI9K,KAAKsqE,SAASlhE,MAAOF,EAC/B,EAQDwjE,MAAMxjE,GACJlJ,KAAK8K,IAAI9K,KAAKsqE,SAASC,MAAOrhE,EAC/B,EAWDg7C,UAAU3L,GACR,IAAKA,EACH,OAAO,KAGgB,mBAAdA,EAAKu0B,OACdv0B,EAAOA,EAAKu0B,QAGd,MAAMvmE,EAAQ,IAAI0E,MAAMstC,EAAK3K,WAAWtpC,QAAQgE,QAAQmJ,KAAI3M,GAAKyzC,EAAK3K,WAAW9oC,GAAG4mC,WACpFnlC,EAAM6tB,OACN,IAAIvvB,EAAS0B,EAAMgL,QAAO,CAACrD,EAAGqE,IAAO,GAAErE,KAAKqE,MAAMg1D,EAAQiE,UAAUjzB,EAAK3K,WAAWm/B,aAAax6D,GAAG1K,WAAY,IAAG0wC,EAAK7M,YAExH,GAAI6M,EAAK3M,WAAWtnC,OAAS,EAAG,CAC9BO,GAAU,IAEV,IAAK,IAAIC,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAAK,CAC/C,MAAMkoE,EAAQz0B,EAAK3M,WAAW9mC,GAE9B,OAAQkoE,EAAM/kC,UACZ,KAAKs/B,EAAQiD,YAAYC,OAEvB5lE,GAAU0iE,EAAQrjB,UAAU8oB,GAC5B,MAEF,KAAKzF,EAAQiD,YAAYE,KAEvB7lE,GAAU0iE,EAAQiE,UAAUwB,EAAM39B,WAClC,MAEF,KAAKk4B,EAAQiD,YAAYG,MAEvB9lE,GAAU,YAAcmoE,EAAM39B,UAAY,MAE/C,CAEDxqC,GAAU,KAAO0zC,EAAK7M,SAAW,GAClC,MACC7mC,GAAU,KAGZ,OAAOA,CACR,EAMDooE,WAAY,EAMZC,mBAAoB,CAAC,EASrBC,oBAAoB7/D,EAAM8/D,GACxB7F,EAAQ2F,mBAAmB5/D,GAAQ8/D,CACpC,EA8CH7F,QAAkB,MAChB3nE,YAAY0N,EAAMg6D,GAEH,aAATh6D,GAAgC,YAATA,GAA+B,OAATA,IAC3Cg6D,IAAUA,EAAM+F,MAClB/F,EAAM+F,MAAQ9F,EAAQM,GAAGG,OACfV,IACVA,EAAQ,CACN+F,MAAO9F,EAAQM,GAAGG,UAMxBhoE,KAAKstE,SAAW/F,EAAQ+D,WAAWh+D,EAAMg6D,GAEzCtnE,KAAKuH,KAAOvH,KAAKstE,QAClB,CAYDR,OACE,OAAO9sE,KAAKstE,QACb,CAaD97D,WACE,OAAO+1D,EAAQrjB,UAAUlkD,KAAKstE,SAC/B,CAaDC,KAEE,OADAvtE,KAAKuH,KAAOvH,KAAKuH,KAAKnB,WACfpG,IACR,CAaDlB,OAEE,OADAkB,KAAKuH,KAAOvH,KAAKstE,SACVttE,IACR,CAeDsnE,MAAMkG,GACJ,IAAK,MAAMluD,KAAKkuD,EACV/tE,OAAO+C,UAAUgF,eAAeC,KAAK+lE,EAAWluD,UAC7BxY,IAAjB0mE,EAAUluD,GACZtf,KAAKuH,KAAKglC,gBAAgBjtB,GAE1Btf,KAAKuH,KAAK8gC,aAAa/oB,EAAGkuD,EAAUluD,KAK1C,OAAOtf,IACR,CAmBDgO,EAAEV,EAAMg6D,EAAO3gE,GACb,MAAMqmE,EAAQzF,EAAQ+D,WAAWh+D,EAAMg6D,EAAO3gE,GAO9C,OANA3G,KAAKuH,KAAKjB,YAAY0mE,GAEF,iBAATrmE,GAAqC,iBAATA,IACrC3G,KAAKuH,KAAOylE,GAGPhtE,IACR,CAiBDytE,MAAMl1B,GACJ,IAAIm1B,EACJ,MAAMC,EAASpG,EAAQ8D,eAEvB,IACEqC,OAAgC5mE,IAAtB6mE,EAAOC,UAClB,CAAC,MAAOhgE,GACP8/D,GAAU,CACX,CAED,MAAMG,EAAUH,EAAUC,EAAOC,WAAWr1B,GAAM,GAAQgvB,EAAQqE,YAAYrzB,GAG9E,OAFAv4C,KAAKuH,KAAKjB,YAAYunE,GACtB7tE,KAAKuH,KAAOsmE,EACL7tE,IACR,CAeDgM,EAAErF,GACA,MAAMqmE,EAAQzF,EAAQgE,YAAY5kE,GAElC,OADA3G,KAAKuH,KAAKjB,YAAY0mE,GACfhtE,IACR,CAcDsyB,EAAE2pB,GACA,MAAM6xB,EAAWvG,EAAQ8D,eAAe1lE,cAAc,QAEtDmoE,EAAS5/B,UAAY+N,EAErB,MAAM8xB,EAAQxG,EAAQsE,WAAWiC,GAEjC,KAAOC,EAAMniC,WAAWtnC,OAAS,GAC/BtE,KAAKuH,KAAKjB,YAAYynE,EAAMniC,WAAW,IAGzC,OAAO5rC,IACR,GAiCHunE,QAAkB,SAAUlkE,EAAS2qE,EAAI1gE,EAAM0D,EAAM5E,EAAI0P,EAAM/U,GAC7D/G,KAAKqD,QAAUA,EACfrD,KAAKguE,GAAKA,EACVhuE,KAAKsN,KAAOA,EACZtN,KAAKgR,KAAOA,EACZhR,KAAKoM,GAAKA,EACVpM,KAAK+G,QAAUA,GAAW,CACxB,kBAAoB,EACpB,yBAA2B,GAGzB/G,KAAK+G,QAAQknE,YACf1G,EAAQjkD,KAAK,yEACbtjB,KAAK+G,QAAQmnE,iBAAmBluE,KAAK+G,QAAQknE,iBACtCjuE,KAAK+G,QAAQknE,WAGlBjuE,KAAK+G,QAAQmnE,iBACfluE,KAAK8b,KAAOA,EAAOyrD,EAAQgF,kBAAkBzwD,GAAQ,KAErD9b,KAAK8b,KAAOA,EAId9b,KAAKmuE,MAAO,CACb,GAED5G,EAAQ6G,QAAQ5rE,UAAY,CAY1B6rE,aAAa91B,GACX,IAAI+1B,EAAc/1B,EAAKnQ,aAAa,SAMpC,OAJIkmC,GAAetuE,KAAK+G,QAAQwnE,0BAC9BD,EAAcA,EAAY5iE,MAAM,KAAK,IAGhC4iE,CACR,EAWDE,eAAej2B,GACb,IAAIk2B,GAAU,EAEd,OAAKzuE,KAAKguE,KAGRzG,EAAQyD,aAAazyB,EAAM,MAAMA,IAC3Bv4C,KAAKquE,aAAa91B,KAAUv4C,KAAKguE,KACnCS,GAAU,EACX,IAEIA,GAAWzuE,KAAKquE,aAAa91B,KAAUv4C,KAAKguE,GAEtD,EAWDU,QAAQn2B,GACN,IAAIz8B,EAAOy8B,EAAKnQ,aAAa,QAEzBpoC,KAAK+G,QAAQmnE,mBACfpyD,EAAOyrD,EAAQgF,kBAAkBzwD,IAGnC,MAAM6yD,EAAYp2B,EAAKnQ,aAAa,QAEpC,SAAIpoC,KAAKwuE,eAAej2B,IAAWv4C,KAAKsN,OAAQi6D,EAAQ4D,WAAW5yB,EAAMv4C,KAAKsN,OAAYtN,KAAKgR,OAAS/F,MAAMgJ,QAAQjU,KAAKgR,OAA0C,IAAlChR,KAAKgR,KAAKvG,QAAQkkE,GAAoBA,IAAc3uE,KAAKgR,OAAYhR,KAAKoM,IAAMmsC,EAAKnQ,aAAa,QAAUpoC,KAAKoM,IAASpM,KAAK8b,MAAQA,IAAS9b,KAAK8b,KAKzR,EAYD8yD,IAAIr2B,GACF,IAAI1zC,EAAS,KAEb,IACEA,EAAS7E,KAAKqD,QAAQk1C,EACvB,CAAC,MAAO3qC,GAGP,MAFA25D,EAAQkF,aAAa7+D,GAEfA,CACP,CAED,OAAO/I,CACR,EAQD2M,WACE,MAAO,aAAexR,KAAKqD,QAAU,IAAMrD,KAAKsN,KAAO,IAAMtN,KAAKoM,GAAK,IAAMpM,KAAKguE,GAAK,IACxF,GAgBHzG,EAAQsH,aAAe,MAarBjvE,YAAYkvE,EAAQzrE,GAClBrD,KAAK8uE,OAASA,EACd9uE,KAAKqD,QAAUA,EACfrD,KAAK+uE,YAAa,IAAI9tE,MAAO4rB,UAC7B7sB,KAAKmuE,MAAO,CACb,CAUDS,MAEE,OADA5uE,KAAK+uE,YAAa,IAAI9tE,MAAO4rB,UACtB7sB,KAAKqD,SACb,CAMDguC,QACErxC,KAAK+uE,YAAa,IAAI9tE,MAAO4rB,SAC9B,CASDrb,WACE,MAAO,kBAAoBxR,KAAKqD,QAAU,IAAMrD,KAAK8uE,OAAS,IAC/D,GAuKHvH,EAAQyH,WAAa,MACnBpvE,YAAYqvE,EAASloE,GAEnB/G,KAAKivE,QAAUA,EAEfjvE,KAAK+G,QAAUA,GAAW,CAAC,EAC3B/G,KAAKkvE,cAGLlvE,KAAKosE,IAAM,GAGXpsE,KAAKilE,OAAS,KAGdjlE,KAAKmvE,SAAW,KAEhBnvE,KAAKovE,WAAa,CAAC,EACnBpvE,KAAKqvE,SAAU,EACfrvE,KAAKsvE,YAAa,EAClBtvE,KAAKuvE,WAAa,CAAC,EAEnBvvE,KAAKwvE,cAAgB,GACrBxvE,KAAK+C,SAAW,GAChB/C,KAAKyvE,aAAe,GACpBzvE,KAAK0vE,eAAiB,GACtB1vE,KAAK2vE,UAAY,GACjB3vE,KAAK4vE,YAAc,GACnB5vE,KAAK6vE,sBAAwB,CAC3B,KAAQ,CAAC,EACT,UAAa,CAAC,GAEhB7vE,KAAK8vE,aAAe,KACpB9vE,KAAK+vE,mBAAqB,KAC1B/vE,KAAKgwE,eAAgB,EACrBhwE,KAAKiwE,WAAY,EACjBjwE,KAAKkwE,eAAgB,EACrBlwE,KAAKmwE,mBAAoB,EACzBnwE,KAAKkS,QAAS,EACdlS,KAAKowE,UAAW,EAChBpwE,KAAKg1C,MAAQ,GACbh1C,KAAKqwE,UAAY,EACjBrwE,KAAKswE,sBAAwB,KAC7BtwE,KAAKuwE,sBAAwB,KAC7BvwE,KAAKwwE,wBAA0B,KAE/BxwE,KAAKywE,WAAa,EAElBzwE,KAAK8vE,aAAelmE,YAAW,IAAM5J,KAAK0wE,WAAW,KACrD9L,EAAiB5kE,KAAK+G,QAAQ+9D,SAC9B9kE,KAAK2wE,uBAAuB3wE,KAAK+G,QAAQwoE,YAMzCvvE,KAAK4wE,kBAAoB,IAAIrJ,EAAQ6G,SAAQyC,GAAM7wE,KAAKqxB,KAAKq2C,EAAI,CAC/D12D,KAAM,QACN5E,GAAIykE,EAAGzoC,aAAa,QACnBp6B,EAAE,QAAS,CACZ,KAAQ,WACPA,EAAE,sBAAuB,CAC1B,MAASu5D,EAAQM,GAAGe,YACjB,KAAM,KAAM,CAAC,MAAO,QAEzB,IAAK,MAAMtpD,KAAKioD,EAAQ2F,mBACtB,GAAIztE,OAAO+C,UAAUgF,eAAeC,KAAK8/D,EAAQ2F,mBAAoB5tD,GAAI,CACvE,MAAM4qB,EAAI,WAAc,EAExBA,EAAE1nC,UAAY+kE,EAAQ2F,mBAAmB5tD,GACzCtf,KAAKsf,GAAK,IAAI4qB,EACdlqC,KAAKsf,GAAG5F,KAAK1Z,KACd,CAEJ,CAMDkvE,cACE,MAAM3e,EAAQvwD,KAAK+G,QAAQqzD,UAAY,GAEnCp6D,KAAK+G,QAAQ+pE,OACf9wE,KAAK+wE,OAAS,IAAIxJ,EAAQyJ,gBAAgBhxE,MACD,IAAhCA,KAAKivE,QAAQxkE,QAAQ,QAAiD,IAAjCzK,KAAKivE,QAAQxkE,QAAQ,SAAyC,IAAxB8lD,EAAM9lD,QAAQ,MAClGzK,KAAK+wE,OAAS,IAAIxJ,EAAQ0J,UAAUjxE,MAEpCA,KAAK+wE,OAAS,IAAIxJ,EAAQ2J,KAAKlxE,KAElC,CASDqxC,QACErxC,KAAK+wE,OAAOI,SAGZnxE,KAAKsvE,YAAa,EAClBtvE,KAAKqvE,SAAU,EAEfrvE,KAAKwvE,cAAgB,GACrBxvE,KAAK+C,SAAW,GAChB/C,KAAKyvE,aAAe,GACpBzvE,KAAK0vE,eAAiB,GACtB1vE,KAAK2vE,UAAY,GACjB3vE,KAAK4vE,YAAc,GACnB5vE,KAAKgwE,eAAgB,EACrBhwE,KAAKiwE,WAAY,EACjBjwE,KAAKkwE,eAAgB,EACrBlwE,KAAKowE,UAAW,EAChBpwE,KAAKg1C,MAAQ,GACbh1C,KAAKoxE,UAAY,GACjBpxE,KAAKqwE,UAAY,CAClB,CAYDgB,QACErxE,KAAKkS,QAAS,CACf,CAQDo/D,SACEtxE,KAAKkS,QAAS,CACf,CAyBDq/D,YAAYC,GAEV,MAAMC,EAAO,uCAAuCxvE,QAAQ,SAAS,SAAU+L,GAC7E,MAAMD,EAAoB,GAAhB9J,KAAKE,SAAgB,EAE/B,OADgB,MAAN6J,EAAYD,EAAQ,EAAJA,EAAU,GAC3ByD,SAAS,GACnB,IAED,MAAsB,iBAAXggE,GAAyC,iBAAXA,EAChCC,EAAO,IAAMD,EAEbC,EAAO,EAEjB,CAyBDC,wBAAwBtX,EAAUuX,EAAaC,GAC7C5xE,KAAK6vE,sBAAsBzV,GAAUuX,GAAeC,CACrD,CA6CD74D,QAAQqzD,EAAKyF,EAAMD,EAAUzd,EAAM2d,EAAMC,EAAOC,GAC9C,IAAIC,EAAwBvpE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,IAChG1I,KAAKosE,IAAMA,EAKXpsE,KAAKkyE,QAAU3K,EAAQgF,kBAAkBvsE,KAAKosE,KAK9CpsE,KAAKgyE,QAAUA,GAAWzK,EAAQ4E,eAAensE,KAAKosE,KAKtDpsE,KAAK6xE,KAAOA,EACZ7xE,KAAKmyE,iBAAmBP,EACxB5xE,KAAKkwE,eAAgB,EACrBlwE,KAAKiwE,WAAY,EACjBjwE,KAAKgwE,eAAgB,EACrBhwE,KAAKowE,UAAW,EAChBpwE,KAAKiyE,sBAAwBA,EAE7BjyE,KAAKilE,OAASsC,EAAQ8E,iBAAiBrsE,KAAKosE,KAE5CpsE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOC,WAAY,MAErDppE,KAAK+wE,OAAOsB,SAASle,EAAM2d,EAAMC,EAClC,CA2BDO,OAAOlG,EAAKmG,EAAKC,EAAKZ,EAAUzd,EAAM2d,EAAMW,GAC1C,GAAIzyE,KAAK+wE,OAAO2B,QACd,OAAO1yE,KAAK+wE,OAAO2B,QAAQtG,EAAKmG,EAAKC,EAAKZ,EAAUzd,EAAM2d,EAAMW,GAC3D,CACL,MAAM9uE,EAAQ,IAAIpB,MAAM,qEAExB,MADAoB,EAAM2J,KAAO,sBACP3J,CACP,CACF,CA8BDgvE,QAAQvG,EAAKwF,EAAUzd,EAAM2d,EAAMW,GACjC,IAAIzyE,KAAK4yE,2BAEF,CACL,MAAMjvE,EAAQ,IAAIpB,MAAM,iEAExB,MADAoB,EAAM2J,KAAO,sBACP3J,CACP,CALC3D,KAAK+wE,OAAO8B,SAASzG,EAAKwF,EAAUzd,EAAM2d,EAAMW,EAMnD,CAODG,2BACE,GAAI5yE,KAAK+wE,kBAAkBxJ,EAAQ2J,KAAM,CACvC,IAAKjqE,KACH,OAAO,EAGT,IACE6rE,eAAeC,QAAQ,YAAa,aACpCD,eAAeE,WAAW,YAC3B,CAAC,MAAOplE,GACP,OAAO,CACR,CAED,OAAO,CACR,CAED,OAAO,CACR,CAqBDqlE,SAAS16B,GAGR,CAqBD26B,UAAU36B,GAGT,CAeD46B,SAASlzD,GAGR,CAeDmzD,UAAUnzD,GAGT,CAcDozD,aAAab,GAGZ,CAeDnhD,KAAKknB,GACH,GAAa,OAATA,EAAJ,CAIA,GAAyB,mBAAdA,EAAKnkB,KACd,IAAK,IAAItvB,EAAI,EAAGA,EAAIyzC,EAAKj0C,OAAQQ,IAC/B9E,KAAKszE,WAAW/6B,EAAKzzC,QAEO,mBAAdyzC,EAAKu0B,KACrB9sE,KAAKszE,WAAW/6B,EAAKu0B,QAErB9sE,KAAKszE,WAAW/6B,GAGlBv4C,KAAK+wE,OAAOwC,OAZX,CAaF,CAWD1pE,QAGEF,aAAa3J,KAAK8vE,cAElB9vE,KAAK0wE,SACN,CAmBD8C,aAAaj7B,EAAMq5B,EAAU6B,EAASC,GACpC,IAAIC,EAAiB,KAEI,mBAAdp7B,EAAKu0B,OACdv0B,EAAOA,EAAKu0B,QAGd,IAAI1gE,EAAKmsC,EAAKnQ,aAAa,MAQ3B,GANKh8B,IAEHA,EAAKpM,KAAKuxE,YAAY,gBACtBh5B,EAAKlQ,aAAa,KAAMj8B,IAGF,mBAAbwlE,GAA8C,mBAAZ6B,EAAwB,CACnE,MAAMpwE,EAAUrD,KAAKyD,YAAWmwE,IAE1BD,GACF3zE,KAAK6zE,mBAAmBF,GAGU,UAAhCC,EAAOxrC,aAAa,QAClBqrC,GACFA,EAAQG,GAEDhC,GACTA,EAASgC,EACV,GACA,KAAM,WAAY,KAAMxnE,GAEvBsnE,IACFC,EAAiB3zE,KAAK8zE,gBAAgBJ,GAAS,KAE7C1zE,KAAK+zE,cAAc1wE,GAEfowE,GACFA,EAAQ,OAGH,KAGZ,CAGD,OADAzzE,KAAKqxB,KAAKknB,GACHnsC,CACR,CAiBD4nE,OAAOz7B,EAAMq5B,EAAU6B,EAASC,GAC9B,IAAIC,EAAiB,KAEI,mBAAdp7B,EAAKu0B,OACdv0B,EAAOA,EAAKu0B,QAGd,IAAI1gE,EAAKmsC,EAAKnQ,aAAa,MAQ3B,GANKh8B,IAEHA,EAAKpM,KAAKuxE,YAAY,UACtBh5B,EAAKlQ,aAAa,KAAMj8B,IAGF,mBAAbwlE,GAA8C,mBAAZ6B,EAAwB,CACnE,MAAMpwE,EAAUrD,KAAKyD,YAAWmwE,IAE1BD,GACF3zE,KAAK6zE,mBAAmBF,GAG1B,MAAMM,EAASL,EAAOxrC,aAAa,QAEnC,GAAe,WAAX6rC,EACErC,GACFA,EAASgC,OAEN,IAAe,UAAXK,EAIJ,CACL,MAAMtwE,EAAQ,IAAIpB,MAAO,sBAAqB0xE,KAE9C,MADAtwE,EAAM2J,KAAO,eACP3J,CACP,CAPK8vE,GACFA,EAAQG,EAMX,IACA,KAAM,KAAM,CAAC,QAAS,UAAWxnE,GAEhCsnE,IACFC,EAAiB3zE,KAAK8zE,gBAAgBJ,GAAS,KAE7C1zE,KAAK+zE,cAAc1wE,GAEfowE,GACFA,EAAQ,OAGH,KAGZ,CAGD,OADAzzE,KAAKqxB,KAAKknB,GACHnsC,CACR,CAODknE,WAAWY,GACT,GAAgB,OAAZA,IAAqBA,EAAQzuE,UAAYyuE,EAAQtoC,WAAY,CAC/D,MAAMjoC,EAAQ,IAAIpB,MAAM,gCAExB,MADAoB,EAAM2J,KAAO,eACP3J,CACP,CAED3D,KAAKg1C,MAAMpzC,KAAKsyE,EACjB,CAMDC,eACEn0E,KAAKg1C,MAAMpzC,KAAK,WAEhB5B,KAAK+wE,OAAOoD,eAEZn0E,KAAK8vE,aAAelmE,YAAW,IAAM5J,KAAK0wE,WAAW,IACtD,CAyBDoD,gBAAgBhF,EAAQzrE,GACtB,MAAM+wE,EAAQ,IAAI7M,EAAQsH,aAAaC,EAAQzrE,GAE/C,OADArD,KAAK2vE,UAAU/tE,KAAKwyE,GACbA,CACR,CAaDP,mBAAmBQ,GAGjBr0E,KAAKyvE,aAAa7tE,KAAKyyE,EACxB,CAmED5wE,WAAWJ,EAAS2qE,EAAI1gE,EAAM0D,EAAM5E,EAAI0P,EAAM/U,GAC5C,MAAMutE,EAAO,IAAI/M,EAAQ6G,QAAQ/qE,EAAS2qE,EAAI1gE,EAAM0D,EAAM5E,EAAI0P,EAAM/U,GAEpE,OADA/G,KAAK4vE,YAAYhuE,KAAK0yE,GACfA,CACR,CAaDP,cAAcM,GAGZr0E,KAAK0vE,eAAe9tE,KAAKyyE,GAGzB,MAAMvvE,EAAI9E,KAAK4vE,YAAYnlE,QAAQ4pE,GAE/BvvE,GAAK,GACP9E,KAAK4vE,YAAYhlE,OAAO9F,EAAG,EAE9B,CAYD6rE,uBAAuBpB,GACrBvvE,KAAKuvE,WAAa,CAAC,GACnBA,EAAaA,GAAc,CAAChI,EAAQgN,cAAehN,EAAQiN,aAAcjN,EAAQkN,gBAAiBlN,EAAQmN,YAAanN,EAAQoN,UAAWpN,EAAQqN,WACvIxxE,SAAQuI,GAAK3L,KAAK60E,sBAAsBlpE,IACpD,CAWDkpE,sBAAsBC,GACpB,MAAMnV,EAAY,IAAImV,EACtB90E,KAAKuvE,WAAW5P,EAAUyE,UAAYzE,CACvC,CAmBD3mD,WAAWzV,GAST,GARAvD,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOO,cAAenmE,GAEpDA,EACFgkE,EAAQjkD,KAAK,kCAAoC/f,GAEjDgkE,EAAQlwD,KAAK,yBAGXrX,KAAKiwE,UAAW,CAClB,IAAI8E,GAAO,EACX/0E,KAAKkwE,eAAgB,EAEjBlwE,KAAKgwE,gBACP+E,EAAOpN,EAAM,CACX,MAASJ,EAAQM,GAAGG,OACpB,KAAQ,iBAKZhoE,KAAK+vE,mBAAqB/vE,KAAKg1E,oBAAoBh1E,KAAKiyE,sBAAuBjyE,KAAKi1E,qBAAqBpyE,KAAK7C,OAE9GA,KAAK+wE,OAAOmE,YAAYH,EACzB,MACCxN,EAAQjkD,KAAK,gEAEbtjB,KAAK+wE,OAAOoE,oBAEZn1E,KAAKo1E,eAER,CAaDhD,qBAAqBiD,EAAQC,EAAW/8B,GAEtC,IAAK,MAAMj5B,KAAKioD,EAAQ2F,mBACtB,GAAIztE,OAAO+C,UAAUgF,eAAeC,KAAK8/D,EAAQ2F,mBAAoB5tD,GAAI,CACvE,MAAMi2D,EAASv1E,KAAKsf,GAEpB,GAAIi2D,EAAOC,cACT,IACED,EAAOC,cAAcH,EAAQC,EAC9B,CAAC,MAAOzxD,GACP0jD,EAAQ5jE,MAAO,GAAE2b,iDAAiDuE,IACnE,CAEJ,CAIH,GAAI7jB,KAAKmyE,iBACP,IACEnyE,KAAKmyE,iBAAiBkD,EAAQC,EAAW/8B,EAC1C,CAAC,MAAO3qC,GACP25D,EAAQkF,aAAa7+D,GAErB25D,EAAQ5jE,MAAO,iDAAgDiK,IAChE,CAEJ,CASDwnE,cAAcE,GACqB,iBAAtBt1E,KAAK8vE,cACdnmE,aAAa3J,KAAK8vE,cAIY,OAA5B9vE,KAAK+vE,qBACP/vE,KAAK6zE,mBAAmB7zE,KAAK+vE,oBAC7B/vE,KAAK+vE,mBAAqB,MAG5BxI,EAAQtpD,MAAM,4BAEdje,KAAK+wE,OAAOqE,gBAEZp1E,KAAKgwE,eAAgB,EACrBhwE,KAAKkwE,eAAgB,EACrBlwE,KAAKowE,UAAW,EAEhBpwE,KAAK+C,SAAW,GAChB/C,KAAKwvE,cAAgB,GACrBxvE,KAAKyvE,aAAe,GACpBzvE,KAAK0vE,eAAiB,GACtB1vE,KAAK2vE,UAAY,GACjB3vE,KAAK4vE,YAAc,GAEnB5vE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOM,aAAc6L,GAEvDt1E,KAAKiwE,WAAY,CAClB,CAeDwF,UAAUz+C,EAAK0+C,GACb,MAAMn9B,EAAOv4C,KAAK+wE,OAAO4E,WAAW3+C,GAEpC,GAAa,OAATuhB,EACF,OAoBF,IAjBIv4C,KAAKizE,WAAa1L,EAAQyH,WAAWxsE,UAAUywE,WAC7C16B,EAAK7M,WAAa1rC,KAAK+wE,OAAO6E,OAASr9B,EAAK3M,WAAWtnC,OACzDtE,KAAKizE,SAAS16B,EAAK3M,WAAW,IAE9B5rC,KAAKizE,SAAS16B,IAIdv4C,KAAKmzE,WAAa5L,EAAQyH,WAAWxsE,UAAU2wE,WAC7CuC,EACF11E,KAAKmzE,SAASuC,GAEd11E,KAAKmzE,SAAS5L,EAAQrjB,UAAU3L,KAK7Bv4C,KAAK0vE,eAAeprE,OAAS,GAAG,CACrC,MAAMgwE,EAAOt0E,KAAK0vE,eAAe/zD,MAC3B7W,EAAI9E,KAAK+C,SAAS0H,QAAQ6pE,GAE5BxvE,GAAK,GACP9E,KAAK+C,SAAS6H,OAAO9F,EAAG,EAE3B,CAGD,KAAO9E,KAAK4vE,YAAYtrE,OAAS,GAC/BtE,KAAK+C,SAASnB,KAAK5B,KAAK4vE,YAAYj0D,OAItC,GAAI3b,KAAKkwE,eAAiBlwE,KAAK+wE,OAAO8E,cAGpC,YAFA71E,KAAKo1E,gBAKP,MAAMpkE,EAAOunC,EAAKnQ,aAAa,QAE/B,GAAa,OAATp3B,GAA0B,cAATA,EAAsB,CAEzC,GAAIhR,KAAKkwE,cACP,OAIF,IAAI4F,EAAOv9B,EAAKnQ,aAAa,aAC7B,MAAM2tC,EAAWx9B,EAAK1yC,qBAAqB,YAc3C,OAZa,OAATiwE,GACW,wBAATA,GAAkCC,EAASzxE,OAAS,IACtDwxE,EAAO,YAGT91E,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOE,SAAUyM,IAEnD91E,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOE,SAAU9B,EAAQyC,eAAegM,oBAG5Eh2E,KAAKo1E,cAAcU,EAGpB,CAGDvO,EAAQyD,aAAazyB,EAAM,MAAMy0B,IAC/B,MAAM/pC,EAAU,GAChBjjC,KAAK+C,SAAW/C,KAAK+C,SAASwO,QAAO,CAACxO,EAAUM,KAC9C,KACMA,EAAQqrE,QAAQ1B,KAAWhtE,KAAKgwE,eAAkB3sE,EAAQ8qE,KAO5DprE,EAASnB,KAAKyB,IANVA,EAAQurE,IAAI5B,IACdjqE,EAASnB,KAAKyB,GAGhB4/B,EAAQrhC,KAAKyB,GAIhB,CAAC,MAAOuK,GAEP25D,EAAQjkD,KAAK,wDAA0D1V,EAAEkW,QAC1E,CAED,OAAO/gB,CAAP,GACC,KAGEkgC,EAAQ3+B,QAAUtE,KAAK4wE,kBAAkBlC,QAAQ1B,IACpDhtE,KAAK4wE,kBAAkBhC,IAAI5B,EAC5B,GAEJ,CAmBDiJ,YAAYj/C,EAAKk/C,EAAWR,GAG1B,IAAIS,EAyCAC,EA3CJ7O,EAAQtpD,MAAM,0BACdje,KAAKiwE,WAAY,EAGjB,IACEkG,EAAWn2E,KAAK+wE,OAAO4E,WAAW3+C,EACnC,CAAC,MAAOppB,GACP,GAAIA,EAAEN,OAASi6D,EAAQyC,eAAeC,WACpC,MAAMr8D,EAGR5N,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOE,SAAU9B,EAAQyC,eAAeC,YAE1EjqE,KAAKo1E,cAAc7N,EAAQyC,eAAeC,WAC3C,CAED,IAAKkM,EACH,OAqBF,GAlBIn2E,KAAKizE,WAAa1L,EAAQyH,WAAWxsE,UAAUywE,WAC7CkD,EAASzqC,WAAa1rC,KAAK+wE,OAAO6E,OAASO,EAASvqC,WAAWtnC,OACjEtE,KAAKizE,SAASkD,EAASvqC,WAAW,IAElC5rC,KAAKizE,SAASkD,IAIdn2E,KAAKmzE,WAAa5L,EAAQyH,WAAWxsE,UAAU2wE,WAC7CuC,EACF11E,KAAKmzE,SAASuC,GAEd11E,KAAKmzE,SAAS5L,EAAQrjB,UAAUiyB,KAIlBn2E,KAAK+wE,OAAOkF,YAAYE,KAExB5O,EAAQ4B,OAAOE,SAC/B,OAYF,GALE+M,EADED,EAASE,uBACGF,EAASE,uBAAuB9O,EAAQM,GAAGW,OAAQ,YAAYlkE,OAAS,EAExE6xE,EAAStwE,qBAAqB,mBAAmBvB,OAAS,GAAK6xE,EAAStwE,qBAAqB,YAAYvB,OAAS,GAG7H8xE,EAGH,YAFAp2E,KAAK+wE,OAAOuF,kBAAkBJ,GAKhC,MAAMK,EAAUtrE,MAAM6Q,KAAKq6D,EAAStwE,qBAAqB,cAAc4L,KAAI9F,GAAK3L,KAAKuvE,WAAW5jE,EAAEwjC,eAAcp+B,QAAOpF,GAAKA,IAErG,IAAnB4qE,EAAQjyE,QAC2C,IAAjD6xE,EAAStwE,qBAAqB,QAAQvB,QASb,IAA3BtE,KAAKmwE,mBACPnwE,KAAKw2E,aAAaD,GAPhBv2E,KAAK+wE,OAAOuF,kBAAkBJ,EASnC,CAYDO,yBAAyBlH,GAGvB,IAAK,IAAIzqE,EAAI,EAAGA,EAAIyqE,EAAWjrE,OAAS,IAAKQ,EAAG,CAC9C,IAAI4xE,EAAS5xE,EAEb,IAAK,IAAIqM,EAAIrM,EAAI,EAAGqM,EAAIo+D,EAAWjrE,SAAU6M,EACvCo+D,EAAWp+D,GAAGkpD,SAAWkV,EAAWmH,GAAQrc,WAC9Cqc,EAASvlE,GAIb,GAAIulE,IAAW5xE,EAAG,CAChB,MAAM6xE,EAAOpH,EAAWzqE,GACxByqE,EAAWzqE,GAAKyqE,EAAWmH,GAC3BnH,EAAWmH,GAAUC,CACtB,CACF,CAED,OAAOpH,CACR,CAgBDiH,aAAaD,GACNv2E,KAAK42E,iBAAiBL,IACzBv2E,KAAK62E,oBAER,CAgBDD,iBAAiBrH,GACfA,EAAavvE,KAAKy2E,yBAAyBlH,GAAc,IACzD,IAAIuH,GAAkB,EAEtB,IAAK,IAAIhyE,EAAI,EAAGA,EAAIyqE,EAAWjrE,SAAUQ,EAAG,CAC1C,IAAKyqE,EAAWzqE,GAAG6L,KAAK3Q,MACtB,SAGFA,KAAKswE,sBAAwBtwE,KAAK+2E,eAAe/2E,KAAKg3E,iBAAiBn0E,KAAK7C,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKuwE,sBAAwBvwE,KAAK+2E,eAAe/2E,KAAKi3E,iBAAiBp0E,KAAK7C,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKwwE,wBAA0BxwE,KAAK+2E,eAAe/2E,KAAKk3E,mBAAmBr0E,KAAK7C,MAAO,KAAM,YAAa,KAAM,MAChHA,KAAKm3E,gBAAkB5H,EAAWzqE,GAElC9E,KAAKm3E,gBAAgB9S,QAAQrkE,MAE7B,MAAMo3E,EAAwB/P,EAAO,OAAQ,CAC3C,MAASE,EAAQM,GAAGU,KACpB,UAAavoE,KAAKm3E,gBAAgB/S,WAGpC,GAAIpkE,KAAKm3E,gBAAgBhT,cAAe,CACtC,MAAMr3C,EAAW9sB,KAAKm3E,gBAAgB1S,gBAAgBzkE,MAEtDo3E,EAAsBprE,EAAEg7D,EAAKG,KAAKr6C,GACnC,CAED9sB,KAAKqxB,KAAK+lD,EAAsBtK,QAChCgK,GAAkB,EAClB,KACD,CAED,OAAOA,CACR,CAODI,mBAAmB3+B,GACjB,MAAMisB,EAAYwC,EAAKC,KAAKM,EAAQr4B,QAAQqJ,IAEtCzrB,EAAW9sB,KAAKm3E,gBAAgB5S,YAAYvkE,KAAMwkE,GAElDoP,EAASvM,EAAO,WAAY,CAChC,MAASE,EAAQM,GAAGU,OAQtB,MALiB,KAAbz7C,GACF8mD,EAAO5nE,EAAEg7D,EAAKG,KAAKr6C,IAGrB9sB,KAAKqxB,KAAKuiD,EAAO9G,SACV,CACR,CAOD+J,qBAC2C,OAArCtP,EAAQ4E,eAAensE,KAAKosE,MAG9BpsE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOE,SAAU9B,EAAQyC,eAAeG,kBAE1EnqE,KAAKgZ,WAAWuuD,EAAQyC,eAAeG,oBAGvCnqE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOG,eAAgB,MAEzDtpE,KAAK+2E,eAAe/2E,KAAKq3E,sBAAsBx0E,KAAK7C,MAAO,KAAM,KAAM,KAAM,WAE7EA,KAAKqxB,KAAKq2C,EAAI,CACZ,KAAQ,MACR,GAAM1nE,KAAKilE,OACX,GAAM,YACLj3D,EAAE,QAAS,CACZq/D,MAAO9F,EAAQM,GAAGI,OACjBj6D,EAAE,WAAY,CAAC,GAAGhC,EAAEu7D,EAAQ4E,eAAensE,KAAKosE,MAAMU,QAE5D,CAiBDuK,sBAAsB9+B,GAGpB,MAAMs4B,EAAKnJ,EAAI,CACb12D,KAAM,MACN5E,GAAI,YACH4B,EAAE,QAAS,CACZq/D,MAAO9F,EAAQM,GAAGI,OACjBj6D,EAAE,WAAY,CAAC,GAAGhC,EAAEu7D,EAAQ4E,eAAensE,KAAKosE,MAAMmB,KAAKv/D,EAAE,YAAYhC,EAAEhM,KAAK6xE,MAcnF,OAZKtK,EAAQiF,mBAAmBxsE,KAAKosE,OAInCpsE,KAAKosE,IAAM7E,EAAQgF,kBAAkBvsE,KAAKosE,KAAO,YAGnDyE,EAAGtD,KAAKv/D,EAAE,WAAY,CAAC,GAAGhC,EAAEu7D,EAAQiF,mBAAmBxsE,KAAKosE,MAE5DpsE,KAAK+2E,eAAe/2E,KAAKs3E,UAAUz0E,KAAK7C,MAAO,KAAM,KAAM,KAAM,WAEjEA,KAAKqxB,KAAKw/C,EAAG/D,SACN,CACR,CAYDkK,iBAAiBz+B,GACf,GAAIv4C,KAAKovE,WAAW,oBAAqB,CACvC,IAAImI,EACJ,MACMC,EAAc,wBACdv0C,EAFU+jC,EAAKC,KAAKM,EAAQr4B,QAAQqJ,IAElBpxC,MAAMqwE,GAM9B,GAJmB,MAAfv0C,EAAQ,KACVs0C,EAAkBt0C,EAAQ,IAGxBs0C,IAAoBv3E,KAAKovE,WAAW,oBAWtC,OATApvE,KAAK+zE,cAAc/zE,KAAKuwE,uBACxBvwE,KAAKuwE,sBAAwB,KAEzBvwE,KAAKwwE,0BACPxwE,KAAK+zE,cAAc/zE,KAAKwwE,yBACxBxwE,KAAKwwE,wBAA0B,MAGjCxwE,KAAKovE,WAAa,CAAC,EACZpvE,KAAKi3E,iBAAiB,KAEhC,CAED1P,EAAQlwD,KAAK,kCAETrX,KAAKm3E,iBACPn3E,KAAKm3E,gBAAgBxS,YAIvB3kE,KAAK+zE,cAAc/zE,KAAKuwE,uBACxBvwE,KAAKuwE,sBAAwB,KAEzBvwE,KAAKwwE,0BACPxwE,KAAK+zE,cAAc/zE,KAAKwwE,yBACxBxwE,KAAKwwE,wBAA0B,MAGjC,MAAMiH,EAAyB,GAEzBC,EAAU,CAAC30E,EAAUw1C,KACzB,KAAOx1C,EAASuB,QACdtE,KAAK+zE,cAAchxE,EAAS4Y,OAK9B,OAFA3b,KAAK23E,2BAA2Bp/B,IAEzB,CAAP,EAQF,OALAk/B,EAAuB71E,KAAK5B,KAAK+2E,gBAAex+B,GAAQm/B,EAAQD,EAAwBl/B,IAAO,KAAM,kBAAmB,KAAM,OAC9Hk/B,EAAuB71E,KAAK5B,KAAK+2E,gBAAex+B,GAAQm/B,EAAQD,EAAwBl/B,IAAOgvB,EAAQM,GAAGW,OAAQ,WAAY,KAAM,OAEpIxoE,KAAKm0E,gBAEE,CACR,CAUDwD,2BAA2Bp/B,GAEzBv4C,KAAKmvE,SAAW52B,EAEhB,IAAK,IAAIzzC,EAAI,EAAGA,EAAIyzC,EAAK3M,WAAWtnC,OAAQQ,IAAK,CAC/C,MAAMkoE,EAAQz0B,EAAK3M,WAAW9mC,GAEP,SAAnBkoE,EAAMthC,WACR1rC,KAAKqvE,SAAU,GAGM,YAAnBrC,EAAMthC,WACR1rC,KAAKsvE,YAAa,EAErB,CAED,OAAKtvE,KAAKqvE,SAIErvE,KAAK+G,QAAQ6wE,wBAGvB53E,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOW,aAAc,MAFvD9pE,KAAK6C,QAKA,IATL7C,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU,OAE5C,EAQV,CAgBD1mE,OACE,IAAK7C,KAAKqvE,QAER,YADA9H,EAAQz8D,IAAIy8D,EAAQ+C,SAAS39D,KAAO,mEAItC3M,KAAK+2E,eAAe/2E,KAAK63E,wBAAwBh1E,KAAK7C,MAAO,KAAM,KAAM,KAAM,gBAE/E,MAAM83E,EAAWvQ,EAAQiF,mBAAmBxsE,KAAKosE,KAE7C0L,EACF93E,KAAKqxB,KAAKq2C,EAAI,CACZ12D,KAAM,MACN5E,GAAI,iBACH4B,EAAE,OAAQ,CACXq/D,MAAO9F,EAAQM,GAAGa,OACjB16D,EAAE,WAAY,CAAC,GAAGhC,EAAE8rE,GAAUhL,QAEjC9sE,KAAKqxB,KAAKq2C,EAAI,CACZ12D,KAAM,MACN5E,GAAI,iBACH4B,EAAE,OAAQ,CACXq/D,MAAO9F,EAAQM,GAAGa,OACjBoE,OAEN,CAYD+K,wBAAwBt/B,GACtB,GAAkC,UAA9BA,EAAKnQ,aAAa,QAAqB,CAGzC,IAAIktC,EAQJ,OAVA/N,EAAQjkD,KAAK,4BACIi1B,EAAK1yC,qBAAqB,YAG9BvB,OAAS,IACpBgxE,EAAY/N,EAAQyC,eAAeE,UAGrClqE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU+L,EAAW/8B,IAEvD,CACR,CAGD,MAAM11C,EAAO01C,EAAK1yC,qBAAqB,QAEvC,KAAIhD,EAAKyB,OAAS,GAkBhB,OAJAijE,EAAQjkD,KAAK,4BAEbtjB,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU,KAAMhxB,IAElD,EAlBY,CACnB,MAAMw/B,EAAUl1E,EAAK,GAAGgD,qBAAqB,OAEzCkyE,EAAQzzE,OAAS,IACnBtE,KAAKgwE,eAAgB,EACrBhwE,KAAKosE,IAAM7E,EAAQr4B,QAAQ6oC,EAAQ,IAE/B/3E,KAAKsvE,WACPtvE,KAAKg4E,oBAELh4E,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOK,UAAW,MAGzD,CAOF,CAWDwO,oBACE,IAAKh4E,KAAKsvE,WACR,MAAM,IAAI/sE,MAA2D,wEAAwBglE,EAAQM,GAAGc,2CAG1G3oE,KAAK+2E,eAAe/2E,KAAKi4E,mBAAmBp1E,KAAK7C,MAAO,KAAM,KAAM,KAAM,mBAE1EA,KAAKqxB,KAAKq2C,EAAI,CACZ12D,KAAM,MACN5E,GAAI,oBACH4B,EAAE,UAAW,CACdq/D,MAAO9F,EAAQM,GAAGc,UACjBmE,OACJ,CAqBDmL,mBAAmB1/B,GACjB,GAAkC,WAA9BA,EAAKnQ,aAAa,QACpBpoC,KAAKgwE,eAAgB,EAErBhwE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOK,UAAW,WAC/C,GAAkC,UAA9BjxB,EAAKnQ,aAAa,QAM3B,OALApoC,KAAKgwE,eAAgB,EACrBzI,EAAQjkD,KAAK,4BAEbtjB,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU,KAAMhxB,IAElD,EAGT,OAAO,CACR,CAYD0+B,iBAAiB1+B,GAgBf,OAdIv4C,KAAKswE,wBACPtwE,KAAK+zE,cAAc/zE,KAAKswE,uBACxBtwE,KAAKswE,sBAAwB,MAG3BtwE,KAAKwwE,0BACPxwE,KAAK+zE,cAAc/zE,KAAKwwE,yBACxBxwE,KAAKwwE,wBAA0B,MAG7BxwE,KAAKm3E,iBAAiBn3E,KAAKm3E,gBAAgBzS,YAE/C1kE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU,KAAMhxB,IAElD,CACR,CAeD++B,UAAU/+B,GAWR,MAVkC,WAA9BA,EAAKnQ,aAAa,SACpBpoC,KAAKgwE,eAAgB,EAErBhwE,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOK,UAAW,OACb,UAA9BjxB,EAAKnQ,aAAa,UAC3BpoC,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOI,SAAU,KAAMhxB,GAEzDv4C,KAAKgZ,WAAW,2BAGX,CACR,CAcDg8D,oBAAoBlG,EAAQzrE,GAC1B,MAAM+wE,EAAQ,IAAI7M,EAAQsH,aAAaC,EAAQzrE,GAG/C,OAFA+wE,EAAMjG,MAAO,EACbnuE,KAAK2vE,UAAU/tE,KAAKwyE,GACbA,CACR,CAiBD2C,eAAe1zE,EAAS2qE,EAAI1gE,EAAM0D,EAAM5E,GACtC,MAAMkoE,EAAO,IAAI/M,EAAQ6G,QAAQ/qE,EAAS2qE,EAAI1gE,EAAM0D,EAAM5E,GAG1D,OAFAkoE,EAAKnG,MAAO,EACZnuE,KAAK4vE,YAAYhuE,KAAK0yE,GACfA,CACR,CAYDW,uBAUE,OATA1N,EAAQtpD,MAAM,mCAEdje,KAAKoyE,qBAAqB7K,EAAQ4B,OAAOU,YAAa,MAEtD7pE,KAAK+wE,OAAOkE,uBAGZj1E,KAAKo1E,iBAEE,CACR,CASD1E,UAIE,KAAO1wE,KAAK2vE,UAAUrrE,OAAS,GAC7BtE,KAAKwvE,cAAc5tE,KAAK5B,KAAK2vE,UAAUh0D,OAIzC,KAAO3b,KAAKyvE,aAAanrE,OAAS,GAAG,CACnC,MAAM8vE,EAAQp0E,KAAKyvE,aAAa9zD,MAC1B7W,EAAI9E,KAAKwvE,cAAc/kE,QAAQ2pE,GAEjCtvE,GAAK,GACP9E,KAAKwvE,cAAc5kE,OAAO9F,EAAG,EAEhC,CAGD,MAAM5D,GAAM,IAAID,MAAO4rB,UACjBqrD,EAAU,GAEhB,IAAK,IAAIpzE,EAAI,EAAGA,EAAI9E,KAAKwvE,cAAclrE,OAAQQ,IAAK,CAClD,MAAMsvE,EAAQp0E,KAAKwvE,cAAc1qE,IAE7B9E,KAAKgwE,eAAkBoE,EAAMjG,OACjBiG,EAAMrF,WAAaqF,EAAMtF,OAE3B5tE,GAAO,EACbkzE,EAAMxF,OACRsJ,EAAQt2E,KAAKwyE,GAGf8D,EAAQt2E,KAAKwyE,GAGlB,CAEDp0E,KAAKwvE,cAAgB0I,EACrBvuE,aAAa3J,KAAK8vE,cAElB9vE,KAAK+wE,OAAOL,UAGR1wE,KAAKiwE,YACPjwE,KAAK8vE,aAAelmE,YAAW,IAAM5J,KAAK0wE,WAAW,KAExD,GAGHnJ,EAAQrD,cAAgBA,EAYxBqD,EAAQgN,cA3gIR,cAA4BrQ,EAI1BtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,YAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,IAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAEDiI,KAAKiO,GAEH,OAA8B,OAAvBA,EAAWozD,OACnB,GA8/HHzK,EAAQoN,UAt3HR,cAAwBzQ,EAItBtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,UAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,KAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAEDiI,KAAKiO,GAEH,OAA8B,OAAvBA,EAAWozD,OACnB,CAEDzN,YAAY3lD,GAEV,MAAM,QACJozD,EADI,QAEJE,EAFI,OAGJjN,EAHI,KAIJ4M,GACEjzD,EAEJ,IAAKqmD,EACH,MAAM,IAAI1iE,MAAM,iDAKlB,IAAI61E,EAAWlG,IAAa,GAAEF,KAAW/M,IAAWiN,EAAU,GAK9D,OAJAkG,GAAsB,KACtBA,GAAsBpG,EACtBoG,GAAsB,KACtBA,GAAsBvG,EACfjN,EAAewT,EACvB,GAk1HH7Q,EAAQqN,SA9nHR,cAAuB1Q,EAIrBtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,gBAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,KAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAEDiI,KAAKiO,GAEH,OAA8B,OAAvBA,EAAWozD,OACnB,CAEDzN,YAAY3lD,EAAY4lD,GAEtB,IAAIt8B,EAAOmwC,EAAMC,EAAMC,EAAIhlD,EAAGilD,EAAO1zE,EAAGwa,EACpCm5D,EAAe,UACfC,EAAe,GAAE95D,EAAWwwD,WAAW,gCAAgC5K,KAC3E,MAAMmU,EAAS/5D,EAAWwwD,WAAWuJ,OAC/BnB,EAAc,wBAEpB,KAAOhT,EAAUr9D,MAAMqwE,IAAc,CACnC,MAAMv0C,EAAUuhC,EAAUr9D,MAAMqwE,GAGhC,OAFAhT,EAAYA,EAAUviE,QAAQghC,EAAQ,GAAI,IAElCA,EAAQ,IACd,IAAK,IACHiF,EAAQjF,EAAQ,GAChB,MAEF,IAAK,IACHo1C,EAAOp1C,EAAQ,GACf,MAEF,IAAK,IACHq1C,EAAOr1C,EAAQ,GAGpB,CAED,GAAIiF,EAAMh9B,MAAM,EAAGytE,EAAOr0E,UAAYq0E,EAEpC,OADA/5D,EAAWwwD,WAAa,CAAC,EAClBxwD,EAAWq4D,mBAGpBwB,GAAgB,KAAOvwC,EACvBwwC,GAAeD,EACfJ,EAAOpR,KAAKoR,GACZA,GAAQ,UACR,MAAMxG,EAAOjN,EAAehmD,EAAWizD,MAGvC,IAFA0G,EAAKC,EAAQlS,EAAKR,eAAe+L,EAAMwG,GAElCvzE,EAAI,EAAGA,EAAIwzE,EAAMxzE,IAAK,CAGzB,IAFAyuB,EAAI+yC,EAAKR,eAAe+L,EAAMvL,EAAKD,SAASmS,IAEvCl5D,EAAI,EAAGA,EAAI,EAAGA,IACjBi5D,EAAGj5D,IAAMiU,EAAEjU,GAGbk5D,EAAQjlD,CACT,CAEDglD,EAAKjS,EAAKD,SAASkS,GACnB,MAAMK,EAAYtS,EAAKR,eAAeyS,EAAI,cACpCM,EAAYvS,EAAKG,cAAc8R,EAAI,cACnCO,EAAkBxS,EAAKR,eAAeQ,EAAKI,SAASJ,EAAKD,SAASuS,IAAaF,GAGrF,IAFA95D,EAAWwwD,WAAW,oBAAsB9I,EAAKC,cAAcsS,EAAWH,GAErEp5D,EAAI,EAAGA,EAAI,EAAGA,IACjBs5D,EAAUt5D,IAAMw5D,EAAgBx5D,GAIlC,OADAm5D,GAAgB,MAAQtR,KAAKb,EAAKD,SAASuS,IACpCH,CACR,CAEDhU,gBAAgB7lD,EAAYm6D,GAE1B,MAAMJ,EAASI,GAAenV,EAAIC,UAAU,GAAqB,WAAhB5/D,KAAKE,UACtD,IAAIi0E,EAAW,KAAOxT,EAAehmD,EAAWozD,SAMhD,OALAoG,GAAY,MACZA,GAAYO,EACZ/5D,EAAWwwD,WAAWuJ,OAASA,EAC/B/5D,EAAWwwD,WAAW,6BAA+BgJ,EACrDA,EAAW,MAAQA,EACZA,CACR,GAsiHH7Q,EAAQkN,gBA35HR,cAA8BvQ,EAI5BtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,gBAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,KAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAEDiI,KAAKiO,GAEH,OAA2B,OAApBA,EAAWizD,IACnB,CAEDtN,YAAY3lD,GAEV,IAAIw5D,EAAW,KAYf,OAV2B,OAAvBx5D,EAAWozD,UACboG,EAAWA,EAAW,KAAOx5D,EAAWszD,SAG1CkG,GAAsB,IACtBA,GAAsB,IACtBA,GAAsB,eACtBA,GAAsBx5D,EAAWizD,KACjCuG,GAAsB,IACtBA,GAAsB,IACfxT,EAAewT,EACvB,GA63HH7Q,EAAQiN,aA7/HR,cAA2BtQ,EASzBtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,aAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,KAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAED67D,YAAY3lD,GAUV,OAAOA,EAAWozD,UAAYpzD,EAAWszD,QAAU,GAAKtzD,EAAWszD,OACpE,GAm+HH3K,EAAQmN,YApiHR,cAA0BxQ,EAIxBtkE,cAIEu4E,MAHezvE,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,aAC/DA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,KAAmBA,UAAU,GACpEA,UAAUpE,OAAS,QAAsBwC,IAAjB4B,UAAU,GAAmBA,UAAU,GAAK,GAEpF,CAEDiI,KAAKiO,GAEH,OAA2B,OAApBA,EAAWizD,IACnB,CAEDtN,YAAY3lD,GAEV,IAAIw5D,EAAW,KAQf,OAN2B,OAAvBx5D,EAAWozD,UACboG,GAAsBx5D,EAAWszD,SAGnCkG,GAAsB,KACtBA,GAAsBx5D,EAAWizD,KAC1BjN,EAAewT,EACvB,GA0gHH,IAAIY,EAAO,CACT,QAAWzR,EACX,OAAUF,EACV,IAAOK,EACP,KAAQD,EACR,MAASE,EACT,KAAQrB,EACR,IAAO1C,EACP,cAAiB0C,EAAKC,cACtB,SAAYD,EAAKE,SACjB,cAAiBF,EAAKG,cACtB,SAAYH,EAAKI,UAiBnBa,EAAQ0R,QAAU,MAWhBr5E,YAAY24C,EAAMyU,EAAMwlB,EAAK0G,GAC3Bl5E,KAAKoM,KAAOm7D,EAAQ0F,WACpBjtE,KAAKm5E,QAAU5gC,EACfv4C,KAAKigB,KAAOsnD,EAAQrjB,UAAU3L,GAG9Bv4C,KAAKo5E,SAAWpsB,EAChBhtD,KAAKgtD,KAAOA,EACZhtD,KAAKwyE,IAAMA,EACXxyE,KAAKq5E,KAAOlpD,IACZnwB,KAAKk5E,MAAQA,GAAS,EACtBl5E,KAAKs5E,OAAQ,EACbt5E,KAAKu5E,KAAO,KAEZv5E,KAAKw5E,IAAM,WACT,OAAKx5E,KAAKq5E,MAIE,IAAIp4E,KACFjB,KAAKq5E,MAAQ,IAJlB,CAKV,EAEDr5E,KAAKy5E,SAAW,WACd,OAAKz5E,KAAKu5E,MAIE,IAAIt4E,KACFjB,KAAKu5E,MAAQ,IAJlB,CAKV,EAEDv5E,KAAK05E,IAAM15E,KAAK25E,SACjB,CAgBDC,cACE,IAAIryE,EAAO,KAEX,GAAIvH,KAAK05E,IAAIG,aAAe75E,KAAK05E,IAAIG,YAAYtsC,iBAG/C,GAFAhmC,EAAOvH,KAAK05E,IAAIG,YAAYtsC,gBAEP,gBAAjBhmC,EAAK9B,QAIP,MAHA8hE,EAAQ5jE,MAAM,6BACd4jE,EAAQ5jE,MAAM,iBAAmB3D,KAAK05E,IAAIjB,cAC1ClR,EAAQ5jE,MAAM,gBAAkB4jE,EAAQrjB,UAAUlkD,KAAK05E,IAAIG,cACrD,IAAIt3E,MAAM,oBAEb,GAAIvC,KAAK05E,IAAIjB,aAAc,CAKhC,GAHAlR,EAAQtpD,MAAM,iFACd1W,GAAO,IAAIk8C,GAAYC,gBAAgB1jD,KAAK05E,IAAIjB,aAAc,mBAAmBlrC,iBAE5EhmC,EACH,MAAM,IAAIhF,MAAM,8BACX,GAAIgF,EAAKuyE,cAAc,eAAgB,CAC5CvS,EAAQ5jE,MAAM,8BAAgC4D,EAAKuyE,cAAc,eAAe3qC,aAChFo4B,EAAQ5jE,MAAM,iBAAmB3D,KAAK05E,IAAIjB,cAC1C,MAAM90E,EAAQ,IAAIpB,MAElB,MADAoB,EAAM2J,KAAOi6D,EAAQyC,eAAeC,WAC9BtmE,CACP,CACF,CAED,OAAO4D,CACR,CAWDoyE,UACE,IAAID,EAAM,KAcV,OAZIn6E,OAAOw6E,gBACTL,EAAM,IAAIK,eAENL,EAAIM,kBACNN,EAAIM,iBAAiB,4BAEdz6E,OAAOojE,gBAChB+W,EAAM,IAAI/W,cAAc,sBAI1B+W,EAAIO,mBAAqBj6E,KAAKgtD,KAAKnqD,KAAK,KAAM7C,MACvC05E,CACR,GA4BHnS,EAAQ2J,KAAO,MAAMA,EACnBtxE,YAAYgf,GACV5e,KAAKk6E,MAAQt7D,EAGb5e,KAAKwyE,IAAMvuE,KAAKC,MAAsB,WAAhBD,KAAKE,UAG3BnE,KAAKuyE,IAAM,KAEXvyE,KAAK8xE,KAAO,EACZ9xE,KAAKm0D,KAAO,GACZn0D,KAAKT,OAAS,EACdS,KAAKm6E,OAAS,EACdn6E,KAAKo6E,WAAa,KAClBp6E,KAAKq6E,oBAAsB,KAC3Br6E,KAAKoxE,UAAY,EAClB,CASDkJ,aACE,MAAMnE,EAAW9O,EAAO,OAAQ,CAC9B,IAAOrnE,KAAKwyE,MACZ,MAASjL,EAAQM,GAAGC,WAatB,OAViB,OAAb9nE,KAAKuyE,KACP4D,EAAS7O,MAAM,CACb,IAAOtnE,KAAKuyE,MAIZvyE,KAAKk6E,MAAMnzE,QAAQwzE,WAAav6E,KAAKk6E,MAAMtH,4BAC7C5yE,KAAKw6E,gBAGArE,CACR,CAQDhF,SACEnxE,KAAKwyE,IAAMvuE,KAAKC,MAAsB,WAAhBD,KAAKE,UAC3BnE,KAAKuyE,IAAM,KACXvyE,KAAKm6E,OAAS,EAEVn6E,KAAKk6E,MAAMtH,4BACbrzE,OAAOuzE,eAAeE,WAAW,wBAGnChzE,KAAKk6E,MAAM7G,aAAarzE,KAAKwyE,IAC9B,CAQDH,SAASle,EAAM2d,EAAMC,GACnB/xE,KAAKm0D,KAAOA,GAAQn0D,KAAKm0D,KACzBn0D,KAAK8xE,KAAOA,GAAQ9xE,KAAK8xE,KACzB9xE,KAAKm6E,OAAS,EAEd,MAAMt/D,EAAO7a,KAAKs6E,aAAahT,MAAM,CACnC,GAAMtnE,KAAKk6E,MAAMjV,OACjB,WAAY,KACZ,KAAQjlE,KAAKm0D,KACb,KAAQn0D,KAAK8xE,KACb,QAAW,0BACX,IAAO,MACP,eAAgB,MAChB,aAAcvK,EAAQM,GAAGE,OAGvBgK,GACFl3D,EAAKysD,MAAM,CACT,MAASyK,IAIb,MAAMkE,EAAcj2E,KAAKk6E,MAAMjE,YAE/Bj2E,KAAKoxE,UAAUxvE,KAAK,IAAI2lE,EAAQ0R,QAAQp+D,EAAKiyD,OAAQ9sE,KAAKy6E,sBAAsB53E,KAAK7C,KAAMi2E,EAAYpzE,KAAK7C,KAAKk6E,QAASr/D,EAAKiyD,OAAO1kC,aAAa,SAEnJpoC,KAAK06E,0BACN,CA2BDhI,QAAQtG,EAAKmG,EAAKC,EAAKZ,EAAUzd,EAAM2d,EAAMW,GAC3CzyE,KAAKk6E,MAAM9N,IAAMA,EACjBpsE,KAAKuyE,IAAMA,EACXvyE,KAAKwyE,IAAMA,EACXxyE,KAAKk6E,MAAM/H,iBAAmBP,EAC9B5xE,KAAKk6E,MAAMjV,OAASsC,EAAQ8E,iBAAiBrsE,KAAKk6E,MAAM9N,KACxDpsE,KAAKk6E,MAAMlK,eAAgB,EAC3BhwE,KAAKk6E,MAAMjK,WAAY,EACvBjwE,KAAKm0D,KAAOA,GAAQn0D,KAAKm0D,KACzBn0D,KAAK8xE,KAAOA,GAAQ9xE,KAAK8xE,KACzB9xE,KAAKT,OAASkzE,GAAQzyE,KAAKT,OAE3BS,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOQ,SAAU,KAC1D,CAsBDkJ,SAASzG,EAAKwF,EAAUzd,EAAM2d,EAAMW,GAClC,MAAM5hE,EAAU5J,KAAKP,MAAMnH,OAAOuzE,eAAe6H,QAAQ,yBAEzD,KAAI,MAAO9pE,GAA+CA,EAAQ2hE,KAAO3hE,EAAQ0hE,KAAO1hE,EAAQu7D,MAAQ,MAAOA,GAAuC7E,EAAQgF,kBAAkB17D,EAAQu7D,OAAS7E,EAAQgF,kBAAkBH,IAE3L,OAAhC7E,EAAQ4E,eAAeC,IAAiB7E,EAAQ8E,iBAAiBx7D,EAAQu7D,OAASA,IAI3E,CACL,MAAMzoE,EAAQ,IAAIpB,MAAM,qCAExB,MADAoB,EAAM2J,KAAO,sBACP3J,CACP,CAPC3D,KAAKk6E,MAAM9J,UAAW,EAEtBpwE,KAAK0yE,QAAQ7hE,EAAQu7D,IAAKv7D,EAAQ0hE,IAAK1hE,EAAQ2hE,IAAKZ,EAAUzd,EAAM2d,EAAMW,EAM7E,CAUD+H,gBACMx6E,KAAKk6E,MAAMlK,cACThwE,KAAKk6E,MAAM9N,KAAOpsE,KAAKwyE,KAAOxyE,KAAKuyE,KACrChzE,OAAOuzE,eAAeC,QAAQ,uBAAwB9rE,KAAK8B,UAAU,CACnE,IAAO/I,KAAKk6E,MAAM9N,IAClB,IAAOpsE,KAAKwyE,IACZ,IAAOxyE,KAAKuyE,OAIhBhzE,OAAOuzE,eAAeE,WAAW,uBAEpC,CAUDiD,YAAYE,GACV,MAAMyE,EAAMzE,EAAS/tC,aAAa,QAElC,GAAY,OAARwyC,GAAwB,cAARA,EAAqB,CAEvC,IAAI9E,EAAOK,EAAS/tC,aAAa,aACjCm/B,EAAQ5jE,MAAM,2BAA6BmyE,GAC3C,MAAMC,EAAWI,EAAStwE,qBAAqB,YAc/C,OAZa,OAATiwE,GACW,wBAATA,GAAkCC,EAASzxE,OAAS,IACtDwxE,EAAO,YAGT91E,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAUyM,IAEzD91E,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,WAG3DrpE,KAAKk6E,MAAM9E,cAAcU,GAElBvO,EAAQ4B,OAAOE,QACvB,CAIIrpE,KAAKuyE,MACRvyE,KAAKuyE,IAAM4D,EAAS/tC,aAAa,QAGnC,MAAMqqC,EAAO0D,EAAS/tC,aAAa,YAE/BqqC,IACFzyE,KAAKT,OAASsV,SAAS49D,EAAM,KAG/B,MAAMX,EAAOqE,EAAS/tC,aAAa,QAE/B0pC,IACF9xE,KAAK8xE,KAAOj9D,SAASi9D,EAAM,KAG7B,MAAM3d,EAAOgiB,EAAS/tC,aAAa,QAE/B+rB,IACFn0D,KAAKm0D,KAAOt/C,SAASs/C,EAAM,KAG7B,MAAMimB,EAAajE,EAAS/tC,aAAa,cAErCgyC,IACFp6E,KAAKo6E,WAAavlE,SAASulE,EAAY,IAE1C,CASDlF,YAAYH,GACV/0E,KAAK66E,eAAe9F,EACrB,CAQDK,gBACEp1E,KAAKuyE,IAAM,KACXvyE,KAAKwyE,IAAMvuE,KAAKC,MAAsB,WAAhBD,KAAKE,UAEvBnE,KAAKk6E,MAAMtH,4BACbrzE,OAAOuzE,eAAeE,WAAW,wBAGnChzE,KAAKk6E,MAAM7G,aAAarzE,KAAKwyE,IAC9B,CASDqD,cACE,OAAiC,IAA1B71E,KAAKoxE,UAAU9sE,MACvB,CASDw2E,2BAA2B9jD,GACzB,MAAM+jD,EAAY7J,EAAK8J,kBAAkBhkD,GAEnCikD,EAAej7E,KAAKk6E,MAAMrK,sBAAsBqL,KAAKH,GAEvDE,GACFA,EAAaxzE,KAAKzH,KAAM+6E,EAE3B,CAaDI,UAAUJ,GACR/6E,KAAKm6E,SACL5S,EAAQjkD,KAAK,4BAA8By3D,EAAY,uBAAyB/6E,KAAKm6E,QAEjFn6E,KAAKm6E,OAAS,GAChBn6E,KAAKk6E,MAAMjF,sBAEd,CAQDqB,kBAAkB1E,GAChBrK,EAAQjkD,KAAK,gGAGXsuD,EADEA,EACSA,EAAS/uE,KAAK7C,KAAKk6E,OAEnBl6E,KAAKk6E,MAAMjE,YAAYpzE,KAAK7C,KAAKk6E,OAG9C,MAAMr/D,EAAO7a,KAAKs6E,aAElBt6E,KAAKoxE,UAAUxvE,KAAK,IAAI2lE,EAAQ0R,QAAQp+D,EAAKiyD,OAAQ9sE,KAAKy6E,sBAAsB53E,KAAK7C,KAAM4xE,GAAW/2D,EAAKiyD,OAAO1kC,aAAa,SAE/HpoC,KAAK06E,0BACN,CAQDzF,uBACEj1E,KAAKm1E,mBACN,CAMDA,oBACE,KAAOn1E,KAAKoxE,UAAU9sE,OAAS,GAAG,CAChC,MAAM0yB,EAAMh3B,KAAKoxE,UAAUz1D,MAE3Bqb,EAAIsiD,OAAQ,EACZtiD,EAAI0iD,IAAIJ,QAERtiD,EAAI0iD,IAAIO,mBAAqB,WAAc,CAC5C,CACF,CAQDvJ,UACE,MAAMzwD,EAAOjgB,KAAKk6E,MAAMllC,MAOxB,GALIh1C,KAAKk6E,MAAMlK,eAA2C,IAA1BhwE,KAAKoxE,UAAU9sE,QAAgC,IAAhB2b,EAAK3b,SAAiBtE,KAAKk6E,MAAMhK,gBAC9F3I,EAAQtpD,MAAM,wDACdgC,EAAKre,KAAK,QAGR5B,KAAKk6E,MAAMhoE,OAAf,CAIA,GAAIlS,KAAKoxE,UAAU9sE,OAAS,GAAK2b,EAAK3b,OAAS,EAAG,CAChD,MAAMuW,EAAO7a,KAAKs6E,aAElB,IAAK,IAAIx1E,EAAI,EAAGA,EAAImb,EAAK3b,OAAQQ,IACf,OAAZmb,EAAKnb,KACS,YAAZmb,EAAKnb,GACP+V,EAAKysD,MAAM,CACT,GAAMtnE,KAAKk6E,MAAMjV,OACjB,WAAY,KACZ,eAAgB,OAChB,aAAcsC,EAAQM,GAAGE,OAG3BltD,EAAK4yD,MAAMxtD,EAAKnb,IAAIyoE,aAKnBvtE,KAAKk6E,MAAMllC,MAClBh1C,KAAKk6E,MAAMllC,MAAQ,GAEnBh1C,KAAKoxE,UAAUxvE,KAAK,IAAI2lE,EAAQ0R,QAAQp+D,EAAKiyD,OAAQ9sE,KAAKy6E,sBAAsB53E,KAAK7C,KAAMA,KAAKk6E,MAAMzE,UAAU5yE,KAAK7C,KAAKk6E,QAASr/D,EAAKiyD,OAAO1kC,aAAa,SAE5JpoC,KAAK06E,0BACN,CAED,GAAI16E,KAAKoxE,UAAU9sE,OAAS,EAAG,CAC7B,MAAM82E,EAAep7E,KAAKoxE,UAAU,GAAGoI,MAER,OAA3Bx5E,KAAKoxE,UAAU,GAAGmI,MAChBv5E,KAAKoxE,UAAU,GAAGqI,WAAax1E,KAAKC,MAAMqjE,EAAQuD,kBAAoB9qE,KAAKm0D,OAC7En0D,KAAK06E,2BAILU,EAAen3E,KAAKC,MAAMqjE,EAAQsD,QAAU7qE,KAAKm0D,QACnDoT,EAAQjkD,KAAK,WAAatjB,KAAKoxE,UAAU,GAAGhlE,GAAK,oBAAsBnI,KAAKC,MAAMqjE,EAAQsD,QAAU7qE,KAAKm0D,MAAQ,gCAEjHn0D,KAAK06E,2BAER,CA1CA,CA2CF,CAYuB,yBAAC1jD,EAAKqkD,GAC5B,IAAIN,EAEJ,GAA2B,IAAvB/jD,EAAI0iD,IAAI76D,WACV,IACEk8D,EAAY/jD,EAAI0iD,IAAIrE,MACrB,CAAC,MAAOznE,GAGP25D,EAAQ5jE,MAAM,mEAA0Eo3E,EACzF,CAOH,YAJyB,IAAdA,IACTA,EAA2B,iBAARM,EAAmBA,EAAM,GAGvCN,CACR,CAeDN,sBAAsBztB,EAAMh2B,GAG1B,GAFAuwC,EAAQtpD,MAAM,cAAgB+Y,EAAI5qB,GAAK,IAAM4qB,EAAIkiD,MAAQ,qBAAuBliD,EAAI0iD,IAAI76D,YAEpFmY,EAAIsiD,MAEN,YADAtiD,EAAIsiD,OAAQ,GAId,GAA2B,IAAvBtiD,EAAI0iD,IAAI76D,WAEV,OAGF,MAAMk8D,EAAY7J,EAAK8J,kBAAkBhkD,GAIzC,GAFAh3B,KAAKq6E,oBAAsBrjD,EAAI0iD,IAAI4B,wBAE/Bt7E,KAAKk6E,MAAMhK,eAAiB6K,GAAa,IAK3C,OAJA/6E,KAAKm7E,UAAUJ,QAEf/6E,KAAK86E,2BAA2B9jD,GAKlC,MAAMukD,EAASv7E,KAAKoxE,UAAU,KAAOp6C,EAC/BwkD,EAASx7E,KAAKoxE,UAAU,KAAOp6C,EAC/BykD,EAAgBV,EAAY,GAAKA,EAAY,IAC7CW,EAAmB1kD,EAAIkiD,MAAQl5E,KAAKk6E,MAAMzJ,YAE5CgL,GAAiBC,KAEnB17E,KAAK27E,eAAe3kD,GAEpBuwC,EAAQtpD,MAAM,cAAgB+Y,EAAI5qB,GAAK,2BAGvB,MAAd2uE,IAMES,GAAUD,GAAUv7E,KAAKoxE,UAAU9sE,OAAS,GAAKtE,KAAKoxE,UAAU,GAAGoI,MAAQv1E,KAAKC,MAAMqjE,EAAQuD,kBAAoB9qE,KAAKm0D,QACzHn0D,KAAK47E,gBAAgB,GAGvB57E,KAAKk6E,MAAM7G,aAAanjE,OAAO8mB,EAAIw7C,KAAO,GAE1CjL,EAAQtpD,MAAM,cAAgB+Y,EAAI5qB,GAAK,IAAM4qB,EAAIkiD,MAAQ,YACzDlsB,EAAKh2B,GAELh3B,KAAKm6E,OAAS,GACS,IAAdY,GAAmBA,GAAa,KAAOA,EAAY,KAAOA,GAAa,MAEhFxT,EAAQ5jE,MAAM,cAAgBqzB,EAAI5qB,GAAK,IAAM4qB,EAAIkiD,MAAQ,UAAY6B,EAAY,aAEjF/6E,KAAKm7E,UAAUJ,GAEf/6E,KAAK86E,2BAA2B9jD,GAE5B+jD,GAAa,KAAOA,EAAY,MAClC/6E,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOO,cAAe,MAE9D1pE,KAAKk6E,MAAM9E,kBAGb7N,EAAQ5jE,MAAM,cAAgBqzB,EAAI5qB,GAAK,IAAM4qB,EAAIkiD,MAAQ,UAAY6B,EAAY,aAG9EU,GAAkBC,EAEZA,IAAqB17E,KAAKk6E,MAAMjK,WACzCjwE,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,aAFzDrpE,KAAK06E,0BAIR,CAYDmB,gBAAgB/2E,GACd,IAAIkyB,EAAMh3B,KAAKoxE,UAAUtsE,GAEzB,MAAMi2E,EAAY7J,EAAK8J,kBAAkBhkD,GAAM,GAG/C,GAAIA,EAAIkiD,MAAQl5E,KAAKk6E,MAAMzJ,WAGzB,YAFAzwE,KAAKk6E,MAAMjF,uBAKb,MAAMmG,EAAepkD,EAAIwiD,MACnBsC,GAAmBx3C,MAAM82C,IAAiBA,EAAen3E,KAAKC,MAAMqjE,EAAQsD,QAAU7qE,KAAKm0D,MAC3F4nB,EAAiC,OAAb/kD,EAAIuiD,MAAiBviD,EAAIyiD,WAAax1E,KAAKC,MAAMqjE,EAAQuD,kBAAoB9qE,KAAKm0D,MACtG6nB,EAAsC,IAAvBhlD,EAAI0iD,IAAI76D,aAAqBk8D,EAAY,GAAKA,GAAa,KAgBhF,IAdIe,GAAmBC,GAAqBC,KACtCD,GACFxU,EAAQ5jE,MAAO,WAAU3D,KAAKoxE,UAAUtsE,GAAGsH,wCAG7C4qB,EAAIsiD,OAAQ,EACZtiD,EAAI0iD,IAAIJ,QAERtiD,EAAI0iD,IAAIO,mBAAqB,WAAc,EAE3Cj6E,KAAKoxE,UAAUtsE,GAAK,IAAIyiE,EAAQ0R,QAAQjiD,EAAImiD,QAASniD,EAAIoiD,SAAUpiD,EAAIw7C,IAAKx7C,EAAIkiD,OAChFliD,EAAMh3B,KAAKoxE,UAAUtsE,IAGI,IAAvBkyB,EAAI0iD,IAAI76D,WAAkB,CAC5B0oD,EAAQtpD,MAAM,cAAgB+Y,EAAI5qB,GAAK,IAAM4qB,EAAIkiD,MAAQ,YAEzD,IACE,MAAM+C,EAAej8E,KAAKk6E,MAAMnzE,QAAQm1E,aAAe,0BACvDllD,EAAI0iD,IAAIyC,KAAK,OAAQn8E,KAAKk6E,MAAMjL,SAASjvE,KAAKk6E,MAAMnzE,QAAQq1E,WAEpB,IAA7BplD,EAAI0iD,IAAI2C,kBAEjBrlD,EAAI0iD,IAAI2C,iBAAiB,eAAgBJ,GAGvCj8E,KAAKk6E,MAAMnzE,QAAQu1E,kBACrBtlD,EAAI0iD,IAAI4C,iBAAkB,EAE7B,CAAC,MAAOC,GASP,OARAhV,EAAQ5jE,MAAM,oBAAsB44E,EAAG/qE,YAElCxR,KAAKk6E,MAAMjK,WACdjwE,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,oBAG3DrpE,KAAKk6E,MAAMlhE,YAGZ,CAID,MAAMwjE,EAAW,KAGf,GAFAxlD,EAAIqiD,KAAO,IAAIp4E,KAEXjB,KAAKk6E,MAAMnzE,QAAQ01E,cAAe,CACpC,MAAM/rD,EAAU1wB,KAAKk6E,MAAMnzE,QAAQ01E,cAEnC,IAAK,MAAMhsC,KAAU/f,EACfjxB,OAAO+C,UAAUgF,eAAeC,KAAKipB,EAAS+f,IAChDzZ,EAAI0iD,IAAI2C,iBAAiB5rC,EAAQ/f,EAAQ+f,GAG9C,CAEDzZ,EAAI0iD,IAAIroD,KAAK2F,EAAI/W,KAAjB,EAKF,GAAI+W,EAAIkiD,MAAQ,EAAG,CAGjB,MAAMwD,EAAsF,IAA5Ez4E,KAAKF,IAAIE,KAAKC,MAAMqjE,EAAQsD,QAAU7qE,KAAKm0D,MAAOlwD,KAAK+zB,IAAIhB,EAAIkiD,MAAO,IACtFtvE,YAAW,WAET4yE,GACD,GAAEE,EACJ,MACCF,IAGFxlD,EAAIkiD,QAEAl5E,KAAKk6E,MAAMhH,YAAc3L,EAAQyH,WAAWxsE,UAAU0wE,YACpDl8C,EAAImiD,QAAQztC,WAAa1rC,KAAK41E,OAAS5+C,EAAImiD,QAAQvtC,WAAWtnC,OAChEtE,KAAKk6E,MAAMhH,UAAUl8C,EAAImiD,QAAQvtC,WAAW,IAE5C5rC,KAAKk6E,MAAMhH,UAAUl8C,EAAImiD,UAIzBn5E,KAAKk6E,MAAM9G,YAAc7L,EAAQyH,WAAWxsE,UAAU4wE,WACxDpzE,KAAKk6E,MAAM9G,UAAUp8C,EAAI/W,KAE5B,MACCsnD,EAAQtpD,MAAM,qBAA6B,IAANnZ,EAAU,QAAU,UAAY,8BAAgCkyB,EAAI0iD,IAAI76D,WAEhH,CASD88D,eAAe3kD,GACbuwC,EAAQtpD,MAAM,oBAEd,IAAK,IAAInZ,EAAI9E,KAAKoxE,UAAU9sE,OAAS,EAAGQ,GAAK,EAAGA,IAC1CkyB,IAAQh3B,KAAKoxE,UAAUtsE,IACzB9E,KAAKoxE,UAAUxmE,OAAO9F,EAAG,GAK7BkyB,EAAI0iD,IAAIO,mBAAqB,WAAc,EAE3Cj6E,KAAK06E,0BACN,CASDkB,gBAAgB92E,GACd,MAAMkyB,EAAMh3B,KAAKoxE,UAAUtsE,GAEV,OAAbkyB,EAAIuiD,OACNviD,EAAIuiD,KAAO,IAAIt4E,MAGjBjB,KAAK67E,gBAAgB/2E,EACtB,CAeD6wE,WAAW3+C,GACT,IACE,OAAOA,EAAI4iD,aACZ,CAAC,MAAOhsE,GACP,GAAkB,gBAAdA,EAAEkW,QACJ,MAAMlW,EAGR5N,KAAKk6E,MAAMlhE,WAAW,sBACvB,CACF,CAUD6hE,eAAe9F,GACbxN,EAAQtpD,MAAM,6BAEd,MAAMpD,EAAO7a,KAAKs6E,aAAahT,MAAM,CACnCt2D,KAAM,cAGJ+jE,GACFl6D,EAAK4yD,MAAMsH,EAAKjI,QAGlB,MAAM91C,EAAM,IAAIuwC,EAAQ0R,QAAQp+D,EAAKiyD,OAAQ9sE,KAAKy6E,sBAAsB53E,KAAK7C,KAAMA,KAAKk6E,MAAMzE,UAAU5yE,KAAK7C,KAAKk6E,QAASr/D,EAAKiyD,OAAO1kC,aAAa,QAEpJpoC,KAAKoxE,UAAUxvE,KAAKo1B,GAEpBh3B,KAAK06E,0BACN,CAQDnH,QACE5pE,aAAa3J,KAAKk6E,MAAMpK,cAExB9vE,KAAK06E,2BAEL16E,KAAKk6E,MAAMpK,aAAelmE,YAAW,IAAM5J,KAAKk6E,MAAMxJ,WAAW,IAClE,CAODyD,eACEn0E,KAAK06E,2BAEL/wE,aAAa3J,KAAKk6E,MAAMpK,aACzB,CAUD4K,2BACO16E,KAAKoxE,UAGR7J,EAAQtpD,MAAM,wCAA0Cje,KAAKoxE,UAAU9sE,OAAS,aAFhFijE,EAAQtpD,MAAM,2DAKXje,KAAKoxE,WAAuC,IAA1BpxE,KAAKoxE,UAAU9sE,SAIlCtE,KAAKoxE,UAAU9sE,OAAS,GAC1BtE,KAAK67E,gBAAgB,GAGnB77E,KAAKoxE,UAAU9sE,OAAS,GAAKL,KAAKwwB,IAAIz0B,KAAKoxE,UAAU,GAAGoB,IAAMxyE,KAAKoxE,UAAU,GAAGoB,KAAOxyE,KAAKT,QAC9FS,KAAK67E,gBAAgB,GAExB,GAeHtU,EAAQ2J,KAAK1uE,UAAUozE,MAAQ,KA2B/BrO,EAAQ0J,UAAY,MAWlBrxE,YAAYgf,GACV5e,KAAKk6E,MAAQt7D,EACb5e,KAAK41E,MAAQ,UACb,MAAM3G,EAAUrwD,EAAWqwD,QAE3B,GAA+B,IAA3BA,EAAQxkE,QAAQ,QAA4C,IAA5BwkE,EAAQxkE,QAAQ,QAAe,CAGjE,IAAIkyE,EAAc,GAEkB,OAAhC/9D,EAAW7X,QAAQqzD,UAAkD,WAA7B76D,OAAO6Q,SAASgqD,SAC1DuiB,GAAe,KAEfA,GAAe,MAGjBA,GAAe,MAAQp9E,OAAO6Q,SAASwsE,KAEV,IAAzB3N,EAAQxkE,QAAQ,KAClBkyE,GAAep9E,OAAO6Q,SAASysE,SAAW5N,EAE1C0N,GAAe1N,EAGjBrwD,EAAWqwD,QAAU0N,CACtB,CACF,CASDG,eACE,OAAOzV,EAAO,OAAQ,CACpB,MAASE,EAAQM,GAAGY,QACpB,GAAMzoE,KAAKk6E,MAAMjV,OACjB,QAAW,OAEd,CAYD8X,kBAAkB5G,EAAU6G,GAC1B,IAAI7C,EAQJ,GALEA,EADEhE,EAASE,uBACFF,EAASE,uBAAuB9O,EAAQM,GAAGW,OAAQ,SAEnD2N,EAAStwE,qBAAqB,gBAGnB,IAAlBs0E,EAAO71E,OACT,OAAO,EAGT,MAAMX,EAAQw2E,EAAO,GACrB,IAAI7E,EAAY,GACZ3uE,EAAO,GAGX,IAAK,IAAI7B,EAAI,EAAGA,EAAInB,EAAMioC,WAAWtnC,OAAQQ,IAAK,CAChD,MAAM8I,EAAIjK,EAAMioC,WAAW9mC,GAE3B,GALS,wCAKL8I,EAAEw6B,aAAa,SACjB,MAGiB,SAAfx6B,EAAE89B,SACJ/kC,EAAOiH,EAAEuhC,YAETmmC,EAAY1nE,EAAE89B,QAEjB,CAED,IAAIuxC,EAAc,2BAkBlB,OAfEA,GADE3H,GAGa,UAGb3uE,IACFs2E,GAAe,MAAQt2E,GAGzB4gE,EAAQ5jE,MAAMs5E,GAEdj9E,KAAKk6E,MAAM9H,qBAAqB4K,EAAe1H,GAE/Ct1E,KAAKk6E,MAAM9E,iBAEJ,CACR,CASDjE,SAGC,CASDkB,WAEEryE,KAAKk9E,eAELl9E,KAAKyd,OAAS,IAAIqB,EAAU9e,KAAKk6E,MAAMjL,QAAS,QAEhDjvE,KAAKyd,OAAO6T,OAAS,IAAMtxB,KAAKm9E,UAEhCn9E,KAAKyd,OAAOxa,QAAU2K,GAAK5N,KAAKo9E,SAASxvE,GAEzC5N,KAAKyd,OAAO8T,QAAU3jB,GAAK5N,KAAKq9E,SAASzvE,GAGzC5N,KAAKyd,OAAO+T,UAAY1N,GAAW9jB,KAAKs9E,kBAAkBx5D,EAC3D,CAWDmyD,YAAYE,GAGV,GAFcn2E,KAAK+8E,kBAAkB5G,EAAU5O,EAAQ4B,OAAOE,UAG5D,OAAO9B,EAAQ4B,OAAOE,QAEzB,CAWDkU,mBAAmBz5D,GACjB,IAAIngB,GAAQ,EAEZ,MAAMqqE,EAAKlqD,EAAQskB,aAAa,SAEd,iBAAP4lC,EACTrqE,EAAQ,4BACCqqE,IAAOzG,EAAQM,GAAGY,UAC3B9kE,EAAQ,4BAA8BqqE,GAGxC,MAAMwP,EAAM15D,EAAQskB,aAAa,WAQjC,MANmB,iBAARo1C,EACT75E,EAAQ,8BACS,QAAR65E,IACT75E,EAAQ,8BAAgC65E,IAGtC75E,IACF3D,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU1lE,GAEzD3D,KAAKk6E,MAAM9E,iBAEJ,EAIV,CASDkI,kBAAkBx5D,GAChB,GAAuC,IAAnCA,EAAQ7D,KAAKxV,QAAQ,WAAqD,IAAlCqZ,EAAQ7D,KAAKxV,QAAQ,SAAgB,CAE/E,MAAMwV,EAAO6D,EAAQ7D,KAAKhe,QAAQ,mBAAoB,IACtD,GAAa,KAATge,EAAa,OACjB,MAAMw9D,GAAc,IAAIh6B,GAAYC,gBAAgBzjC,EAAM,YAAYstB,gBAEtEvtC,KAAKk6E,MAAMjH,SAASwK,GAEpBz9E,KAAKk6E,MAAM/G,SAASrvD,EAAQ7D,MAGxBjgB,KAAKu9E,mBAAmBE,IAE1Bz9E,KAAKi2E,YAAYwH,EAEpB,MAAM,GAAwC,IAApC35D,EAAQ7D,KAAKxV,QAAQ,WAAkB,CAGhD,MAAMizE,GAAgB,IAAIj6B,GAAYC,gBAAgB5/B,EAAQ7D,KAAM,YAAYstB,gBAEhFvtC,KAAKk6E,MAAMjH,SAASyK,GAEpB19E,KAAKk6E,MAAM/G,SAASrvD,EAAQ7D,MAE5B,MAAM09D,EAAUD,EAAct1C,aAAa,iBAE3C,GAAIu1C,EAAS,CACX,MAAM1O,EAAUjvE,KAAKk6E,MAAMjL,SAEFA,EAAQxkE,QAAQ,SAAW,GAAKkzE,EAAQlzE,QAAQ,SAAW,GAAKwkE,EAAQxkE,QAAQ,QAAU,KAGjHzK,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOS,SAAU,gDAEzD5pE,KAAKk6E,MAAM7oC,QAEXrxC,KAAKk6E,MAAMjL,QAAU0O,EAErB39E,KAAKqyE,WAER,MACCryE,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,2BAEzDrpE,KAAKk6E,MAAM9E,eAEd,KAAM,CACLp1E,KAAK49E,yBAEL,MAAMC,EAAS79E,KAAK89E,YAAYh6D,EAAQ7D,MAElCs4B,GAAO,IAAIkL,GAAYC,gBAAgBm6B,EAAQ,YAAYtwC,gBAEjEvtC,KAAKk6E,MAAMjE,YAAY19B,EAAM,KAAMz0B,EAAQ7D,KAC5C,CACF,CAUD29D,yBACE59E,KAAKyd,OAAO+T,UAAY7lB,GAAK3L,KAAK+9E,WAAWpyE,EAC9C,CAWDupE,YAAYH,GACV,GAAI/0E,KAAKyd,QAAUzd,KAAKyd,OAAOoB,aAAeC,EAAUk/D,OAAQ,CAC1DjJ,GACF/0E,KAAKk6E,MAAM7oD,KAAK0jD,GAGlB,MAAM91D,EAAQooD,EAAO,QAAS,CAC5B,MAASE,EAAQM,GAAGY,UAGtBzoE,KAAKk6E,MAAMhH,UAAUj0D,EAAM6tD,QAE3B,MAAMmR,EAAc1W,EAAQrjB,UAAUjlC,GAEtCjf,KAAKk6E,MAAM9G,UAAU6K,GAErB,IACEj+E,KAAKyd,OAAO4T,KAAK4sD,EAClB,CAAC,MAAOrwE,GACP25D,EAAQjkD,KAAK,+BACd,CACF,CAED1Z,YAAW,IAAM5J,KAAKk6E,MAAM9E,iBAAiB,EAC9C,CAQDA,gBACE7N,EAAQtpD,MAAM,uCAEdje,KAAKk9E,cACN,CAODY,YAAYlK,GAEV,MAAO,YAAcA,EAAS,YAC/B,CAQDsJ,eACE,GAAIl9E,KAAKyd,OACP,IACEzd,KAAKyd,OAAO8T,QAAU,KACtBvxB,KAAKyd,OAAOxa,QAAU,KACtBjD,KAAKyd,OAAO+T,UAAY,KACxBxxB,KAAKyd,OAAOwB,OACb,CAAC,MAAOrR,GACP25D,EAAQtpD,MAAMrQ,EAAEkW,QACjB,CAGH9jB,KAAKyd,OAAS,IACf,CASDo4D,cAEE,OAAO,CACR,CAMDwH,SAASzvE,GACH5N,KAAKk6E,MAAMjK,YAAcjwE,KAAKk6E,MAAMhK,eACtC3I,EAAQ5jE,MAAM,iCAEd3D,KAAKk6E,MAAM9E,iBACFxnE,GAAgB,OAAXA,EAAE+T,OAAkB3hB,KAAKk6E,MAAMjK,WAAajwE,KAAKyd,QAK/D8pD,EAAQ5jE,MAAM,iCAEd3D,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,0EAEzDrpE,KAAKk6E,MAAM9E,iBAEX7N,EAAQtpD,MAAM,mBAEjB,CAQDq4D,kBAAkB1E,GAChBrK,EAAQ5jE,MAAM,6DAEd3D,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU9B,EAAQyC,eAAeI,cAE5EwH,GACFA,EAASnqE,KAAKzH,KAAKk6E,OAGrBl6E,KAAKk6E,MAAM9E,eACZ,CAQDH,uBAAyB,CAOzBE,oBAAsB,CAUtBiI,SAASz5E,GACP4jE,EAAQ5jE,MAAM,mBAAqBsD,KAAK8B,UAAUpF,IAElD3D,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,0EAEzDrpE,KAAKk1E,aACN,CAQDxE,UACE,MAAMzwD,EAAOjgB,KAAKk6E,MAAMllC,MAExB,GAAI/0B,EAAK3b,OAAS,IAAMtE,KAAKk6E,MAAMhoE,OAAQ,CACzC,IAAK,IAAIpN,EAAI,EAAGA,EAAImb,EAAK3b,OAAQQ,IAC/B,GAAgB,OAAZmb,EAAKnb,GAAa,CACpB,IAAI8uE,EAGFA,EADc,YAAZ3zD,EAAKnb,GACE9E,KAAK88E,eAAehQ,OAEpB7sD,EAAKnb,GAGhB,MAAMo5E,EAAY3W,EAAQrjB,UAAU0vB,GAEpC5zE,KAAKk6E,MAAMhH,UAAUU,GAErB5zE,KAAKk6E,MAAM9G,UAAU8K,GAErBl+E,KAAKyd,OAAO4T,KAAK6sD,EAClB,CAGHl+E,KAAKk6E,MAAMllC,MAAQ,EACpB,CACF,CA0BD+oC,WAAWj6D,GACT,IAAIy0B,EAEJ,MAAMt5B,EAAQ,wDAEd,GAAI6E,EAAQ7D,OAAShB,EASnB,OARAjf,KAAKk6E,MAAM/G,SAASl0D,GAEpBjf,KAAKk6E,MAAMjH,SAASnvD,QAEf9jB,KAAKk6E,MAAMhK,eACdlwE,KAAKk6E,MAAM9E,iBAIR,GAAsC,IAAlCtxD,EAAQ7D,KAAKgE,OAAO,WAI7B,GAFAs0B,GAAO,IAAIkL,GAAYC,gBAAgB5/B,EAAQ7D,KAAM,YAAYstB,iBAE5DvtC,KAAKu9E,mBAAmBhlC,GAC3B,WAEG,CACL,MAAMt4B,EAAOjgB,KAAK89E,YAAYh6D,EAAQ7D,MAEtCs4B,GAAO,IAAIkL,GAAYC,gBAAgBzjC,EAAM,YAAYstB,eAC1D,CAED,OAAIvtC,KAAK+8E,kBAAkBxkC,EAAMgvB,EAAQ4B,OAAO//D,YAAhD,EAKIpJ,KAAKk6E,MAAMhK,eAA8C,aAA7B33B,EAAKnJ,WAAW1D,UAAoE,gBAAzC6M,EAAKnJ,WAAWhH,aAAa,SACtGpoC,KAAKk6E,MAAMjH,SAAS16B,QAEpBv4C,KAAKk6E,MAAM/G,SAAS5L,EAAQrjB,UAAU3L,UAOxCv4C,KAAKk6E,MAAMzE,UAAUl9B,EAAMz0B,EAAQ7D,KACpC,CAQDk9D,UACE5V,EAAQtpD,MAAM,kBAEd,MAAMxU,EAAQzJ,KAAK88E,eAEnB98E,KAAKk6E,MAAMhH,UAAUzpE,EAAMqjE,QAE3B,MAAMqR,EAAc5W,EAAQrjB,UAAUz6C,GAEtCzJ,KAAKk6E,MAAM9G,UAAU+K,GAErBn+E,KAAKyd,OAAO4T,KAAK8sD,EAClB,CAcDxI,WAAW/B,GAET,OAAOA,CACR,CAQDL,QACEvzE,KAAKk6E,MAAMrwE,OACZ,CAODsqE,eACExqE,aAAa3J,KAAKk6E,MAAMpK,cAExB9vE,KAAKk6E,MAAMxJ,QAAQ7tE,KAAK7C,KAAKk6E,MAA7Bl6E,EACD,GAUH,MAAMo+E,EAAO,CAAC,EACdA,EAAI,MAAY7W,EAAQ+C,SAAS59D,MACjC0xE,EAAI,KAAW7W,EAAQ+C,SAAS39D,KAChCyxE,EAAI,KAAW7W,EAAQ+C,SAASz9D,KAChCuxE,EAAI,MAAY7W,EAAQ+C,SAASlhE,MACjCg1E,EAAI,MAAY7W,EAAQ+C,SAASC,MAKjChD,EAAQyJ,gBAAkB,cAA8BzJ,EAAQ0J,UAU9DrxE,YAAYgf,GACVu5D,MAAMv5D,GACN5e,KAAKk6E,MAAQt7D,EACb5e,KAAK8wE,OAAS,IAAIuN,aAAar+E,KAAKk6E,MAAMnzE,QAAQ+pE,OAAQ,2BAE1D9wE,KAAK8wE,OAAO7tE,QAAU2K,IACpB,IAAIi/D,EAEqB,QAAxBA,EAAWxiE,eAAkC,IAAbwiE,GAA+BA,EAASlpE,MAAMiK,GAC/E25D,EAAQz8D,IAAIy8D,EAAQ+C,SAASlhE,MAAQ,wBAAuBwE,IAA5D,CAEH,CAEG6P,aACF,MAAO,CACL,KAAQ/O,GAAO1O,KAAK8wE,OAAOh/D,KAAKwsE,YAAY,CAAC,OAAQ5vE,IAExD,CAED2jE,WACEryE,KAAKu+E,gBAAkB5yE,GAAK3L,KAAKs9E,kBAAkB3xE,GAEnD3L,KAAK8wE,OAAOh/D,KAAKrI,QAEjBzJ,KAAK8wE,OAAOh/D,KAAK0f,UAAYgtD,GAAMx+E,KAAKy+E,iBAAiBD,GAEzDx+E,KAAK8wE,OAAOh/D,KAAKwsE,YAAY,CAAC,WAAYt+E,KAAKk6E,MAAMjL,QAASjvE,KAAKk6E,MAAM9N,KAC1E,CAEDsG,QAAQd,GACN5xE,KAAKu+E,gBAAkB5yE,GAAK3L,KAAK+9E,WAAWpyE,GAE5C3L,KAAKk6E,MAAM/H,iBAAmBP,EAC9B5xE,KAAK8wE,OAAOh/D,KAAKrI,QAEjBzJ,KAAK8wE,OAAOh/D,KAAK0f,UAAYgtD,GAAMx+E,KAAKy+E,iBAAiBD,GAEzDx+E,KAAK8wE,OAAOh/D,KAAKwsE,YAAY,CAAC,UAAWt+E,KAAKk6E,MAAMjL,SACrD,CAEDyP,gBAAgBrJ,EAAQjJ,GAClBiJ,IAAW9N,EAAQ4B,OAAOQ,UAC5B3pE,KAAKk6E,MAAM9N,IAAMA,EACjBpsE,KAAKk6E,MAAMlK,eAAgB,EAC3BhwE,KAAKk6E,MAAMjK,WAAY,EACvBjwE,KAAKk6E,MAAM9J,UAAW,EAEtBpwE,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOQ,WACtC0L,IAAW9N,EAAQ4B,OAAOY,aACnC/pE,KAAKk6E,MAAMlK,eAAgB,EAC3BhwE,KAAKk6E,MAAMjK,WAAY,EACvBjwE,KAAKk6E,MAAM9J,UAAW,EAEtBpwE,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOY,YAElD,CAEDmL,YAAYr2D,EAAYk2D,GACtBA,GAAQ/0E,KAAKk6E,MAAM7oD,KAAK0jD,GACxB,MAAM91D,EAAQooD,EAAO,QAAS,CAC5B,MAASE,EAAQM,GAAGY,UAGtBzoE,KAAKk6E,MAAMhH,UAAUj0D,EAAM6tD,QAE3B,MAAMmR,EAAc1W,EAAQrjB,UAAUjlC,GAEtCjf,KAAKk6E,MAAM9G,UAAU6K,GAErBj+E,KAAK8wE,OAAOh/D,KAAKwsE,YAAY,CAAC,OAAQL,IAEtCj+E,KAAKk6E,MAAM9E,eACZ,CAEDiI,SAASzvE,GACH5N,KAAKk6E,MAAMjK,YAAcjwE,KAAKk6E,MAAMhK,eACtC3I,EAAQ5jE,MAAM,iCAEd3D,KAAKk6E,MAAM9E,iBACFxnE,GAAgB,OAAXA,EAAE+T,OAAkB3hB,KAAKk6E,MAAMjK,WAK7C1I,EAAQ5jE,MAAM,iCAEd3D,KAAKk6E,MAAM9H,qBAAqB7K,EAAQ4B,OAAOE,SAAU,0EAEzDrpE,KAAKk6E,MAAM9E,iBAEX7N,EAAQtpD,MAAM,mBAEjB,CAEDi/D,eACEl9E,KAAK8wE,OAAOh/D,KAAKwsE,YAAY,CAAC,gBAC/B,CAUDV,yBACE59E,KAAKu+E,gBAAkB5yE,GAAK3L,KAAK+9E,WAAWpyE,EAC7C,CAMD8yE,iBAAiBD,GACf,MAAM,KACJv+D,GACEu+D,EACEG,EAAc1+D,EAAK,GAEzB,GAAoB,eAAhB0+D,EACF3+E,KAAKu+E,gBAAgBt+D,EAAK,SACrB,GAAI0+D,KAAe3+E,KACxB,IACEA,KAAK2+E,GAAa77E,MAAM9C,KAAMw+E,EAAGv+D,KAAK/U,MAAM,GAC7C,CAAC,MAAO0C,GACP25D,EAAQz8D,IAAIy8D,EAAQ+C,SAASlhE,MAAOwE,EACrC,MACI,GAAoB,QAAhB+wE,EAAuB,CAChC,MAAM3zE,EAAQiV,EAAK,GACb/W,EAAM+W,EAAK,GACjBsnD,EAAQz8D,IAAIszE,EAAKpzE,GAAQ9B,EAC1B,MACCq+D,EAAQz8D,IAAIy8D,EAAQ+C,SAASlhE,MAAQ,2CAA0C6W,IAElF,GAIHgiD,EAASoF,OAAS2R,EAAK3R,OACvBpF,EAASyF,IAAMsR,EAAKtR,IACpBzF,EAASwF,KAAOuR,EAAKvR,KACrBxF,EAAS0F,MAAQqR,EAAKrR,MACtB1F,EAASsF,QAAUyR,EAAKzR,QACxB,MAAM,SACJf,GACEF,EAEJtnE,EAAQqoE,OAASA,EACjBroE,EAAQ0oE,IAAMA,EACd1oE,EAAQyoE,KAAOA,EACfzoE,EAAQ2oE,MAAQA,EAChB3oE,EAAQuoE,QAAUA,EAClBvoE,EAAQwnE,SAAWA,EAEnB/mE,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAO,GAEjE,CA/xM0E9I,CAAQC,mDCCnFuoE,EAAAA,QAAQ4F,oBAAoB,QAC5B,CACI7I,YAAa,KACbsa,YAAc,GACdC,UAAY,GACZC,OAAS,GAOTplE,KAAM,SAASqlE,GAEf/+E,KAAKskE,YAAcya,EACf/+E,KAAK4+E,YAAc,GACnB5+E,KAAK6+E,UAAc,GACnB7+E,KAAK8+E,OAAc,GAEnBC,EAAKt7E,WAAWzD,KAAKg/E,aAAan8E,KAAK7C,MAAOunE,EAAAA,QAAQM,GAAGO,WAAY,KAAM,MAAO,KAAM,MAExF2W,EAAKt7E,WAAWzD,KAAKi/E,cAAcp8E,KAAK7C,MAAOunE,EAAAA,QAAQM,GAAGQ,YAAa,KAAM,MAAO,KAAM,KAC7F,EAYD6W,YAAa,SAASC,EAAUnuE,EAAM1D,EAAMyiC,GAExC,IAAK,IAAIjrC,EAAE,EAAGA,EAAE9E,KAAK4+E,YAAYt6E,OAAQQ,IAErC,GAAI9E,KAAK4+E,YAAY95E,GAAGq6E,UAAYA,GAChCn/E,KAAK4+E,YAAY95E,GAAGkM,MAAQA,GAC5BhR,KAAK4+E,YAAY95E,GAAGwI,MAAQA,GAC5BtN,KAAK4+E,YAAY95E,GAAGirC,MAAQA,EAE5B,OAAO,EAIf,OADA/vC,KAAK4+E,YAAYh9E,KAAK,CAACu9E,SAAUA,EAAUnuE,KAAMA,EAAM1D,KAAMA,EAAMyiC,KAAMA,KAClE,CACV,EASDqvC,WAAY,SAASC,GAEjB,IAAK,IAAIv6E,EAAE,EAAGA,EAAE9E,KAAK6+E,UAAUv6E,OAAQQ,IAElC,GAAI9E,KAAK6+E,UAAU/5E,IAAMu6E,EACrB,OAAO,EAGhB,OADAr/E,KAAK6+E,UAAUj9E,KAAKy9E,IACb,CACV,EASDC,cAAe,SAASD,GAEpB,IAAK,IAAIv6E,EAAE,EAAGA,EAAE9E,KAAK6+E,UAAUv6E,OAAQQ,IAElC,GAAI9E,KAAK6+E,UAAU/5E,KAAOu6E,EAEtB,OADAr/E,KAAK6+E,UAAUj0E,OAAO9F,EAAE,IACjB,EAGhB,OAAO,CACV,EAYDy6E,QAAS,SAASnT,EAAK9+D,EAAM/F,EAAMi4E,GAE/B,QAAIj4E,IAASi4E,IAEbx/E,KAAK8+E,OAAOl9E,KAAK,CAACwqE,IAAKA,EAAK9+D,KAAMA,EAAM/F,KAAMA,EAAMi4E,UAAWA,IACxD,GACV,EASDnoE,KAAM,SAAS+0D,EAAK7kE,EAAMk4E,EAAS97E,EAAO+vE,GAEtC,IAAIpM,EAAQ,CAAC+F,MAAO9F,EAAAA,QAAQM,GAAGO,YAC3B7gE,IACA+/D,EAAM//D,KAAOA,GAEjB,IAAI8P,EAAOqwD,EAAAA,IAAI,CAAC5rD,KAAK9b,KAAKskE,YAAY8H,IACrBvwD,GAAGuwD,EAAKp7D,KAAK,QAAQhD,EAAE,QAASs5D,GACjDtnE,KAAKskE,YAAY0P,OAAO38D,EAAMooE,EAAS97E,EAAO+vE,EACjD,EASDgM,MAAO,SAAStT,EAAK7kE,EAAMk4E,EAAS97E,EAAO+vE,GAEvC,IAAIpM,EAAQ,CAAC+F,MAAO9F,EAAAA,QAAQM,GAAGQ,aAC3B9gE,IACA+/D,EAAM//D,KAAOA,GAEjB,IAAIm4E,EAAQhY,EAAAA,IAAI,CAAC5rD,KAAK9b,KAAKskE,YAAY8H,IACtBvwD,GAAGuwD,EAAKp7D,KAAK,QAAQhD,EAAE,QAASs5D,GACjDtnE,KAAKskE,YAAY0P,OAAO0L,EAAOD,EAAS97E,EAAO+vE,EAClD,EAIDiM,eAAgB,SAAS/L,EAAQgM,GAE7B,IAAIxzE,EAAQwnE,EAAOxrC,aAAa,MAC5BtsB,EAAO83D,EAAOxrC,aAAa,QAC3By3C,EAAWnY,EAAAA,IAAI,CAAC12D,KAAM,SAAU5E,GAAIA,IAMxC,OAJa,OAAT0P,GACA+jE,EAASvY,MAAM,CAACzrD,GAAIC,IAGjB+jE,EAAS7xE,EAAE,QAAS4xE,EAC9B,EAKDZ,aAAc,SAASpL,GAEnB,IAEI9uE,EAFAyC,EAAOqsE,EAAO/tE,qBAAqB,SAAS,GAAGuiC,aAAa,QAC5Dk/B,EAAQ,CAAC+F,MAAO9F,EAAAA,QAAQM,GAAGO,YAE3B7gE,IAEA+/D,EAAM//D,KAAOA,GAEjB,IAAIs4E,EAAW7/E,KAAK2/E,eAAe/L,EAAQtM,GAC3C,IAAKxiE,EAAE,EAAGA,EAAE9E,KAAK4+E,YAAYt6E,OAAQQ,IAEjCwiE,EAAQ,CAAC6X,SAAUn/E,KAAK4+E,YAAY95E,GAAGq6E,SAC1BnuE,KAAUhR,KAAK4+E,YAAY95E,GAAGkM,MACvChR,KAAK4+E,YAAY95E,GAAGwI,OACpBg6D,EAAMh6D,KAAOtN,KAAK4+E,YAAY95E,GAAGwI,MACjCtN,KAAK4+E,YAAY95E,GAAGirC,OACpBu3B,EAAM,YAActnE,KAAK4+E,YAAY95E,GAAGirC,MAC5C8vC,EAAS7xE,EAAE,WAAYs5D,GAAOiG,KAElC,IAAKzoE,EAAE,EAAGA,EAAE9E,KAAK6+E,UAAUv6E,OAAQQ,IAE/B+6E,EAAS7xE,EAAE,UAAW,CAAC,IAAMhO,KAAK6+E,UAAU/5E,KAAKyoE,KAGrD,OADAvtE,KAAKskE,YAAYjzC,KAAKwuD,EAAS/S,SACxB,CACV,EAIDmS,cAAe,SAASrL,GAEpB,IAEI8L,EAAO56E,EAFP86E,EAAc,CAACvS,MAAO9F,EAAAA,QAAQM,GAAGQ,aACjC9gE,EAAOqsE,EAAO/tE,qBAAqB,SAAS,GAAGuiC,aAAa,QAEhE,GAAI7gC,GAIA,IAFAq4E,EAAYr4E,KAAOA,EACnBm4E,EAAQ,GACH56E,EAAI,EAAGA,EAAI9E,KAAK8+E,OAAOx6E,OAAQQ,IAEhC,GAAI9E,KAAK8+E,OAAOh6E,GAAGyC,MAAQA,EAC3B,CACIm4E,EAAQ1/E,KAAK8+E,OAAOh6E,GAAG06E,UAAU5L,GACjC,KACH,OAKL8L,EAAQ1/E,KAAK8+E,OAEjB,IAAIe,EAAW7/E,KAAK2/E,eAAe/L,EAAQgM,GAC3C,IAAK96E,EAAI,EAAGA,EAAI46E,EAAMp7E,OAAQQ,IAC9B,CACI,IAAIwiE,EAAQ,CAAC8E,IAAMsT,EAAM56E,GAAGsnE,KACxBsT,EAAM56E,GAAGwI,OACTg6D,EAAMh6D,KAAOoyE,EAAM56E,GAAGwI,MACtBoyE,EAAM56E,GAAGyC,OACT+/D,EAAM//D,KAAOm4E,EAAM56E,GAAGyC,MAC1Bs4E,EAAS7xE,EAAE,OAAQs5D,GAAOiG,IAC7B,CAED,OADAvtE,KAAKskE,YAAYjzC,KAAKwuD,EAAS/S,SACxB,CACV,8DCrNLvF,EAAAA,QAAQ4F,oBAAoB,mBAAoB,CAK/C2S,SAAS,EAOTC,oCAAoC,EAQpCC,wBAAyB,EAMzB1hE,GAAI,KAMJ2hE,IAAK,gBAMLC,4BAA4B,EAQ5BC,gCAAiC,KAQjCC,+BAAgC,KAMhCC,0BAA2B,KAQ3BC,mBAAoB,KAMpBC,gBAAiB,KAMjBC,iBAAkB,KAKlBC,8BAA+B,EAM/BC,cAAc,EAKdC,uBAAwB,GAOxBC,6BAA8B,GAE9BC,8BAA+B,SAAS5nE,GACvCjZ,KAAK4gF,6BAA6Bh/E,KAAKqX,EACvC,EAED6nE,OAAQ,SAASxP,GAChB,IAAKtxE,KAAK0gF,aACT,MAAM,IAAIn+E,MAAM,sDACV,GAAIvC,KAAK+gF,oBAAsBxZ,EAAAA,QAAQ4B,OAAOK,UACpD,MAAM,IAAIjnE,MAAM,sDAEjBvC,KAAKse,GAAG+S,KAAKg2C,EAAAA,OAAO,SAAU,CAAEgG,MAAOrtE,KAAKigF,IAAK3O,YACjDtxE,KAAKse,GAAGzU,QACR7J,KAAKse,GAAG+yD,OACR,EAED2P,eAAgB,WACf,OAAOhhF,KAAKihF,YACZ,EAEDC,cACC,OAAOlhF,KAAK0gF,YACZ,EAEDpP,OAAQ,WACP,IAAKtxE,KAAKghF,iBACT,MAAM,IAAIz+E,MAAM,mBAEjB,GAAIvC,KAAK+gF,oBAAsBxZ,EAAAA,QAAQ4B,OAAOM,aAC7C,MAAM,IAAIlnE,MAAM,yDAGjBvC,KAAKse,GAAGvX,QAAQ6wE,yBAA0B,EAC1C53E,KAAKmhF,WAAY,EAEjBnhF,KAAKohF,iBAAiBt+E,MAAM9C,KAAKse,GAAIte,KAAKqhF,aAC1C,EAEDC,uBAAwB,WACvB,GAAIthF,KAAK+gF,oBAAsBxZ,EAAAA,QAAQ4B,OAAOK,UAC7C,MAAM,IAAIjnE,MAAM,sEAEjBvC,KAAKygF,8BAAgC,EACrCzgF,KAAKse,GAAG+S,KAAKg2C,EAAAA,OAAO,IAAK,CAAEgG,MAAOrtE,KAAKigF,MACvC,EAEDsB,mBAAoB,WACnB,OAAOvhF,KAAKqgF,yBACZ,EAEDmB,mBAAoB,WACnB,OAAOxhF,KAAKogF,8BACZ,EAED1mE,KAAM,SAASqlE,GACd/+E,KAAKse,GAAKygE,EACVxX,EAAAA,QAAQwD,aAAa,KAAM/qE,KAAKigF,KAGhCjgF,KAAKsgF,mBAAqBtgF,KAAKse,GAAG40D,UAClClzE,KAAKse,GAAG40D,UAAYlzE,KAAKkzE,UAAUrwE,KAAK7C,MAExCA,KAAKohF,iBAAmBphF,KAAKse,GAAGvF,QAChC/Y,KAAKse,GAAGvF,QAAU/Y,KAAKyhF,sBAAsB5+E,KAAK7C,MAElDA,KAAK0hF,mCAAqC1hF,KAAKse,GAAGq5D,2BAClD33E,KAAKse,GAAGq5D,2BAA6B33E,KAAK23E,2BAA2B90E,KAAK7C,MAE1EA,KAAK2hF,sBAAwB3hF,KAAKse,GAAG82D,cACrCp1E,KAAKse,GAAG82D,cAAgBp1E,KAAK4hF,uBAAuB/+E,KAAK7C,MAEzDA,KAAK6hF,oBAAsB7hF,KAAKse,GAAGtF,WACnChZ,KAAKse,GAAGtF,WAAahZ,KAAK8hF,qBAAqBj/E,KAAK7C,KACpD,EAED8hF,qBAAsB,WACrB9hF,KAAKihF,kBAAen6E,EACpB9G,KAAK6hF,oBAAoB/+E,MAAM9C,KAAKse,GAAI5V,UACxC,EAEDk5E,uBAAwB,WACnB5hF,KAAKghF,mBACHhhF,KAAKmhF,WACNnhF,KAAKse,GAAG2xD,YAAcjwE,KAAKse,GAAG4xD,gBAClClwE,KAAK+hF,aAAe,CACnBh/E,SAAU/C,KAAKse,GAAGvb,SAClBysE,cAAexvE,KAAKse,GAAGkxD,cACvBC,aAAczvE,KAAKse,GAAGmxD,aACtBC,eAAgB1vE,KAAKse,GAAGoxD,eACxBC,UAAW3vE,KAAKse,GAAGqxD,UACnBC,YAAa5vE,KAAKse,GAAGsxD,aAEtB5vE,KAAKgiF,WAAahiF,KAAKse,GAAG8tD,IAE1BpsE,KAAK8/E,SAAWvY,EAAAA,QAAQtpD,MAAM,0CAA4Cje,KAAK+hF,aAAah/E,SAASuB,SAKtGtE,KAAKse,GAAG02B,MAAQ,GAEhBh1C,KAAK2hF,sBAAsB7+E,MAAM9C,KAAKse,GAAI5V,UAC1C,EAED+4E,sBAAuB,WACtBzhF,KAAKqhF,aAAe34E,UAEpB1I,KAAKohF,iBAAiBt+E,MAAM9C,KAAKse,GAAI5V,UACrC,EAEDivE,2BAA4B,SAASp/B,GAGpC,OAFAv4C,KAAK0gF,aAAenoC,EAAK89B,uBAAuBr2E,KAAKigF,IAAK,MAAM37E,OAAS,EAElEtE,KAAK0hF,mCAAmC5+E,MAAM9C,KAAKse,GAAI5V,UAC9D,EAED8sE,cAAe,SAAUH,GAExB,GADAr1E,KAAK+gF,kBAAoB1L,EACpBr1E,KAAKghF,kBACL3L,IAAW9N,EAAAA,QAAQ4B,OAAOK,WAAa6L,IAAW9N,EAAAA,QAAQ4B,OAAOM,aAqC/D,GAAI4L,IAAW9N,EAAAA,QAAQ4B,OAAOW,aAAe,CACnD9pE,KAAKse,GAAG8tD,IAAMpsE,KAAKgiF,WAGnB,IAAK,MAAM1vD,KAAMtyB,KAAK+hF,aAAah/E,UAAY,IAC5CgJ,OAAO/L,KAAK+hF,aAAanS,aAAe,IAC1C5vE,KAAKse,GAAGy4D,eAAezkD,EAAEjvB,QAASivB,EAAE07C,GAAI17C,EAAEhlB,KAAMglB,EAAEthB,KAAMshB,EAAElmB,IAE3D,IAAK,MAAMkmB,KAAMtyB,KAAK+hF,aAAavS,eAAiB,IACjDzjE,OAAO/L,KAAK+hF,aAAapS,WAC3B3vE,KAAKse,GAAGw1D,gBAAgBxhD,EAAEw8C,OAAQx8C,EAAEjvB,SAErC,IAAK,MAAMivB,KAAMtyB,KAAK+hF,aAAatS,cAAgB,IAChD1jE,OAAO/L,KAAK+hF,aAAarS,gBAAkB,IAC7C1vE,KAAKse,GAAGu1D,mBAAmBvhD,GAI5BtyB,KAAKse,GAAG+S,KAAKg2C,EAAAA,OAAO,SAAU,CAC7BgG,MAAOrtE,KAAKigF,IACZ3tD,EAAGtyB,KAAKogF,+BACR6B,OAAQjiF,KAAKihF,gBAEdjhF,KAAKse,GAAGzU,OACR,MAAUwrE,IAAW9N,EAAAA,QAAQ4B,OAAO//D,QACpCpJ,KAAK8/E,SAAWvY,EAAAA,QAAQtpD,MAAM,oCAC9Bje,KAAKihF,kBAAen6E,QA9DpB9G,KAAK8/E,SAAWvY,EAAAA,QAAQtpD,MAAM,kBAE9Bje,KAAKmgF,gCAAkC,EACvCngF,KAAKogF,+BAAiC,EAEtCpgF,KAAKqgF,0BAA4B,EAEjCrgF,KAAKkgF,4BAA6B,EAClClgF,KAAKygF,8BAAgC,EAGrCzgF,KAAKmhF,WAAY,EAEb9L,IAAW9N,EAAAA,QAAQ4B,OAAOM,eAC7BzpE,KAAK0gF,cAAe,GAGrB1gF,KAAK2gF,uBAAyB,GAE1B3gF,KAAKugF,iBACRvgF,KAAKse,GAAGy1D,cAAc/zE,KAAKugF,iBAGxBvgF,KAAKwgF,kBACRxgF,KAAKse,GAAGy1D,cAAc/zE,KAAKwgF,kBAG5BxgF,KAAKugF,gBAAkBvgF,KAAKse,GAAG7a,WAAWzD,KAAKkiF,4BAA4Br/E,KAAK7C,MAAOA,KAAKigF,IAAK,KACjGjgF,KAAKmiF,YAAcniF,KAAKse,GAAG7a,WAAWzD,KAAKoiF,iBAAiBv/E,KAAK7C,MAAOA,KAAKigF,IAAK,KAClFjgF,KAAKwgF,iBAAmBxgF,KAAKse,GAAG7a,WAAWzD,KAAKqiF,uBAAuBx/E,KAAK7C,OAG5EA,KAAKsiF,gBAAkBtiF,KAAKse,GAAGy4D,eAAe/2E,KAAKuiF,eAAe1/E,KAAK7C,MAAOA,KAAKigF,IAAK,WACxFjgF,KAAKwiF,qBAAuBxiF,KAAKse,GAAGy4D,eAAe/2E,KAAKyiF,oBAAoB5/E,KAAK7C,MAAOA,KAAKigF,IAAK,UAClGjgF,KAAK0iF,gBAAmB1iF,KAAKse,GAAGy4D,eAAe/2E,KAAK2iF,eAAe9/E,KAAK7C,MAAOA,KAAKigF,IAAI,UA8BzF,EASD/M,UAAW,SAAS36B,GAOnB,OANIgvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,OAC5BgvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,aACzBgvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,aACzBv4C,KAAK4iF,4BAA4BrqC,GAG3Bv4C,KAAKsgF,mBAAmB74E,KAAKzH,KAAKse,GAAIi6B,EAC7C,EAEDgqC,eAAgB,SAAShqC,GAOxB,OANAv4C,KAAKkgF,4BAA6B,EAElClgF,KAAKihF,aAA+C,SAAhC1oC,EAAKnQ,aAAa,WAAwBmQ,EAAKnQ,aAAa,MAEhFpoC,KAAKse,GAAGgzD,UAED,CACP,EAEDmR,oBAAqB,SAASlqC,GAC7B,MAAM50C,EAAQ40C,IACZA,EAAK8L,mBAAqB9L,EAAK8L,kBAAkB5+C,SAC9C8yC,EAAKnJ,YAAcmJ,EAAKnJ,WAAW3pC,SAKxC,OAHAzF,KAAKse,GAAG8zD,qBAAqB7K,EAAAA,QAAQ4B,OAAO//D,MAAOzF,EAAO40C,GAC1Dv4C,KAAKse,GAAG82D,iBAED,CACP,EAEDuN,eAAgB,SAASpqC,GAExB,IAAIsqC,EAAehuE,SAAS0jC,EAAKnQ,aAAa,MAQ9C,GAPApoC,KAAK8iF,2BAA2BD,EAAc7iF,KAAKmgF,iCAEnDngF,KAAKmhF,WAAY,EACjBnhF,KAAKse,GAAG+wD,SAAU,EAClBrvE,KAAKse,GAAG0xD,eAAgB,EACxBhwE,KAAKse,GAAG8xD,UAAW,EAEfpwE,KAAK2gF,uBAAuBr8E,OAAS,EAAG,CAC3CtE,KAAK8/E,SAAWvY,EAAAA,QAAQtpD,MAAM,oCAAqCje,KAAK2gF,wBACxE,IAAI,MAAM/M,KAAU5zE,KAAK2gF,uBACxB3gF,KAAKse,GAAG+S,KAAKuiD,EAEd,MACA5zE,KAAK8/E,SAAWvY,EAAAA,QAAQtpD,MAAM,+BAAgCje,KAAK2gF,wBAKpE,OAFA3gF,KAAKse,GAAG8zD,qBAAqB7K,EAAAA,QAAQ4B,OAAOK,UAAW,OAEhD,CACP,EAED6Y,uBAAwB,SAAS9pC,GAShC,OARIgvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,OAASgvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,aAAegvB,EAAAA,QAAQ4D,WAAW5yB,EAAM,cACtGv4C,KAAK+iF,kCAED/iF,KAAK+/E,oCACR//E,KAAKgjF,4BAIA,CACP,EAEDF,2BAA4B,SAASG,EAAsBC,GAC1D,IAAI1hE,EAAQyhE,EAAuBC,EAE/B1hE,EAAQ,GACXxhB,KAAKmjF,YAAY,uDAAyDF,EAAuB,gBAAkBC,GAGhH1hE,EAAQxhB,KAAK2gF,uBAAuBr8E,QACvCtE,KAAKmjF,YAAY,8FAAgG3hE,EAAQ,kCAAoCxhB,KAAK2gF,uBAAuBr8E,OAAS,WAAa2+E,EAAuB,gBAAkBC,GAGzP,IAAI,IAAIp+E,EAAI,EAAGA,EAAI0c,EAAO1c,IAEzB,IADA,IAAI8uE,EAAS5zE,KAAK2gF,uBAAuBnyD,QAChCrd,EAAI,EAAGA,EAAInR,KAAK4gF,6BAA6Bt8E,OAAQ6M,IAC7DnR,KAAK4gF,6BAA6BzvE,GAAGyiE,GAInC5zE,KAAK8/E,SAAW9/E,KAAK2gF,uBAAuBr8E,OAAS,GACxDijE,EAAAA,QAAQjkD,KAAK,4BAA6BtjB,KAAK2gF,wBAGhD3gF,KAAKmgF,gCAAkC8C,EAEnCjjF,KAAKggF,wBAA0B,IAClChgF,KAAKygF,8BAAgC,EAEtC,EAEDyB,4BAA6B,WAG5B,OAFAliF,KAAKgjF,2BAEE,CACP,EAEDZ,iBAAkB,SAAS7pC,GAC1B,IAAIsqC,EAAehuE,SAAS0jC,EAAKnQ,aAAa,MAG9C,OAFApoC,KAAK8iF,2BAA2BD,EAAc7iF,KAAKmgF,kCAE5C,CACP,EAED6C,wBAAyB,WACpBhjF,KAAKkgF,4BACRlgF,KAAKse,GAAG+S,KAAKg2C,EAAAA,OAAO,IAAK,CAAEgG,MAAOrtE,KAAKigF,IAAK3tD,EAAGtyB,KAAKogF,iCAErD,EAEDwC,4BAA6B,SAASrqC,GACrC,GAAIv4C,KAAKkgF,2BAA4B,CACpC,IAAmD,IAA/ClgF,KAAK2gF,uBAAuBl2E,QAAQ8tC,GAEvC,OAGDv4C,KAAK2gF,uBAAuB/+E,KAAK22C,GACjCv4C,KAAKqgF,4BAEDrgF,KAAKggF,wBAA0B,IAClChgF,KAAKygF,gCAEDzgF,KAAKygF,gCAAkCzgF,KAAKggF,yBAE/Cp2E,YAAW,KACN5J,KAAK+gF,oBAAsBxZ,EAAAA,QAAQ4B,OAAOK,WAC7CxpE,KAAKshF,wBACL,GACC,GAGL,CACD,EAEDyB,gCAAiC,WAC5B/iF,KAAKkgF,4BACRlgF,KAAKogF,gCAEN,EAED+C,YAAa,SAASj6E,GAErB,MADAq+D,EAAAA,QAAQ5jE,MAAMuF,GACR,IAAI3G,MAAM2G,EAChB,yCCxcFzJ,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAMlB,MAAMokF,EAAY,GAElB,IAAK,IAAIt+E,EAAI,EAAGA,EAAI,MAAOA,EACzBs+E,EAAUxhF,MAAMkD,EAAI,KAAO0M,SAAS,IAAI5F,OAAO,IAYjD5M,EAAAA,QATA,SAAqBqkF,EAAKz+B,GACxB,MAAM9/C,EAAI8/C,GAAU,EACd0+B,EAAMF,EAGZ,OAAQE,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAM,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAM,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAM,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAMw+E,EAAID,EAAIv+E,EAAI,IAAM,IAAMw+E,EAAID,EAAIv+E,EAAI,KAAOw+E,EAAID,EAAIv+E,EAAI,KAAOw+E,EAAID,EAAIv+E,EAAI,KAAOw+E,EAAID,EAAIv+E,EAAI,KAAOw+E,EAAID,EAAIv+E,EAAI,KAAOw+E,EAAID,EAAIv+E,EAAI,MAAM+sB,aACtU,+BClBDpyB,OAAOwc,eAAejd,EAAS,KAAM,CACnC46B,YAAY,EACZzV,IAAK,WACH,OAAOo/D,EAAG9pE,OACX,IAEHha,OAAOwc,eAAejd,EAAS,KAAM,CACnC46B,YAAY,EACZzV,IAAK,WACH,OAAOq/D,EAAI/pE,OACZ,IAEHha,OAAOwc,eAAejd,EAAS,KAAM,CACnC46B,YAAY,EACZzV,IAAK,WACH,OAAOs/D,EAAIhqE,OACZ,IAEHha,OAAOwc,eAAejd,EAAS,KAAM,CACnC46B,YAAY,EACZzV,IAAK,WACH,OAAOu/D,EAAIjqE,OACZ,IAGH,IAAI8pE,EAAKI,EAAuBrkF,EAAQ,OAEpCkkF,EAAMG,EAAuBrkF,EAAQ,KAErCmkF,EAAME,EAAuBrkF,EAAQ,OAErCokF,EAAMC,EAAuBrkF,EAAQ,OAEzC,SAASqkF,EAAuB38E,GAAO,OAAOA,GAAOA,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,EAAQ,6BCyB/F,SAAS48E,EAAgBC,GACvB,OAAwC,IAAhCA,EAAe,KAAO,GAAK,GAAU,CAC9C,CAsHD,SAASC,EAAQzxE,EAAG0I,GAClB,MAAM+nD,GAAW,MAAJzwD,IAAmB,MAAJ0I,GAE5B,OADa1I,GAAK,KAAO0I,GAAK,KAAO+nD,GAAO,KAC9B,GAAW,MAANA,CACpB,CAcD,SAASihB,EAAO/5C,EAAG97B,EAAGD,EAAGoE,EAAG3E,EAAG1B,GAC7B,OAAO83E,GATc71D,EASQ61D,EAAQA,EAAQ51E,EAAG87B,GAAI85C,EAAQzxE,EAAGrG,OATrCk3D,EAS0Cx1D,GARhDugB,IAAQ,GAAKi1C,EAQuCj1D,GAT1E,IAAuBggB,EAAKi1C,CAU3B,CAED,SAAS8gB,EAAM91E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GAC/B,OAAO+3E,EAAO91E,EAAID,GAAKC,EAAI1I,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EAC3C,CAED,SAASi4E,EAAM/1E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GAC/B,OAAO+3E,EAAO91E,EAAI1I,EAAIyI,GAAKzI,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EAC3C,CAED,SAASk4E,EAAMh2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GAC/B,OAAO+3E,EAAO91E,EAAID,EAAIzI,EAAG2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EACtC,CAED,SAASm4E,EAAMj2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAG3E,EAAG1B,GAC/B,OAAO+3E,EAAO/1E,GAAKC,GAAK1I,GAAI2I,EAAGD,EAAGoE,EAAG3E,EAAG1B,EACzC,CAzNDvM,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAyNlBA,EAAAA,QAnMA,SAAagqD,GACX,GAAqB,iBAAVA,EAAoB,CAC7B,MAAM9/C,EAAMo8D,SAASrhB,mBAAmB+E,IAExCA,EAAQ,IAAItyB,WAAWxtB,EAAI5E,QAE3B,IAAK,IAAIQ,EAAI,EAAGA,EAAIoE,EAAI5E,SAAUQ,EAChCkkD,EAAMlkD,GAAKoE,EAAImpB,WAAWvtB,EAE7B,CAED,OAOF,SAA8B4rC,GAC5B,MAAM/W,EAAS,GACTyqD,EAA0B,GAAf1zC,EAAMpsC,OACjB+/E,EAAS,mBAEf,IAAK,IAAIv/E,EAAI,EAAGA,EAAIs/E,EAAUt/E,GAAK,EAAG,CACpC,MAAMuN,EAAIq+B,EAAM5rC,GAAK,KAAOA,EAAI,GAAK,IAC/B2kD,EAAM50C,SAASwvE,EAAOltD,OAAO9kB,IAAM,EAAI,IAAQgyE,EAAOltD,OAAW,GAAJ9kB,GAAW,IAC9EsnB,EAAO/3B,KAAK6nD,EACb,CAED,OAAO9vB,CACR,CAnBQ2qD,CAiCT,SAAoBjyE,EAAG3N,GAErB2N,EAAE3N,GAAO,IAAM,KAAQA,EAAM,GAC7B2N,EAAEuxE,EAAgBl/E,GAAO,GAAKA,EAC9B,IAAIwJ,EAAI,WACJD,GAAK,UACLD,GAAK,WACLzI,EAAI,UAER,IAAK,IAAIT,EAAI,EAAGA,EAAIuN,EAAE/N,OAAQQ,GAAK,GAAI,CACrC,MAAM0+D,EAAOt1D,EACPu1D,EAAOx1D,EACPy1D,EAAO11D,EACP21D,EAAOp+D,EACb2I,EAAI81E,EAAM91E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,GAAI,GAAI,WAChCS,EAAIy+E,EAAMz+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,WACrCkJ,EAAIg2E,EAAMh2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,WACpCmJ,EAAI+1E,EAAM/1E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,YACrCoJ,EAAI81E,EAAM91E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACpCS,EAAIy+E,EAAMz+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACpCkJ,EAAIg2E,EAAMh2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,YACrCmJ,EAAI+1E,EAAM/1E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,UACrCoJ,EAAI81E,EAAM91E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,YACnCS,EAAIy+E,EAAMz+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACrCkJ,EAAIg2E,EAAMh2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,OACtCmJ,EAAI+1E,EAAM/1E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACtCoJ,EAAI81E,EAAM91E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,YACpCS,EAAIy+E,EAAMz+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,UACtCkJ,EAAIg2E,EAAMh2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,YACtCmJ,EAAI+1E,EAAM/1E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,GAAI,YACrCoJ,EAAI+1E,EAAM/1E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACpCS,EAAI0+E,EAAM1+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACpCkJ,EAAIi2E,EAAMj2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,WACrCmJ,EAAIg2E,EAAMh2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,GAAI,IAAK,WACjCoJ,EAAI+1E,EAAM/1E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACpCS,EAAI0+E,EAAM1+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,EAAG,UACpCkJ,EAAIi2E,EAAMj2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,WACtCmJ,EAAIg2E,EAAMh2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACrCoJ,EAAI+1E,EAAM/1E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,WACnCS,EAAI0+E,EAAM1+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,GAAI,YACrCkJ,EAAIi2E,EAAMj2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACrCmJ,EAAIg2E,EAAMh2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,GAAI,YACpCoJ,EAAI+1E,EAAM/1E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,GAAI,YACrCS,EAAI0+E,EAAM1+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,UACpCkJ,EAAIi2E,EAAMj2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,YACpCmJ,EAAIg2E,EAAMh2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACtCoJ,EAAIg2E,EAAMh2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,QACpCS,EAAI2+E,EAAM3+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACrCkJ,EAAIk2E,EAAMl2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,YACrCmJ,EAAIi2E,EAAMj2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,UACtCoJ,EAAIg2E,EAAMh2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,YACpCS,EAAI2+E,EAAM3+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACpCkJ,EAAIk2E,EAAMl2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACrCmJ,EAAIi2E,EAAMj2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,IAAK,YACtCoJ,EAAIg2E,EAAMh2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,WACpCS,EAAI2+E,EAAM3+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,GAAI,IAAK,WACjCkJ,EAAIk2E,EAAMl2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,WACrCmJ,EAAIi2E,EAAMj2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,GAAI,UACpCoJ,EAAIg2E,EAAMh2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACpCS,EAAI2+E,EAAM3+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,WACtCkJ,EAAIk2E,EAAMl2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,GAAI,WACrCmJ,EAAIi2E,EAAMj2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACrCoJ,EAAIi2E,EAAMj2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,GAAI,GAAI,WAChCS,EAAI4+E,EAAM5+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,GAAI,YACpCkJ,EAAIm2E,EAAMn2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,YACtCmJ,EAAIk2E,EAAMl2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,UACrCoJ,EAAIi2E,EAAMj2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,IAAK,EAAG,YACpCS,EAAI4+E,EAAM5+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,GAAI,IAAK,YACrCkJ,EAAIm2E,EAAMn2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,IAAK,IAAK,SACtCmJ,EAAIk2E,EAAMl2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,YACrCoJ,EAAIi2E,EAAMj2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,EAAG,YACnCS,EAAI4+E,EAAM5+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,UACtCkJ,EAAIm2E,EAAMn2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,IAAK,YACrCmJ,EAAIk2E,EAAMl2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,IAAK,GAAI,YACrCoJ,EAAIi2E,EAAMj2E,EAAGD,EAAGD,EAAGzI,EAAG8M,EAAEvN,EAAI,GAAI,GAAI,WACpCS,EAAI4+E,EAAM5+E,EAAG2I,EAAGD,EAAGD,EAAGqE,EAAEvN,EAAI,IAAK,IAAK,YACtCkJ,EAAIm2E,EAAMn2E,EAAGzI,EAAG2I,EAAGD,EAAGoE,EAAEvN,EAAI,GAAI,GAAI,WACpCmJ,EAAIk2E,EAAMl2E,EAAGD,EAAGzI,EAAG2I,EAAGmE,EAAEvN,EAAI,GAAI,IAAK,WACrCoJ,EAAI41E,EAAQ51E,EAAGs1D,GACfv1D,EAAI61E,EAAQ71E,EAAGw1D,GACfz1D,EAAI81E,EAAQ91E,EAAG01D,GACfn+D,EAAIu+E,EAAQv+E,EAAGo+D,EAChB,CAED,MAAO,CAACz1D,EAAGD,EAAGD,EAAGzI,EAClB,CAtH6Bg/E,CA6H9B,SAAsB7zC,GACpB,GAAqB,IAAjBA,EAAMpsC,OACR,MAAO,GAGT,MAAMkgF,EAAyB,EAAf9zC,EAAMpsC,OAChBq1B,EAAS,IAAIiuB,YAAYg8B,EAAgBY,IAE/C,IAAK,IAAI1/E,EAAI,EAAGA,EAAI0/E,EAAS1/E,GAAK,EAChC60B,EAAO70B,GAAK,KAAsB,IAAf4rC,EAAM5rC,EAAI,KAAcA,EAAI,GAGjD,OAAO60B,CACR,CA1IwC8qD,CAAaz7B,GAAuB,EAAfA,EAAM1kD,QACnE,4BCrCD7E,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,QASA,WACE,IAAK0lF,EACH,MAAM,IAAIniF,MAAM,4GAGlB,OAAOmiF,EAAgBC,EACxB,EATD,MAAMD,EAAoC,oBAAXr8B,QAA0BA,OAAOq8B,iBAAmBr8B,OAAOq8B,gBAAgB7hF,KAAKwlD,SAA+B,oBAAbu8B,UAAgE,mBAA7BA,SAASF,iBAAkCE,SAASF,gBAAgB7hF,KAAK+hF,UACvOD,EAAQ,IAAIjuD,WAAW,+BCH7B,SAAS5b,EAAEpN,EAAG2E,EAAG0I,EAAGjN,GAClB,OAAQJ,GACN,KAAK,EACH,OAAO2E,EAAI0I,GAAK1I,EAAIvE,EAEtB,KAAK,EAML,KAAK,EACH,OAAOuE,EAAI0I,EAAIjN,EAJjB,KAAK,EACH,OAAOuE,EAAI0I,EAAI1I,EAAIvE,EAAIiN,EAAIjN,EAKhC,CAED,SAAS+2E,EAAKxyE,EAAGE,GACf,OAAOF,GAAKE,EAAIF,IAAM,GAAKE,CAC5B,CAzBD9S,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EA+FlBA,EAAAA,QAvEA,SAAcgqD,GACZ,MAAMn1B,EAAI,CAAC,WAAY,WAAY,WAAY,YACzCoW,EAAI,CAAC,WAAY,WAAY,WAAY,UAAY,YAE3D,GAAqB,iBAAV+e,EAAoB,CAC7B,MAAM9/C,EAAMo8D,SAASrhB,mBAAmB+E,IAExCA,EAAQ,GAER,IAAK,IAAIlkD,EAAI,EAAGA,EAAIoE,EAAI5E,SAAUQ,EAChCkkD,EAAMpnD,KAAKsH,EAAImpB,WAAWvtB,GAE7B,CAEDkkD,EAAMpnD,KAAK,KACX,MAAMqK,EAAI+8C,EAAM1kD,OAAS,EAAI,EACvBsvB,EAAI3vB,KAAK27C,KAAK3zC,EAAI,IAClBknB,EAAI,IAAIloB,MAAM2oB,GAEpB,IAAK,IAAI9uB,EAAI,EAAGA,EAAI8uB,IAAK9uB,EAAG,CAC1B,MAAMT,EAAM,IAAIujD,YAAY,IAE5B,IAAK,IAAIz2C,EAAI,EAAGA,EAAI,KAAMA,EACxB9M,EAAI8M,GAAK63C,EAAU,GAAJlkD,EAAa,EAAJqM,IAAU,GAAK63C,EAAU,GAAJlkD,EAAa,EAAJqM,EAAQ,IAAM,GAAK63C,EAAU,GAAJlkD,EAAa,EAAJqM,EAAQ,IAAM,EAAI63C,EAAU,GAAJlkD,EAAa,EAAJqM,EAAQ,GAGnIgiB,EAAEruB,GAAKT,CACR,CAED8uB,EAAES,EAAI,GAAG,IAA2B,GAApBo1B,EAAM1kD,OAAS,GAASL,KAAK+zB,IAAI,EAAG,IACpD7E,EAAES,EAAI,GAAG,IAAM3vB,KAAKC,MAAMivB,EAAES,EAAI,GAAG,KACnCT,EAAES,EAAI,GAAG,IAA2B,GAApBo1B,EAAM1kD,OAAS,GAAS,WAExC,IAAK,IAAIQ,EAAI,EAAGA,EAAI8uB,IAAK9uB,EAAG,CAC1B,MAAMgvB,EAAI,IAAI8zB,YAAY,IAE1B,IAAK,IAAI57C,EAAI,EAAGA,EAAI,KAAMA,EACxB8nB,EAAE9nB,GAAKmnB,EAAEruB,GAAGkH,GAGd,IAAK,IAAIA,EAAI,GAAIA,EAAI,KAAMA,EACzB8nB,EAAE9nB,GAAK64E,EAAK/wD,EAAE9nB,EAAI,GAAK8nB,EAAE9nB,EAAI,GAAK8nB,EAAE9nB,EAAI,IAAM8nB,EAAE9nB,EAAI,IAAK,GAG3D,IAAIkC,EAAI+7B,EAAE,GACNh8B,EAAIg8B,EAAE,GACNj8B,EAAIi8B,EAAE,GACN1kC,EAAI0kC,EAAE,GACNr8B,EAAIq8B,EAAE,GAEV,IAAK,IAAIj+B,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAM0B,EAAIzJ,KAAKC,MAAM8H,EAAI,IACnBsnB,EAAIuxD,EAAK32E,EAAG,GAAK4M,EAAEpN,EAAGO,EAAGD,EAAGzI,GAAKqI,EAAIimB,EAAEnmB,GAAKomB,EAAE9nB,KAAO,EAC3D4B,EAAIrI,EACJA,EAAIyI,EACJA,EAAI62E,EAAK52E,EAAG,MAAQ,EACpBA,EAAIC,EACJA,EAAIolB,CACL,CAED2W,EAAE,GAAKA,EAAE,GAAK/7B,IAAM,EACpB+7B,EAAE,GAAKA,EAAE,GAAKh8B,IAAM,EACpBg8B,EAAE,GAAKA,EAAE,GAAKj8B,IAAM,EACpBi8B,EAAE,GAAKA,EAAE,GAAK1kC,IAAM,EACpB0kC,EAAE,GAAKA,EAAE,GAAKr8B,IAAM,CACrB,CAED,MAAO,CAACq8B,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GACvV,+BC/FDxqC,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAElB,IAAI8lF,EAAOnB,EAAuBrkF,EAAQ,MAEtCylF,EAAepB,EAAuBrkF,EAAQ,OAElD,SAASqkF,EAAuB38E,GAAO,OAAOA,GAAOA,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,EAAQ,CAM/F,IAAIg+E,EAEAC,EAGAC,EAAa,EACbC,EAAa,EAmFjBnmF,EAAAA,QAjFA,SAAY+H,EAASs8E,EAAKz+B,GACxB,IAAI9/C,EAAIu+E,GAAOz+B,GAAU,EACzB,MAAM32C,EAAIo1E,GAAO,GAEjB,IAAI97E,GADJR,EAAUA,GAAW,CAAC,GACHQ,MAAQy9E,EACvBI,OAAgCt+E,IAArBC,EAAQq+E,SAAyBr+E,EAAQq+E,SAAWH,EAInE,GAAY,MAAR19E,GAA4B,MAAZ69E,EAAkB,CACpC,MAAMC,EAAYt+E,EAAQ5C,SAAW4C,EAAQu+E,KAAOR,EAAKrrE,WAE7C,MAARlS,IAEFA,EAAOy9E,EAAU,CAAgB,EAAfK,EAAU,GAAWA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAG3F,MAAZD,IAEFA,EAAWH,EAAiD,OAApCI,EAAU,IAAM,EAAIA,EAAU,IAEzD,CAMD,IAAIE,OAA0Bz+E,IAAlBC,EAAQw+E,MAAsBx+E,EAAQw+E,MAAQtkF,KAAKC,MAG3DskF,OAA0B1+E,IAAlBC,EAAQy+E,MAAsBz+E,EAAQy+E,MAAQL,EAAa,EAEvE,MAAMvhC,EAAK2hC,EAAQL,GAAcM,EAAQL,GAAc,IAavD,GAXIvhC,EAAK,QAA0B98C,IAArBC,EAAQq+E,WACpBA,EAAWA,EAAW,EAAI,QAKvBxhC,EAAK,GAAK2hC,EAAQL,SAAiCp+E,IAAlBC,EAAQy+E,QAC5CA,EAAQ,GAINA,GAAS,IACX,MAAM,IAAIjjF,MAAM,mDAGlB2iF,EAAaK,EACbJ,EAAaK,EACbP,EAAYG,EAEZG,GAAS,YAET,MAAME,GAA4B,KAAb,UAARF,GAA6BC,GAAS,WACnDv3E,EAAEnJ,KAAO2gF,IAAO,GAAK,IACrBx3E,EAAEnJ,KAAO2gF,IAAO,GAAK,IACrBx3E,EAAEnJ,KAAO2gF,IAAO,EAAI,IACpBx3E,EAAEnJ,KAAY,IAAL2gF,EAET,MAAMC,EAAMH,EAAQ,WAAc,IAAQ,UAC1Ct3E,EAAEnJ,KAAO4gF,IAAQ,EAAI,IACrBz3E,EAAEnJ,KAAa,IAAN4gF,EAETz3E,EAAEnJ,KAAO4gF,IAAQ,GAAK,GAAM,GAE5Bz3E,EAAEnJ,KAAO4gF,IAAQ,GAAK,IAEtBz3E,EAAEnJ,KAAOsgF,IAAa,EAAI,IAE1Bn3E,EAAEnJ,KAAkB,IAAXsgF,EAET,IAAK,IAAI7yE,EAAI,EAAGA,EAAI,IAAKA,EACvBtE,EAAEnJ,EAAIyN,GAAKhL,EAAKgL,GAGlB,OAAO8wE,IAAO,EAAI0B,EAAatrE,SAASxL,EACzC,6BCrGDxO,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAElB,IAAIukF,EAAKI,EAAuBrkF,EAAQ,OAEpCqmF,EAAMhC,EAAuBrkF,EAAQ,OAEzC,SAASqkF,EAAuB38E,GAAO,OAAOA,GAAOA,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,EAAQ,CAG/F,IAAIsvC,GADO,EAAIitC,EAAG9pE,SAAS,KAAM,GAAMksE,EAAIlsE,SAE3Cza,EAAAA,QAAkBs3C,+BCblB72C,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,QAiCA,SAAkBsO,EAAMqF,EAASizE,GAC/B,SAASC,EAAah+E,EAAOkvC,EAAWssC,EAAKz+B,GAC3C,MAAMhd,EAAMy7C,GAAOz+B,GAAU,EAI7B,GAHqB,iBAAV/8C,IAAoBA,EApBnC,SAAuB6G,GACrBA,EAAM42D,SAASrhB,mBAAmBv1C,IAElC,MAAMs6C,EAAQ,GAEd,IAAK,IAAIlkD,EAAI,EAAGA,EAAI4J,EAAIpK,SAAUQ,EAChCkkD,EAAMpnD,KAAK8M,EAAI2jB,WAAWvtB,IAG5B,OAAOkkD,CACR,CAU0C88B,CAAcj+E,IAC5B,iBAAdkvC,IAAwBA,EA9BvC,SAAqB06B,GAEnB,MAAMzoB,EAAQ,GAId,OAHAyoB,EAAKxvE,QAAQ,mBAAmB,SAAUwnD,GACxCT,EAAMpnD,KAAKiT,SAAS40C,EAAK,IAC1B,IACMT,CACR,CAuBkD+8B,CAAYhvC,KAEtD9rC,MAAMgJ,QAAQpM,GACjB,MAAM6T,UAAU,mCAGlB,IAAKzQ,MAAMgJ,QAAQ8iC,IAAmC,KAArBA,EAAUzyC,OACzC,MAAMoX,UAAU,+DAIlB,MAAMstC,EAAQ48B,EAAS7uC,EAAUhrC,OAAOlE,IAIxC,GAHAmhD,EAAM,GAAgB,GAAXA,EAAM,GAAYr2C,EAC7Bq2C,EAAM,GAAgB,GAAXA,EAAM,GAAY,IAEzBq6B,EACF,IAAK,IAAI2C,EAAM,EAAGA,EAAM,KAAMA,EAC5B3C,EAAIz7C,EAAMo+C,GAAOh9B,EAAMg9B,GAI3B,OAAO3C,IAAO,EAAI0B,EAAatrE,SAASuvC,EACzC,CAGD,IACE68B,EAAav4E,KAAOA,CACrB,CAAC,MAAOuW,GAAO,CAKhB,OAFAgiE,EAAaI,IAAMA,EACnBJ,EAAaK,IAAMA,EACZL,CACR,EArED7mF,EAAQknF,IAAMlnF,EAAQinF,SAAM,EAE5B,IAEgCj/E,EAF5B+9E,GAE4B/9E,EAFU1H,EAAQ,QAEG0H,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,GAuBvF,MAAMi/E,EAAM,uCACZjnF,EAAQinF,IAAMA,EACd,MAAMC,EAAM,uCACZlnF,EAAQknF,IAAMA,+BClCdzmF,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAElB,IAAI8lF,EAAOnB,EAAuBrkF,EAAQ,MAEtCylF,EAAepB,EAAuBrkF,EAAQ,OAElD,SAASqkF,EAAuB38E,GAAO,OAAOA,GAAOA,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,EAAQ,CA8B/FhI,EAAAA,QA5BA,SAAY+H,EAASs8E,EAAKz+B,GACD,iBAAZ79C,IACTs8E,EAAkB,WAAZt8E,EAAuB,IAAI2vB,WAAW,IAAM,KAClD3vB,EAAU,MAKZ,MAAMo/E,GAFNp/E,EAAUA,GAAW,CAAC,GAED5C,SAAW4C,EAAQu+E,KAAOR,EAAKrrE,WAMpD,GAHA0sE,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvB9C,EAAK,CACP,MAAM55E,EAAQm7C,GAAU,EAExB,IAAK,IAAI9/C,EAAI,EAAGA,EAAI,KAAMA,EACxBu+E,EAAI55E,EAAQ3E,GAAKqhF,EAAKrhF,GAGxB,OAAOu+E,CACR,CAED,OAAO,EAAI0B,EAAatrE,SAAS0sE,EAClC,+BCpCD1mF,OAAOwc,eAAejd,EAAS,aAAc,CAC3C6I,OAAO,IAET7I,EAAAA,aAAkB,EAElB,IAAIukF,EAAKI,EAAuBrkF,EAAQ,OAEpC8mF,EAAOzC,EAAuBrkF,EAAQ,OAE1C,SAASqkF,EAAuB38E,GAAO,OAAOA,GAAOA,EAAI8yB,WAAa9yB,EAAM,CAAEyS,QAASzS,EAAQ,CAG/F,IAAIsvC,GADO,EAAIitC,EAAG9pE,SAAS,KAAM,GAAM2sE,EAAK3sE,SAE5Cza,EAAAA,QAAkBs3C,YCWlBr3C,EAAOD,QAtBiB,CAIpBqnF,OAAQ,SAKRC,QAAS,UAKTC,iBAAkB,mBAKlBC,KAAM,kBCFVvnF,EAAOD,QAZkB,CAIrBynF,YAAa,cAKbC,KAAM,qCClBH,IAAKC,84BAAAA,GAAAA,EAAAA,qBAAAA,2BAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,kBAAAA,wBAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,6BAAAA,mCAAAA,EAAAA,yBAAAA,+BAAAA,EAAAA,0BAAAA,gCAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,iCAAAA,uCAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,yBAAAA,+BAAAA,EAAAA,2CAAAA,iDAAAA,EAAAA,eAAAA,qBAAAA,EAAAA,mBAAAA,yBAAAA,EAAAA,kBAAAA,wBAAAA,EAAAA,qBAAAA,2BAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,6BAAAA,mCAAAA,EAAAA,8BAAAA,oCAAAA,EAAAA,4BAAAA,kCAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,wBAAAA,8BAAAA,EAAAA,sBAAAA,4BAAAA,EAAAA,0BAAAA,gCAAAA,EAAAA,wBAAAA,8BAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,qBAAAA,2BAAAA,EAAAA,qBAAAA,2BAAAA,EAAAA,qBAAAA,4BAAAA,IAAAA,EAAAA,CAAAA,IA+HL,MAAMC,EAAuBD,EAAUC,qBACjCC,EAAsBF,EAAUE,oBAChCC,EAAoBH,EAAUG,kBAC9BC,EAAsBJ,EAAUI,oBAChCC,EAA+BL,EAAUK,6BACzCC,EAA2BN,EAAUM,yBACrCC,EAA4BP,EAAUO,0BACtCC,EAAsBR,EAAUQ,oBAChCC,EAAmCT,EAAUS,iCAC7CC,EAAsBV,EAAUU,oBAChCC,EAA2BX,EAAUW,yBACrCC,EAA6CZ,EAAUY,2CACvDC,EAAiBb,EAAUa,eAC3BC,EAAqBd,EAAUc,mBAC/BC,EAAoBf,EAAUe,kBAC9BC,EAAuBhB,EAAUgB,qBACjCC,EAAsBjB,EAAUiB,oBAChCC,EAA+BlB,EAAUkB,6BACzCC,EAAgCnB,EAAUmB,8BAC1CC,EAA8BpB,EAAUoB,4BACxCC,EAAsBrB,EAAUqB,oBAChCC,EAA0BtB,EAAUsB,wBACpCC,EAAwBvB,EAAUuB,sBAClCC,EAA4BxB,EAAUwB,0BACtCC,EAA0BzB,EAAUyB,wBACpCC,EAAsB1B,EAAU0B,oBAChCC,EAAuB3B,EAAU2B,qBACjCC,EAAuB5B,EAAU4B,qBACjCC,EAAuB7B,EAAU6B,qBAK9C,cCzGAvpF,EAAOD,QAvDa,CAChB,KAAQ,CACJu1B,MAAO,KACPC,OAAQ,MAEZ,KAAM,CACFD,MAAO,KACPC,OAAQ,MAEZ,KAAQ,CACJD,MAAO,KACPC,OAAQ,MAEZ,OAAU,CACND,MAAO,KACPC,OAAQ,MAEZ,IAAO,CACHD,MAAO,KACPC,OAAQ,KAEZ,GAAM,CACFD,MAAO,KACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,mCChDT,IAAKi0D,2CAAAA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,QAAAA,WAAAA,IAAAA,EAAAA,CAAAA,cCSZxpF,EAAOD,QAZsB,CASzB0pF,iBAAkB,iFCTf,MAAMC,EAAY,oCCAlB,IAAKC,4CAAAA,GAAAA,EAAAA,yBAAAA,gCAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,wBAAAA,+BAAAA,EAAAA,YAAAA,mBAAAA,EAAAA,cAAAA,2BAAAA,EAAAA,cAAAA,2BAAAA,EAAAA,WAAAA,wBAAAA,EAAAA,oBAAAA,2BAAAA,EAAAA,wBAAAA,+BAAAA,EAAAA,8BAAAA,qCAAAA,EAAAA,uBAAAA,4BAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,oBAAAA,2BAAAA,EAAAA,sBAAAA,6BAAAA,EAAAA,qBAAAA,0BAAAA,EAAAA,0BAAAA,iCAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,sBAAAA,6BAAAA,EAAAA,gBAAAA,uBAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,SAAAA,gBAAAA,EAAAA,mBAAAA,0BAAAA,EAAAA,WAAAA,kBAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,eAAAA,qBAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,OAAAA,cAAAA,EAAAA,mBAAAA,yBAAAA,EAAAA,eAAAA,sBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,wBAAAA,+BAAAA,EAAAA,yBAAAA,gCAAAA,EAAAA,4BAAAA,mCAAAA,EAAAA,cAAAA,qBAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,WAAAA,kBAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,gBAAAA,uBAAAA,EAAAA,wBAAAA,+BAAAA,EAAAA,yBAAAA,gCAAAA,EAAAA,sBAAAA,6BAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,SAAAA,gBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,yBAAAA,gCAAAA,EAAAA,wBAAAA,mBAAAA,EAAAA,wBAAAA,mBAAAA,EAAAA,+BAAAA,kBAAAA,EAAAA,6BAAAA,oCAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,qBAAAA,gCAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,gBAAAA,uBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,cAAAA,qBAAAA,EAAAA,uBAAAA,4BAAAA,EAAAA,WAAAA,kBAAAA,EAAAA,aAAAA,oBAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,mBAAAA,0BAAAA,EAAAA,+BAAAA,sCAAAA,EAAAA,gBAAAA,uBAAAA,EAAAA,gCAAAA,uCAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,6BAAAA,oCAAAA,EAAAA,eAAAA,sBAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,WAAAA,kBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,cAAAA,qBAAAA,EAAAA,oBAAAA,2BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,8BAAAA,qCAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,sBAAAA,6BAAAA,EAAAA,mCAAAA,0CAAAA,EAAAA,mCAAAA,0CAAAA,EAAAA,4BAAAA,mCAAAA,EAAAA,qBAAAA,4BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,oBAAAA,2BAAAA,EAAAA,sBAAAA,6BAAAA,EAAAA,uBAAAA,8BAAAA,EAAAA,gBAAAA,uBAAAA,EAAAA,iBAAAA,wBAAAA,EAAAA,6BAAAA,oCAAAA,EAAAA,eAAAA,4BAAAA,EAAAA,kCAAAA,qCAAAA,EAAAA,mCAAAA,qCAAAA,EAAAA,6BAAAA,oCAAAA,EAAAA,sBAAAA,8BAAAA,IAAAA,EAAAA,CAAAA,ogMCIL,IAAKC,YAAAA,GAAAA,EAAAA,wBAAAA,oCAAAA,EAAAA,WAAAA,uBAAAA,EAAAA,eAAAA,2BAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,iBAAAA,6BAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,kBAAAA,wCAAAA,EAAAA,mBAAAA,yCAAAA,EAAAA,yBAAAA,0CAAAA,EAAAA,sBAAAA,mCAAAA,EAAAA,mBAAAA,+BAAAA,EAAAA,WAAAA,uBAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,WAAAA,uBAAAA,EAAAA,6BAAAA,0CAAAA,EAAAA,oBAAAA,+BAAAA,EAAAA,uBAAAA,kCAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,WAAAA,wBAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,0BAAAA,sCAAAA,IAAAA,EAAAA,CAAAA,IAwHL,MAAMC,EAA0BD,EAAsBC,wBAChDC,EAAaF,EAAsBE,WACnCC,EAAiBH,EAAsBG,eACvCC,EAAuBJ,EAAsBI,qBAC7CC,EAAuBL,EAAsBK,qBAC7CC,EAAmBN,EAAsBM,iBACzCC,EAAuBP,EAAsBO,qBAC7CC,EAAoBR,EAAsBQ,kBAC1CC,EAAqBT,EAAsBS,mBAC3CC,EAA2BV,EAAsBU,yBACjDC,EAAwBX,EAAsBW,sBAC9CC,EAAqBZ,EAAsBY,mBAC3CC,EAAab,EAAsBa,WACnCC,EAAoBd,EAAsBc,kBAC1CC,EAAaf,EAAsBe,WACnCC,EAA+BhB,EAAsBgB,6BACrDC,EAAsBjB,EAAsBiB,oBAC5CC,EAAyBlB,EAAsBkB,uBAC/CC,EAAoBnB,EAAsBmB,kBAC1CC,EAAapB,EAAsBoB,WACnCC,EAAoBrB,EAAsBqB,kBAC1CC,EAA4BtB,EAAsBsB,0BC7IxD,IAAKC,YAAAA,GAAAA,EAAAA,yBAAAA,uCAAAA,EAAAA,iCAAAA,8CAAAA,EAAAA,oBAAAA,iCAAAA,EAAAA,2BAAAA,sCAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,4BAAAA,8BAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,gBAAAA,kBAAAA,EAAAA,yBAAAA,2BAAAA,EAAAA,uBAAAA,mCAAAA,EAAAA,uBAAAA,mCAAAA,EAAAA,oBAAAA,gCAAAA,EAAAA,oBAAAA,+BAAAA,EAAAA,oBAAAA,+BAAAA,EAAAA,qBAAAA,gCAAAA,EAAAA,yBAAAA,6BAAAA,EAAAA,6BAAAA,8BAAAA,EAAAA,qBAAAA,gCAAAA,EAAAA,0BAAAA,uCAAAA,EAAAA,wBAAAA,qCAAAA,EAAAA,cAAAA,0BAAAA,EAAAA,OAAAA,oBAAAA,EAAAA,mBAAAA,gCAAAA,EAAAA,yBAAAA,mCAAAA,EAAAA,0BAAAA,qCAAAA,EAAAA,mBAAAA,gCAAAA,EAAAA,sBAAAA,mCAAAA,EAAAA,uBAAAA,mCAAAA,EAAAA,8BAAAA,0CAAAA,EAAAA,qBAAAA,gCAAAA,EAAAA,iBAAAA,6BAAAA,EAAAA,eAAAA,4BAAAA,EAAAA,UAAAA,uBAAAA,EAAAA,iCAAAA,8CAAAA,EAAAA,yBAAAA,oCAAAA,EAAAA,4BAAAA,yCAAAA,EAAAA,6BAAAA,0CAAAA,EAAAA,2BAAAA,wCAAAA,EAAAA,WAAAA,uBAAAA,EAAAA,qBAAAA,gCAAAA,EAAAA,mBAAAA,+BAAAA,EAAAA,uBAAAA,kCAAAA,EAAAA,kCAAAA,2CAAAA,EAAAA,mCAAAA,2CAAAA,EAAAA,2BAAAA,wCAAAA,EAAAA,cAAAA,2BAAAA,EAAAA,gBAAAA,4BAAAA,EAAAA,iBAAAA,6BAAAA,EAAAA,iBAAAA,8BAAAA,EAAAA,YAAAA,wBAAAA,EAAAA,0BAAAA,gCAAAA,EAAAA,mBAAAA,8BAAAA,EAAAA,cAAAA,0BAAAA,EAAAA,sBAAAA,iCAAAA,EAAAA,6BAAAA,wCAAAA,EAAAA,YAAAA,wBAAAA,EAAAA,UAAAA,sBAAAA,EAAAA,kBAAAA,yBAAAA,EAAAA,oBAAAA,2BAAAA,EAAAA,iCAAAA,8CAAAA,EAAAA,iBAAAA,8BAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,mBAAAA,+BAAAA,EAAAA,gBAAAA,4BAAAA,EAAAA,uBAAAA,oCAAAA,EAAAA,uBAAAA,oCAAAA,EAAAA,sBAAAA,mCAAAA,EAAAA,mCAAAA,gDAAAA,EAAAA,mCAAAA,gDAAAA,EAAAA,4BAAAA,yCAAAA,EAAAA,uBAAAA,oCAAAA,EAAAA,iBAAAA,8BAAAA,EAAAA,4BAAAA,yCAAAA,EAAAA,wBAAAA,qCAAAA,EAAAA,4BAAAA,0CAAAA,IAAAA,EAAAA,CAAAA,IAkdL,MAAMC,EAA2BD,EAAsBC,yBACjDC,EAAmCF,EAAsBE,iCACzDC,EAAsBH,EAAsBG,oBAC5CC,EAA6BJ,EAAsBI,2BACnDC,EAAmBL,EAAsBK,iBACzCC,EAAoBN,EAAsBM,kBAC1CC,EAA8BP,EAAsBO,4BACpDC,EAAoBR,EAAsBQ,kBAC1CC,EAAkBT,EAAsBS,gBACxCC,GAA2BV,EAAsBU,yBACjDC,GAAyBX,EAAsBW,uBAC/CC,GAAyBZ,EAAsBY,uBAC/CC,GAAsBb,EAAsBa,oBAC5CC,GAAsBd,EAAsBc,oBAC5CnE,GAAsBqD,EAAsBrD,oBAC5CoE,GAAuBf,EAAsBe,qBAC7ClE,GAA2BmD,EAAsBnD,yBACjDmE,GAA+BhB,EAAsBgB,6BACrDC,GAAuBjB,EAAsBiB,qBAC7ClD,GAA4BiC,EAAsBjC,0BAClDC,GAA0BgC,EAAsBhC,wBAChDkD,GAA8BlB,EAAsBkB,4BACpDC,GAA0BnB,EAAsBmB,wBAChDC,GAA8BpB,EAAsBoB,4BACpDC,GAAgBrB,EAAsBqB,cACtCC,GAAStB,EAAsBsB,OAC/BC,GAAqBvB,EAAsBuB,mBAC3CC,GAA6BxB,EAAsBwB,2BACnDC,GAA2BzB,EAAsByB,yBACjD3E,GAA4BkD,EAAsBlD,0BAClD4E,GAAqB1B,EAAsB0B,mBAC3CC,GAAwB3B,EAAsB2B,sBAC9CC,GAAyB5B,EAAsB4B,uBAC/CC,GAAgC7B,EAAsB6B,8BACtDC,GAAuB9B,EAAsB8B,qBAC7CC,GAAmB/B,EAAsB+B,iBACzCC,GAAiBhC,EAAsBgC,eACvCC,GAAYjC,EAAsBiC,UAClCC,GAAmClC,EAAsBkC,iCACzDC,GAA2BnC,EAAsBmC,yBACjDC,GAA8BpC,EAAsBoC,4BACpDC,GAA+BrC,EAAsBqC,6BACrDC,GAAatC,EAAsBsC,WACnCC,GAAuBvC,EAAsBuC,qBAC7CC,GAAqBxC,EAAsBwC,mBAC3CC,GAAyBzC,EAAsByC,uBAC/CC,GAAoC1C,EAAsB0C,kCAC1DC,GAAqC3C,EAAsB2C,mCAC3DC,GAA6B5C,EAAsB4C,2BACnDC,GAAgB7C,EAAsB6C,cACtCC,GAAkB9C,EAAsB8C,gBACxCC,GAAmB/C,EAAsB+C,iBACzCC,GAAmBhD,EAAsBgD,iBACzCC,GAAcjD,EAAsBiD,YACpCC,GAA4BlD,EAAsBkD,0BAClDC,GAAqBnD,EAAsBmD,mBAC3CC,GAAgBpD,EAAsBoD,cACtCC,GAAwBrD,EAAsBqD,sBAC9CC,GAA+BtD,EAAsBsD,6BACrDC,GAAcvD,EAAsBuD,YACpCC,GAAYxD,EAAsBwD,UAClCC,GAAoBzD,EAAsByD,kBAC1CC,GAAsB1D,EAAsB0D,oBAC5CC,GAAmC3D,EAAsB2D,iCACzDC,GAAmB5D,EAAsB4D,iBACzCC,GAAoB7D,EAAsB6D,kBAC1CC,GAAqB9D,EAAsB8D,mBAC3CC,GAAkB/D,EAAsB+D,gBACxCC,GAAyBhE,EAAsBgE,uBAC/CC,GAAyBjE,EAAsBiE,uBAC/CC,GAAwBlE,EAAsBkE,sBAC9CC,GAAqCnE,EAAsBmE,mCAC3DC,GAAqCpE,EAAsBoE,mCAC3DC,GAA8BrE,EAAsBqE,4BACpDC,GAAyBtE,EAAsBsE,uBAC/CC,GAAmBvE,EAAsBuE,kGCjiB/C,IAAKC,aAAAA,GAAAA,EAAAA,oBAAAA,gBAAAA,EAAAA,0BAAAA,2BAAAA,EAAAA,2BAAAA,2BAAAA,EAAAA,mBAAAA,yBAAAA,EAAAA,wBAAAA,yBAAAA,EAAAA,oBAAAA,4BAAAA,EAAAA,eAAAA,uBAAAA,EAAAA,+BAAAA,iCAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,cAAAA,iBAAAA,KAAAA,GAAAA,CAAAA,IAyEL,MAAMC,GAAsBD,GAAiBC,oBACvCvB,GAA4BsB,GAAiBtB,0BAC7CwB,GAA6BF,GAAiBE,2BAC9CvB,GAAqBqB,GAAiBrB,mBACtCwB,GAA0BH,GAAiBG,wBAC3CC,GAAsBJ,GAAiBI,oBACvC5C,GAAiBwC,GAAiBxC,eAClC6C,GAAiCL,GAAiBK,+BAClDC,GAAsBN,GAAiBM,oBACvC1B,GAAgBoB,GAAiBpB,cClFjC2B,GAAuB,sDCI7B,IAAKC,aAAAA,GAAAA,EAAAA,kBAAAA,wBAAAA,EAAAA,8BAAAA,oCAAAA,EAAAA,kCAAAA,wCAAAA,EAAAA,QAAAA,cAAAA,EAAAA,UAAAA,gBAAAA,EAAAA,kBAAAA,wBAAAA,EAAAA,4BAAAA,kCAAAA,EAAAA,4BAAAA,kCAAAA,EAAAA,QAAAA,cAAAA,EAAAA,kBAAAA,0BAAAA,EAAAA,sBAAAA,wBAAAA,EAAAA,uBAAAA,8BAAAA,KAAAA,GAAAA,CAAAA,IAsEL,MAAMC,GAAoBD,GAAiBC,kBACrCC,GAAgCF,GAAiBE,8BACjDC,GAAoCH,GAAiBG,kCACrDC,GAAUJ,GAAiBI,QAC3BC,GAAYL,GAAiBK,UAC7BC,GAAoBN,GAAiBM,kBACrCC,GAA8BP,GAAiBO,4BAC/CC,GAA8BR,GAAiBQ,4BAC/C/kB,GAAUukB,GAAiBvkB,QAC3BglB,GAAoBT,GAAiBS,kBACrCC,GAAwBV,GAAiBU,sBACzCC,GAAyBX,GAAiBW,uBCnFjDC,GAA6B,CAAC,EA6CpC,SAASC,GAAgBtsF,EAAOoD,EAASsf,GACrC,GAAqB,iBAAV1iB,QAA4C,IAAfA,EAAM2J,KAkB1C,OARAtN,KAAKkwF,IAAM,CACPvsF,QACA+gB,YAAa3d,EACbsf,QAASA,GAAWpb,MAAMgJ,QAAQoS,GAC5BA,EAAQnb,MAAM,QACdpE,GAGFnD,EAAM2J,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACDtN,KAAKsN,KAAO8hF,GACZpvF,KAAK8jB,QACCksE,GAA2BhwF,KAAKsN,OAC3BtN,KAAKkwF,IAAI7pE,SAAW,IAAIpT,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDjT,KAAKsN,KAAO8hF,GACZpvF,KAAK8jB,QACCksE,GAA2BhwF,KAAKsN,OAC3BtN,KAAKkwF,IAAI7pE,SAAW,IAAIpT,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBAAwB,CACzB,MAAMk9E,EAAiBxsF,EAAMwsF,gBAAkBxsF,EAAMysF,WAKjDrpF,GACOA,EAAQspF,SACNhqE,GAAWA,EAAQ5b,QAAQ,UAAY,KACrB,aAAnB0lF,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXnwF,KAAKsN,KAAO8hF,GACZpvF,KAAK8jB,QACCksE,GAA2BhwF,KAAKsN,MA6CtD,SAA2CgjF,EAAsB5rE,GAC7D,GAAIA,GAAeA,EAAY2rE,OAAS3rE,EAAY2rE,MAAME,UACtD,OAAQD,GACR,IAAK,QACD,OAAO5rE,EAAY2rE,MAAME,UAAU3yC,SACvC,IAAK,SACD,OAAOl5B,EAAY2rE,MAAME,UAAUC,UACvC,QACI,OAAO9rE,EAAY2rE,MAAME,UAAUD,IAAyB,GAIpE,MAAO,EACV,CAzDyBG,CACEN,EACAppF,KAEZ/G,KAAKsN,KAAO8hF,GACZpvF,KAAK8jB,QACCksE,GAA2BhwF,KAAKsN,MAC5B3J,EAAMwsF,gBAEpB,KACH,CAED,QACInwF,KAAKsN,KAAO8hF,GACZpvF,KAAK8jB,QACCngB,EAAMmgB,SAAWksE,GAA2BhwF,KAAKsN,UAGxD,IAAqB,iBAAV3J,EAWd,MAAM,IAAIpB,MAAM,qBAVZytF,GAA2BrsF,IAC3B3D,KAAKsN,KAAO3J,EACZ3D,KAAK8jB,QAAU/c,GAAWipF,GAA2BrsF,IAKrD3D,KAAK8jB,QAAUngB,CAItB,CAED3D,KAAKyL,MAAQ9H,EAAM8H,QAAS,IAAIlJ,OAAQkJ,KAC3C,CAnIDukF,GAA2BZ,IACrB,sCACNY,GAA2BZ,IACrB,sCACNY,GAA2BZ,IACrB,mCACNY,GAA2BZ,IACrB,mCACNY,GAA2BZ,IACrB,kCACNY,GAA2BZ,IACrB,6BACNY,GAA2BZ,IACrB,4CACNY,GAA2BZ,IACrB,2CACNY,GAA2BZ,IACrB,sCACNY,GAA2BZ,IACrB,iDACNY,GAA2BZ,IACrB,kCACNY,GAA2BZ,IACrB,iDA8GNa,GAAgBztF,UAAY/C,OAAO8yB,OAAOhwB,MAAMC,WAChDytF,GAAgBztF,UAAU5C,YAAcqwF,GAuBxC,YCzIO,IAAKS,aAAAA,GAAAA,EAAAA,iBAAAA,cAAAA,EAAAA,UAAAA,OAAAA,EAAAA,WAAAA,QAAAA,EAAAA,QAAAA,KAAAA,EAAAA,sBAAAA,UAAAA,EAAAA,yBAAAA,yBAAAA,EAAAA,0BAAAA,4BAAAA,EAAAA,yBAAAA,2BAAAA,EAAAA,wBAAAA,YAAAA,EAAAA,0BAAAA,6BAAAA,EAAAA,yBAAAA,4BAAAA,EAAAA,oBAAAA,UAAAA,EAAAA,uBAAAA,cAAAA,EAAAA,kBAAAA,SAAAA,EAAAA,yBAAAA,gBAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,wBAAAA,0BAAAA,EAAAA,SAAAA,WAAAA,EAAAA,aAAAA,eAAAA,EAAAA,gCAAAA,kCAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,cAAAA,sBAAAA,EAAAA,cAAAA,iBAAAA,KAAAA,GAAAA,CAAAA,IAiML,MAAMC,GAAmBD,GAAgBC,iBACnCC,GAAYF,GAAgBE,UAC5BC,GAAaH,GAAgBG,WAC7BC,GAAUJ,GAAgBI,QAC1BC,GAAwBL,GAAgBK,sBACxCC,GAA2BN,GAAgBM,yBAC3CC,GAA4BP,GAAgBO,0BAC5CC,GAA2BR,GAAgBQ,yBAC3CC,GAA0BT,GAAgBS,wBAC1CC,GAA4BV,GAAgBU,0BAC5CC,GAA2BX,GAAgBW,yBAC3CC,GAAsBZ,GAAgBY,oBACtCC,GAAyBb,GAAgBa,uBACzCC,GAAoBd,GAAgBc,kBACpCC,GAA2Bf,GAAgBe,yBAC3CC,GAAmBhB,GAAgBgB,iBACnCC,GAA0BjB,GAAgBiB,wBAC1CC,GAAWlB,GAAgBkB,SAC3BC,GAAenB,GAAgBmB,aAC/BC,GAAkCpB,GAAgBoB,gCAClDC,GAAoBrB,GAAgBqB,kBACpCC,GAAgBtB,GAAgBsB,cAChCC,GAAgBvB,GAAgBuB,cAkBhCC,GAA8B,CAAEC,EAAoBC,EAAuBC,KAA7C,CACvCrhF,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,oBACR45B,WAAY,CACR,WAAcukD,EACd,cAAiBC,KACdC,KAUEC,GAAwB,CAAEt+E,EAAgB45B,KAAlB,CACjC55B,SACA45B,aACA71B,OAAQ,aACR/G,KAAM0/E,GAAgBC,mBAcb4B,GAAoC,CAAEC,EAAgB5kD,KAAlB,CAC7C55B,OAAQ,2BACRy+E,cAAeD,EACf5kD,aACA71B,OAAQ,2BACR/G,KAAM0/E,GAAgBC,mBAoCb+B,GAA0B,SAAE1+E,GAAF,IAAoD45B,EAApD,uDAAyE,CAAC,EAA1E,MAAmF,CACtH58B,KAAM0/E,GAAgBC,iBACtB54E,OAAQ,iBACR/D,SACA45B,aAJmC,EAoC1B+kD,GAAoB,SAAE3+E,GAAF,IAAmB45B,EAAnB,uDAAwC,CAAC,EAAzC,MAAkD,CAC/E58B,KAAM0/E,GAAgBC,iBACtB38E,SACA+D,OAAQ,SACR61B,aAJ6B,EA4BpBglD,GAAiB,SAAE5+E,GAAF,IAAmB45B,EAAnB,uDAAwC,CAAC,EAAzC,MAAkD,CAC5E58B,KAAM0/E,GAAgBC,iBACtB38E,SACA+D,OAAQ,MACR61B,aAJ0B,EAUjBilD,GAA6BC,IAAF,CACpC9hF,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,iBACR8+E,cA8CSC,GAAwBnlD,IAAF,CAC/B58B,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,YACR45B,eC1cG,IAAKolD,aAAAA,GAAAA,EAAAA,YAAAA,wBAAAA,EAAAA,gBAAAA,6BAAAA,EAAAA,gBAAAA,6BAAAA,EAAAA,iBAAAA,6BAAAA,EAAAA,iBAAAA,+BAAAA,KAAAA,GAAAA,CAAAA,IAyCL,MAAMC,GAAcD,GAAOC,YACrBC,GAAkBF,GAAOE,gBACzBC,GAAkBH,GAAOG,gBACzBC,GAAmBJ,GAAOI,iBAC1BC,GAAmBL,GAAOK,wCCzChC,MAAMC,GAAS,SAETC,GAAQ,QAERC,GAAU,UAEVC,GAAoB,YAEpBC,GAAS,SAETC,GAAO,OAEPC,GAAW,WAEXC,GAAe,eAEfC,GAAU,UCFjBC,GAAwB,CAC1B,OAAUT,GACV,SAAYA,GACZ,MAASC,GACT,QAAWC,GACX,oBAAqBC,GACrB,OAAUC,IA2Cd,SAASM,KACL,MAAMliE,EAAY9U,UAAU8U,UAE5B,GAAIA,EAAU3qB,MAAM,YAAa,CAC7B,MAAMwL,EAAUmf,EAAU3qB,MAAM,6BAA6B,GAE7D,MAAO,CACHmG,KAAMsmF,GACNjhF,UAEP,CAAM,QAAwC,IAA7BpT,OAAO00F,kBACrB,MAAO,CACH3mF,KAAMsmF,GACNjhF,aAAS7L,EAGpB,CAOD,SAASotF,KACL,MAAMpiE,EAAY9U,UAAU8U,UAE5B,GAAIA,EAAU3qB,MAAM,eAAgB,CAChC,MAAMwL,EAAUmf,EAAU3qB,MAAM,yBAAyB,GAEzD,MAAO,CACHmG,KAAMqmF,GACNhhF,UAEP,CACJ,CAMD,SAASwhF,KACL,MAAMhtF,EACA6V,UAAU8U,UAAU3qB,MAAM,wCAChC,IAAIwL,EAMJ,GAAIxL,GAA+B,gBAAtB6V,UAAUo3E,QAA2B,CAC9C,IAAI9mF,EASJ,OAPInG,GAASA,EAAM7C,OAAS,IACxBgJ,EAAOnG,EAAM,GACbwL,EAAUxL,EAAM,IAEpBmG,IAASA,EAAO,gBAChBqF,IAAYA,EAAU,WAEf,CACHrF,KAAMumF,GACNlhF,UAEP,CACJ,CA+Cc,MAAM0hF,GAQjBz0F,YAAY00F,GACR,IAAIhnF,EAAMqF,EAGV,GADA3S,KAAKu0F,QAAUC,GAAAA,UAAiBx3E,UAAU8U,gBACf,IAAhBwiE,EAA6B,CACpC,MAAMG,EArDlB,SAAiBC,GACb,IAAIJ,EACJ,MAAMK,EAAY,CACdR,GACAH,GACAE,IAIJ,IAAK,IAAIpvF,EAAI,EAAGA,EAAI6vF,EAAUrwF,OAAQQ,IAElC,GADAwvF,EAAcK,EAAU7vF,KACpBwvF,EACA,OAAOA,EAIf,MAAMhnF,EAAOonF,EAAO/zD,iBAEpB,OAAIrzB,KAAQymF,GACD,CACHzmF,KAAMymF,GAAsBzmF,GAC5BqF,QAAS+hF,EAAO9zD,sBAKxB0zD,EAhIJ,WACI,MAAMxiE,EAAY9U,UAAU8U,UACtBwiE,EAAc,CAChBhnF,KAAMwmF,GACNnhF,aAAS7L,GAGb,GAAIgrB,EAAU3qB,MAAM,YAAc2qB,EAAU3qB,MAAM,QAE9C,GAAI2qB,EAAU3qB,MAAM,WAAY,CAE5B,MAAMwL,EAAUmf,EAAU3qB,MAAM,oBAAoB,GAEhD+I,OAAO2E,SAASlC,EAAS,IAAM,KAC/B2hF,EAAYhnF,KAAOgmF,GACnBgB,EAAY3hF,QAAUA,EAE7B,MACG2hF,EAAYhnF,KAAOgmF,GACnBgB,EAAY3hF,QAAUmf,EAAU3qB,MAAM,oBAAoB,GAIlE,OAAOmtF,CACV,CAwGiBM,GACVN,GAIG,CACHhnF,KAAMwmF,GACNnhF,aAAS7L,GAEhB,CAkBuC+tF,CAAQ70F,KAAKu0F,SAEzCjnF,EAAOmnF,EAAoBnnF,KAC3BqF,EAAU8hF,EAAoB9hF,OACjC,MAAU2hF,EAAYhnF,QAAQymF,IAC3BzmF,EAAOymF,GAAsBO,EAAYhnF,MACzCqF,EAAU2hF,EAAY3hF,UAEtBrF,EAAOwmF,GACPnhF,OAAU7L,GAGd9G,KAAK80F,MAAQxnF,EACbtN,KAAK+0F,SAAWpiF,CACnB,CAMDqiF,UACI,OAAOh1F,KAAK80F,KACf,CAMDG,WACI,OAAOj1F,KAAK80F,QAAUxB,EACzB,CAMD4B,UACI,OAAOl1F,KAAK80F,QAAUvB,EACzB,CAMD32E,YACI,OAAO5c,KAAK80F,QAAUtB,EACzB,CAMD2B,cACI,OAAOn1F,KAAK80F,QAAUrB,EACzB,CAMD2B,WACI,OAAOp1F,KAAK80F,QAAUpB,EACzB,CAMD2B,SACI,OAAOr1F,KAAK80F,QAAUnB,EACzB,CAMD2B,aACI,OAAOt1F,KAAK80F,QAAUlB,EACzB,CAMD2B,gBACI,OAAOv1F,KAAK80F,QAAUjB,EACzB,CAMD2B,aACI,OAAOx1F,KAAK+0F,QACf,CAeDU,gBAAgBC,GACZ,GAAI11F,KAAK+0F,SACL,OAAO/0F,KAAKu0F,QAAQ9yD,UAAUi0D,EAErC,CAWDC,qBAAqBhjF,GACjB,OAAO3S,KAAKy1F,gBAAgB,CAAE,CAACz1F,KAAK80F,OAAS,IAAGniF,KACnD,CAWDijF,kBAAkBjjF,GACd,OAAO3S,KAAKy1F,gBAAgB,CAAE,CAACz1F,KAAK80F,OAAS,IAAGniF,KACnD,CAYDkjF,iBAAiBljF,GACb,OAAO3S,KAAKy1F,gBAAgB,CAAE,CAACz1F,KAAK80F,OAAS,IAAGniF,KACnD,ECnVL,MAAMmjF,WAA0BvxD,GAAa,4CAK9B,CAAC,KAL6B,+GAYzChO,QACIv2B,KAAK+1F,SAAW,CAAC,CACpB,CAOGzxF,aACA,OAAO7E,OAAO6I,KAAKtI,KAAK+1F,UAAUzxF,MACrC,CAQDq2E,QAAQqb,GACJ,OAAOh2F,KAAK+1F,SAASC,EACxB,CAUDjjB,QAAQijB,EAASC,GACbj2F,KAAK+1F,SAASC,GAAWC,CAC5B,CAQDjjB,WAAWgjB,UACAh2F,KAAK+1F,SAASC,EACxB,CAQDpuF,IAAI2K,GACA,MAAMjK,EAAO7I,OAAO6I,KAAKtI,KAAK+1F,UAE9B,KAAIztF,EAAKhE,QAAUiO,GAInB,OAAOjK,EAAKiK,EACf,CAQD2xC,YAAuB,IAAbgyC,EAAa,uDAAJ,GACf,GAAsB,IAAlBA,EAAO5xF,OACP,OAAO2C,KAAK8B,UAAU/I,KAAK+1F,UAG/B,MAAMI,EAAc,IAAKn2F,KAAK+1F,UAM9B,OAJAG,EAAO9yF,SAAQwE,WACJuuF,EAAYvuF,EAAnB,IAGGX,KAAK8B,UAAUotF,EACzB,EAiJE,MAAMC,GAAoB,IA3IjC,cAAgC7xD,GAK5B3kC,cACIu4E,QAEA,IACIn4E,KAAK+1F,SAAWx2F,OAAO82F,aACvBr2F,KAAKs2F,uBAAwB,CAChC,CAAC,MAAOJ,GAER,CAEIl2F,KAAK+1F,WACN1rF,QAAQiZ,KAAK,8BACbtjB,KAAK+1F,SAAW,IAAID,GACpB91F,KAAKs2F,uBAAwB,EAEpC,CAODC,yBACI,OAAOv2F,KAAKs2F,qBACf,CAKDE,wBAAwB3uF,GACpB7H,KAAKs2F,sBAAwBzuF,EAE7B,IACI7H,KAAK+1F,SAAWluF,EAAQ,IAAIiuF,GAAsBv2F,OAAO82F,YAC5D,CAAC,MAAOH,GAER,CAEIl2F,KAAK+1F,WACN/1F,KAAK+1F,SAAW,IAAID,GAE3B,CAODv/D,QACIv2B,KAAK+1F,SAASx/D,QACdv2B,KAAKsC,KAAK,UACb,CAOGgC,aACA,OAAOtE,KAAK+1F,SAASzxF,MACxB,CASDq2E,QAAQqb,GACJ,OAAOh2F,KAAK+1F,SAASpb,QAAQqb,EAChC,CASDjjB,QAAQijB,EAASC,GAAwC,IAA9BQ,EAA8B,wDACrDz2F,KAAK+1F,SAAShjB,QAAQijB,EAASC,GAE1BQ,GACDz2F,KAAKsC,KAAK,UAEjB,CAMD0wE,WAAWgjB,GACPh2F,KAAK+1F,SAAS/iB,WAAWgjB,GACzBh2F,KAAKsC,KAAK,UACb,CASDsF,IAAI9C,GACA,OAAO9E,KAAK+1F,SAASnuF,IAAI9C,EAC5B,CAQDo/C,YAAuB,IAAbgyC,EAAa,uDAAJ,GACf,GAAIl2F,KAAKu2F,yBACL,OAAOv2F,KAAK+1F,SAAS7xC,UAAUgyC,GAGnC,MAAM5xF,EAAStE,KAAK+1F,SAASzxF,OACvBoyF,EAAsB,CAAC,EAE7B,IAAK,IAAI5xF,EAAI,EAAGA,EAAIR,EAAQQ,IAAK,CAC7B,MAAM8C,EAAM5H,KAAK+1F,SAASnuF,IAAI9C,GAEzBoxF,EAAOxoE,SAAS9lB,KACjB8uF,EAAoB9uF,GAAO5H,KAAK+1F,SAASpb,QAAQ/yE,GAExD,CAED,OAAOX,KAAK8B,UAAU2tF,EACzB,GC5OL,OCce,cAAkCrC,GAQ7CsC,8BACI,OAAO32F,KAAK42F,mBAAqB52F,KAAK62F,iBAAmB72F,KAAK4c,WACjE,CAODk6E,mBACI,MAAM,UAAEhlE,GAAc9U,UAEtB,OAAQhd,KAAKu1F,iBAAmBzjE,EAAU3qB,MAAM,WACnD,CAcDyvF,kBACI,OAAQ52F,KAAKi1F,YACNj1F,KAAKs1F,cACLt1F,KAAKq1F,UACLr1F,KAAKk1F,aACJl1F,KAAK62F,eAChB,CAODE,eACI,MAAM,UAAEjlE,EAAF,eAAaE,EAAb,SAA6BD,GAAa/U,UAEhD,OAAOqD,QAAQyR,EAAU3qB,MAAM,qBACvB6qB,GAAkBA,EAAiB,GAAK,WAAWrhB,KAAKohB,EACnE,CAKDilE,iBACI,OAAOh3F,KAAK82F,oBAAsB92F,KAAK+2F,gBAAkB/2F,KAAKu1F,eACjE,CAUDsB,gBAEI,OAAO72F,KAAKu0F,QAAQzyD,SAAS,gBACY,IAA3B9kB,UAAUmJ,mBAC8B,IAAxCnJ,UAAUmJ,aAAasC,mBACM,IAA7BlpB,OAAOinB,mBAEd/mB,OAAO6I,KAAKke,kBAAkBhkB,WAAWiI,QAAQ,qBAAuB,CAClF,CAODwsF,QACI,MAAO,eAAgB13F,QAAUA,OAAO23F,WAAW,6BAA6Bj0D,OACnF,CAODi+C,cACI,QAAIlhF,KAAKo1F,YAAcp1F,KAAKm3F,oBA3GA,MA+GpBn3F,KAAK42F,mBAAqB52F,KAAKo3F,4BAhHX,IAiHrBp3F,KAAK4c,aACL5c,KAAKu1F,iBACLv1F,KAAK62F,gBACf,CAMDQ,4BACI,OAAOr3F,KAAK42F,mBAAqB52F,KAAK4c,WACzC,CAMD06E,wBACI,OAAOt3F,KAAKu3F,kBAjIa,EAkI5B,CAQDC,qCACI,OAAOx3F,KAAK4c,aAAe5c,KAAK41F,kBAAkB,KACrD,CAQD6B,qCACI,OAAOz3F,KAAK42F,mBAAqB52F,KAAKu1F,eACzC,CAODmC,8BAGI,OAAQ13F,KAAK4c,cAAgB5c,KAAK62F,eACrC,CAMDc,2BACI,OAAOt3E,QAAQ9gB,OAAOinB,mBACf,wBAAyBjnB,OAAOinB,kBAAkBhkB,WAClDjD,OAAOq4F,qBAC0C,IAA1Cr4F,OAAOq4F,eAAeC,mBAI5B73F,KAAK62F,eAChB,CAMDiB,4BACI,OAAO96E,UAAUmJ,mBACuC,IAA1CnJ,UAAUmJ,aAAa4xE,qBACqB,IAA5C/6E,UAAUmJ,aAAajB,gBACxC,CAOD8yE,8BACI,YAA6C,IAA/Bz4F,OAAO04F,qBACdA,oBAAoBC,oBAAoBztF,QAAQ,aAAe,CACzE,CAKD0tF,wBACI,YAAwC,IAA1B54F,OAAOq4F,gBACdn4F,OAAO6I,KAAKsvF,eAAep1F,WAAWiI,QAAQ,8BAAgC,CACxF,CAOD2tF,wBASI,OAAQp4F,KAAK4c,WAChB,CAODy7E,0BACI,OAAOr4F,KAAK42F,mBAAqB52F,KAAK41F,kBAAkB,IAC3D,CAOD0C,cACI,OAAOt4F,KAAK42F,mBAAqB52F,KAAKu1F,eACzC,CAODgD,6BACI,OAAOv4F,KAAK42F,mBAAqB52F,KAAKu1F,iBAAmBv1F,KAAK62F,eACjE,CAMD2B,uBACI,OAAO,CACV,CAMDC,0BACI,YAA4C,IAA9Bz7E,UAAU2L,sBACkB,IAA3B3L,UAAUmJ,mBAET,IADEnJ,UAAUmJ,aAAawC,eAE5C,CAWD+vE,2BACI,OAAOr4E,QAAQ9gB,OAAOo5F,sBACzB,CAMDC,4BACI,QAAqC,IAAxBr5F,OAAOsnB,eACbtnB,OAAOsnB,aAAarkB,UAAUq2F,qBACjC,OAAO,EAKX,MAAM7mF,EAAS,IAAI8mF,eAEnB,IAGI,OAFAv5F,OAAO++E,YAAYtsE,EAAQ,IAAK,CAAEA,KAE3B,CACV,CAAC,MACE,OAAO,CACV,CACJ,CAKD+mF,mBACI,OAAO14E,QAAQ9gB,OAAOsnB,cACftnB,OAAOsnB,aAAagxE,iBACpBt4F,OAAOsnB,aAAagxE,gBAAgB,SAASx5B,OAAO5mD,MAAK2jD,GAA4B,cAAnBA,EAAM49B,YACxEz5F,OAAOq4F,gBACPr4F,OAAOq4F,eAAeC,iBACtBt4F,OAAOq4F,eAAeC,gBAAgB,SAASx5B,OAAO5mD,MAAK2jD,GAA4B,cAAnBA,EAAM49B,WACpF,CAODC,sBAGI,QAASj5F,KAAKs1F,cAAiBt1F,KAAKo3F,2BAA6B,GACpE,CAOD8B,uBACI,OAAOl5F,KAAK42F,iBACf,CAODuC,cAGI,QAASn5F,KAAK4c,aAAe5c,KAAK41F,kBAAkB,MACvD,CAODwB,2BACI,GAAIp3F,KAAK42F,kBAAmB,CAExB,GAAI52F,KAAKq1F,SAEL,OAAOnlF,OAAO2E,SAASgyC,QAAQC,SAASjqB,SAAU,IAQtD,MAAMu8D,EAAKp8E,UAAU8U,UAErB,GAAIsnE,EAAGjyF,MAAM,UAIT,OAFM+I,OAAO2E,SAASukF,EAAGjyF,MAAM,oBAAoB,GAAI,GAI9D,CAED,OAAQ,CACX,CAODgwF,oBACI,OAAIn3F,KAAKo1F,WACEllF,OAAO2E,SAAS7U,KAAKw1F,aAAc,KAGtC,CACX,CAOD+B,iBACI,OAAIv3F,KAAK62F,gBACE3mF,OAAO2E,SAAS7U,KAAKw1F,aAAc,KAGtC,CACX,iDCjZL,MAAMzqF,GAAS/C,IAAAA,0CAoEf,OA9DA,MASI0R,KAAK3S,GAED,GCID,SAA2BA,GAAkB,MAChD,MAAM,UAAEsyF,GAActyF,EACtB,iBAAOsyF,aAAP,EAAOA,EAAWC,uBAAlB,QACH,CDPWC,CAAkBxyF,GAAU,CAE5B,ICpBL,SAA4BA,GAC/B,MAAM,UAAEsyF,EAAF,0BAAaG,GAA8BzyF,EACjD,QAASsyF,SAAAA,EAAW5tD,UAAY+tD,EACnC,CDiBgBC,CAAmB1yF,GAEpB,YADAgE,GAAOpH,MAAM,mFAIjB,GCdL,SAA2BoD,GAAkB,MAChD,MAAM,UAAEsyF,GAActyF,EACtB,iBAAOsyF,aAAP,EAAOA,EAAWK,uBAAlB,QACH,CDWeC,CAAkB5yF,GAElB,YADAgE,GAAOpH,MAAM,wDAIjB,IAAI,MACIoD,SAAJ,UAAIA,EAAS6yF,4BAAb,OAAI,EAA+Bj6E,WAC/Bk6E,KAAAA,KAAc,CACVl6E,UAAW5Y,EAAQ6yF,qBAAqBj6E,YAE5C3f,KAAK+G,QAAUA,EAAQ6yF,qBACvB7uF,GAAOsM,KAAK,0BAEZtM,GAAOpH,MAAM,2CAEpB,CAAC,MAAOA,GACLoH,GAAOpH,MAAM,kCAAmCA,EACnD,CACJ,CACJ,CAUD8F,MAAM1H,EAAkB+3F,GACpB,IACQ95F,KAAK+G,UACL/G,KAAK+G,QAAQsW,UAAYrd,KAAK+G,QAAQsW,UAAYrd,KAAK+G,QAAQsW,UAAYtb,EAC3E/B,KAAK+G,QAAQuW,UAAYtd,KAAK+G,QAAQuW,UAAYtd,KAAK+G,QAAQuW,UAAYw8E,EAC3ED,KAAAA,gBACAA,KAAAA,UAAmB75F,KAAK+G,SACxBgE,GAAOsM,KAAK,uBAEnB,CAAC,MAAO1T,GACLoH,GAAOpH,MAAM,qCAAsCA,EACtD,CACJ,GE3DCoH,IAASkC,EAAAA,EAAAA,qDAoVf,OAxSA,MAIIrN,cACII,KAAKqxC,OACR,CAODA,QAOIrxC,KAAK+5F,UAAW,EAMhB/5F,KAAKg6F,kBAAoB,IAAI3rC,IAO7BruD,KAAKwwB,MAAQ,GAMbxwB,KAAKi6F,oBAAsB,CAAC,EAO5Bj6F,KAAKk6F,eAAiB,GAEtBl6F,KAAKm6F,uBAAuB,CACxB,WAAcn9E,UAAU8U,UACxB,aAAgB0O,GAAQw0D,WAE/B,CAKDoF,UACIrvF,GAAOkT,MAAM,mCAETje,KAAKg6F,mBAAqBh6F,KAAKg6F,kBAAkBltC,KAAO,GACxD9sD,KAAKg6F,kBAAkB52F,SAAQC,IACI,mBAApBA,EAAQ+2F,SACf/2F,EAAQ+2F,SACX,IAITp6F,KAAKq6F,qBAAqB,IAC1Br6F,KAAK+5F,UAAW,CACnB,CAODM,qBAAqBt3F,GACjB,GAAI/C,KAAK+5F,SACL,OAGJ/5F,KAAKg6F,kBAAoB,IAAI3rC,IAAItrD,GAEjC/C,KAAKs6F,qBAGL,MAAM9pE,EAAQxwB,KAAKwwB,MAEnBxwB,KAAKwwB,MAAQ,KACTA,GACAA,EAAMptB,SAAQE,GAAStD,KAAKu6F,WAAWj3F,IAE9C,CAODg3F,qBACIt6F,KAAKg6F,kBAAkB52F,SAAQC,IAC3B,IACIA,EAAQm3F,kBAAkBx6F,KAAKi6F,oBAClC,CAAC,MAAOt2F,GACLoH,GAAOuY,KACA,uEAAsB3f,IAChC,IAER,CAYDw2F,uBAAuBM,GACnBz6F,KAAKi6F,oBAAsB,IACpBj6F,KAAKi6F,uBACLQ,GAGPz6F,KAAKs6F,oBACR,CAODI,kBAAkBptF,GACdtN,KAAKk6F,eAAiB5sF,EACtBtN,KAAKm6F,uBAAuB,CAAE,gBAAmB7sF,GACpD,CAeDqtF,UAAUC,GAA4B,IAAjBH,EAAiB,uDAAJ,CAAC,EAC/B,GAAIz6F,KAAK+5F,SACL,OAGJ,IAAIz2F,EAAQ,KAEa,iBAAds3F,EACPt3F,EAAQ,CACJ0N,KAAM2/E,GACN38E,OAAQ4mF,EACRnI,cAAemI,EACf7iF,OAAQ6iF,EACRhtD,WAAY6sD,GAEY,iBAAdG,IACdt3F,EAAQs3F,GAGP56F,KAAK66F,sBAAsBv3F,GAOhCtD,KAAKu6F,WAAWj3F,GANZyH,GAAOpH,MACF,mCAAkCsD,KAAK8B,UAAUzF,KAM7D,CAcDu3F,sBAAsBv3F,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAM0N,OACP1N,EAAM0N,KAAO2/E,IAGjB,MAAM3/E,EAAO1N,EAAM0N,KAEnB,OAAIA,IAAS2/E,IAAoB3/E,IAAS4/E,IACnC5/E,IAAS8/E,IAAW9/E,IAAS6/E,IAChC9lF,GAAOpH,MAAO,uBAAsBqN,MAE7B,GAGPA,IAAS4/E,GACFvwE,QAAQ/c,EAAMgK,OAKzBhK,EAAM0Q,OAAS1Q,EAAM0Q,QAAU1Q,EAAMgK,MAAQhK,EAAMmvF,cACnDnvF,EAAMmvF,cAAgBnvF,EAAMmvF,eAAiBnvF,EAAMgK,MAAQhK,EAAM0Q,OACjE1Q,EAAMyU,OAASzU,EAAMyU,QAAUzU,EAAMgK,MAAQhK,EAAM0Q,QAC5C1Q,EAAMmvF,cAERnvF,EAAM0Q,QAAW1Q,EAAMmvF,eAAkBnvF,EAAMyU,UAQhD/G,IAAS6/E,KACTvtF,EAAMw3F,WAAax3F,EAAMw3F,YAAc,sBACvCx3F,EAAMy3F,cAAgBz3F,EAAMy3F,eAAiB,aACjB,eAAxBz3F,EAAMy3F,eAAmCz3F,EAAM03F,cAC/C13F,EAAM03F,YAAch7F,KAAKk6F,gBAIxB52F,EAAMw3F,YAAex3F,EAAM23F,UACxB33F,EAAMy3F,eAAkBz3F,EAAM03F,gBAClCjwF,GAAOpH,MACH,gFAGG,IArBXoH,GAAOpH,MACH,6DAEG,GAuBd,CASDu3F,iBAAiB53F,GACb,QAAItD,KAAKwwB,QACLxwB,KAAKwwB,MAAM5uB,KAAK0B,GAIZtD,KAAKwwB,MAAMlsB,OAxTJ,KAyTPtE,KAAKwwB,MAAM5lB,OAAO,EAAG,IAGlB,EAKd,CAOD2vF,WAAWj3F,GACHtD,KAAKk7F,iBAAiB53F,IAGtBtD,KAAKg6F,kBAAkB52F,SAAQC,IAC3B,IACIA,EAAQs3F,UAAUr3F,EACrB,CAAC,MAAOsK,GACL7C,GAAOuY,KAAM,kCAAiC1V,IACjD,IAGZ,6BCzVL,MAAM7C,GAASzL,EAAAA,MAAAA,6CAQT67F,GASc,iBAmCdC,GACK,QADLA,GAEK,QAFLA,GAGe,gBAOrB,IAAIC,GAcW,MAAMC,GAOW,6BAAC33F,EAAOuF,GAC5BoyF,GAAUC,SAAqB,YAAV53F,GACrBoH,GAAOpH,MAAO,sBAAqBA,UAAcuF,IAExD,CAQmB,qBAACvF,EAAOuF,GAIxB,GAHA6B,GAAOD,IAAK,yBAAwBnH,SAAauF,KAGnC,YAAVvF,EACA,OAGJ23F,GAAUE,oBAAqB,EAG/B,IAAIC,GAAmB,EACnBC,EAAkB,KAEtB,IAAK,MAAMC,KAAqBL,GAAUM,QAAQlmF,SACzCimF,EAAkBE,YACnB9wF,GAAOkT,MAAM,+BACT09E,EAAkBG,kBAClBL,GAAmB,EACdC,IACDA,EAAkBC,KAM7BF,GAILH,GAAUS,kBAAkBL,EAC/B,CAQuB,yBAACM,GAIrB,MAAMC,EAAgBD,EAAWE,OAC3BC,EAAYH,EAAWv3E,eAG7B,IAAK,MAAM5B,KAAUy4E,GAAUc,aAC3B,GAAIv5E,EAAO7R,OAASoqF,GAAkB,CAClC,MAAM7yE,EAAY1F,EAAO5C,KAEzBq7E,GAAUe,aACNL,EACAzzE,EAAUvX,KACVuX,EAAU5kB,MACV4kB,EAAUpG,IAAMg6E,EACvB,MAAM,GAAIt5E,EAAO7R,OAASoqF,GAAkB,CAIzC,MAAMkB,EAAYz5E,EAAO5C,KAEzBq7E,GAAUC,QAAQgB,gBACd15E,EAAOV,IAAMg6E,EACbG,EAAUh5F,MACV24F,EACAK,EAAUA,UACjB,MAAM,GAAIz5E,EAAO7R,OAASoqF,GAA4B,CACnD,MAAMn7E,EAAO4C,EAAO5C,KAEpBq7E,GAAUC,QAAQiB,uBACd35E,EAAOV,IAAMg6E,EACbl8E,EAAKw8E,YACLR,EACAh8E,EAAKzM,KACLyM,EAAKy8E,WACLz8E,EAAK+6E,YAEZ,CAELM,GAAUc,aAAa93F,OAAS,CACnC,CAYkB,oBAACq4F,EAAI3rF,EAAMrN,EAAOwe,GACjC,IAAIy6E,EAASj5F,EAERi5F,IACD7xF,GAAOuY,KAAK,uBACZs5E,EAAS,IAAIr6F,MAAM,kBAEnB+4F,GAAUE,oBAAsBmB,EAChCrB,GAAUC,QAAQsB,YAAY16E,EAAIw6E,EAAGT,OAAQlrF,EAAM4rF,GAEnDtB,GAAUc,aAAax6F,KAAK,CACxBoP,KAAMoqF,GACNn7E,KAAM,CACFtc,MAAOi5F,EACPz6E,KACAnR,SAMf,CAYkB,oBAAC2rF,EAAIr5F,EAAOg5F,GAC3B,MAAMn6E,EAAKw6E,GAAMA,EAAGl4E,eACdy3E,EAASS,GAAMA,EAAGT,OAEpBZ,GAAUE,oBAAsBmB,EAChCrB,GAAUC,QAAQgB,gBAAgBp6E,EAAI7e,EAAO44F,EAAQI,GAErDhB,GAAUc,aAAax6F,KAAK,CACxBs6F,SACA/5E,KACAnR,KAAMoqF,GACNn7E,KAAM,CAAE3c,QACJg5F,cAGf,CAUgC,kCAACQ,GAC9B,MAAMC,EAAkB,CACpB,yBACA,kBACA,oBAKJ,IAAK,MAAM1xF,KAAc0xF,EAAiB,CACtC,MAAM3tE,EAAiB0tE,EAAWzxF,GAElCyxF,EAAWzxF,GAAc,WACrB,IAAI,2BAD6B2xF,EAC7B,yBAD6BA,EAC7B,gBACA,OAAO5tE,EAAetsB,MAAMg6F,EAAYE,EAC3C,CAAC,MAAOpvF,GACLpK,KAAAA,iBAAsCoK,EACzC,CACJ,CACJ,CACD,MAAMqvF,EAAe,CACjB,yBACA,kBACA,oBAKJ,IAAK,MAAM5xF,KAAc4xF,EAAc,CACnC,MAAM7tE,EAAiB0tE,EAAWzxF,GAElCyxF,EAAWzxF,GAAc,WAA0B,2BAAd2xF,EAAc,yBAAdA,EAAc,gBAC/CjyF,GAAOkT,MAAM5S,EAAY2xF,GACzB5tE,EAAetsB,MAAMg6F,EAAYE,EACpC,CACJ,CACD,MAAME,EAAsBJ,EAAWD,YAGvCC,EAAWD,YAAc,SAAS16E,EAAIw6E,EAAI3rF,GAAe,2BAANtO,EAAM,iCAANA,EAAM,kBAIjDsO,IAASmqF,GAQJ36D,GAAQ+0D,iBACTlrF,SAAWA,QAAQ4T,MAAM,cAAekE,EAAIw6E,EAAI3rF,GAGpDjG,GAAOkT,MAAM,cAAekE,EAAIw6E,EAAI3rF,KAAStO,GAEjD,IACIw6F,EAAoBz1F,KAAKq1F,EAAY36E,EAAIw6E,EAAI3rF,KAAStO,EACzD,CAAC,MAAOy6F,GACDnsF,IAASmqF,GACT9wF,SAAWA,QAAQ1G,MAAM,cAAew5F,GAExC35F,KAAAA,iBAAsC25F,EAE7C,CACJ,CAGJ,CAOUvB,qBAKP,OAJKP,KACDA,GAAW,IAAIhtC,KAGZgtC,EACV,CAgBiB,mBAACt0F,GACf,GAAIu0F,GAAUC,QACV,MAAM,IAAIh5F,MAAM,mDAEpB,IACI,MAAM66F,EAAmBC,UAEzB/B,GAAUC,QAAU,IAAI6B,EACxB9B,GAAUgC,2BAA2BhC,GAAUC,SAC/CD,GAAUiC,OAAS,CACfC,UAAWz2F,EAAQy2F,UACnB1D,SAAU/yF,EAAQ+yF,UAEtBwB,GAAUmC,YAAc12F,EAAQ02F,YAChCnC,GAAUoC,gBAAkB32F,EAAQ22F,gBAEpC,MAAMC,EAAe,IAAK52F,EAAQ42F,cAMlC,GAJI52F,EAAQ62F,kBACRD,EAAaE,mBAAsB,GAAE92F,EAAQ62F,oBAAoBp9D,GAAQw0D,cAGzEjuF,EAAQm1F,OAAQ,CAEhB,MAAM/0F,EAAQJ,EAAQm1F,OAAO/0F,MAAM,gBAGnCw2F,EAAaG,OAAS/2F,EAAQ+2F,QAAW32F,GAASA,EAAM,IAAO,GAClE,CAWD,OARAm0F,GAAUC,QAAQwC,WACdzC,GAAUmC,YACVnC,GAAUoC,gBACVpC,GAAUiC,OACVjC,GAAU0C,mBACVl3F,EACA62F,IAEG,CACV,CAAC,MAAO/vF,GAQL,OAJApK,KAAAA,iBAAsCoK,GACtC0tF,GAAUC,QAAU,KACpBxwF,GAAOpH,MAAMiK,IAEN,CACV,CACJ,CAS0B,8BACvB,OAAOyS,QAAQi7E,GAAUC,QAC5B,CAQ+B,iCAAC0C,EAAatB,GAC1CrB,GAAU4C,aAAavB,EAvXT,mBAuX2CsB,EAC5D,CAQwB,0BAACrwF,EAAG+uF,GACzB,IACIrB,GAAUe,aACNM,EACAxB,GACAvtF,EACA+uF,GAAMA,EAAGl4E,eAChB,CAAC,MAAO9gB,GAID0G,SAAqC,mBAAlBA,QAAQ1G,OAE3B0G,QAAQ1G,MAAM,4BAA6BA,EAElD,CACJ,CAWkB,oBAACw6F,EAAcC,EAAS7lF,GACvC,OAAO,IAAI6B,SAAQ,CAACC,EAASC,KACzB,GAAIghF,GAAUC,QACVD,GAAUC,QAAQ8C,iBACdF,EACA,CACIZ,OAAQjC,GAAUiC,OAClBa,UACA7lF,YAEJ,CAAC88D,EAAQvxD,KACU,YAAXuxD,EACAh7D,EAAQyJ,GAERxJ,EAAOwJ,EACV,QAEN,CACH,MAAMvgB,EAAS,sDAEfwH,GAAOpH,MAAMJ,GACb+W,EAAO/W,EACV,IAER,CAQ4B,8BAACqK,EAAG+uF,GAC7BrB,GAAUe,aAAaM,EArdb,eAqd6C/uF,EAAG,KAC7D,CAQmB,qBAAC0wF,EAAMttF,EAAM2rF,GAC7B,IAAIr5F,EAGAA,EADS,UAAT0N,EACQstF,EAjdJ,aACC,cAkdGA,EArdL,YACE,cAudThD,GAAU4C,aAAavB,EAAIr5F,EAC9B,CAcD1D,YAAY2+F,EAAKx3F,GACb/G,KAAKk8F,OAASn1F,EAAQm1F,OACtBl8F,KAAKu+F,IAAMA,EACXv+F,KAAKykB,eAAiB85E,EAAI95E,eAC1BzkB,KAAKw+F,aAAez3F,EAAQy3F,cA1dR,QA2dpBx+F,KAAK67F,WAAY,EAEjBP,GAAUM,QAAQ7rE,IAAI/vB,MAElBs7F,GAAUE,qBACVx7F,KAAK87F,gBAK0B,IAA3BR,GAAUM,QAAQ9uC,MAClBwuC,GAAUS,kBAAkB/7F,MAGvC,CAOD87F,gBACI/wF,GAAOsM,KAAK,eAAgBrX,KAAKw+F,cACjC,IACI,MAAMC,EAAmB,CACrBC,mBACI1+F,KAAKu+F,IAAII,MACHrD,GAAUC,QAAQqD,aAAa58E,KAC/Bs5E,GAAUC,QAAQqD,aAAa75E,QAEvCpgB,EACA22F,GAAUC,QAAQsD,aAChB7+F,KAAKykB,eACLzkB,KAAKw+F,aACLlD,GAAUC,QAAQuD,YAAYC,UAC9B/+F,KAAKk8F,OACLuC,EACAnD,GAAU0D,uBAElBh/F,KAAK67F,WAAY,EAEjB,MAAMpc,EAAyB,YAAf96E,EAAI0wE,OAMpB,OAJKoK,GACD10E,GAAOpH,MAAM,kCAAmCgB,EAAImf,SAGjD27D,CAEV,CAAC,MAAO97E,GAGL,OAFAH,KAAAA,iBAAsCG,IAE/B,CACV,CACJ,CAkBDs7F,4BACQzrF,EACA0rF,EACAC,EACAzC,EACA1B,GACJ,IAAKM,GAAUC,QACX,OAGJ,MAAMkB,EAAcyC,EAAU5D,GAAUiC,OAAS4B,EAE7C7D,GAAUE,mBACVF,GAAUC,QAAQiB,uBACdx8F,KAAKykB,eACLg4E,EACAz8F,KAAKk8F,OACL1oF,EACAkpF,EACA1B,GAEJM,GAAUc,aAAax6F,KAAK,CACxBoP,KAAMoqF,GACNj5E,GAAIniB,KAAKykB,eACTxE,KAAM,CACFw8E,cACAzB,cACAxnF,OACAkpF,eAIf,CAQD0C,2BACI9D,GAAU4C,aAAal+F,KAplBV,kBAqlBhB,CAMDq/F,qBACQ/D,GAAUE,oBACVF,GAAUC,QAAQgB,gBACdv8F,KAAKykB,eACL62E,GAAUC,QAAQ+D,YAAYC,iBAC9Bv/F,KAAKk8F,QAEbZ,GAAUM,QAAQ4D,OAAOx/F,KAC5B,CAKDy/F,+BACInE,GAAUe,aACNr8F,KAjoBc,uBAmoBd,KACAA,KAAKykB,eACZ,CAODi7E,sBAAsB9xF,GAClB0tF,GAAUe,aACNr8F,KAppBK,cAopB4B4N,EAAG5N,KAAKykB,eAChD,CAODk7E,uBAAuB/xF,GACnB0tF,GAAUe,aACNr8F,KA7pBM,eA6pB4B4N,EAAG5N,KAAKykB,eACjD,CAODm7E,sBAAsBC,GAClBvE,GAAU4C,aACNl+F,KACA6/F,EAtpBM,eADF,aAwpBX,CASDC,uBAAuBr2F,EAAO+J,GAC1B,IAAI8oF,EAEA9oF,IACA8oF,EAAY,CAAE9oF,SAGlB8nF,GAAU4C,aACNl+F,KACAyJ,EAjqBU,mBACD,kBAiqBT6yF,EACP,CAODyD,uBAAuBnyF,GACnB0tF,GAAUe,aACNr8F,KArsBa,sBAqsB4B4N,EAAG5N,KAAKykB,eACxD,CAODu7E,wBAAwBpyF,GACpB0tF,GAAUe,aACNr8F,KA9sBc,uBA8sB4B4N,EAAG5N,KAAKykB,eACzD,CAODw7E,0BAA0BryF,GACtB0tF,GAAUe,aACNr8F,KAvtBS,kBAutB4B4N,EAAG5N,KAAKykB,eACpD,EAOL62E,GAAUC,QAAU,KAKpBD,GAAUc,aAAe,GAOzBd,GAAUE,oBAAqB,EAM/BF,GAAUmC,YAAc,KAMxBnC,GAAUoC,gBAAkB,KAS5BpC,GAAUiC,OAAS,KC9wBnB,MAAMxyF,GAASzL,EAAAA,MAAAA,uDAcfC,OAAO2gG,aAAe3gG,OAAO2gG,cAAgB3gG,OAAO4gG,mBAMpD,IAAI94D,GAAU,KAqDC,SAAS+4D,GAAoBpuF,EAAQgP,EAAU4wD,GAC1D5xE,KAAKgS,OAASA,EACdhS,KAAKqgG,WAAa,KAClBrgG,KAAKsgG,cAAgBt/E,EACrBhhB,KAAKugG,WAAa,EAClBvgG,KAAK4xE,SAAWA,EAChB5xE,KAAK+X,OAAS,KACd/X,KAAKwgG,SAAW,IACnB,CC5EM,SAASC,GAAqBC,GACjC,IAAIC,EAAYD,EAMhB,OAJIA,GAAUxwF,OAAOg6C,mBACjBy2C,EAAY,GAGTA,EAAY,CACtB,CAQM,SAASC,GAAiBC,GAC7B,OAAOA,EAAWv8F,OAAS,EAAIu8F,EAAWtvF,QAAO,CAACrD,EAAGD,IAAMC,EAAID,IAAK4yF,EAAWv8F,OAAS,CAC3F,CA4BM,SAASw8F,GAAqBD,GACjC,OAAOA,EAAW9vF,QAAOlJ,GAASA,GAAS,GAC9C,CDiCDu4F,GAAoB59F,UAAUiH,MAAQ,WAC7B22F,GAAoBW,0BAIzB15D,GAAQiqC,SACRtxE,KAAKwgG,SAAWn5D,GAAQ25D,iBAExBhhG,KAAKwgG,SAASS,sBAlFsB,GAmFpCjhG,KAAKwgG,SAASU,QAzFiB,KA2F/BlhG,KAAK+X,OAASsvB,GAAQ85D,wBAAwBnhG,KAAKgS,QAEnDhS,KAAK+X,OAAOgB,QAAQ/Y,KAAKwgG,UAEzBxgG,KAAKqgG,WAAax+E,aACd,KACI,MAAMtL,EAAQ,IAAImgB,WAAW12B,KAAKwgG,SAASY,mBAE3CphG,KAAKwgG,SAASa,sBAAsB9qF,GACpC,MAAMgqF,EA9ElB,SAAoCe,GAEhC,IAAIC,EAAY,EAEhB,MAAMj9F,EAASg9F,EAAQh9F,OAEvB,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAQQ,IACpBy8F,EAAYD,EAAQx8F,KACpBy8F,EAAYD,EAAQx8F,IAI5B,OAAOq5C,aAAaojD,EAAY,KAAO,KAAKpzE,QAAQ,GACvD,CAiE8BqzE,CAA2BjrF,GAM9CvW,KAAKugG,WA/DjB,SAAsBkB,EAAUC,GAC5B,IAAI75F,EAAQ,EACZ,MAAM85F,EAAOD,EAAYD,EAUzB,OAPI55F,EADA85F,EAAO,GACCD,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLtjD,WAAWt2C,EAAMsmB,QAAQ,GACnC,CAkD6ByzE,CAAarB,EAAYvgG,KAAKugG,YAChDvgG,KAAK4xE,SAAS5xE,KAAKugG,WAAnB,GAEJvgG,KAAKsgG,eAEZ,EAKDF,GAAoB59F,UAAU2H,KAAO,WAAW,QACxCnK,KAAKqgG,aACL9+E,cAAcvhB,KAAKqgG,YACnBrgG,KAAKqgG,WAAa,MAGtB,UAAArgG,KAAKwgG,gBAAL,SAAexnF,aACfhZ,KAAKwgG,SAAW,KAChB,UAAAxgG,KAAK+X,cAAL,SAAaiB,aACbhZ,KAAK+X,OAAS,IACjB,EAQDqoF,GAAoBW,sBAAwB,WAAW,MACnD,OAAO1gF,QAAO,UAAC9gB,cAAD,aAAC,EAAQ2gG,aAC1B,EAKDE,GAAoByB,uBAAyB38F,iBACrCmiC,KACAt8B,GAAOsM,KAAK,qCACNgwB,GAAQpoB,QACdooB,GAAU,KAEjB,EAKD+4D,GAAoB0B,oBAAsB,WACjC1B,GAAoBW,0BAIzBh2F,GAAOsM,KAAK,4BACZgwB,GAAU,IAAI64D,aAEd74D,GAAQ06D,UACX,EAKD3B,GAAoB0B,sBCjHb,MAAME,GAITpiG,cACII,KAAKiiG,QAAU,EACfjiG,KAAKuS,EAAI,CACZ,CAQD2vF,QAAQr6F,GACiB,iBAAVA,IAGX7H,KAAKuS,GAAK,EACVvS,KAAKiiG,QAAUjiG,KAAKiiG,SAAYp6F,EAAQ7H,KAAKiiG,SAAWjiG,KAAKuS,EAChE,CAMD4vF,aACI,OAAOniG,KAAKiiG,OACf,ECtFL,MAAMl3F,IAASkC,EAAAA,EAAAA,6DAUR,MAAMm1F,GAOTxiG,YAAY6kC,EAAS49D,GACjBriG,KAAKsiG,aAAe79D,EACpBzkC,KAAKuiG,UAAY,EACjBviG,KAAKwiG,YAAc,EACnBxiG,KAAKyiG,yBAA2BJ,EAChCriG,KAAK8hB,MAAQ,IAAIkgF,EACpB,CAODU,oBACI,MAAO,CACHC,kBA9BI,GA8Be3iG,KAAK8hB,MAAMqgF,cAAwBh0E,QAAQ,GAC9Dy0E,cAAe5iG,KAAKwiG,YAE3B,CAODK,gBAEI7iG,KAAK8iG,qBAAuBr7D,IACxB,MAAMtnB,EAAUsnB,EAAKs7D,aAErB,IAAK,MAAMC,KAAQ7iF,EACfngB,KAAKuiG,YACLviG,KAAKwiG,YAAcv+F,KAAKD,IAAIhE,KAAKwiG,YAAaQ,EAAKC,UAAU90E,QAAQ,EACxE,EAILpjB,GAAOsM,KAAK,6DACZrX,KAAKkjG,SAAW,IAAIjL,oBAAoBj4F,KAAK8iG,sBAC7C9iG,KAAKkjG,SAASC,QAAQ,CAAEnyF,KAAM,WAC1BoyF,UAAU,IACd,MAAMC,EAAYpiG,KAAKC,MAGvBlB,KAAKsjG,oBAAsBzhF,aAAY,KACnC,MAAM3gB,EAAMD,KAAKC,MACX8f,EAAWhhB,KAAKujG,gBACfriG,EAAMlB,KAAKujG,gBA/DR,KAgEHriG,EAAMmiG,GAhEH,IAiEJj1F,EAAOpO,KAAKuiG,UAAYvhF,EAE9BhhB,KAAK8hB,MAAMogF,QAAQ9zF,GACnBpO,KAAKsiG,aAAahgG,KACdkhG,GAAmCxjG,KAAK0iG,qBAG5C1iG,KAAKuiG,UAAY,EACjBviG,KAAKujG,eAAiBtiG,KAAKC,KAA3B,GACDlB,KAAKyiG,yBACX,CAMDgB,eACIzjG,KAAKkjG,UAAYljG,KAAKkjG,SAASlqF,aAC/BhZ,KAAK8iG,qBAAuB,KACxB9iG,KAAKsjG,sBACL/hF,cAAcvhB,KAAKsjG,qBACnBtjG,KAAKsjG,oBAAsB,KAElC,EC/FE,IAAKI,aAAAA,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,MAAAA,SAAAA,KAAAA,GAAAA,CAAAA,IC0DZ,aApDA,MASIhqF,KAAKorB,GAAO,MACR9kC,KAAK2jG,eAAiBtjF,QAAQykB,EAAM8+D,eACpC5jG,KAAK6jG,eAAiBxjF,QAAQykB,EAAMg/D,sBACpC9jG,KAAK+jG,eAAiB1jF,QAAO,UAACykB,EAAMk/D,2BAAP,SAChC,CAODC,kCACI,OAAOzjE,GAAQy4D,qBAClB,CASDiL,yBACI,OAAOlkG,KAAK2jG,gBAAkBnjE,GAAQo4D,2BACzC,CAMDuL,2BACI,OAAOnkG,KAAK6jG,cACf,CAMDO,2BACI,OAAOpkG,KAAK+jG,cACf,GChDCvgG,GAAuBlE,EAAQ,MAE/ByL,IAASkC,EAAAA,EAAAA,sDASf,SAASo3F,GAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJrgG,KAAKiqB,MAAOo2E,EAAcC,EAAgB,IACpD,CAMD,SAASC,KACLxkG,KAAKykG,KAAO,CAAC,EACbzkG,KAAK6rB,QAAU,CACX64E,SAAU,EACVC,OAAQ,GAEZ3kG,KAAK4kG,WAAa,CAAC,EACnB5kG,KAAKorB,UAAY,EACjBprB,KAAKo7D,MAAQ,EAChB,CAoDD,SAASypC,KAML7kG,KAAK4/D,UAAY,CAAC,EAMlB5/D,KAAK6rB,QAAU,CAAC,EAMhB7rB,KAAK8kG,WAAa,KAMlB9kG,KAAKwK,UAAY,EACpB,CAiBc,SAASu6F,GAAetgF,EAAgBugF,EAAqB3C,EAAeC,GACvFtiG,KAAKykB,eAAiBA,EACtBzkB,KAAKilG,mBAAqB,KAC1BjlG,KAAKklG,oBAAsB,KAC3BllG,KAAKmlG,wBAA0B,CAAC,EAChCnlG,KAAKolG,sBAAwB,KAC7BplG,KAAKsiG,aAAeA,EACpBtiG,KAAKqlG,gBAAkB,IAAIR,GAG3B7kG,KAAKslG,yBAA2BN,EAEhChlG,KAAKulG,YAAc,GACnBvlG,KAAKwlG,gBAAkB,KACvBxlG,KAAKylG,mBAAqBpD,EAM1BriG,KAAK0lG,WAAa,IAAIt3C,GACzB,CA7GDo2C,GAAUhiG,UAAUmjG,QAAU,SAASlB,GACnCzkG,KAAKykG,KAAOA,GAAQ,CAAC,CACxB,EAMDD,GAAUhiG,UAAUojG,cAAgB,SAAShB,GACzC5kG,KAAK4kG,WAAaA,GAAc,CAAC,CACpC,EAODJ,GAAUhiG,UAAUqjG,WAAa,SAASh6E,GACtC7rB,KAAK6rB,QAAQ64E,UAAY74E,EAAQ64E,SACjC1kG,KAAK6rB,QAAQ84E,QAAU94E,EAAQ84E,MAClC,EAMDH,GAAUhiG,UAAUsjG,aAAe,WAC/B9lG,KAAK6rB,QAAQ64E,SAAW,EACxB1kG,KAAK6rB,QAAQ84E,OAAS,CACzB,EAMDH,GAAUhiG,UAAUujG,aAAe,SAAS36E,GACxCprB,KAAKorB,UAAYA,GAAa,CACjC,EAEDo5E,GAAUhiG,UAAUwjG,SAAW,SAAS5qC,GACpCp7D,KAAKo7D,MAAQA,GAAS,EACzB,EA4ED2pC,GAAeviG,UAAUyjG,eAAiB,SAASV,GAC/CvlG,KAAKulG,YAAcA,CACtB,EAKDR,GAAeviG,UAAU2H,KAAO,WACxBnK,KAAKolG,wBACL7jF,cAAcvhB,KAAKolG,uBACnBplG,KAAKolG,sBAAwB,MAG7BplG,KAAKwlG,kBACLjkF,cAAcvhB,KAAKwlG,iBACnBxlG,KAAKwlG,gBAAkB,KAE9B,EAMDT,GAAeviG,UAAU8C,cAAgB,SAAS3B,GAC9CH,GAAqBE,iBAAiBC,GACtCoH,GAAOpH,MAAM,kBAAmBA,GAChC3D,KAAKmK,MACR,EAKD46F,GAAeviG,UAAUiH,MAAQ,SAASy8F,GAClCA,GAAwB1lE,GAAQ23D,0BAChCn4F,KAAKolG,sBAAwBvjF,aACzB,KACI,MAAMskF,EAAcnmG,KAAKykB,eAAe2hF,eAAepmG,KAAKulG,aAE5D,IAAK,MAAM/xF,KAAQ2yF,EACf,GAAIA,EAAY3+F,eAAegM,GAAO,CAElC,MAAM+sF,EAAiC,IAApB4F,EAAY3yF,GAE/BxT,KAAKsiG,aAAahgG,KACdkhG,GACAxjG,KAAKykB,eACLvU,OAAO2E,SAASrB,EAAM,IACtB+sF,GACA,EACP,CACJ,GAELvgG,KAAKslG,2BAIb,MAAMe,EAAe,KAEjBrmG,KAAKykB,eAAepC,WACf1H,MAAKkI,IACF7iB,KAAKilG,mBAA+C,mBAAnBpiF,aAAP,EAAOA,EAAQhe,QACnCge,EAAOhe,SACPge,EAEN,IACI7iB,KAAKsmG,oBACR,CAAC,MAAO3iG,GACLH,GAAqBE,iBAAiBC,GACtCoH,GAAOpH,MAAM,kCAAmCA,EACnD,CACD3D,KAAKklG,oBAAsBllG,KAAKilG,kBAAhC,IAEHrhF,OAAMjgB,GAAS3D,KAAKsF,cAAc3B,IAdvC,EAiBJ0iG,IACArmG,KAAKwlG,gBAAkB3jF,YAAYwkF,EAAcrmG,KAAKylG,mBACzD,EAKDV,GAAeviG,UAAU+jG,sBAAwB,WAE7C,MAAMhC,EAAe,CACjBG,SAAU,EACVC,OAAQ,GAENL,EAAc,CAChBI,SAAU,EACVC,OAAQ,GAEZ,IAAI6B,EAAkB,EAClBC,EAAgB,EACpB,MAAMC,EAAc,CAAC,EACfC,EAAa,CAAC,EACdtoC,EAAS,CAAC,EAChB,IAAIuoC,EAAuB,EACvBC,EAAqB,EACrBC,EAAuB,EACvBC,EAAqB,EAEzB,IAAK,MAAQvzF,EAAMwzF,KAAehnG,KAAK0lG,WAAY,OAE/C,MAAMjB,EAAOuC,EAAUvC,KACjBzzF,EAAOyzF,EAAKwC,iBAAmB,WAAa,SAElD1C,EAAavzF,IAASyzF,EAAKyC,aAC3B5C,EAAYtzF,IAASyzF,EAAK94E,YAG1B66E,GAAmBQ,EAAUn7E,QAAQ64E,SACrC+B,GAAiBO,EAAUn7E,QAAQ84E,OAEnCqC,EAAUlB,eAGV,MAAMxgF,EAAQtlB,KAAKykB,eAAe0iF,eAAe3zF,GAEjD,IAAK8R,EACD,SAGJ,IAAI8hF,EACAC,EAEA/hF,EAAMgiF,gBACNV,GAAwBI,EAAUn7E,QAAQ64E,SAC1CmC,GAAsBG,EAAUn7E,QAAQ84E,OACxCyC,EAAaJ,EAAU5rC,QAEvB0rC,GAAwBE,EAAUn7E,QAAQ64E,SAC1CqC,GAAsBC,EAAUn7E,QAAQ84E,OACxC0C,EAAaL,EAAU5rC,OAG3B,MAAMmsC,EAAgBjiF,EAAMkiF,mBAE5B,IAAKD,EAAe,CAEXE,GAAAA,4BACD18F,GAAOpH,MAAO,iCAAgC2hB,KAElD,QACH,CAED,MAAMoiF,EAAU,UAAGrpC,EAAOkpC,UAAV,QAA4B,CAAC,EAE7CG,EAAWl0F,GAAQ,CACfm0F,MAAOP,EACP/W,MAAOgX,GAGXhpC,EAAOkpC,GAAiBG,EACxB,MAAM,WAAE9C,GAAeoC,EAEvB,IAAK1hF,EAAMsiF,gBACJtjE,MAAMsgE,aAAD,EAACA,EAAYpwE,SAClB8P,MAAMsgE,aAAD,EAACA,EAAYrwE,SACK,IAAvBqwE,EAAWpwE,SACW,IAAtBowE,EAAWrwE,MACd,SAEJ,MAAMszE,EAAkBnB,EAAYa,IAAkB,CAAC,EAQvD,GAAIjiF,EAAM45E,YAAc1+D,GAAQ63D,2BAA6Br4F,KAAKykB,eAAeqjF,oBAAqB,CAClG,MAAMC,EAAa/nG,KAAKykB,eAAeujF,mBAAmB1iF,GAE1D,IAAK,MAAM2iF,KAAaF,EAAY,OAChC,MAAMG,EAAc,UAAGloG,KAAK0lG,WAAWvhF,IAAI8jF,UAAvB,aAAG,EAAgCrD,WAGnDsD,SAAAA,EAAgB1zE,QAAhB0zE,MAA0BA,GAAAA,EAAgB3zE,QAC1CqwE,EAAWpwE,OAASvwB,KAAKD,IAAI4gG,EAAWpwE,OAAQ0zE,EAAe1zE,QAC/DowE,EAAWrwE,MAAQtwB,KAAKD,IAAI4gG,EAAWrwE,MAAO2zE,EAAe3zE,OAEpE,CACJ,CAKD,GAHAszE,EAAgBr0F,GAAQoxF,EACxB8B,EAAYa,GAAiBM,EAEzBb,EAAU57E,UAAY,EAAG,CACzB,MAAM+8E,EAAiBxB,EAAWY,IAAkB,CAAC,EAErDY,EAAe30F,GAAQwzF,EAAU57E,UACjCu7E,EAAWY,GAAiBY,CAC/B,CACJ,CAEDnoG,KAAKqlG,gBAAgBx5E,QAAU,CAC3B,OAAU46E,EACV,SAAYD,GAGhBxmG,KAAKqlG,gBAAgBx5E,QAAQ87E,MAAQ,CACjC,OAAUd,EACV,SAAYD,GAGhB5mG,KAAKqlG,gBAAgBx5E,QAAQwkE,MAAQ,CACjC,OAAU0W,EACV,SAAYD,GAGhB9mG,KAAKqlG,gBAAgBP,WAAa,CAC9BzjG,MACIgjG,GACIC,EAAYI,SAAWJ,EAAYK,OACnCJ,EAAaG,SAAWH,EAAaI,QAC7CD,SACIL,GAAoBC,EAAYI,SAAUH,EAAaG,UAC3DC,OACIN,GAAoBC,EAAYK,OAAQJ,EAAaI,SAG7D,MAAMyD,EAAiB,CAAC,EACxB,IAAIC,EAEJ5oG,OAAO6I,KAAKtI,KAAKmlG,yBAAyB/hG,SAAQoQ,IAC9C,MAAM,KAAEyM,EAAF,QAAQi/E,GAAYl/F,KAAKmlG,wBAAwB3xF,GACjD80F,EAAgBroF,EAAK1O,QAAO,CAACg3F,EAAKC,IAAiBD,EAAMC,IAAgBvoF,EAAK3b,OAEpF,GAAI46F,EACAmJ,EAAsBC,MACnB,CACH,MAAMhjF,EAAQtlB,KAAKykB,eAAe0iF,eAAej3F,OAAOsD,IAExD,GAAI8R,EAAO,CACP,MAAMiiF,EAAgBjiF,EAAMkiF,mBAExBD,IACAa,EAAeb,GAAiBe,EAEvC,CACJ,KAELtoG,KAAKmlG,wBAA0B,CAAC,EAEhCnlG,KAAKsiG,aAAahgG,KACdkhG,GACAxjG,KAAKykB,eACL,CACI,UAAazkB,KAAKqlG,gBAAgBzlC,UAClC,QAAW5/D,KAAKqlG,gBAAgBx5E,QAChC,WAAc7rB,KAAKqlG,gBAAgBP,WACnC,WAAc4B,EACd,UAAaC,EACb,MAAStoC,EACT,UAAar+D,KAAKqlG,gBAAgB76F,UAClC69F,sBACAD,mBAERpoG,KAAKqlG,gBAAgB76F,UAAY,EACpC,EASDu6F,GAAeviG,UAAUimG,oBAAsB,SAASp7F,GACpD,IAAIxF,EAAQwF,EAMZ,MAJqB,iBAAVxF,IACPA,EAAQqI,OAAOrI,IAGfy8B,MAAMz8B,GACC,EAGJ5D,KAAKD,IAAI,EAAG6D,EACtB,EAYDk9F,GAAeviG,UAAUkmG,kBAAoB,SAASxnG,EAAKs7C,EAAQmsD,GAC/D,MAAMC,EAAW5oG,KAAKyoG,oBAAoBvnG,EAAIynG,IACxCE,EAAc7oG,KAAKyoG,oBAAoBjsD,EAAOmsD,IAC9CG,EAAiB7kG,KAAKD,IAAI,EAAG4kG,EAAWC,GAExCE,EAAS7nG,EAAImI,UAAYmzC,EAAOnzC,UACtC,IAAI2/F,EAAc,EAOlB,OALID,EAAS,IAETC,EAAc/kG,KAAKiqB,MAAwB,EAAjB46E,EAAsBC,IAG7CC,CACV,EASDjE,GAAeviG,UAAUymG,cAAgB,SAAS/nG,EAAKs7C,EAAQmsD,GAC3D,MAAMI,EAAS7nG,EAAImI,UAAYmzC,EAAOnzC,UACtC,IAAI6/F,EAAY,EAQhB,OANIH,EAAS,GAAK7nG,EAAIynG,KAGlBO,GAFkChoG,EAAIynG,GAAansD,EAAOmsD,IAEjBI,EAAU,KAGhDG,CACV,EAKDnE,GAAeviG,UAAU8jG,mBAAqB,WAC1C,MAAM6C,EAAgB,CAAC,EAEvBnpG,KAAKilG,mBAAmB7hG,SAAQlC,IAC5B,MAAMs7C,EAASx8C,KAAKklG,oBAAsBllG,KAAKklG,oBAAoB/gF,IAAIjjB,EAAIkL,IAAM,KAGjF,GAAiB,mBAAblL,EAAI8P,MAA6B9P,EAAI2oB,WAA2B,cAAd3oB,EAAIilC,MAAuB,CAC7E,MAAMijE,EAA2BloG,EAAIkoG,yBAC/BC,EAA2BnoG,EAAImoG,0BAEjCD,GAA4BC,KAC5BrpG,KAAKqlG,gBAAgBzlC,UAAY,CAC7B,SAAY37D,KAAKiqB,MAAMk7E,EAA2B,KAClD,OAAUnlG,KAAKiqB,MAAMm7E,EAA2B,OAIxD,MAAMC,EAAsBtpG,KAAKilG,mBAAmB9gF,IAAIjjB,EAAI+oB,mBACtDs/E,EAAqBvpG,KAAKilG,mBAAmB9gF,IAAIjjB,EAAI6oB,kBAI3D,GAAIu/E,GAAuBC,EAAoB,CAC3C,MAIM13F,EAAM,GAJY2uB,GAAQo2D,kBAC1B0S,EAAoBz3F,GACpBy3F,EAAoBj7F,WACPi7F,EAAoBx3F,OAOjC03F,EAAW,GAJMhpE,GAAQo2D,kBACzB2S,EAAmB13F,GACnB03F,EAAmBl7F,WACPk7F,EAAmBz3F,OAE/Bd,EAAOs4F,EAAoBlvC,SAG3BqvC,EAA2BzpG,KAAKqlG,gBAAgB76F,UAEjDi/F,EAAyBhyF,MAAKzL,GAC/BA,EAAE6F,KAAOA,GACN7F,EAAEgF,OAASA,GACXhF,EAAEw9F,UAAYA,KACjBC,EAAyB7nG,KAAK,CAC1BiQ,KACAb,OACAw4F,UACAE,IAAK1pG,KAAKykB,eAAek6E,MACzBgL,mBAAoBJ,EAAmBj/E,cACvCs/E,oBAAqBN,EAAoBh/E,cACzCu/E,YAAaN,EAAmBM,YAChCC,IAAgC,IAA3B5oG,EAAI6oG,sBAGpB,CAMJ,MAAM,GAAiB,gBAAb7oG,EAAI8P,MAAuC,iBAAb9P,EAAI8P,KAAyB,CAClE,MAAMwC,EAAOxT,KAAKyoG,oBAAoBvnG,EAAIsS,MAE1C,IAAKA,EACD,OAGJ,IAAIwzF,EAAYhnG,KAAK0lG,WAAWvhF,IAAI3Q,GAE/BwzF,IACDA,EAAY,IAAIxC,GAChBxkG,KAAK0lG,WAAW5+D,IAAItzB,EAAMwzF,IAG9B,IAAIC,GAAmB,EACnBr/F,EAAM,kBAEO,iBAAb1G,EAAI8P,OACJi2F,GAAmB,EACnBr/F,EAAM,eAGV,IAqBIg9F,EArBAoF,EAAa9oG,EAAI0G,GAMrB,KAJKoiG,GAAcA,EAAa,KAC5BA,EAAa,GAGbxtD,EAAQ,CACR,MAAMytD,EAAgBjqG,KAAKyoG,oBAAoBjsD,EAAO50C,IAChDsiG,EAAcjmG,KAAKD,IAAI,EAAGgmG,EAAaC,GAEvCE,EAAiBnqG,KAAKyoG,oBAAoBvnG,EAAIyqB,aAC9Cy+E,EAAoBpqG,KAAKyoG,oBAAoBjsD,EAAO7wB,aACpD0+E,EAAkBpmG,KAAKD,IAAI,EAAGmmG,EAAiBC,GAErDpD,EAAUrB,QAAQ,CACduB,aAAcgD,EAAcG,EAC5B1+E,YAAa0+E,EACbpD,oBAEP,CAOD,QAA+B,IAApB/lG,EAAIiqB,kBAAyD,IAAnBjqB,EAAIgqB,WAA4B,OAEjF,MAAMo/E,EAAc,UAAGppG,EAAIqpG,cAAP,UAEH,gBAAbrpG,EAAI8P,OAA4BwvB,GAAQ63D,2BAA6BiS,KACrE1F,EAAa,CACTpwE,OAAQtzB,EAAIiqB,YACZoJ,MAAOrzB,EAAIgqB,YAGtB,CACD87E,EAAUpB,cAAchB,GAExB,IAAIsE,EAAYhoG,EAAImqB,iBAEf69E,GAAa1sD,IACd0sD,EAAYlpG,KAAKipG,cAAc/nG,EAAKs7C,EAAQ,eAGhDwqD,EAAUjB,aAAa9hG,KAAKiqB,MAAMg7E,GAAa,IAE9B,gBAAbhoG,EAAI8P,MAA0BwrC,EAC9BwqD,EAAUnB,WAAW,CACjB,SAAY7lG,KAAK0oG,kBAAkBxnG,EAAKs7C,EAAQ,iBAChD,OAAU,IAEPA,IACP2sD,EAAc31F,GAAQxT,KAAKyoG,oBAAoBvnG,EAAI6qB,WACnDi7E,EAAUnB,WAAW,CACjB,SAAY,EACZ,OAAU7lG,KAAK0oG,kBAAkBxnG,EAAKs7C,EAAQ,gBAItD,MAAM4e,EAAQp7D,KAAKilG,mBAAmB9gF,IAAIjjB,EAAIspG,SAE9C,GAAIpvC,EAAO,CAMP,MAAMqvC,EAAiBrvC,EAAM49B,SAASttF,MAAM,KAAK,GAEjD++F,GAAkBzD,EAAUhB,SAASyE,EACxC,CAGJ,MAAM,GAAIjqE,GAAQ63D,2BACC,UAAbn3F,EAAI8P,MACJ9P,EAAImkB,OAASq+E,GAAUgH,QACtBxpG,EAAIypG,aAAc,CACtB,MAAM/F,EAAa,CACfpwE,OAAQtzB,EAAIiqB,YACZoJ,MAAOrzB,EAAIgqB,YAET0/E,EAAmB5qG,KAAKykB,eAAeomF,eAAenH,GAAUgH,OAEtE,GAAKE,UAAAA,EAAkBtmG,OACnB,OAGJ,MAAMkP,EAAOxT,KAAKykB,eAAeqmF,iBAAiB5pG,EAAIsqB,iBAEtD,IAAKhY,EACD,OAEJ,IAAIwzF,EAAYhnG,KAAK0lG,WAAWvhF,IAAI3Q,GAE/BwzF,IACDA,EAAY,IAAIxC,GAChBxkG,KAAK0lG,WAAW5+D,IAAItzB,EAAMwzF,IAE1BpC,EAAWpwE,QAAUowE,EAAWrwE,OAChCyyE,EAAUpB,cAAchB,GAK5B,IAAIsE,EAAYhoG,EAAImqB,iBAEf69E,GAAa1sD,IACd0sD,EAAYlpG,KAAKipG,cAAc/nG,EAAKs7C,EAAQ,eAEhDwqD,EAAUjB,aAAamD,EAC1B,KAGDzpG,OAAO6I,KAAK6gG,GAAe7kG,QAC3BtE,KAAKsiG,aAAahgG,KAAKkhG,GAAkCxjG,KAAKykB,eAAgB0kF,GAGlFnpG,KAAKumG,uBACR,ECvqBD,MAAMx7F,GAASzL,EAAAA,MAAAA,8CAMf,IAAIyrG,GAKAC,IAAoB,EAkCxB,SAASC,GAAsBlkG,GACvBu0F,GAAU4P,wBAIT5P,GAAU6P,YAAY,CACvB1N,YAAa12F,EAAQ02F,YACrBC,gBAAiB32F,EAAQ22F,gBACzB5D,SAAU/yF,EAAQ+yF,SAClB0D,UAAWz2F,EAAQy2F,UACnBI,gBAAiB72F,EAAQ62F,gBACzB1B,OAAQn1F,EAAQm1F,OAChB4B,OAAQ/2F,EAAQ+2F,OAChBH,aAAc52F,EAAQ42F,gBAEtB5yF,GAAOpH,MAAM,8CAEpB,CA+Ec,SAASynG,GAAWC,EAAMtkG,GAMrC/G,KAAKsrG,YAAc,IAAIl9C,IACvBpuD,KAAKsiG,aAAe,IAAI/9D,MACxBvkC,KAAKqrG,KAAOA,EACZrrG,KAAK+G,QAAUA,GAAW,CAAC,EAE3B/G,KAAKurG,4BACCvrG,KAAK+G,QAAQ02F,aAAez9F,KAAK+G,QAAQ22F,kBAKM,IAAzC0N,GAAW5R,0BACnBx5F,KAAKurG,8BACLvrG,KAAKwrG,iCACCxrG,KAAK+G,QAAQykG,iCACfhrE,GAAQ+0D,gBACR0V,GAAsBjrG,KAAK+G,SA1IvC,SAA0BA,GACjBikG,KACDhmG,KAAAA,WACI+B,EAAQ0kG,iBAAmBtc,IACf,GACE,OACIroF,GACC,IAAMmkG,GAAsBlkG,KAEnDikG,IAAoB,EAE3B,CAiIWU,CAAiB1rG,KAAK+G,SAGrB/G,KAAK+G,QAAQm1F,QACdnxF,GAAOuY,KAAK,4BAUpBtjB,KAAK2rG,oBAAsB,IAAIv9C,IAE/Bg9C,GAAWQ,UAAU77E,IAAI/vB,MAGpBwgC,GAAQ+0D,iBACTsW,GAASpiG,MAAMzJ,KAAK+G,QAAQhF,SAAU/B,KAAK+G,QAAQ+yF,SAE1D,CA1FDsR,GAAW1xF,KAAO,SAAS3S,GACvBqkG,GAAWU,oBAAsB/kG,EAAQglG,mBACF,iBAA5BhlG,EAAQilG,kBACfZ,GAAWY,gBAAkBjlG,EAAQilG,iBAGE,iBAAhCjlG,EAAQi+F,sBACfoG,GAAWpG,oBAAsBj+F,EAAQi+F,qBAGC,iBAAnCj+F,EAAQklG,yBACfb,GAAWa,uBAAyBllG,EAAQklG,wBAGhDb,GAAW5R,0BAA4BzyF,EAAQyyF,0BAG1Ch5D,GAAQ+0D,iBACTsW,GAASnyF,KAAK3S,EAErB,EAuEDqkG,GAAWU,oBAAqB,EAChCV,GAAWpG,oBAAsB,IACjCoG,GAAWY,gBAAkB,IAC7BZ,GAAW5R,2BAA4B,EACvC4R,GAAW/R,UAAYA,GAEvB55F,OAAOwc,eAAemvF,GAAY,YAAa,CAM3CjnF,IAAG,KACM4mF,KACDA,GAAa,IAAI18C,KAGd08C,MAQfK,GAAW5oG,UAAU0pG,iBAAmB,SAASznF,GAC7CzkB,KAAKmsG,gBAAgB1nF,GAErB,IACI,MAAM2nF,EACA,IAAIC,GACF5nF,EACA2mF,GAAWpG,oBACXoG,GAAWY,gBACXhsG,KAAKsiG,cAEb8J,EAAS3iG,MAAM2hG,GAAWU,oBAC1B9rG,KAAKsrG,YAAYxkE,IAAIriB,EAAerY,GAAIggG,EAC3C,CAAC,MAAOx+F,GACL7C,GAAOpH,MAAO,iDAAgDiK,IACjE,CACJ,EAEDw9F,GAAWkB,WAAa,GAExBlB,GAAWmB,gBAAkB,SAASjnF,EAAOssD,GA8BzC,GA7BIpxC,GAAQu2D,gBAKRzxE,EAAMJ,iBACN0pE,GAAiBI,qBAOjB9pF,UACI,GAAI2C,EAAO,CACP,IAAK,MAAM2kG,KAAapB,GAAWkB,WAC/BE,EAAUriG,aAGRsiG,GAAAA,wBACT,KAAM,CACHA,GAAAA,sBACA,IAAK,MAAMD,KAAapB,GAAWkB,WAC/BE,EAAU/iG,OAEjB,MAIJ2hG,GAAWU,mBACZ,OAGJxmF,EAAMJ,iBACF0pE,GAAiBC,qBACjB,KACIuc,GAAWsB,eAAepnF,EAA1B,IAGR,MACMgnF,EAAa,IAAIG,GADRnnF,EAAMqnF,oBACqBvB,GAAWpG,oBACjDpzB,GAEJ5xE,KAAKssG,WAAW1qG,KAAK0qG,GACrBA,EAAW7iG,OACd,EAED2hG,GAAW5oG,UAAUoqG,sBAAwB,SAAS3zF,GAC7CmyF,GAAWU,oBAGhB9rG,KAAKsiG,aAAav9D,GAAGy+D,GAA8BvqF,EACtD,EAEDmyF,GAAW5oG,UAAUqqG,yBAA2B,SAAS5zF,GAChDmyF,GAAWU,oBAGhB9rG,KAAKsiG,aAAa39D,eAAe6+D,GAA8BvqF,EAClE,EAEDmyF,GAAW5oG,UAAUsqG,0BAA4B,SAAS7zF,GACtDjZ,KAAKsiG,aAAav9D,GAAGy+D,GAAkCvqF,EAC1D,EAEDmyF,GAAW5oG,UAAUuqG,6BAA+B,SAAS9zF,GACzDjZ,KAAKsiG,aAAa39D,eACd6+D,GAAkCvqF,EACzC,EAEDmyF,GAAW5oG,UAAUwqG,2BAA6B,SAAS/zF,GACvDjZ,KAAKsiG,aAAav9D,GAAGy+D,GAAmCvqF,EAC3D,EAEDmyF,GAAW5oG,UAAUyqG,8BAAgC,SAASh0F,GAC1DjZ,KAAKsiG,aAAa39D,eACd6+D,GACAvqF,EACP,EAEDmyF,GAAW5oG,UAAU0qG,yBAA2B,SAASj0F,GACrDjZ,KAAKsiG,aAAav9D,GAAGy+D,GAAkCvqF,EAC1D,EAEDmyF,GAAW5oG,UAAU2qG,4BAA8B,SAASl0F,GACxDjZ,KAAKsiG,aAAa39D,eAAe6+D,GAC7BvqF,EACP,EAQDmyF,GAAW5oG,UAAU4qG,0BAA4B,SAASn0F,GACtDjZ,KAAKsiG,aAAav9D,GAAGy+D,GAAmCvqF,EAC3D,EAQDmyF,GAAW5oG,UAAU6qG,qBAAuB,SAASC,GAC5C9sE,GAAQw3D,+BAMbh4F,KAAKutG,yBAA2B,IAAInL,GAChCpiG,KAAKsiG,aACL8I,GAAWa,wBAEfqB,EAAWvoE,GACPqlD,GACA,IAAMpqF,KAAKutG,yBAAyB1K,kBACxCyK,EAAWvoE,GACPqlD,GACA,IAAMpqF,KAAKutG,yBAAyB9J,kBAdpC14F,GAAOuY,KAAK,gEAenB,EAQD8nF,GAAW5oG,UAAUkgG,kBAAoB,WACrC,OAAO1iG,KAAKutG,yBACNvtG,KAAKutG,yBAAyB7K,oBAC9B,IACT,EAQD0I,GAAW5oG,UAAUgrG,6BAA+B,SAASv0F,GACzDjZ,KAAKsiG,aAAa39D,eAAe6+D,GAAmCvqF,EACvE,EAQDmyF,GAAW5oG,UAAUyjG,eAAiB,SAASV,GAC3C,IAAK,MAAM6G,KAAYnhG,MAAM6Q,KAAK9b,KAAKsrG,YAAY51F,UAC1C02F,EAAS3nF,eAAek6E,OACzByN,EAASnG,eAAeV,EAGnC,EAED6F,GAAW5oG,UAAU43F,QAAU,WAC3B,IAQSp6F,KAAK2rG,oBAAoB7+C,MAC1B9sD,KAAKsiG,aAAahgG,KAAKkhG,IAE3B,IAAK,MAAMiK,KAAaztG,KAAK2rG,oBAAoBj2F,SAC7C1V,KAAK0tG,cAAcD,EAAUlP,KAEjC,IAAK,MAAMoP,KAAS3tG,KAAKsrG,YAAYhjG,OACjCtI,KAAK4tG,iBAAiBD,GAEtB3tG,KAAKsiG,cACLtiG,KAAKsiG,aAAaz6D,oBAEzB,CApBD,QAqBIujE,GAAWQ,UAAUpM,OAAOx/F,KAC/B,CACJ,EAEDorG,GAAWsB,eAAiB,SAASpnF,GACjC,IAAK8lF,GAAWU,mBACZ,OAGJ,MAAM95F,EAASsT,EAAMqnF,oBAErB,IAAK,IAAI7nG,EAAI,EAAGA,EAAIsmG,GAAWkB,WAAWhoG,OAAQQ,IAC9C,GAAIsmG,GAAWkB,WAAWxnG,GAAGkN,SAAWA,EAAQ,CACzBo5F,GAAWkB,WAAW1hG,OAAO9F,EAAG,GAExC,GAAGqF,OACd,KACH,CAER,EAODihG,GAAW5oG,UAAUorG,iBAAmB,SAASD,GAC7C,MAAMvB,EAAWpsG,KAAKsrG,YAAYnnF,IAAIwpF,GAElCvB,IACAA,EAASjiG,OACTnK,KAAKsrG,YAAY9L,OAAOmO,GAE/B,EAMDvC,GAAW5oG,UAAU2pG,gBAAkB,SAAS5N,GAC5Cv+F,KAAK4tG,iBAAiBrP,EAAInyF,GAC7B,EAUDg/F,GAAW5oG,UAAUqrG,eAAiB,SAAStP,EAAKC,GAChD,IAAKx+F,KAAKurG,4BACN,OACG,GAAIvrG,KAAK2rG,oBAAoBznF,IAAIq6E,EAAInyF,IAGxC,YAFArB,GAAOpH,MAAM,gDAIjB,IAAIu4F,EAASl8F,KAAK+G,QAAQm1F,OAMrBA,EAAO4R,SAAS9tG,KAAK+G,QAAQhF,YAC9Bm6F,EAAU,GAAEl8F,KAAK+G,QAAQm1F,OAAOhxF,MAAM,EAAGlL,KAAK+G,QAAQm1F,OAAOh2F,YAAY,SAASlG,KAAK+G,QAAQhF,YAGnGgJ,GAAOsM,KAAM,0BAAyBknF,QACtC,MAAMwP,EACA,IAAIzS,GACFiD,EACA,CACIrC,SACAsC,iBAGZx+F,KAAK2rG,oBAAoB7kE,IAAIy3D,EAAInyF,GAAI2hG,EACxC,EAQD3C,GAAW4C,0BAA4B,WACnC,MAAMC,EAAc,IAAI5/C,IAExB,IAAK,MAAM6/C,KAAc9C,GAAWQ,UAChC,IAAK,MAAMjP,KAAMuR,EAAWvC,oBAAoBj2F,SAC5Cu4F,EAAYl+E,IAAI4sE,GAIxB,OAAOsR,CACV,EAKD7C,GAAW5oG,UAAUkrG,cAAgB,SAASnP,GAC1C,MAAM5C,EAAoB37F,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAEvDuvF,IAUsC,IAAlC37F,KAAK2rG,oBAAoB7+C,MACzB9sD,KAAKsiG,aAAahgG,KAAKkhG,IAE3BxjG,KAAK2rG,oBAAoBnM,OAAOjB,EAAInyF,IAGpCuvF,EAAkB0D,qBAEzB,EASD+L,GAAW5oG,UAAU2rG,mBAAqB,WACtC,OAAOnuG,KAAKurG,2BACf,EAQDH,GAAW5oG,UAAU4rG,gCAAkC,SAAS7P,EAAKsB,GACjE,MAAMwO,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAASzO,sBAAsBC,EAEtC,EAMDuL,GAAW5oG,UAAUi9F,6BAA+B,SAASlB,GACzD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAAS5O,8BAEhB,EAQD2L,GAAW5oG,UAAU8rG,cAAgB,SAAS/P,EAAKh5E,EAAOvU,GACtD,MAAMq9F,EAAW9P,GAAOv+F,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAEzDkvF,GAAUgT,cAAc/oF,EAAOvU,EAAMq9F,EACxC,EASDjD,GAAW5oG,UAAUs9F,uBACf,SAASr2F,EAAO+J,GACd,IAAK,MAAMmpF,KAAM38F,KAAK2rG,oBAAoBj2F,SACtCinF,EAAGmD,uBAAuBr2F,EAAO+J,EAExC,EAQL43F,GAAW5oG,UAAU48F,yBAA2B,SAASmP,EAASvtG,GAC9D,IAAK,MAAM27F,KAAM38F,KAAK2rG,oBAAoBj2F,SACtCinF,EAAGyC,2BAIPp/F,KAAKqrG,KAAKjM,yBAAyBmP,EAASvtG,EAC/C,EAODoqG,GAAWoD,0BAA4B,SAASvQ,GAC5C,MAAMwQ,EAAYrD,GAAW4C,4BAE7B,GAAIS,EAAU3hD,KACV,IAAK,MAAM6vC,KAAM8R,EACbnT,GAAUkT,0BAA0BvQ,EAAatB,QAGrDrB,GAAUkT,0BAA0BvQ,EAAa,KAExD,EAiBDmN,GAAW5oG,UAAUy8F,4BAA8B,SAC3CV,EACA/qF,EACA0rF,EACAr/F,EACA68F,EACA1B,GACJ,MAAMqT,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAASpP,4BACLzrF,EACA0rF,EACAr/F,EACA68F,EACA1B,EAEX,EASDoQ,GAAWsD,uBAAyB,SAAS9gG,GACzC,MAAMjK,EACAiK,aAAaqiF,GAhmBvB,SAA2CtsF,GACvC,MAAMkgB,EAAM,IAAIthB,MAkBhB,OAfAshB,EAAIpY,MAAQ9H,EAAM8H,MAGlBoY,EAAIvW,MAAQ3J,EAAM2J,MAAQ,kBAAoB3J,EAAMusF,KAAOvsF,EAAMusF,IAAIvsF,OAC9DA,EAAMusF,IAAIvsF,MAAM2J,KAAQ,MAAK3J,EAAMusF,IAAIvsF,MAAM2J,OAAS,IAK7DuW,EAAIssE,eAAiBxsF,EAAMusF,KAAOvsF,EAAMusF,IAAIxrE,YACtCzd,KAAK8B,UAAUpF,EAAMusF,IAAIxrE,aAAe,GAG9Cb,EAAIC,QAAUngB,EAAMmgB,QAEbD,CACV,CA6kBa8qF,CAAkC/gG,GAAKA,EAC3C6gG,EAAYrD,GAAW4C,4BAE7B,GAAIS,EAAU3hD,KACV,IAAK,MAAM6vC,KAAM8R,EACbnT,GAAUoT,uBAAuB/qG,EAAOg5F,QAG5CrB,GAAUoT,uBAAuB/qG,EAAO,KAE/C,EAQDynG,GAAW5oG,UAAUk9F,sBAAwB,SAAS9xF,EAAG2wF,GACrD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAAS3O,sBAAsB9xF,EAEtC,EAQDw9F,GAAW5oG,UAAUm9F,uBAAyB,SAAS/xF,EAAG2wF,GACtD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAAS1O,uBAAuB/xF,EAEvC,EAQDw9F,GAAW5oG,UAAUu9F,uBAAyB,SAASnyF,EAAG2wF,GACtD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAAStO,uBAAuBnyF,EAEvC,EAQDw9F,GAAW5oG,UAAUw9F,wBAA0B,SAASpyF,EAAG2wF,GACvD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAASrO,wBAAwBpyF,EAExC,EAQDw9F,GAAW5oG,UAAUy9F,0BAA4B,SAASryF,EAAG2wF,GACzD,MAAM8P,EAAWruG,KAAK2rG,oBAAoBxnF,IAAIo6E,EAAInyF,IAE9CiiG,GACAA,EAASpO,0BAA0BryF,EAE1C,EAODw9F,GAAWwD,QAAU,SAASjjG,GAC1B,MAAMkjG,EAAe,IAAIxgD,IAMzB,IAAK,MAAMvsC,KAASspF,GAAWQ,UAAW,CACtC,GAAI9pF,EAAM0pF,iCACN,OAGA1pF,EAAM6pF,oBAAoB7+C,MAC1B+hD,EAAa9+E,IAAIjO,EAAM6pF,oBAAoBj2F,SAASrO,OAAOQ,MAElE,CAED,GAAIgnG,EAAa/hD,KACb,IAAK,MAAMgiD,KAAcD,EACrBvT,GAAUyT,mBAAmBpjG,EAAGmjG,QAGpCxT,GAAUyT,mBAAmBpjG,EAAG,KAEvC,EAUDy/F,GAAW5oG,UAAUwsG,aAAe,SAAS5Q,EAAS7lF,GAUlD,OAPA6yF,GAAW/R,UAAUsB,UACjB/I,GACA,CACIt5E,OAAQ8lF,EACR7lF,YAGD+iF,GAAU0T,aAAahvG,KAAK+G,QAAQm1F,OAAQkC,EAAS7lF,EAC/D,EAED6yF,GAAWziB,UAAYrpF,EAAAA,MAAAA,EAOvB8rG,GAAW6D,kBAAoB,SAAStrG,GAChCA,aAAiBssF,IAAmBtsF,EAAMusF,IAC1Ckb,GAAWsD,uBAAuB/qG,GAElCynG,GAAWwD,QAAQjrG,EAE1B,EAWDynG,GAAW8D,oBAAsB,SAAS5rG,GAAwB,IAO1D6rG,EAPyC1U,EAAiB,uDAAJ,CAAC,EACtDn3F,GAUD6rG,EADiB,iBAAV7rG,EACMA,EAEA,CACTgK,KAAMhK,EACNm3F,cAIR1vF,GAAOD,IAAI7D,KAAK8B,UAAUomG,IAG1BnvG,KAAKq5F,UAAUsB,UAAUr3F,EAAOm3F,IApB5B1vF,GAAOuY,KAAK,gCAqBnB,EASD8nF,GAAWgE,cAAgB,SAASxU,GAA4B,IAAjBH,EAAiB,uDAAJ,CAAC,EACzDz6F,KAAKq5F,UAAUsB,UAAUC,EAAWH,EACvC,kFCl2BD,MAAM1vF,IAASkC,EAAAA,EAAAA,6CAMA,SAASoiG,GAA4B/B,GAChDttG,KAAKstG,WAAaA,EAClBttG,KAAKsvG,cAAgB,CAAC,EAGtBhC,EAAWvoE,GAAGqlD,IACV9kE,IACI,IAAKA,EAAM45E,YAAcoO,EAAWY,WAChC,OAEJ,MAAMr9F,EACAyU,EAAMq5E,MACF2O,EAAWiC,iBAAmBjC,EAAWkC,iBAI7CjR,EAAO1tF,GAAWA,EAAQ4T,gBAAmB,KAEnD6oF,EAAWY,WAAWI,cAClB/P,EACAj5E,EAAMmqF,UACNnqF,EAAMoqF,UAHV,GAKX,CAKDL,GAA4B7sG,UAAUmtG,uBAAyB,WAC3D,MAAMrC,EAAattG,KAAKstG,WAClBsC,EAAWtC,EAAWuC,KAE5B7vG,KAAK8vG,kBAAoB,IAAI5tG,KAAJ,CAA0B0tG,EAC/C5vG,KAAKstG,WAAWhL,cAEpBsN,EAASvtG,YAAYumF,GAAW,WAAXA,gBAA2BmnB,IACvCA,EAAcpR,OAMf2O,EAAW0C,IAAIC,oBAClB,IAKLL,EAASvtG,YAAYumF,GAAW,WAAXA,8BAAyC,CAAC9sE,EAAMqzD,KACjE,MAAM+gC,EAAc5C,EAAW6C,mBAAmB5oC,GAAAA,QAAAA,mBAA2BzrD,IAEzEo0F,IACAA,EAAYE,YAAYjhC,GACxBm+B,EAAWhL,aAAahgG,KAAK8nF,GAAmD8lB,GACnF,IAGLN,EAASvtG,YACLumF,GAAW,WAAXA,qBACA,CAACmnB,EAAeM,MAGXN,EAAcpR,OACR2O,EAAWgD,kBACVD,EAASN,EAActrF,eAF/B,IAMRmrF,EAASvtG,YAAYumF,GAAW,WAAXA,sBACjB2nB,IAIInF,GAAWgE,cAAcvc,GAAyB6Q,GAAU8M,QAE5DlD,EAAWmD,kBAAoBF,EAG/BjD,EAAW0C,IAAIU,cAAa,GAAM/1F,MAC9B,KACI2yF,EAAWqD,gBAAiB,EAC5BrD,EAAWmD,kBAAoB,IAA/B,IAEH7sF,OACGjgB,IACI2pG,EAAWmD,kBAAoB,KAC/B1lG,GAAOuY,KACH,gDAAiD3f,EADrD,GARZ,IAcRisG,EAASvtG,YAAYumF,GAAW,WAAXA,sBACjB2nB,IAIInF,GAAWgE,cAAcvc,GAAyB6Q,GAAUgH,QAE5D4C,EAAWsD,uBAAyBL,EAGpCjD,EAAW0C,IAAIa,cAAa,GAAMl2F,MAC9B,KACI2yF,EAAWwD,qBAAsB,EACjCxD,EAAWsD,uBAAyB,IAApC,IAEHhtF,OACGjgB,IACI2pG,EAAWsD,uBAAyB,KACpC7lG,GAAOuY,KACH,gDAAiD3f,EADrD,GARZ,IAcR3D,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,gBAC3BwB,IAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,WAC3BwB,GAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,qBAC3BwB,GAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,eAC3BwB,IAGJwlB,EAASvtG,YAAYumF,GAAW,WAAXA,YACjB,KACI5oF,KAAKstG,WAAWyD,eAEhB/wG,KAAKstG,WAAW0D,4BAA6B,EAG7CvxG,OAAO6I,KAAKsnG,EAASqB,iBAAiB7tG,SAAQwE,IAC1C,MAAMtE,EACAivF,GACG,cAAa3qF,IACd,CAAEC,MAAO+nG,EAASqB,gBAAgBrpG,KAE1CwjG,GAAWgE,cAAc9rG,EAAzB,IAIJ7D,OAAO6I,KAAKsnG,EAASvE,KAAK4F,iBAAiB7tG,SAAQwE,IAC/C,MAAMtE,EACAivF,GACG,QAAO3qF,IACR,CAAEC,MAAO+nG,EAASvE,KAAK4F,gBAAgBrpG,KAE/CwjG,GAAWgE,cAAc9rG,EAAzB,GANJ,IAURssG,EAASvtG,YAAYumF,GAAW,WAAXA,sBAAiC,CAACh7E,EAAGiD,KACjDA,EAAQ8tF,OACT2O,EAAWhL,aAAahgG,KAAK8nF,EACzBvB,EAA2Cj7E,EAClD,IAGLgiG,EAASvtG,YAAYusF,IAAgCtpE,IACjDgoF,EAAWhL,aAAahgG,KAAK8nF,GAAqC9kE,EAAlE,IAGJtlB,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,gBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,sBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,mBAC3BwB,EACAvB,GACJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,+BAC3BwB,EACAvB,GACJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,gCAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,qBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,kBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,wBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,WAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,YAC3BwB,EACAvB,GACJ+mB,EAASvtG,YACLumF,GAAW,WAAXA,aACA,IAAMwiB,GAAWgE,clBSkB,CACvCp7F,OAAQ,cACRy+E,cAAe,cACfzhF,KAAM2/E,OkBVNif,EAASvtG,YAAYumF,GAAW,WAAXA,sBACjBmnB,IACIzC,EAAW4D,uBAAuBnB,EAAlC,IAGR/vG,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,kBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,kBAC3BwB,EACAvB,GAEJ+mB,EAASvtG,YAAYumF,GAAW,WAAXA,uBACjBmnB,IACIzC,EAAW6D,uBAAuBpB,EAAlC,IAGR/vG,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,cAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,oBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,wBAC3BwB,EACAvB,GAEJ7oF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,mBAC3BwB,EACAvB,GAEJ+mB,EAASvtG,YAAYumF,GAAW,WAAXA,YACjB,KACIwiB,GAAWgE,clB6CmB,CACtCp7F,OAAQ,aACRy+E,cAAe,aACfzhF,KAAM0/E,GAAgBC,mBkB/Cd2c,EAAWhL,aAAahgG,KACpB8nF,EACAvB,EAFJ,IAKR+mB,EAASvtG,YAAYumF,GAAW,WAAXA,wBACjBmnB,IACI3E,GAAW8D,oBACPvc,GACI3B,GACA,CAAE0Y,IAAKqG,EAAcpR,QAH7B,IAMRiR,EAASvtG,YAAYumF,GAAW,WAAXA,wBACjB,CAAC/3E,EAASu7D,KAEN,GAAIA,EAAK,CACL,MAAM0L,EAAWvQ,GAAAA,QAAAA,mBAA2B6E,GACtC8jC,EAAc5C,EAAW6C,mBAAmBr4B,IAAaA,EAEnC,QAAxBjnE,EAAQugG,YACRvgG,EAAQwgG,cAAcnB,GACS,OAAxBr/F,EAAQugG,aACfvgG,EAAQygG,aAAapB,EAE5B,CAED5C,EAAWhL,aAAahgG,KACpB8nF,GACAv5E,EAFJ,IAKR7Q,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,6BAC3BwB,IAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,kCAC3BwB,IAEJpqF,KAAK8vG,kBAAkBrtG,QACnBmmF,GAAW,WAAXA,mCACAwB,IAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,qBAC3BwB,IAEJwlB,EAAS2B,gCAA+B,CAAChqG,EAAMuU,KAC3C,MAAMo0F,EAAc5C,EAAW6C,mBAAmBr0F,GAE7Co0F,GAILA,EAAY/uD,YACR55C,EAAK9B,QAAQQ,UAAU,qBAAqB3B,QAC5CiD,EAAKM,MAFT,IAKJ+nG,EAASvtG,YAAYumF,GAAW,WAAXA,OACjB0kB,EAAWkE,eAAe3uG,KAAKyqG,IACnCsC,EAASvtG,YAAYumF,GAAW,WAAXA,iBACjB0kB,EAAWmE,kBAAkB5uG,KAAKyqG,IAEtCttG,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,iBAC3BwB,IAEJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,yBAC3BwB,IAEJwlB,EAASvtG,YAAYumF,GAAW,WAAXA,kBACjB0kB,EAAWoE,eAAe7uG,KAAKyqG,IACnCttG,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,wBAC3BwB,IACJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,yBAC3BwB,IACJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,sBAC3BwB,IACJwlB,EAASvtG,YAAYumF,GAAW,WAAXA,4BACjB0kB,EAAWqE,wBAAwB9uG,KAAKyqG,IAC5CsC,EAASvtG,YAAYumF,GAAW,WAAXA,gBACjB0kB,EAAWsE,aAAa/uG,KAAKyqG,IACjCttG,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,SAC3BwB,GACJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,kBAC3BwB,EACAvB,GAEJ+mB,EAASvtG,YAAYumF,GAAW,WAAXA,qBACjB0kB,EAAWuE,qBAAqBhvG,KAAKyqG,IAEzCsC,EAASvtG,YAAYumF,GAAW,WAAXA,oBAA+B9rB,IAChDwwC,EAAWwE,mBAAmBh1C,GAG1BwwC,EAAWY,YAAcZ,EAAWyE,eACpCzE,EAAWvoE,GAAGqlD,IACV4nB,IACI,MAAMC,EAAY,CACdtuG,MAAOquG,EAAgBE,WACvB9lG,GAAI,kBACJipE,OAAQ28B,EAAgBZ,aAG5BhG,GAAWwD,QAAQ3nG,KAAK8B,UAAUkpG,GAAlC,GAEX,IAGLrC,EAASvtG,YAAYumF,GAAW,WAAXA,iBACjB0kB,EAAW6E,kBAAkBtvG,KAAKyqG,IAEtCsC,EAASvtG,YAAY+vG,KAAAA,kBACjB,CAACC,EAAaC,KACVhF,EAAW+E,YAAcA,EACzB/E,EAAWgF,aAAeA,EAC1BhF,EAAWhL,aAAahgG,KACpB8nF,EAA2CioB,EAC3CC,EAFJ,IAKR1C,EAASvtG,YACLumF,GAAW,WAAXA,kBAGA,CAACxc,EAAKmmC,EAAKC,EAAOC,EAAIC,EAAMC,KACxB,MAAMvmG,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAEtCkhC,EAAWhL,aAAahgG,KACpB8nF,GACAh+E,EAAImmG,EAAKE,EAAIC,EAAMC,EAFvB,IAKR/C,EAASvtG,YACLumF,GAAW,WAAXA,0BAGA,CAACxc,EAAKmmC,EAAKC,EAAOC,KACd,MAAMrmG,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAEtCkhC,EAAWhL,aAAahgG,KACpB8nF,GACAh+E,EAAImmG,EAAKE,EAFb,IAKR7C,EAASvtG,YAAYumF,GAAW,WAAXA,iBACjB,CAACxc,EAAKiJ,KACF,MAAMjpE,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAChC8jC,EAAc5C,EAAW6C,mBAAmB/jG,GAE7C8jG,GAAeA,EAAY0C,UAAYv9B,IAG5C66B,EAAY0C,QAAUv9B,EACtBi4B,EAAWhL,aAAahgG,KACpB8nF,GAA2Ch+E,EAAIipE,GADnD,IAIRu6B,EAASvtG,YAAYumF,GAAW,WAAXA,uBACjB,CAAC9sE,EAAM+2F,KACH,MAAMzmG,EAAKm7D,GAAAA,QAAAA,mBAA2BzrD,GAChCo0F,EAAc5C,EAAW6C,mBAAmB/jG,GAE9C8jG,EACA5C,EAAWhL,aAAahgG,KACpB8nF,GACA8lB,EAAa2C,GAEjBvF,EAAWhL,aAAahgG,KACpB8nF,GACAh+E,EAAIymG,EACX,IAGTjD,EAASkD,oBAAoB,cAAc,CAAC7yF,EAAMnE,KAG9C,GAAIwxF,EAAWyF,aAAej3F,EAC1B,OAEJ,MAAMo0F,EAAc5C,EAAW6C,mBAAmBr0F,GAElD,IAAKo0F,IAAgBA,EAAY6B,cAC7B,OAEJ,MAAMiB,EAA4C,SAA1B/yF,EAAK2tB,WAAW+5D,MAClCsL,EAA4C,SAA1BhzF,EAAK2tB,WAAWyiD,MAExC,IAAI6iB,GAAU,EAEVF,IAAoB1F,EAAW6F,iBAAiBxL,QAChD2F,EAAW6F,iBAAiBxL,MAAQqL,EACpCE,GAAU,GAGVD,IAAoB3F,EAAW6F,iBAAiB9iB,QAChDid,EAAW6F,iBAAiB9iB,MAAQ4iB,EACpCC,GAAU,GAGVA,GACA5F,EAAWhL,aAAahgG,KACpB8nF,GACAkjB,EAAW6F,iBAElB,IAGD7F,EAAWY,aAEX0B,EAASvtG,YAAYumF,GAAW,WAAXA,uBACjB/3E,IACIy8F,EAAWY,WAAWzO,6BAClB5uF,EAAQ4T,eADZ,IAKRmrF,EAASvtG,YAAYumF,GAAW,WAAXA,0BACjB,CAACh7E,EAAGuU,KACAmrF,EAAWY,WAAWjO,0BAA0BryF,EAAGuU,EAAnD,KAKZniB,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,4BAC3BwB,IACJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,uBAC3BwB,IAGJpqF,KAAK8vG,kBAAkBrtG,QAAQmmF,GAAW,WAAXA,sBAC3BwB,GACP,EAKDilB,GAA4B7sG,UAAU4wG,kBAAoB,WACtD,MAAM9F,EAAattG,KAAKstG,WAClB0C,EAAM1C,EAAW0C,IAEvBA,EAAI3tG,YACAskF,GAAAA,QAAAA,mBACA2mB,EAAW+F,mBAAmBxwG,KAAKyqG,IAEvC0C,EAAI3tG,YACAskF,GAAAA,QAAAA,qBACA2mB,EAAWgG,qBAAqBzwG,KAAKyqG,IAEzC0C,EAAI3tG,YAAYskF,GAAAA,QAAAA,0BACZ,CAAC4sB,EAAU/oF,EAAUxpB,KACjB,IAAKssG,EAAWkG,sBAAwBD,GAAYjG,EAAWmG,0BAA4BzyG,IAChFssG,EAAWuC,OAClBvC,EAAWkG,oBAAsBD,EACjCjG,EAAWmG,wBAA0BzyG,EACrCssG,EAAWhL,aAAahgG,KACpB8nF,GAAgDmpB,EAAU/oF,EAAUxpB,GACpEssG,EAAWY,YAAcZ,EAAWyF,aAAeQ,GAEnDjG,EAAWY,WAAW9O,yBAAyBkO,EAAWuC,KAAK6D,QAAS1yG,GAExEssG,EAAWkG,sBAAwBD,GAC/B/oF,GAAYA,EAASlmB,QAAQ,CAC7B,MAAMihG,EAAc/6E,EAAStf,MAAM,GAG/BoiG,EAAWyF,WAAaQ,GACxBhO,EAAY36F,OAAO,EAAG,EAAG2oG,GAIzBhO,EAAYjhG,OrBzhBH,GqB0hBTihG,EAAY36F,OrB1hBH,EqB0hBiC26F,EAAYjhG,OrB1hB7C,GqB4hBbgpG,EAAWY,YAAcZ,EAAWY,WAAWjI,eAAeV,EACjE,CAER,IAGTyK,EAAI3tG,YAAYskF,GAAAA,QAAAA,mBAA6B,KACzC,MAAMzlF,EAAM3B,OAAOqvB,YAAY1tB,MACzB0G,EAAM,sBAGZmD,GAAOD,IAAK,UAASlD,OAAU1G,GAC/BosG,EAAWuC,KAAKoB,gBAAgBrpG,GAAO1G,EACvCkqG,GAAWgE,cACP7c,GAAkC3qF,EAAK,CAAEC,MAAO3G,KAEpDosG,EAAWhL,aAAahgG,KAAK8nF,GAA7B,IAGJ4lB,EAAI3tG,YAAYskF,GAAAA,QAAAA,qBAA+BnI,IAC3C8uB,EAAWhL,aAAahgG,KAAK8nF,GAA2C5L,EAAxE,IAGJwxB,EAAI3tG,YAAYskF,GAAAA,QAAAA,sBAAgCz9E,IAC5C,IAAK,MAAM2H,KAAW7Q,KAAKstG,WAAWqG,mBAClC9iG,EAAQ+iG,iBAAiB1qG,EAAKw6F,GAAUgH,MAC3C,IAGLsF,EAAI3tG,YAAYskF,GAAAA,QAAAA,sBAAgCz9E,IAC5C,IAAK,MAAM2H,KAAW7Q,KAAKstG,WAAWqG,mBAClC9iG,EAAQ+iG,iBAAiB1qG,EAAKw6F,GAAU8M,MAC3C,IAGLR,EAAI3tG,YAAYskF,GAAAA,QAAAA,2BACZ,CAAC7qE,EAAM+2F,KACH,MAAM3C,EAAc5C,EAAW6C,mBAAmBr0F,GAE9Co0F,EACA5C,EAAWhL,aAAahgG,KACpB8nF,GACA8lB,EAAa2C,GAEjB9nG,GAAOuY,KAEI,mEAAexH,IACtB+2F,EACP,IAGT7C,EAAI3tG,YAAYskF,GAAAA,QAAAA,yBACZ,CAAC7qE,EAAM+2F,KACH,MAAM3C,EAAc5C,EAAW6C,mBAAmBr0F,GAE9Co0F,EACA5C,EAAWhL,aAAahgG,KAAK8nF,GAA+C8lB,EAAa2C,GAEzF9nG,GAAOuY,KAAM,oEAAmExH,IACnF,IAGTk0F,EAAI3tG,YAAYskF,GAAAA,QAAAA,qBACZ,CAAC4X,EAAK9jC,KACG8jC,EAAII,OACLyM,GAAWwD,QACP3nG,KAAK8B,UAAU,CACXqD,GAAI,cACJvE,MAAO4yD,IAElB,IAETu1C,EAAI3tG,YAAYskF,GAAAA,QAAAA,sBACZ,CAAC4X,EAAK9jC,KACG8jC,EAAII,OACLyM,GAAWwD,QACP3nG,KAAK8B,UAAU,CACXqD,GAAI,eACJvE,MAAO4yD,IAElB,IAGTu1C,EAAI3tG,YAAYskF,GAAAA,QAAAA,sBACZ,CAAC/4E,EAAG2wF,KACA+O,EAAWY,WAAWvO,uBAAuB/xF,EAAG2wF,GAC3CA,EAAII,OACL2O,EAAWhL,aAAahgG,KAAK8nF,EACzBvB,EAA2Cj7E,EAClD,IAGToiG,EAAI3tG,YAAYskF,GAAAA,QAAAA,qBACZ,CAAC/4E,EAAG2wF,KACA+O,EAAWY,WAAWxO,sBAAsB9xF,EAAG2wF,GAC1CA,EAAII,OACL2O,EAAWhL,aAAahgG,KAAK8nF,EACzBvB,EAA2Cj7E,EAClD,IAGToiG,EAAI3tG,YAAYskF,GAAAA,QAAAA,8BACZ,CAAC/4E,EAAG2wF,KACA+O,EAAWY,WAAWnO,uBAAuBnyF,EAAG2wF,GAC3CA,EAAII,OACL2O,EAAWhL,aAAahgG,KAAK8nF,EACzBvB,EAA2Cj7E,EAClD,IAGToiG,EAAI3tG,YAAYskF,GAAAA,QAAAA,+BACZ,CAAC/4E,EAAG2wF,KACA+O,EAAWY,WAAWlO,wBAAwBpyF,EAAG2wF,GAC5CA,EAAII,OACL2O,EAAWhL,aAAahgG,KAAK8nF,EACzBvB,EAA2Cj7E,EAClD,IAGToiG,EAAI3tG,YAAYskF,GAAAA,QAAAA,0BACZ,CAACrhE,EAAO9R,KAKA8R,EAAMsiF,gBAAkBtiF,EAAMuuF,YAAcprB,GAAU,UAAVA,SAC5C6kB,EAAWY,WAAWpO,wBAAuB,EAAMtsF,EACtD,GAEZ,EAKD67F,GAA4B7sG,UAAUsxG,oBAAsB,WACxD,MAAMxG,EAAattG,KAAKstG,WAExB7tG,OAAO6I,KAAKtI,KAAKsvG,eAAelsG,SAAQw3F,IACpC0S,EAAWjC,KAAK1mE,eACZi2D,EACA56F,KAAKsvG,cAAc1U,GAFvB,IAIJ56F,KAAKsvG,cAAgB,CAAC,CACzB,EAMDD,GAA4B7sG,UAAUuxG,mBAAqB,WACvD,MAAMzG,EAAattG,KAAKstG,WAExBttG,KAAKg0G,2BACDprB,GAAW,WAAXA,cACA0kB,EAAW2G,eAAepxG,KAAKyqG,IACnCttG,KAAKg0G,2BACDprB,GAAW,WAAXA,cACA0kB,EAAW4G,eAAerxG,KAAKyqG,IACnCttG,KAAKg0G,2BACDprB,GAAW,WAAXA,eACA0kB,EAAW6G,gBAAgBtxG,KAAKyqG,IACpCttG,KAAKg0G,2BACDprB,GAAW,WAAXA,WACA0kB,EAAW8G,YAAYvxG,KAAKyqG,IAEhCttG,KAAKg0G,2BAA2BprB,GAAW,WAAXA,wBAC5B,CAACyrB,EAAYC,KACLhH,EAAWvmG,QAAQyH,OAAO+lG,mBAI9BjH,EAAW0F,gBAAkBqB,EAC7B/G,EAAW2F,gBAAkBqB,EAEzBD,IACA/G,EAAWqD,gBAAiB,GAG5B2D,IACAhH,EAAWwD,qBAAsB,GAKrCxD,EAAWzC,iBAAiBznG,SAAQkiB,IAChC,OAAQA,EAAMoqF,WACd,KAAKhM,GAAU8M,MACXlD,EAAW0F,iBAAmB1tF,EAAMg5E,OACpC,MACJ,KAAKoF,GAAUgH,MACX4C,EAAW2F,iBAAmB3tF,EAAMg5E,OALxC,IAUJgP,EAAWhL,aAAahgG,KAAK8nF,IAA7B,IAGRpqF,KAAKg0G,2BAA2BprB,GAAW,WAAXA,+BAC5B4rB,IACIlH,EAAWhL,aAAahgG,KAAK8nF,GAAoDoqB,EAAjF,IAGRx0G,KAAKg0G,2BAA2BprB,GAAW,WAAXA,uBAC5B,CAAC/gF,EAAOirF,EAAW2hB,KACf,MAAMC,EAAmBpH,EAAWqH,kBAAkBlgG,MAAK5G,GAAKA,EAAE+mG,WAAaH,IAE/EnH,EAAWhL,aAAahgG,KAAK8nF,GAA6C,CACtEj9D,QAAStlB,EACTirF,YACAyd,MAAOmE,GAHX,IAMR10G,KAAKg0G,2BAA2BprB,GAAW,WAAXA,oCAC5B,CAACkK,EAAW1mB,KACR,MAAM8jC,EAAc5C,EAAW6C,mBAAmB5oC,GAAAA,QAAAA,mBAA2B6E,IAEzE8jC,GACA5C,EAAWhL,aAAahgG,KAAK8nF,GAA0D,CACnF8lB,cACApd,aAEP,IAET9yF,KAAKg0G,2BAA2BprB,GAAW,WAAXA,oCAC5B,CAACkK,EAAW1mB,KACR,MAAM8jC,EAAc5C,EAAW6C,mBAAmB5oC,GAAAA,QAAAA,mBAA2B6E,IAEzE8jC,GACA5C,EAAWhL,aAAahgG,KAAK8nF,GAA0D,CACnF8lB,cACApd,aAEP,IAET9yF,KAAKg0G,2BAA2BprB,GAAW,WAAXA,wBAC5B/gF,GAASylG,EAAWhL,aAAahgG,KAAK8nF,GAA8C,CAAE0I,UAAWjrF,MACrG7H,KAAKg0G,2BAA2BprB,GAAW,WAAXA,wBAC5B/gF,IACIylG,EAAWhL,aAAahgG,KAAK8nF,GAA8C,CAAE0I,UAAWjrF,GAAxF,GAEX,EAKDwnG,GAA4B7sG,UAAUwxG,2BAA6B,SAC3DpZ,EAAW3hF,GACfjZ,KAAKsvG,cAAc1U,GAAa3hF,EAChCjZ,KAAKstG,WAAWjC,KAAKhpG,YAAYu4F,EAAW3hF,EAC/C,EAKDo2F,GAA4B7sG,UAAUqyG,yBAA2B,WAC7D,MAAMvH,EAAattG,KAAKstG,WAEnBA,EAAWY,aAKhBZ,EAAWY,WAAWtB,uBAAsB,CAACrO,EAAK/qF,EAAMxI,EAAOk0F,KAC3DoO,EAAW0C,IAAI8E,cAAcvW,EAAK/qF,EAAMxI,EAAOk0F,EAA/C,IAMJoO,EAAWY,WAAWpB,2BAA0B,KAC5CQ,EAAWhL,aAAahgG,KACpB8nF,EADJ,IAKCkjB,EAAWvmG,QAAQyH,OAAOumG,aAC3BzH,EAAWY,WAAWhB,0BAAyB,CAAC3O,EAAKz8E,KACjDwrF,EAAWzC,eAAenH,GAAU8M,OAAOptG,SAAQkiB,IAC/C,MAAM9R,EAAO+qF,EAAIyW,aAAa1vF,GAEzB9R,GAASsO,EAAMta,eAAegM,IAInC8R,EAAM2vF,wBAAwB1W,EAAKz8E,EAAMtO,GAAzC,GAPJ,IAWX,EC1zBc,MAAM0hG,GAmBjBt1G,YAAYwsE,EAAKkhC,EAAYxtG,EAAa0kD,EAAQ2wD,EAAS9/B,EAAQ+/B,EAAUC,EAAaC,GACtFt1G,KAAKu1G,KAAOnpC,EACZpsE,KAAKw1G,IAAMjuC,GAAAA,QAAAA,mBAA2B6E,GACtCpsE,KAAKy1G,YAAcnI,EACnBttG,KAAK01G,aAAe51G,EACpBE,KAAK21G,eAAgB,EACrB31G,KAAK41G,QAAU,GACf51G,KAAK61G,MAAQ,OACb71G,KAAK4yG,QAAUv9B,EACfr1E,KAAK81G,QAAUtxD,EACfxkD,KAAK+1G,SAAWZ,EAChBn1G,KAAKg2G,YAAc,CAAC,EACpBh2G,KAAKi2G,UAAYb,EACjBp1G,KAAKk2G,aAAeb,EACpBr1G,KAAKm2G,YAAcb,EACnBt1G,KAAK6+E,UAAY,IAAIxwB,IAarBruD,KAAKo2G,SAAW,IAAIhoD,GACvB,CAWDioD,kBAAkBvjB,GACd,OAAO9yF,KAAKolB,YAAY7T,QACpB,CAACgU,EAAOD,IACJC,IAAUD,EAAMoqF,YAAc5c,GAAaxtE,EAAMmqF,aACrD,EACP,CAUD6G,YAAYxjB,EAAWvtE,EAAOgxF,EAAY1C,GAAW,MACjD,IAAI2C,EAAoBx2G,KAAKo2G,SAASjyF,IAAI2uE,GAC1C,MAAM2jB,EAAa,CACflxF,QACAsuF,aAGJ,UAAI2C,SAAJ,OAAI,EAAmB1pD,KACnB0pD,EAAkB1vE,IAAIyvE,EAAYE,IAKtCD,EAAoB,IAAIpoD,IACxBooD,EAAkB1vE,IAAIyvE,EAAYE,GAClCz2G,KAAKo2G,SAAStvE,IAAIgsD,EAAW0jB,GAChC,CAODE,aACI,OAAO12G,KAAK22G,QACf,CAMDC,gBACI,OAAO52G,KAAKy1G,WACf,CAODoB,mBACI,OAAO72G,KAAK82G,cACf,CAKDl2G,iBACI,OAAOZ,KAAK01G,YACf,CAMDqB,cACI,OAAO38F,QAAQC,QAAQra,KAAK6+E,UAC/B,CAKDm4B,QACI,OAAOh3G,KAAKw1G,GACf,CAKDZ,SACI,OAAO50G,KAAKu1G,IACf,CAKD0B,YAAY3pG,GACR,OAAOtN,KAAKg2G,YAAY1oG,EAC3B,CAKD4pG,UACI,OAAOl3G,KAAK61G,KACf,CAMDsB,aACI,OAAOn3G,KAAKo2G,QACf,CAKDgB,aACI,OAAOp3G,KAAK+1G,QACf,CAKD3E,YACI,OAAOpxG,KAAK4yG,OACf,CAMDxtF,YACI,OAAOplB,KAAK41G,QAAQ1qG,OACvB,CAODmsG,qBAAqBvkB,GACjB,OAAO9yF,KAAKolB,YAAYrU,QAAOuU,GAASA,EAAMoqF,YAAc5c,GAC/D,CAQDwkB,WAAWC,GACP,OAAOv3G,KAAK6+E,UAAU36D,IAAIqzF,EAC7B,CAKDC,eACI,OAAOx3G,KAAKq2G,kBAAkB3S,GAAU8M,MAC3C,CAODiH,WACI,OAAOz3G,KAAK81G,OACf,CAOD4B,uBAAuB,QACnB,MAA0D,UAAnD,UAAA13G,KAAKi2G,iBAAL,mBAAgB9nC,YAAhB,eAAuB,wBACjC,CAKD4jC,cACI,MAAsB,cAAf/xG,KAAK61G,KACf,CAMDP,aACI,OAAOt1G,KAAKm2G,WACf,CAMDd,cACI,OAAOr1G,KAAKk2G,YACf,CAKDyB,eACI,OAAO33G,KAAKq2G,kBAAkB3S,GAAUgH,MAC3C,CAMDkN,WAAWC,GACP73G,KAAK22G,SAAWkB,CACnB,CAMDC,iBAAiBC,GACb/3G,KAAK82G,eAAiBiB,CACzB,CAMD3H,YAAY4H,GACRh4G,KAAK6+E,UAAYm5B,GAAe,IAAI3pD,GACvC,CAMD4pD,cAAcC,GACVl4G,KAAKm2G,YAAc+B,CACtB,CAMDC,eAAeC,GACXp4G,KAAKk2G,aAAekC,CACvB,CAQDj3D,YAAY7zC,EAAMzF,GACd,MAAMwwG,EAAWr4G,KAAKg2G,YAAY1oG,GAE9BzF,IAAUwwG,IACVr4G,KAAKg2G,YAAY1oG,GAAQzF,EACzB7H,KAAKy1G,YAAYnT,aAAahgG,KAC1B8nF,GACApqF,KACAsN,EACA+qG,EACAxwG,GAEX,CAMDywG,QAAQC,GACJv4G,KAAK61G,MAAQ0C,CAChB,CAKDC,eACI,OAAOx4G,KAAK21G,aACf,ECxVE,IAAK8C,aAAAA,GAAAA,EAAAA,wBAAAA,oCAAAA,EAAAA,uBAAAA,mCAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,YAAAA,wBAAAA,EAAAA,sBAAAA,oCAAAA,KAAAA,GAAAA,CAAAA,IA+CL,MAAM9mB,GAA0B8mB,GAAsB9mB,wBAChD5G,GAAyB0tB,GAAsB1tB,uBAC/C2tB,GAAoBD,GAAsBC,kBAC1CC,GAAcF,GAAsBE,YACpCnvB,GAAwBivB,GAAsBjvB,qCC/CpD,SAASovB,GAAc34F,GAC1B,OAAO44F,GAAAA,MAAa54F,EACvB,CCNM,IAAK64F,oBAAAA,GAAAA,EAAAA,yBAAAA,0BAAAA,EAAAA,YAAAA,wBAAAA,EAAAA,kBAAAA,8BAAAA,EAAAA,aAAAA,0BAAAA,KAAAA,GAAAA,CAAAA,IAgCL,MAAMC,GAA2BD,GAAsBC,yBACjDC,GAAcF,GAAsBE,YACpChvB,GAAoB8uB,GAAsB9uB,kBAC1CivB,GAAeH,GAAsBG,aC/BnC,MAAMrlE,GAIjBh0C,cAAc,WACVI,KAAKkzC,QAAU,IAAI94B,SAAQ,CAACC,EAASC,KACjCta,KAAKqa,QAAU,WACX,EAAK6+F,qBACL7+F,KAAW,UACd,EACDra,KAAKsa,OAAS,WACV,EAAK4+F,qBACL5+F,KAAU,UACb,CAHD,IAKJta,KAAK2a,KAAO3a,KAAKkzC,QAAQv4B,KAAK9X,KAAK7C,KAAKkzC,SACxClzC,KAAK4jB,MAAQ5jB,KAAKkzC,QAAQtvB,MAAM/gB,KAAK7C,KAAKkzC,QAC7C,CAKDgmE,qBACIvvG,aAAa3J,KAAKm5G,SACrB,CAKDC,iBAAiBC,GACbr5G,KAAKm5G,SAAWvvG,YAAW,KACvB5J,KAAKsa,OAAO,IAAI/X,MAAM,WAAtB,GACD82G,EACN,EClCU,MAAMC,GAMjB15G,cAA+C,IAAnC0iG,EAAmC,uDAApB,IAAI/9D,MAC3BvkC,KAAKsiG,aAAeA,EAGpBtiG,KAAKklB,iBAAmBllB,KAAK+kC,GAAK/kC,KAAKqC,YACvCrC,KAAK6mC,oBAAsB7mC,KAAK4nC,IAAM5nC,KAAK2kC,cAC9C,CAQDtiC,YAAYu4F,EAAW3hF,GAGnB,OAFAjZ,KAAKsiG,aAAajgG,YAAYu4F,EAAW3hF,GAElC,IAAMjZ,KAAK6mC,oBAAoB+zD,EAAW3hF,EACpD,CAQD0rB,eAAei2D,EAAW3hF,GACtBjZ,KAAKsiG,aAAa39D,eAAei2D,EAAW3hF,EAC/C,ECrCL,MAAMlO,IAASkC,EAAAA,EAAAA,0CAITssG,GAAah+F,OAAO,cAcX,MAAMi+F,GAKjB55G,cAAgC,IAApB,UAAE65G,GAAkB,uDAAJ,CAAC,EAGrBC,EAAU,GACd,MAAMr6G,EAAMmG,SAASs0E,cAAc,iCAEnC,GAAIz6E,EAAK,CACL,MAAM2mF,EAAM3mF,EAAI8C,IAAI+D,YAAY,KAEhCwzG,EAAW,GAAEr6G,EAAI8C,IAAI8D,UAAU,EAAG+/E,KACrC,CAED,IAAI2zB,EAAa,GAAED,iCAKnB,GAAIA,GAAuB,MAAZA,EAAiB,CAG5B,MAAME,EACA,IAAIC,KAAK,CAAG,kBAAiBF,QAAkB,CAAE3oG,KAAM,2BAE7D2oG,EAAYp6G,OAAO2mF,IAAI4zB,gBAAgBF,EAC1C,CAED55G,KAAK+5G,QAAU,IAAIC,OAAOL,EAAW,CAAErsG,KAAM,gBAE7CtN,KAAK+5G,QAAQ92G,QAAU2K,GAAK7C,GAAOpH,MAAMiK,GAEzC5N,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,aACXR,aAEP,CAQDS,QAAQ3S,GACJvnG,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,UACX1S,iBAEP,CAMD4S,aACIn6G,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,cAElB,CAUDG,eAAen2E,EAAU5e,EAAMkiF,GAC3B,IAAItjE,EAASs1E,IAKb,GAFAt1E,EAASs1E,KAAc,EAEnBh6G,OAAOo5F,sBAAuB,CAC9B,MAAM5xF,EAAU,CACZkzG,UAAW,SACX1S,iBAGJtjE,EAAS/wB,UAAY,IAAIylF,sBAAsB34F,KAAK+5G,QAAShzG,EAChE,KAAM,CACH,MAAMszG,EAAkBp2E,EAAS40D,uBAEjC74F,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,SACXK,eAAgBD,EAAgBE,SAChCC,eAAgBH,EAAgBp6E,SAChCsnE,iBACD,CAAE8S,EAAgBE,SAAUF,EAAgBp6E,UAClD,CACJ,CAUDw6E,aAAajzF,EAAQnC,EAAMkiF,GACvB,IAAI//E,EAAO+xF,IAKX,GAFA/xF,EAAO+xF,KAAc,EAEjBh6G,OAAOo5F,sBAAuB,CAC9B,MAAM5xF,EAAU,CACZkzG,UAAW,SACX1S,iBAGJ//E,EAAOtU,UAAY,IAAIylF,sBAAsB34F,KAAK+5G,QAAShzG,EAC9D,KAAM,CACH,MAAM2zG,EAAgBlzF,EAAOqxE,uBAE7B74F,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,SACXK,eAAgBI,EAAcH,SAC9BC,eAAgBE,EAAcz6E,SAC9BsnE,iBACD,CAAEmT,EAAcH,SAAUG,EAAcz6E,UAC9C,CACJ,CASD06E,OAAOpT,EAAe3/F,EAAKgzG,GACvB56G,KAAK+5G,QAAQz7B,YAAY,CACrB27B,UAAW,SACXryG,MACAgzG,WACArT,iBAEP,EC5JL,MAAMx8F,IAASkC,EAAAA,EAAAA,yCAKR,MAAM4tG,WAAmBvB,GAM5B15G,YAAY0tG,GAA0B,IAAdvmG,EAAc,uDAAJ,CAAC,EAC/BoxE,QAEAn4E,KAAKstG,WAAaA,EAClBttG,KAAK86G,QAAU,IAAIC,GAAYh0G,GAE/B/G,KAAKmtB,SAAU,EACfntB,KAAKg7G,eAAYl0G,EAOjB9G,KAAKstG,WAAWvoE,GACZqlD,GACApqF,KAAKi7G,uBAAuBp4G,KAAK7C,OACrCA,KAAKstG,WAAWvoE,GACZqlD,IACA9kE,GAASA,EAAM45E,WAAal/F,KAAKk7G,mBAAmB51F,KACxDtlB,KAAKstG,WAAW0C,IAAIjrE,GAChB4hD,GAAAA,QAAAA,oBACA,CAACrhE,EAAOi5E,IAAQv+F,KAAKm7G,2BAA2B5c,EAAKj5E,KACzDtlB,KAAKstG,WAAWvoE,GACZqlD,GACApqF,KAAKo7G,kBAAkBv4G,KAAK7C,MACnC,CAODq7G,YACI,OAAOr7G,KAAKmtB,OACf,CAQe,iBAACA,GACbntB,KAAKg7G,iBAAmBh7G,KAAKg7G,UAEzB7tF,IAAYntB,KAAKmtB,UAIrBntB,KAAKg7G,UAAY,IAAIpnE,GAErB5zC,KAAKmtB,QAAUA,EAEVA,GACDntB,KAAK86G,QAAQX,aAGjBn6G,KAAKs7G,mBAAqBt7G,KAAKs7G,YAAYnuF,GAE3CntB,KAAKstG,WAAWiO,4BAA4B,eAAgBpuF,GAE5DntB,KAAKstG,WAAWkO,wBAEhBx7G,KAAKg7G,UAAU3gG,UAClB,CAODohG,mBACI,MAAM,IAAIl5G,MAAM,8BACnB,CAOD24G,mBAAmB51F,GACf,IAAK,MAAMzU,KAAW7Q,KAAKstG,WAAWqG,mBAClC3zG,KAAK07G,yBAAyB7qG,EAASyU,EAE9C,CAOD21F,uBAAuBpqG,GACnB,MAAM8qG,EAAc37G,KAAKstG,WAAWzC,iBAEpC,IAAK,MAAMvlF,KAASq2F,EAChB37G,KAAK07G,yBAAyB7qG,EAASyU,EAE9C,CAOD61F,2BAA2B5c,EAAKj5E,GAC5B,IAAKtlB,KAAKmtB,QACN,OAGJ,MAAM8W,EAAWs6D,EAAIqd,qBAAqBt2F,EAAMA,OAE5C2e,EACAjkC,KAAK86G,QAAQV,eAAen2E,EAAU3e,EAAMoqF,UAAWpqF,EAAMkiF,oBAE7Dz8F,GAAOuY,KAAM,6BAA4BgC,6BAAiCi5E,IAEjF,CASDmd,yBAAyB7qG,EAASyU,GAC9B,IAAKtlB,KAAKmtB,QACN,OAGJ,MAAMhL,EAAKtR,EAAQ4T,eACb+C,EAASrF,GAAMA,EAAG05F,mBAAmBv2F,EAAMA,OAE7CkC,EACAxnB,KAAK86G,QAAQL,aAAajzF,EAAQlC,EAAMoqF,UAAWpqF,EAAMkiF,oBAEzDz8F,GAAOuY,KAAM,6BAA4BgC,0BAA8BnD,IAE9E,CAODi5F,kBAAkB91F,GACd,GAAIkb,GAAQm2D,+BAAiCrxE,EAAM45E,WAAa55E,EAAMsiF,iBAAmBtiF,EAAMmqF,UAC3F,IAAK,MAAM5+F,KAAW7Q,KAAKstG,WAAWqG,mBAClC3zG,KAAK07G,yBAAyB7qG,EAASyU,EAGlD,ECxKE,MAAMw2F,WAAoCjB,GAK7Cj7G,YAAY0tG,GACRn1B,MAAMm1B,EAAY,CAAEmM,WAAW,GAClC,CASDkB,OAAOoB,GACH/7G,KAAK86G,QAAQH,YAAO7zG,EAAW,CAAEk1G,cAAeD,EAAQC,eAAiBD,EAAQzlG,MACpF,kDCtBa,MACA,MADX,MAEM2lG,GAAK,MCHX,IAAKC,GDIM,eCJNA,GAAAA,EAAAA,2BAAAA,6BAAAA,EAAAA,sBAAAA,wBAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,+BAAAA,iCAAAA,EAAAA,qCAAAA,uCAAAA,EAAAA,kCAAAA,qCAAAA,KAAAA,GAAAA,CAAAA,IC0BZ,MAAMC,GAAe,CACjB,CAAE,KAAM,OACR,CAAE,KAAM,OACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,OACR,CAAE,KAAM,YACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,WACR,CAAE,KAAM,UACR,CAAE,KAAM,QACR,CAAE,KAAM,WACR,CAAE,KAAM,aACR,CAAE,KAAM,UACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,YACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,cACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,UACR,CAAE,KAAM,SACR,CAAE,KAAM,OACR,CAAE,KAAM,WACR,CAAE,KAAM,WACR,CAAE,KAAM,SACR,CAAE,KAAM,aACR,CAAE,KAAM,YACR,CAAE,IAAK,aACP,CAAE,IAAK,SACP,CAAE,KAAM,QACR,CAAE,KAAM,cACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,aACR,CAAE,KAAM,YACR,CAAE,KAAM,QACR,CAAE,KAAM,OACR,CAAE,KAAM,UACR,CAAE,KAAM,aACR,CAAE,KAAM,QACR,CAAE,KAAM,SACR,CAAE,KAAM,WACR,CAAE,KAAM,aACR,CAAE,KAAM,UACR,CAAE,KAAM,UACR,CAAE,IAAK,QACP,CAAE,KAAM,UACR,CAAE,KAAM,WACR,CAAE,KAAM,QACR,CAAE,KAAM,UACR,CAAE,KAAM,cACR,CAAE,KAAM,UACR,CAAE,KAAM,QAyBNC,GAAgB,CAClBC,QA1GJ,SAA4BC,GASxB,MAAO,CACqC,KAAvCA,EAAS,IAAM,EAAIA,EAAS,IAAM,GACiC,MAApD,EAAdA,EAAS,KAAa,GAAKA,EAAS,IAAM,EAAIA,EAAS,IAAM,GACd,MAAjC,GAAdA,EAAS,KAAc,EAAIA,EAAS,IAAM,GAEnD,EA6FGC,MAjBJ,SAA0BD,GAYtB,MAVe,CACXA,EAAS,IAAM,GACA,EAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAC3B,GAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,EAC5B,GAAdA,EAAS,GACTA,EAAS,IAAM,GACA,EAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAC3B,GAAdA,EAAS,KAAa,EAAIA,EAAS,IAAM,GAGhC7qG,KAAIwc,GAAOkuF,GAAaluF,IACzC,GCjGKljB,IAASkC,EAAAA,EAAAA,yCAETuvG,GAAc,IACdC,GAAmB,MACnBC,GACK,QADLA,GAEQ,WAFRA,GAGY,eAHZA,GAIW,cAJXA,GAKY,eALZA,GAMS,YANTA,GAOU,aAPVA,GAQO,UARPA,GASO,UAIPC,GAAgC,6BAChCC,GAAmC,gBAEnCC,GAAWthG,OAAO,WAElBuhG,GAAmB,CACrBC,+BAAgC,qCAChCC,0BAA2B,gCAC3BC,sBAAuB,4BACvBC,wBAAyB,8BACzBC,mCAAoC,0CAuBjC,MAAMC,WAAmB9D,GAI5B15G,YAAY0tG,GACRn1B,QAEAn4E,KAAKq9G,MAAQ/P,EACbttG,KAAKs9G,MAAQ,IAAI1pE,GACjB5zC,KAAKu9G,eAAYz2G,EACjB9G,KAAKw9G,gBAAkB,EACvBx9G,KAAKy9G,MAAQ,IAAIrvD,IACjBpuD,KAAK09G,4BAAyB52G,EAE1Bs2G,GAAWl8B,eACXlhF,KAAK29G,gBAEL39G,KAAKq9G,MAAMt4E,GAAGqlD,GAAiDpqF,KAAK49G,2BAA2B/6G,KAAK7C,OACpGA,KAAKq9G,MAAMt4E,GAAGqlD,EAAuCpqF,KAAK69G,kBAAkBh7G,KAAK7C,OACjFA,KAAKq9G,MAAMt4E,GAAGqlD,GAAiCpqF,KAAK89G,mBAAmBj7G,KAAK7C,OAC5EA,KAAKq9G,MAAMt4E,GAAGqlD,GACVpqF,KAAK+9G,8BAA8Bl7G,KAAK7C,QAE5CA,KAAKs9G,MAAMhjG,OAAO,IAAI/X,MAAM,qBAEnC,CAOGy7G,WACA,OAAOh+G,KAAKq9G,MAAMtK,UACrB,CAKiB,qBACd,GAAI/yG,KAAK09G,uBACL,MAAM,IAAIn7G,MAAM,iDACb,CACHvC,KAAK09G,uBAAyB,IAAI9pE,SAE5B5zC,KAAKs9G,MAEX,MAAMW,EAAW,GACXC,EAAqBl+G,KAAKq9G,MAAMtK,WAEtC,IAAK,MAAM7C,KAAelwG,KAAKq9G,MAAM1I,kBAC7BzE,EAAYoH,WAAW6G,KAAiBD,EAAqBhO,EAAY8G,SACzEiH,EAASr8G,KAAK5B,KAAKo+G,iBAAiBlO,UAItC91F,QAAQikG,WAAWJ,GAIzBj+G,KAAK09G,uBAAuBrjG,UAC5Bra,KAAK09G,4BAAyB52G,CACjC,CACJ,CAOiB,qBACd,YAA6B,IAAfvH,OAAO++G,GACxB,CASc,gBAAC12G,GAEZ5H,KAAKu9G,UAAY31G,EACjB5H,KAAKw9G,iBAGL,MAAMS,EAAW,GAEjB,IAAK,MAAM/N,KAAelwG,KAAKq9G,MAAM1I,kBAAmB,CACpD,MAAM4J,EAAMrO,EAAY8G,QAClBwH,EAAUx+G,KAAKy+G,uBAAuBvO,GAG5C,IAAKsO,EAAQ3tG,QAAS,CAClB9F,GAAOuY,KAAM,oCAAmCi7F,4BAGhD,QACH,CAED,MAAM9sC,EAAOitC,KACPz+F,EAAO,CACT,CAAC0+F,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACF4+F,WAAY7+G,KAAK8+G,gBAAgBN,EAAQ3tG,SACzC4gE,UAINlsE,EAAI,IAAIquC,GAEdruC,EAAE6zG,iBAAiBoD,IACnBj3G,EAAEqe,OAAM,KACJ5jB,KAAKy9G,MAAMje,OAAO/tB,EAAlB,IAEJzxE,KAAKy9G,MAAM32E,IAAI2qC,EAAMlsE,GACrB04G,EAASr8G,KAAK2D,GAEdvF,KAAK++G,aAAa9+F,EAAMs+F,EAC3B,CAMD,aAJMnkG,QAAQikG,WAAWJ,GAIlBj+G,KAAKw9G,cACf,CAODwB,sBAAsBp3G,GAGlB,OAFA5H,KAAKu9G,UAAY31G,EAEV5H,KAAKw9G,cACf,CAMDyB,wBAAwB/O,GACpB,MAAMsO,EAAUx+G,KAAKy+G,uBAAuBvO,GAExCsO,EAAQ3tG,UACR2tG,EAAQ3tG,QAAQquG,OAChBV,EAAQ3tG,aAAU/J,EAEzB,CAMDq4G,+BACI,IAAK,MAAMjP,KAAelwG,KAAKq9G,MAAM1I,kBACjC30G,KAAKi/G,wBAAwB/O,EAEpC,CAMDkP,wBAAwBlP,EAAamP,GACjC,MAAMb,EAAUx+G,KAAKy+G,uBAAuBvO,GAEtCqO,EAAMrO,EAAY8G,QAExB,IAAKqI,EASD,OARAb,EAAQc,qBAAkBx4G,EAC1BiE,GAAOuY,KAAM,uCAAsCi7F,UACnDv+G,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWqD,sCAKnB,IAAKf,EAAQc,gBAQT,OAPAv0G,GAAOuY,KAAM,eAAci7F,8CAC3Bv+G,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWsD,mCAKnB,MAAM,IAAEC,EAAF,WAAOC,GAAelB,EAAQc,gBAEhCG,GAAOA,EAAIE,qBAAuBD,IAClC1/G,KAAK4/G,YAAY1P,GAGjBsO,EAAQc,gBAAgBI,YAAa,EAE5C,CAQkB,sBACf30G,GAAOkT,MAAM,uBAEb,UACUqgG,IAAI5kG,OAEV1Z,KAAK6/G,YAAc,IAAIvB,IAAIwB,QAC3B9/G,KAAK6/G,YAAYttF,SAEjBvyB,KAAK+/G,QAAUC,GAAehgH,KAAK6/G,YAAYI,iBAE/Cl1G,GAAOkT,MAAO,OAAMqgG,IAAI4B,sBAAsBjtG,KAAK,oBACnDjT,KAAKs9G,MAAMjjG,UACXra,KAAKmgH,eAAengH,KAAK+/G,QAC5B,CAAC,MAAOnyG,GACL7C,GAAOpH,MAAM,2BAA4BiK,GACzC5N,KAAKs9G,MAAMhjG,OAAO1M,EACrB,CACJ,CA8BDwyG,kBAAkBlQ,GACd,MAAMqO,EAAMrO,EAAY8G,QAClBwH,EAAUx+G,KAAKy+G,uBAAuBvO,GAE5C,IAAKsO,EAAQ3tG,QAGT,YAFA9F,GAAOuY,KAAM,gDAA+Ci7F,4BAKhE,GAAIC,EAAQc,gBAGR,YAFAv0G,GAAOuY,KAAM,gEAA+Di7F,KAKhFC,EAAQc,gBAAkB,CACtBG,IAAK,IAAInB,IAAI+B,IACbC,cAAe5B,MAGnB,MAAM6B,EAAe,CACjBD,cAAe9B,EAAQc,gBAAgBgB,eAG3C9B,EAAQc,gBAAgBiB,aAAeA,EACvC/B,EAAQc,gBAAgBkB,aAAc,EAEtC,MAAMC,EAAe,CACjB,CAAC9B,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAMsgG,IAIdvgH,KAAK++G,aAAa0B,EAAclC,EACnC,CAMD4B,eAAeO,GACX31G,GAAOkT,MAAO,qBAAoByiG,KAGlC,IAAK,MAAMC,KAAWD,EAClB,GAAIA,EAAOl5G,eAAem5G,GAAU,CAChC,MAAM/4G,EAAM84G,EAAOC,GAEnB3gH,KAAKq9G,MAAM9B,4BAA6B,cAAaoF,IAAW/4G,EACnE,CAER,CAMDg5G,+BAA+Bx0G,GAC3BrB,GAAOkT,MAAO,iCAAgC7R,aACjD,CASD0yG,gBAAgBjuG,GACZ,MAAMkrG,EAAU,CAAC,EAOjB,YALuBj1G,IAAnB9G,KAAKu9G,YACLxB,EAAQn0G,MAAM5H,KAAKu9G,WAAYsD,GAAAA,cAAuB7gH,KAAKu9G,WAC3DxB,EAAQnB,SAAW56G,KAAKw9G,gBAGrB3sG,EAAQiwG,QAAQ75G,KAAK8B,UAAUgzG,GACzC,CASD0C,uBAAuBvO,GAGnB,OAFAA,EAAY2M,IAAY3M,EAAY2M,KAAa,CAAC,EAE3C3M,EAAY2M,GACtB,CAOsB,0BACnB9xG,GAAOkT,MAAM,yBAEPje,KAAKs9G,MAEX,IAAK,MAAMpN,KAAelwG,KAAKq9G,MAAM1I,kBACjC30G,KAAK89G,mBAAmB5N,EAAY8G,QAAS9G,GAG7ClwG,KAAK6/G,cACL7/G,KAAK6/G,YAAYX,OACjBl/G,KAAK6/G,iBAAc/4G,EAE1B,CAQ+B,iCAACopG,EAAa2C,GAC1C,GAAIA,EAAQ8L,MAAyBlC,GACjC,OAGJ,IAAK5J,EAAQ+L,IAGT,YAFA7zG,GAAOuY,KAAK,uCAKVtjB,KAAKs9G,MAEX,MAAMp0G,EAAM2pG,EAAQ+L,IACdL,EAAMrO,EAAY8G,QAClBwH,EAAUx+G,KAAKy+G,uBAAuBvO,GAE5C,OAAQhnG,EAAI8H,MACZ,KAAK0rG,GACD,GAAI8B,EAAQ3tG,QACR9F,GAAOuY,KAAM,eAAci7F,2BAE3Bv+G,KAAK+gH,WAAW7Q,EAAa,mCAC1B,CAGH,MAAMr/F,EAAU,IAAIytG,IAAI0C,QAExBnwG,EAAQowG,gBAAgBjhH,KAAK6/G,YAAa32G,EAAI+W,KAAKihG,MAAOh4G,EAAI+W,KAAKkhG,OACnE3C,EAAQ3tG,QAAUA,EAGlB,MAAMuwG,EAAM,CACR,CAACzC,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACF4+F,WAAY7+G,KAAK8+G,gBAAgBjuG,GACjC4gE,KAAMvoE,EAAI+W,KAAKwxD,QAK3BzxE,KAAK++G,aAAaqC,EAAK7C,GACvBv+G,KAAK4gH,+BAA+BrC,EACvC,CACD,MAEJ,KAAK7B,GACD,GAAI8B,EAAQ3tG,QACR9F,GAAOuY,KAAM,eAAci7F,2BAE3Bv+G,KAAK+gH,WAAW7Q,EAAa,yBAC1B,GAAIhnG,EAAI+W,KAAKwxD,OAAS+sC,EAAQ6C,mBAAoB,CACrD,MAAM,WAAExC,GAAe31G,EAAI+W,KACrB1a,EAAIvF,KAAKy9G,MAAMt5F,IAAIjb,EAAI+W,KAAKwxD,MAC5B5gE,EAAU,IAAIytG,IAAI0C,QAExBnwG,EAAQywG,eAAethH,KAAK6/G,YAAahB,EAAWhkG,MAGpD7a,KAAK6/G,YAAY0B,qBAAqB1wG,GAGtC,MAAMoP,EAAOpP,EAAQ2wG,QAAQ3C,EAAW7tG,KAAM6tG,EAAWhkG,MAEzD2jG,EAAQ3tG,QAAUA,EAClB2tG,EAAQ6C,wBAAqBv6G,EAE7B9G,KAAK4gH,+BAA+BrC,GAEpCv+G,KAAKy9G,MAAMje,OAAOt2F,EAAI+W,KAAKwxD,MAC3BlsE,EAAE8U,UAEF,MAAM6Z,EAAO0kF,GAAc34F,GAE3B,GAAIiU,EAAKtsB,IAAK,CACV,MAAMA,EAAMi5G,GAAAA,YAAqB3sF,EAAKtsB,KAChCgzG,EAAW1mF,EAAK0mF,SAEtB4D,EAAQiD,QAAU75G,EAClB5H,KAAKsiG,aAAahgG,KAAKw6G,GAAiBI,wBAAyBqB,EAAK32G,EAAKgzG,EAC9E,CACJ,MACG7vG,GAAOuY,KAAK,oCAEZtjB,KAAK+gH,WAAW7Q,EAAa,gBAEjC,MAEJ,KAAKwM,GACD3xG,GAAOpH,MAAMuF,EAAI+W,KAAKtc,OAEtB,MAEJ,KAAK+4G,GACD,GAAI8B,EAAQ3tG,QAAS,CACjB,MAAM,WAAEguG,GAAe31G,EAAI+W,KAErBiU,EAAO0kF,GADA4F,EAAQ3tG,QAAQ2wG,QAAQ3C,EAAW7tG,KAAM6tG,EAAWhkG,OAGjE,QAAiB/T,IAAbotB,EAAKtsB,UAAuCd,IAAlBotB,EAAK0mF,SAAwB,CACvD,MAAMhzG,IAAMssB,EAAKtsB,KAAMi5G,GAAAA,YAAqB3sF,EAAKtsB,KAC3CgzG,EAAW1mF,EAAK0mF,SAEjB8G,KAAQlD,EAAQiD,QAAS75G,KAC1B42G,EAAQiD,QAAU75G,EAClB5H,KAAKsiG,aAAahgG,KAAKw6G,GAAiBI,wBAAyBqB,EAAK32G,EAAKgzG,IAI/E,MAAMwG,EAAM,CACR,CAACzC,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACF4+F,WAAY7+G,KAAK8+G,gBAAgBN,EAAQ3tG,SACzC4gE,KAAMvoE,EAAI+W,KAAKwxD,QAK3BzxE,KAAK++G,aAAaqC,EAAK7C,EAC1B,CACJ,MACGxzG,GAAOkT,MAAO,kCAAiCsgG,sCAE/Cv+G,KAAK+gH,WAAW7Q,EAAa,8CAEjC,MAEJ,KAAKwM,GACD,GAAI8B,EAAQ3tG,QAAS,CACjB,MAAM,WAAEguG,GAAe31G,EAAI+W,KAErBiU,EAAO0kF,GADA4F,EAAQ3tG,QAAQ2wG,QAAQ3C,EAAW7tG,KAAM6tG,EAAWhkG,OAGjE,QAAiB/T,IAAbotB,EAAKtsB,UAAuCd,IAAlBotB,EAAK0mF,SAAwB,CACvD,MAAMhzG,IAAMssB,EAAKtsB,KAAMi5G,GAAAA,YAAqB3sF,EAAKtsB,KAC3CgzG,EAAW1mF,EAAK0mF,SAEjB8G,KAAQlD,EAAQiD,QAAS75G,KAC1B42G,EAAQiD,QAAU75G,EAClB5H,KAAKsiG,aAAahgG,KAAKw6G,GAAiBI,wBAAyBqB,EAAK32G,EAAKgzG,GAElF,CAED,MAAMr1G,EAAIvF,KAAKy9G,MAAMt5F,IAAIjb,EAAI+W,KAAKwxD,MAElCzxE,KAAKy9G,MAAMje,OAAOt2F,EAAI+W,KAAKwxD,MAC3BlsE,EAAE8U,SACL,MACGtP,GAAOkT,MAAO,sCAAqCsgG,sCAEnDv+G,KAAK+gH,WAAW7Q,EAAa,kDAEjC,MAEJ,KAAKwM,GAA6B,OAC9B,IAAK8B,EAAQ3tG,QAKT,OAJA9F,GAAOkT,MAAO,kCAAiCsgG,2CAE/Cv+G,KAAK+gH,WAAW7Q,EAAa,8CAKjC,aAAIsO,EAAQc,uBAAZ,OAAI,EAAyBG,IAQzB,OAPA10G,GAAOuY,KAAM,uCAAsCi7F,UACnDv+G,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWsD,mCAKnB,MAAM,cAAEc,GAAkBp3G,EAAI+W,KAExBw/F,EAAM,IAAInB,IAAI+B,IAEpB7B,EAAQc,gBAAkB,CACtBG,MACAa,gBACAE,aAAa,GAGjB,MAAMmB,EAASnD,EAAQc,gBAAgBG,IAAImC,aACrCC,EAAa7hH,KAAK8hH,mBAAmBH,EAAQz4G,EAAI+W,MAKjD8hG,EAAgB,CAClB,CAACpD,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACFqgG,gBACAuB,gBAKZ7hH,KAAK++G,aAAagD,EAAexD,GACjC,KACH,CACD,KAAK7B,GAA8B,CAC/B,IAAK8B,EAAQ3tG,QAKT,OAJA9F,GAAOkT,MAAO,oCAAmCsgG,2CAEjDv+G,KAAK+gH,WAAW7Q,EAAa,gDAKjC,MAAM,WAAE2R,EAAF,cAAcvB,GAAkBp3G,EAAI+W,KAG1C,IAAKu+F,EAAQc,gBAQT,OAPAv0G,GAAOuY,KAAM,0BAAyBi7F,8CACtCv+G,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWsD,mCAKnB,GAAIhB,EAAQc,gBAAgB0C,cAKxB,OAJAj3G,GAAOkT,MAAO,gDAA+CsgG,WAE7Dv+G,KAAK+gH,WAAW7Q,EAAa,wDAKjCsO,EAAQc,gBAAgB0C,cAAgBH,EAExC,MAAMF,EAASnD,EAAQc,gBAAgBG,IAAImC,aAGrCK,EAAa,CACf,CAACtD,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACFrY,IAAK+5G,EACLrB,mBAKZtgH,KAAK++G,aAAakD,EAAY1D,GAE9BC,EAAQc,gBAAgB4C,SAAU,EAClC,KACH,CACD,KAAKxF,GAA2B,CAC5B,IAAK8B,EAAQ3tG,QAKT,OAJA9F,GAAOkT,MAAO,iCAAgCsgG,2CAE9Cv+G,KAAK+gH,WAAW7Q,EAAa,6CAKjC,IAAKsO,EAAQc,gBAQT,OAPAv0G,GAAOuY,KAAM,uBAAsBi7F,8CACnCv+G,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWsD,mCAKnB,MAAM,YAAEgB,EAAF,IAAef,EAAf,cAAoBuC,EAApB,aAAmCzB,EAAnC,QAAiD2B,GAAY1D,EAAQc,gBAE3E,GAAIG,EAAIE,mBAGJ,YAFA50G,GAAOuY,KAAK,8BAKhB,MAAQ1b,IAAKu6G,EAAP,cAAiB7B,GAAkBp3G,EAAI+W,KAE7C,GAAI+hG,GAGIA,IAFehiH,KAAK8hH,mBAAmBK,EAAU5B,GAWjD,OARAvgH,KAAK+gH,WAAW7Q,EAAa,qCAC7BlwG,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWkG,qCACf5D,EAAQc,gBAAgBJ,OAMhCO,EAAI4C,cAAcF,GAElB,MAAMR,EAASlC,EAAImC,aAEbU,EAAU,GAAEtiH,KAAKg+G,QAAQ2D,IACzBY,EAAa,GAAEhE,KAAO4D,IAEtB9qG,EAAOmpG,EAAe,GAAE8B,KAAUC,IAAe,GAAEA,KAAaD,IAGhEE,ED9nBX,SAAqBlG,GACxB,MAAMmD,EAAM,CAAC,EAEb,IAAK,MAAMt4F,KAAUi1F,GACbA,GAAc50G,eAAe2f,KAC7Bs4F,EAAIt4F,GAAUi1F,GAAcj1F,GAAQm1F,IAI5C,OAAOmD,CACV,CConBgCgD,CADJhD,EAAIiD,eAAerrG,EA3tBtB,IAguBd,GAFArX,KAAKsiG,aAAahgG,KAAKw6G,GAAiBG,sBAAuBsB,EAAKiE,GAEhEN,EACA,OAGJ,MAAMD,EAAa,CACf,CAACtD,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACFrY,IAAK+5G,EACLrB,mBAKZtgH,KAAK++G,aAAakD,EAAY1D,GAE9BC,EAAQc,gBAAgB4C,SAAU,EAClC,KACH,CACD,KAAKxF,GAA2B,CAC5B,IAAK8B,EAAQ3tG,QAKT,OAJA9F,GAAOkT,MAAO,iCAAgCsgG,2CAE9Cv+G,KAAK+gH,WAAW7Q,EAAa,6CAKjC,MAAM,KAAE5nG,EAAF,IAAQq6G,EAAR,cAAarC,GAAkBp3G,EAAI+W,KAEzC,IAAK0iG,IAAQr6G,EAGT,YAFAyC,GAAOuY,KAAK,2BAKhB,IAAKk7F,EAAQc,gBAGT,YAFAv0G,GAAOuY,KAAM,uBAAsBi7F,yCAKvC,MAAMkB,EAAMjB,EAAQc,gBAAgBG,IAG9BmD,EAAY,GAAEjG,KAAgC4B,IAAMv+G,KAAKg+G,OAAOsC,IAMtE,GALgBb,EAAIoD,cAChBpjH,OAAO6I,KAAKq6G,GAAKvuF,OAAOnhB,KAAK,KAC7B2vG,EAAWhG,MAGCt0G,EAQZ,OAPAyC,GAAOpH,MAAM,kDACb3D,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAW4G,4BAKnB,IAAKtE,EAAQuE,QAST,OARAh4G,GAAOuY,KAAK,oDAEZtjB,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAW8G,sBAKnB,IAAK,MAAQjH,EAASkH,KAAiBxjH,OAAO0gB,QAAQwiG,GAMlD,GAAIM,IALmBxD,EAAIoD,cACvBrE,EAAQuE,QACRH,EAAW7G,GAWX,OAPAhxG,GAAOpH,MAAM,6CACb3D,KAAKsiG,aAAahgG,KACdw6G,GAAiBK,mCACjBoB,GACA,EACArC,GAAWgH,uBAMvBn4G,GAAOsM,KAAM,oCAAmCknG,KAChDv+G,KAAKsiG,aAAahgG,KAAKw6G,GAAiBK,mCAAoCoB,GAAK,GAEjF,KACH,EAEJ,CAODT,mBAAmB1xG,EAAI8jG,GACnBnlG,GAAOkT,MAAO,eAAc7R,UAE5BpM,KAAKi/G,wBAAwB/O,EAChC,CAWkC,oCAACA,EAAa5iG,EAAM+qG,EAAUhmD,GAC7D,MAAMk1C,EAAgB2I,EAAY8G,QAC5BwH,EAAUx+G,KAAKy+G,uBAAuBvO,GAE5C,OAAQ5iG,GACR,IAAK,eACD,GAAI+kD,GAAYryD,KAAKq9G,MAAM8F,gBAAiB,CACxC,MAAMjF,EAAqBl+G,KAAKq9G,MAAMtK,WAGtC,UAFkC7C,EAAY6G,eAEtB7yF,IAAIi6F,KAAiBD,EAAqB3W,EAAe,CACzEvnG,KAAK09G,8BACC19G,KAAK09G,6BAET19G,KAAKo+G,iBAAiBlO,GAE5B,MAAMz+B,EAAOitC,KAEPn5G,EAAI,IAAIquC,GAEdruC,EAAE6zG,iBAAiBoD,IACnBj3G,EAAEqe,OAAM,KACJ5jB,KAAKy9G,MAAMje,OAAO/tB,GAClB+sC,EAAQ6C,wBAAqBv6G,CAA7B,IAEJ9G,KAAKy9G,MAAM32E,IAAI2qC,EAAMlsE,GAErB,MAAM0a,EAAO,CACT,CAAC0+F,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACF4+F,WAAY7+G,KAAK8+G,gBAAgBN,EAAQ3tG,SACzC4gE,UAKZzxE,KAAK++G,aAAa9+F,EAAMsnF,EAC3B,CACJ,CACD,MACJ,IAAK,qBACDiX,EAAQuE,QAAU1wD,EAClBryD,KAAKsiG,aAAahgG,KAAKw6G,GAAiBE,0BAA2BzV,GAG1E,CASDwZ,WAAW7Q,EAAavsG,GACpB,MAAM46G,EAAMrO,EAAY8G,QAClBnzF,EAAM,CACR,CAAC86F,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACFtc,WAKZ3D,KAAK++G,aAAal7F,EAAK06F,EAC1B,CAUDQ,aAAa9+F,EAAMsnF,GACfvnG,KAAKq9G,MAAM+F,YAAYnjG,EAAMsnF,EAChC,CASD6W,iBAAiBlO,GACb,MAAMqO,EAAMrO,EAAY8G,QAClBwH,EAAUx+G,KAAKy+G,uBAAuBvO,GAE5C,GAAIsO,EAAQ3tG,QAGR,OAFA9F,GAAOuY,KAAM,iCAAgCi7F,mCAEtCnkG,QAAQE,SAGnB,QAAmCxT,IAA/B03G,EAAQ6C,mBAGR,OAFAt2G,GAAOuY,KAAM,iCAAgCi7F,2CAEtCnkG,QAAQE,SAInBta,KAAK6/G,YAAYwD,uBAAuB,GAExC,MAAMC,EAAStD,GAAehgH,KAAK6/G,YAAY0D,iBACzCpC,EAAQ1hH,OAAOiW,OAAO4tG,EAAOE,YAAY,GAE/C,IAAKrC,EACD,OAAO/mG,QAAQE,OAAO,IAAI/X,MAAM,+BAIpCvC,KAAK6/G,YAAY4D,yBAEjB,MAAMhyC,EAAOitC,KACPhlG,EAAO,CACT,CAACilG,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACFihG,MAAOlhH,KAAK+/G,QAAQyD,WACpBrC,QACA1vC,UAKNlsE,EAAI,IAAIquC,GAcd,OAZAruC,EAAE6zG,iBAAiBoD,IACnBj3G,EAAEqe,OAAM,KACJ5jB,KAAKy9G,MAAMje,OAAO/tB,GAClB+sC,EAAQ6C,wBAAqBv6G,CAA7B,IAEJ9G,KAAKy9G,MAAM32E,IAAI2qC,EAAMlsE,GAErBvF,KAAK++G,aAAarlG,EAAM6kG,GAGxBC,EAAQ6C,mBAAqB5vC,EAEtBlsE,CACV,CAODq6G,YAAY1P,GACR,MAAMqO,EAAMrO,EAAY8G,QAClBwH,EAAUx+G,KAAKy+G,uBAAuBvO,IACtC,IAAEuP,EAAF,cAAOa,GAAkB9B,EAAQc,gBAGjCqD,EAAM,CAAC,EACPe,EAAU,GACVd,EAAY,GAAEjG,KAAgC38G,KAAKg+G,OAAOO,IAAM+B,IAEhEqD,EAAe,WAAUpF,IAE/BoE,EAAIgB,GAAelE,EAAIoD,cACnB7iH,KAAK+/G,QAAQgD,QACbH,EAAWe,GACfD,EAAQ9hH,KAAK+hH,GAEb,MAAMr7G,EAAOm3G,EAAIoD,cACba,EAAQtvF,OAAOnhB,KAAK,KACpB2vG,EAAWhG,IAGTgH,EAAa,CACf,CAACjF,IAAsBlC,GACvBmC,IAAK,CACD5tG,KAAM0rG,GACNz8F,KAAM,CACF3X,OACAq6G,MACArC,mBAKZtgH,KAAK++G,aAAa6E,EAAYrF,EACjC,CAKDuD,mBAAmBH,EAAQ1hG,GACvB,MAAM4jG,EAAU,IAAIvF,IAAIwF,QAClBjC,EAAagC,EAAQE,OAAOpC,EAAS16G,KAAK8B,UAAUkX,IAI1D,OAFA4jG,EAAQ3E,OAED2C,CACV,EASL,SAASjJ,GAAc34F,GACnB,IACI,OAAO+/F,GAAe//F,EACzB,CAAC,MAAOrS,GACL,MAAO,CAAC,CACX,CACJ,CAEDwvG,GAAW33E,OAASq3E,GC1kCpB,MAAM/xG,IAASkC,EAAAA,EAAAA,gDASR,MAAM+2G,WAA0BnJ,GAInCj7G,YAAY0tG,GACRn1B,MAAMm1B,GAENttG,KAAK8vB,UAAOhpB,EACZ9G,KAAKikH,mBAAoB,EAEzBjkH,KAAKkkH,YAAc,IAAI9G,GAAW9P,GAElCttG,KAAKmkH,WAAaC,KAASpkH,KAAKqkH,eAjBhB,KAkBhBrkH,KAAKskH,YAAcF,KAASpkH,KAAKukH,gBAlBjB,KAqBhBvkH,KAAKkkH,YAAYn/E,GACbq4E,GAAW33E,OAAOy3E,wBAClBl9G,KAAKwkH,yBAAyB3hH,KAAK7C,OAEvCA,KAAKkkH,YAAYn/E,GACbq4E,GAAW33E,OAAOw3E,sBAClBj9G,KAAKykH,uBAAuB5hH,KAAK7C,OAErCA,KAAKkkH,YAAYn/E,GACbq4E,GAAW33E,OAAOu3E,0BAClBh9G,KAAK0kH,2BAA2B7hH,KAAK7C,OAEzCA,KAAKkkH,YAAYn/E,GACbq4E,GAAW33E,OAAO03E,mCAClBn9G,KAAK2kH,oCAAoC9hH,KAAK7C,OAElDA,KAAKstG,WAAWvoE,GACZqlD,GACApqF,KAAK+9G,8BAA8Bl7G,KAAK7C,OAC5CA,KAAKstG,WAAWvoE,GACZqlD,GACApqF,KAAK4kH,qBAAqB/hH,KAAK7C,OACnCA,KAAKstG,WAAWvoE,GACZqlD,GACApqF,KAAK89G,mBAAmBj7G,KAAK7C,OACjCA,KAAKstG,WAAWvoE,GACRqlD,GACA,KACIpqF,KAAKikH,mBAAoB,CAAzB,GAEf,CAOG3E,sBACA,OAAOt/G,KAAKkkH,WACf,CASgB,kBAAC/2F,GACVA,QACMntB,KAAKkkH,YAAYW,eAEvB7kH,KAAKkkH,YAAY/E,+BAIrBn/G,KAAK8vB,OAAO3C,GAAUntB,KAAK8kH,eAG3B,MAAMxuG,QAActW,KAAKkkH,YAAYa,UAAU/kH,KAAK8vB,MAGpD9vB,KAAK86G,QAAQH,OAAO36G,KAAKstG,WAAWyF,WAAY/yG,KAAK8vB,KAAMxZ,EAC9D,CAWkC,oCAAC45F,EAAa5iG,EAAM+qG,EAAUhmD,GAC7D,OAAQ/kD,GACR,IAAK,aACDvC,GAAOkT,MAAO,eAAciyF,EAAY8G,iCAAiC3kD,KACzE,MACJ,IAAK,gBACIA,GAAYryD,KAAKmtB,SAClBntB,KAAKkkH,YAAYjF,wBAAwB/O,GAIpD,CAMD0U,uBACQ5kH,KAAKikH,mBAAqBjkH,KAAKmtB,SAC/BntB,KAAKskH,aAEZ,CAMDxG,mBAAmB1xG,GACfpM,KAAK86G,QAAQZ,QAAQ9tG,GAEjBpM,KAAKmtB,SACLntB,KAAKmkH,YAEZ,CAQmB,uBAChBp5G,GAAOkT,MAAM,gBAEbje,KAAK8vB,KAAO9vB,KAAK8kH,eACjB,MAAMxuG,QAActW,KAAKkkH,YAAYa,UAAU/kH,KAAK8vB,MAEpD9vB,KAAK86G,QAAQH,OAAO36G,KAAKstG,WAAWyF,WAAY/yG,KAAK8vB,KAAMxZ,EAC9D,CAOoB,wBACjBvL,GAAOkT,MAAM,mBAEb,MAAM+mG,QCjHP9/G,eAAyB+/G,GAE5B,OAAO58D,OAAO68D,OAAOC,UAAU,MAAOF,EAAU,QAAQ,EAAO,CAAE,aAAc,aAClF,CD8G8BE,CAAUnlH,KAAK8vB,MAChCs1F,QCrIPlgH,eAAuB8/G,GAC1B,MAAMK,EAAc,IAAIC,YAGxB,OAAOj9D,OAAO68D,OAAOK,WAAW,CAC5Bj4G,KAAM,OACN+qE,KAAMgtC,EAAYG,OAAO,oBACzBx1E,KAAM,UACN34B,KAAM,IAAI+vC,aACX49D,EAAU,IAChB,CD2H4BS,CAAQT,GAE7BhlH,KAAK8vB,KAAO,IAAI4G,WAAW0uF,GAE3B,MAAM9uG,EAAQtW,KAAKkkH,YAAYlF,sBAAsBh/G,KAAK8vB,MAE1D9vB,KAAK86G,QAAQH,OAAO36G,KAAKstG,WAAWyF,WAAY/yG,KAAK8vB,KAAMxZ,EAC9D,CAUDkuG,yBAAyBp4G,EAAIxE,EAAK0O,GAC9BvL,GAAOkT,MAAO,eAAc7R,uBAE5BpM,KAAK86G,QAAQH,OAAOvuG,EAAIxE,EAAK0O,EAChC,CASDmuG,uBAAuBlG,EAAKkB,GACxBz/G,KAAKstG,WAAWhL,aAAahgG,KAAK8nF,GAA+Cm0B,EAAKkB,EACzF,CAQDiF,2BAA2BnG,GACvBv+G,KAAKstG,WAAWhL,aAAahgG,KAAK8nF,GAAmDm0B,EACxF,CAUDoG,oCAAoCpG,EAAK9+B,EAAS37D,GAC9C9jB,KAAKstG,WAAWhL,aAAahgG,KAAK8nF,GAAmDm0B,EAAK9+B,EAAS37D,EACtG,CAQDghG,eACI,OAAOvlH,OAAO8oD,OAAOq8B,gBAAgB,IAAIhuD,WAAW,IACvD,EE9NE,MAAMgvF,GAKT9lH,YAAY0tG,GACR,MAAM,KAAEqY,EAAO,CAAC,GAAMrY,EAAWvmG,QAAQyH,OAEzCxO,KAAK4lH,mBAAqBD,EAAKE,qBAE3B7lH,KAAK4lH,mBACL5lH,KAAK8lH,YAAc,IAAIhK,GAA4BxO,GAEnDttG,KAAK8lH,YAAc,IAAI9B,GAAkB1W,EAEhD,CAQiB,mBAAC9+F,GACf,MAAM,KAAEm3G,EAAO,CAAC,GAAMn3G,EAEtB,SAAKm3G,EAAKE,uBAAyBzI,GAAWl8B,kBAIrC1yE,EAAOu3G,SAAWv3G,EAAOu3G,QAAQC,eAClCxlF,GAAQo4D,6BACJpqF,EAAOy3G,+BAAiCzlF,GAAQk4D,2BAC/D,CAOD2iB,YACI,OAAOr7G,KAAK8lH,YAAYzK,WAC3B,CAQe,iBAACluF,SACPntB,KAAK8lH,YAAYI,WAAW/4F,EACrC,CASDsuF,iBAAiBM,GACb/7G,KAAK8lH,YAAYnL,OAAOoB,EAC3B,CAQDqE,kBAAkBlQ,GAAa,MAC3B,UAAAlwG,KAAK8lH,YAAYxG,uBAAjB,SAAkCc,kBAAkBlQ,EACvD,CASDkP,wBAAwBlP,EAAamP,GAAY,MAC7C,UAAAr/G,KAAK8lH,YAAYxG,uBAAjB,SAAkCF,wBAAwBlP,EAAamP,EAC1E,4BC5EL,SAAS75C,GAAUnzD,EAAG3N,GAElB2N,EAAE3N,GAAO,IAAM,KAAS,GAAKA,EAAM,GACnC2N,EAA2B,IAAvB3N,EAAM,IAAM,GAAM,IAAWA,EAEjC,IAOII,EAAGqM,EAAGnF,EAAGw3D,EAAMC,EAAMC,EAAMC,EAAM8B,EAPjC9yC,EAAI,IAAI1nB,MAAM,IACdiD,EAAK,WACLD,GAAK,UACLD,GAAK,WACLzI,EAAK,UACLqI,GAAK,WAGT,IAAK9I,EAAI,EAAGA,EAAIuN,EAAE/N,OAAQQ,GAAK,GAAI,CAO/B,IANA0+D,EAAOt1D,EACPu1D,EAAOx1D,EACPy1D,EAAO11D,EACP21D,EAAOp+D,EACPkgE,EAAO73D,EAEFuD,EAAI,EAAGA,EAAI,GAAIA,IAEZwhB,EAAExhB,GADFA,EAAI,GACGkB,EAAEvN,EAAIqM,GAENu0D,GAAI/yC,EAAExhB,EAAE,GAAKwhB,EAAExhB,EAAE,GAAKwhB,EAAExhB,EAAE,IAAMwhB,EAAExhB,EAAE,IAAK,GAGpDnF,EAAI25D,GAASA,GAASD,GAAIx3D,EAAG,GAAI03D,GAAQz0D,EAAGlD,EAAGD,EAAGzI,IACrCogE,GAASA,GAAS/3D,EAAG+kB,EAAExhB,IAAK00D,GAAQ10D,KACjDvD,EAAIrI,EACJA,EAAIyI,EACJA,EAAI03D,GAAIz3D,EAAG,IACXA,EAAIC,EACJA,EAAIlC,EAGRkC,EAAIy3D,GAASz3D,EAAGs1D,GAChBv1D,EAAI03D,GAAS13D,EAAGw1D,GAChBz1D,EAAI23D,GAAS33D,EAAG01D,GAChBn+D,EAAIogE,GAASpgE,EAAGo+D,GAChB/1D,EAAI+3D,GAAS/3D,EAAG63D,EACnB,CACD,MAAO,CAACv3D,EAAGD,EAAGD,EAAGzI,EAAGqI,EACvB,CAMD,SAASg4D,GAAS55D,EAAGiC,EAAGD,EAAGzI,GACvB,OAAIyG,EAAI,GAAciC,EAAID,GAAQC,EAAK1I,EACnCyG,EAAI,GAAaiC,EAAID,EAAIzI,EACzByG,EAAI,GAAciC,EAAID,EAAMC,EAAI1I,EAAMyI,EAAIzI,EACvC0I,EAAID,EAAIzI,CAClB,CAKD,SAASsgE,GAAQ75D,GACb,OAAQA,EAAI,GAAO,WAAcA,EAAI,GAAO,WAAcA,EAAI,IAAO,YAAc,SACtF,CAyBD,SAAS25D,GAAStzD,EAAG0I,GACjB,IAAI+nD,GAAW,MAAJzwD,IAAmB,MAAJ0I,GAE1B,OADW1I,GAAK,KAAO0I,GAAK,KAAO+nD,GAAO,KAC3B,GAAa,MAANA,CACzB,CAKD,SAAS4C,GAAIz3C,EAAKi1C,GACd,OAAQj1C,GAAOi1C,EAAQj1C,IAAS,GAAKi1C,CACxC,CAMD,SAAS8C,GAASt3D,GAGd,IAFA,IAAIs0D,EAAM,GAEDl+D,EAAI,EAAGA,EAAiB,EAAb4J,EAAIpK,OAAYQ,GAAK,EACrCk+D,EAAIl+D,GAAG,KAFA,IAEO4J,EAAI2jB,WAAWvtB,EAAI,KAAe,GAAKA,EAAE,GAE3D,OAAOk+D,CACV,CAKD,SAASmD,GAAUrC,GAIf,IAHA,IAEIsC,EAASj1D,EADTzC,EAAM,GAED5J,EAAI,EAAGA,EAAsB,EAAlBg/D,EAASx/D,OAAYQ,GAAK,EAK1C,IAJAshE,GAAatC,EAASh/D,GAAO,IAAM,GAAK,EAAKA,EAAK,GAAM,MAAS,IACpDg/D,EAASh/D,EAAE,GAAK,IAAM,GAAK,GAAKA,EAAE,GAAG,GAAM,MAAS,EACrDg/D,EAASh/D,EAAE,GAAK,IAAM,GAAK,GAAKA,EAAE,GAAG,GAAM,IAElDqM,EAAI,EAAGA,EAAI,EAAGA,IACP,EAAJrM,EAAY,EAAJqM,EAA0B,GAAlB2yD,EAASx/D,OAAeoK,GAAO,IAC5CA,GAVL,mEAUgByoB,OAAQivC,GAAW,GAAG,EAAEj1D,GAAM,IAGxD,OAAOzC,CACV,CAkBD,MAAM43D,GAEc,SAAU54D,GAAK,OAAOy4D,GAASX,GAAUQ,GAASt4D,GAAc,EAAXA,EAAEpJ,QAAe,EC5JpF6hH,GAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,GAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,GAAkBn4G,EAAGD,GAC1B,IAAI0U,EAAM,EAMV,OAJAyjG,GAAgC3uG,MAAK7P,GACiC,KAAjE+a,EAAQzU,EAAEtG,GAAOqG,EAAErG,GAAS,EAAQsG,EAAEtG,GAAOqG,EAAErG,KAAU,KAGvD+a,CACV,CA8BM,SAAS2jG,GAAe/+G,GAC3B,MAAM4nE,EAAW,IAAI9gB,IACfk4D,EAAa,IAAIl4D,IAWvB,OATAlkB,KAAE5iC,GAAMkN,KAAK,kBACRq0B,MAAK,CAAC7tB,EAAGjI,IAAOm8D,EAASp/C,IAAI/c,EAAGo1B,aAAa,UAClD+B,KAAE5iC,GAAMkN,KAAK,mBACRq0B,MAAK,CAAC7tB,EAAGjI,IAAOuzG,EAAWx2F,IAAI,CAC5B/e,KAAMgC,EAAGo1B,aAAa,QACtB96B,KAAM0F,EAAGo1B,aAAa,QACtB+2C,SAAUnsE,EAAGo1B,aAAa,gBAG3B,CACH+mC,WACAo3C,aAEP,CAKc,MAAMC,WAAalN,GAO9B15G,cAAkE,IAAtDgf,EAAsD,uDAAzC,CAAC,EAAGrX,EAAqC,uDAA9B,6BAIhC,GAHA4wE,QACAn4E,KAAKuH,KAAOA,EACZvH,KAAKymH,MAAQ7nG,EAAW6nG,OACnBzmH,KAAKymH,MACN,MAAM,IAAIlkH,MACN,uDAIRvC,KAAK2S,QAAU,GACf3S,KAAK0mH,MAAQ,IAAIr4D,IAIjBruD,KAAK2mH,iBAAmB,IAAIt4D,IAE5B,MAAMu4D,EAAOhoG,EAAWgoG,KAExBA,EAAKvkH,YAAYumF,GAAW,WAAXA,iBACbinB,GAAQ7vG,KAAK6mH,aAAahX,KAC9B+W,EAAKvkH,YAAYumF,GAAW,WAAXA,mBACbinB,GAAQ7vG,KAAK8mH,gBAAgBjX,KACjCpwG,OAAO6I,KAAKs+G,EAAKF,OAAOtjH,SAAQgpE,IAC5BpsE,KAAK6mH,aAAaD,EAAKF,MAAMt6C,GAA7B,IAGJ7E,GAAAA,QAAAA,aAAqB,OAAQ,mCAC7BvnE,KAAKymH,MAAMrnC,WAAW7X,GAAAA,QAAAA,GAAAA,KACzB,CAYD6X,WAAWm4B,GAA2C,IAAlCnmE,EAAkC,wDAAlB21E,EAAkB,wDAClD/mH,KAAKymH,MAAMrnC,WAAWm4B,GACtBv3G,KAAKgnH,mBAEDD,IAAa/mH,KAAK2mH,iBAAiBziG,IAAIqzF,KACvCv3G,KAAK2mH,iBAAiB52F,IAAIwnF,GAC1Bv3G,KAAK0mH,MAAMtjH,SAAQysG,GAAQ7vG,KAAKinH,gCAAgCpX,MAGhEz+D,GACApxC,KAAKoxC,QAEZ,CAUDkuC,cAAci4B,GAA2C,IAAlCnmE,EAAkC,wDAAlB21E,EAAkB,wDACrD/mH,KAAKymH,MAAMnnC,cAAci4B,GACzBv3G,KAAKgnH,mBAEDD,GAAY/mH,KAAK2mH,iBAAiBziG,IAAIqzF,KACtCv3G,KAAK2mH,iBAAiBnnB,OAAO+X,GAC7Bv3G,KAAK0mH,MAAMtjH,SAAQysG,GAAQ7vG,KAAKinH,gCAAgCpX,MAGhEz+D,GACApxC,KAAKoxC,QAEZ,CAKDA,SACIpxC,KAAK0mH,MAAMtjH,SAAQysG,GAAQA,EAAKr8B,gBACnC,CAODyzC,gCAAgCpX,GAC5B,GAAmC,IAA/B7vG,KAAK2mH,iBAAiB75D,KACtB+iD,EAAKqX,mBAAmB,gBACrB,CACH,MAAM50E,EAAW,GAEjBtyC,KAAK2mH,iBAAiBvjH,SAAQ0X,IAC1Bw3B,EAAS1wC,KAAK,CACV,QAAW,UACXgsC,WAAY,CAAE,IAAO9yB,IAFzB,IAMJ+0F,EAAKsX,uBAAuB,WAAY,CAAE70E,YAC7C,CACJ,CAQD80E,yBAAyBh7C,EAAK7kE,GAAsB,IAAhBmsE,EAAgB,uDAAN,IAC1C,OAAO1zE,KAAKqnH,cAAcj7C,EAAK7kE,EAAMmsE,EACxC,CAUD2zC,cAAcj7C,EAAK7kE,EAAMmsE,GACrB,OAAO,IAAIt5D,SAAQ,CAACC,EAASC,IACzBta,KAAKymH,MAAMpvG,KAAK+0D,EAAK7kE,GAAMulB,IACvBzS,EAAQisG,GAAex5F,GAAvB,GACDxS,EAAQo5D,IAElB,CAODmzC,aAAahX,GACT7vG,KAAK0mH,MAAM32F,IAAI8/E,GACf7vG,KAAKsnH,wBAAwBzX,GAE7B7vG,KAAKinH,gCAAgCpX,EACxC,CAODiX,gBAAgBjX,GACZ7vG,KAAK0mH,MAAMlnB,OAAOqQ,EACrB,CAMDyX,wBAAwBzX,GACpBA,EAAKsX,uBAAuB,IAAK,CAC7Bv5E,WAAY,CACRy/B,MAAO9F,GAAAA,QAAAA,GAAAA,KACPv3B,KA3OH,QA4OGzoC,KAAMvH,KAAKuH,KACXi2E,IAAKx9E,KAAK2S,UAGrB,CAKD40G,wBAEIvnH,KAAK0mH,MAAMtjH,SAAQysG,GAAQ7vG,KAAKsnH,wBAAwBzX,IAC3D,CAKDmX,mBACIhnH,KAAK2S,QAtOb,SAAqB4zG,EAAYp3C,GAC7B,MAAMq4C,EAAmBjB,EAAWnyF,KAAKiyF,IAAmB90G,QACxD,CAACk2G,EAAkBrS,IAAc,GAC7B+Q,GAAoB50G,QAChB,CAACunB,EAAKlxB,EAAKo+E,IACPltD,GACe,IAARktD,EAAY,GAAK,MACjBovB,EAASxtG,GAAOwtG,EAASxtG,GAAO,KAC3C,QACH,IACH8/G,EAAiBv4C,EAAS/6C,OAAO7iB,QACnC,CAACunB,EAAKy+E,IAAa,GAAEz+E,EAAMy+E,MAAY,IAE3C,OAAOoQ,GAAcH,EAAmBE,EAC3C,CAyNaE,CAAY5nH,KAAKymH,MAAM7nC,YAAa5+E,KAAKymH,MAAM5nC,WAErD7+E,KAAKunH,uBACR,UC3QE,MAAMM,GAAqB,uBAE5B98G,IAASkC,EAAAA,EAAAA,kDAiDf,GAFoB,IAtCb,cAA0BqsG,GAI7B15G,cACIu4E,QACAn4E,KAAK8nH,SAAW,CACZC,UAAU,EAEjB,CASDC,kBAAkB,GAAc,IAAd,SAAED,GAAY,EAC5Bh9G,GAAOkT,MAAM,oBAAqB,CAAE8pG,aACpC/nH,KAAK8nH,SAAW,CACZC,UAAuB,IAAbA,GAEd/nH,KAAKsiG,aAAahgG,KAAKulH,GAAoB7nH,KAAK8nH,SACnD,CASDC,WACI,OAAkC,IAA3B/nH,KAAK8nH,SAASC,QACxB,GC1CCh9G,IAASkC,EAAAA,EAAAA,yCAQA,MAAMg7G,GAKjBroH,YAAYsoH,GACRloH,KAAKmoH,aAAeD,EAOpBloH,KAAKooH,cAAgB,EAErBpoH,KAAKqoH,iBAAcvhH,CACtB,CAMGwhH,iBACA,OAAOtoH,KAAKqoH,WACf,CAODE,WACIvoH,KAAKwoH,gBAELxoH,KAAKooH,eAAiB,EAEtBpoH,KAAKyoH,uBACCC,GAAAA,iBACEb,IACA,IAAkB,IAAjB,SAAEE,GAAe,EACVA,EACA/nH,KAAK2oH,kBAEL3oH,KAAKwoH,eACR,IAGbE,GAAAA,YAA0B1oH,KAAK2oH,iBAClC,CAODA,kBACQ3oH,KAAK4oH,iBAUT5oH,KAAKooH,cAAgBnkH,KAAKF,IAAI,EAAG/D,KAAKooH,eACtCpoH,KAAKqoH,YCxEN,SAAwBQ,GAAiC,IAA1BC,EAA0B,uDAAf,IAAK/lG,EAAU,uDAAH,EACzD,OAAO9e,KAAKC,MAAOD,KAAKE,UAAqC,IAAxBF,KAAK+zB,IAAIjV,EAAM8lG,GAAiBC,GAAaA,EACrF,CDsE0BC,CACH/oH,KAAKooH,cACmB,KAArBpoH,KAAKooH,cACpB,GAEJr9G,GAAOsM,KAAM,6CAA4CrX,KAAKsoH,gBAE9DtoH,KAAK4oH,eAAiBh/G,YAAW,IAAM5J,KAAKgpH,qBAAqBhpH,KAAKsoH,YACzE,CAQDE,gBACQxoH,KAAK4oH,iBACL79G,GAAOsM,KAAK,oCACZ1N,aAAa3J,KAAK4oH,gBAClB5oH,KAAK4oH,oBAAiB9hH,EACtB9G,KAAKqoH,iBAAcvhH,EAE1B,CAQDkiH,oBACI,MAAM,iBAAEC,GAAqBjpH,KAAKmoH,aAC5Be,EAAcD,EAAiBjoC,iBAGrC,IAAKkoC,EACD,OAGJn+G,GAAOsM,KAAK,wCAEZ,MAAM0I,EAAM,IAAImmE,IAAIlmF,KAAKmoH,aAAal5C,SACtC,IAAI,OAAEhrD,GAAWlE,EACjB,MAAMopG,EAAU,oBACVC,EAAWnlG,EAAO9c,MAAMgiH,GAG1BC,IAA+C,IAAnCA,EAAS3+G,QAAQy+G,GAC7BjlG,EAASA,EAAOhiB,QAAQknH,EAAU,KAAID,KAG9BE,IACRnlG,IAAmC,IAAzBA,EAAOxZ,QAAQ,KAAe,WAAUy+G,IAAiB,WAAUA,KAGjFnpG,EAAIkE,OAASA,EAEbjkB,KAAKmoH,aAAal5C,QAAUlvD,EAAIvO,WAEhCy3G,EAAiB33C,QACpB,CAQD/b,SACIv1D,KAAKwoH,gBACLxoH,KAAKooH,cAAgB,EACjBpoH,KAAKyoH,yBACLzoH,KAAKyoH,yBACLzoH,KAAKyoH,uBAAyB,KAErC,EE5JU,MAAMY,GAIjBzpH,cACII,KAAKspH,aAAe,KACpBtpH,KAAKupH,mBAAqB,IAC7B,CAQDC,cAAcC,EAAgBvB,GAAmB,WAC7C,MAAMwB,EAAmBxB,EAAkB/0C,SAE3C+0C,EAAkB/0C,SAAW,WAAa,2BAATzwE,EAAS,yBAATA,EAAS,gBACtC,MAAMinH,EAAajnH,EAAK,GAEpBinH,EAAWj8F,SAAS,aACpB,EAAK67F,mBAAqBI,GAK1BF,EAAex5C,YACf,EAAKq5C,aAAeroH,KAAKC,OAE7BwoH,EAAiB5mH,MAAMolH,EAAmBxlH,EAC7C,CACJ,CAODknH,uBACI,OAAO5pH,KAAKupH,kBACf,CAODM,0BACI,OAAO7pH,KAAKspH,aACNroH,KAAKC,MAAQlB,KAAKspH,aAClB,IACT,EChDL,SAASQ,KAA+C,IAAjB/mG,EAAiB,uDAAV,QAI1C,OAAO,cAAcA,EAIjBnjB,cACIu4E,SAAS,WACTn4E,KAAK4e,WAAa,IACrB,CAMDlF,KAAKkF,GACD5e,KAAK4e,WAAaA,CACrB,EAER,CAKD,SAAekrG,KAKFC,GACPD,GAA8BxQ,IC/B9BvuG,IAASkC,EAAAA,EAAAA,2CAwBA,MAAM+8G,WAA6BC,GAW9CrqH,YAAY,GAA+E,IAA/E,+BAAEsqH,EAAF,wBAAkCC,EAAlC,YAA2DC,EAAc,CAAC,GAAK,EACvFjyC,QACAn4E,KAAKqqH,YAAc,EACnBrqH,KAAKsqH,yBAA2BH,EAChCnqH,KAAKuqH,gCAAkCL,EAEvClqH,KAAKwqH,aAA+C,iBAAzBJ,EAAYppG,SAAwBopG,EAAYppG,SApCrD,IAqCtBhhB,KAAKyqH,YAA6C,iBAAxBL,EAAY12C,QAAuB02C,EAAY12C,QAhCpD,IAiCrB1zE,KAAK0qH,cAAiD,iBAA1BN,EAAYO,UAClCP,EAAYO,UA3BK,EA+BvB3qH,KAAK4qH,qBAAuB3mH,KAAKiqB,MAAM,KAASluB,KAAKwqH,cACrDxqH,KAAK6qH,kBAAoB,IAAI5/G,MAAMjL,KAAK4qH,qBAC3C,CAMDlxG,KAAKkF,GACDu5D,MAAMz+D,KAAKkF,GACX2oD,GAAAA,QAAAA,aAAqB,OAAQ,gBAChC,CAYDujD,KAAK1+C,EAAKqT,EAAS97E,EAAO+vE,GACtB1zE,KAAK+qH,6BAEL,MAAMl6C,GAAKnJ,EAAAA,GAAAA,KAAI,CACX12D,KAAM,MACN6K,GAAIuwD,IAGRyE,EAAG7iE,EAAE,OAAQ,CAAEq/D,MAAO9F,GAAAA,QAAAA,GAAAA,OACtBvnE,KAAK4e,WAAWosG,QAAQn6C,EAAI,CAAE6C,YACzB/4D,KAAK8kE,EAAS97E,EACtB,CAUDsnH,cAAcC,GACV3pG,cAAcvhB,KAAKqgG,YACnBrgG,KAAKqgG,WAAa9gG,OAAOsiB,aAAY,KAKjC,MAAM3gB,EAAMD,KAAKC,MAEjB,GAAIlB,KAAKuqH,kCAAoCrpH,EAAMlB,KAAKmrH,iBAOpD,OALAnrH,KAAK+qH,6BAEL/qH,KAAKmrH,iBAAmBjqH,OACxBlB,KAAKqqH,YAAc,GAKvBrqH,KAAK8qH,KAAKI,GAAW,KAIjBlrH,KAAKmrH,iBAAmBnrH,KAAKuqH,kCAAoCtpH,KAAKC,MAEtElB,KAAKqqH,YAAc,CAAnB,IACD1mH,IACC3D,KAAKqqH,aAAe,EACpB,MAAMe,EAAU,SAAOznH,EAAQ,QAAU,WAErC3D,KAAKqqH,aAAerqH,KAAK0qH,eACzBlnH,KAAAA,iBAAsC,IAAIjB,MAAM6oH,IAChDrgH,GAAOpH,MAAMynH,EAAQznH,GACrB3D,KAAKsqH,0BAA4BtqH,KAAKsqH,4BAEtCv/G,GAAOuY,KAAK8nG,EAAQznH,EACvB,GACF3D,KAAKyqH,YAlBR,GAmBDzqH,KAAKwqH,cACRz/G,GAAOsM,KAAM,iCAAgCrX,KAAKwqH,kBACrD,CAKDa,eACQrrH,KAAKqgG,aACL9gG,OAAOgiB,cAAcvhB,KAAKqgG,YAC1BrgG,KAAKqgG,WAAa,KAClBrgG,KAAKqqH,YAAc,EACnBt/G,GAAOsM,KAAK,yBAEnB,CAMD0zG,6BACI/qH,KAAK6qH,kBAAkBjpH,MAAK,IAAIX,MAAO4rB,WAGnC7sB,KAAK6qH,kBAAkBvmH,OAAStE,KAAK4qH,sBACrC5qH,KAAK6qH,kBAAkBr8F,OAE9B,CAUD88F,qBACI,MAAMC,EAAgBvrH,KAAK6qH,kBAAkB3/G,QAM7CqgH,EAAc3pH,MAAK,IAAIX,MAAO4rB,WAE9B,IAAI2+F,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAcnoH,SAAQwK,IAClB,MAAM89G,EAAkB99G,EAAI69G,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAa79G,CAAb,IAMJ49G,GAAexrH,KAAKwqH,aAGbvmH,KAAKD,IAAIwnH,EAAa,EAChC,EClML,MAAMzgH,IAASkC,EAAAA,EAAAA,6CAKA,MAAM0+G,WAAuBrS,GAM7BtmB,oBACP,MAAO,CACH44B,oBAAqB,sBACrBC,mBAAoB,qBAE3B,CAOU1iD,oBACP,OAAO5B,GAAAA,QAAAA,MACV,CAkBD3nE,YAAY,GAAmG,IAAnG,sBAAEksH,EAAF,mBAAyBC,EAAzB,sBAA6CC,EAA7C,WAAoEC,EAApE,MAAgFC,EAAhF,SAAuFC,GAAY,EAC3Gh0C,QACAn4E,KAAKosH,SAAW,CACZN,2BAAwD,IAA1BA,GAA+CA,EAC7E1B,YAAa+B,EACbD,QACAH,wBAAkD,IAAvBA,EAAqC,IAAY77G,OAAO67G,GACnFC,yBAGJhsH,KAAKmoH,aAAe,IAAI5gD,GAAAA,QAAAA,WAAmB0kD,GAC3CjsH,KAAKqsH,eAAiBJ,EAAWK,WAAW,QAAUL,EAAWK,WAAW,QAG5EtsH,KAAKmoH,aAAa13C,WAAa,EAE/BzwE,KAAKusH,iBAAmB,IAAIC,GAC5BxsH,KAAKusH,iBAAiB/C,cAAcxpH,KAAMA,KAAKmoH,cAE/CnoH,KAAKysH,YAAc,IAAIxE,GAAWjoH,KAAKmoH,cAcvCnoH,KAAK0sH,aAAe,GAIpB1sH,KAAKmtE,oBACD,OACA,IAAI68C,GAAqB,CACrBE,+BAAgC,IAAMlqH,KAAK6pH,0BAC3CM,wBAAyB,IAAMnqH,KAAK2sH,gCACpCvC,YAAa+B,KAIrBnsH,KAAK4sH,uBAAwB,CAChC,CAOG38C,gBACA,MAAM48C,EAAY7sH,KAAKmoH,cAAgBnoH,KAAKmoH,aAAap3C,QAAU/wE,KAAKmoH,aAAap3C,OAAOtzD,OAE5F,OAAQzd,KAAK4yG,UAAYrrC,GAAAA,QAAAA,OAAAA,WAA4BvnE,KAAK4yG,UAAYrrC,GAAAA,QAAAA,OAAAA,aAC7DvnE,KAAK8sH,kBAAqBD,GAAaA,EAAUhuG,aAAeC,UAAUC,KACtF,CAOG0nG,YACA,OAAOzmH,KAAKmoH,aAAa1B,KAC5B,CAOGv2C,oBACA,OAA2C,IAApClwE,KAAKmoH,aAAaj4C,aAC5B,CAOGjL,aACA,OAAOjlE,KAAKmoH,aAAaljD,MAC5B,CAOG6nD,uBACA,OAAO9sH,KAAKqsH,cACf,CAOGjgD,UACA,OAAOpsE,KAAKmoH,aAAa/7C,GAC5B,CAOGiO,0BACA,OAAOr6E,KAAKmoH,aAAap3C,QAAU/wE,KAAKmoH,aAAap3C,OAAOsJ,mBAC/D,CAOGtvE,aACA,OAAO/K,KAAKmoH,aAAap9G,MAC5B,CAOGhE,cACA,OAAO/G,KAAKmoH,aAAaphH,OAC5B,CAKGgmH,iBAAa,MACb,OAAO,UAAA/sH,KAAKosH,SAAShC,mBAAd,eAA2BnlD,SAAUjlE,KAAKilE,MACpD,CAOGgK,cACA,OAAOjvE,KAAKmoH,aAAal5C,OAC5B,CAMGi9C,UAAMrkH,GACN7H,KAAKosH,SAASF,MAAQrkH,EAGlB7H,KAAK4sH,uBACL5sH,KAAKgtH,wBAEZ,CAOG33C,aACA,OAAOr1E,KAAK4yG,OACf,CASDzlC,oBAAoB7/D,EAAMioE,GACtBv1E,KAAKsN,GAAQioE,EACbA,EAAO77D,KAAK1Z,KACf,CAODyD,aACI,OAAOzD,KAAKmoH,aAAa1kH,cAAc,UAC1C,CAODswE,gBACI/zE,KAAKmoH,aAAap0C,iBAAiB,UACtC,CASDzB,OAAOlG,EAAKmG,EAAKC,EAAKZ,GAAmB,2BAANlvE,EAAM,iCAANA,EAAM,kBACrC1C,KAAKmoH,aAAa71C,OAAOlG,EAAKmG,EAAKC,EAAKxyE,KAAKitH,qBAAqBpqH,KAAK7C,KAAM4xE,MAAclvE,EAC9F,CAQDqW,QAAQqzD,EAAKyF,EAAMD,GAAmB,2BAANlvE,EAAM,iCAANA,EAAM,kBAClC1C,KAAKmoH,aAAapvG,QAAQqzD,EAAKyF,EAAM7xE,KAAKitH,qBAAqBpqH,KAAK7C,KAAM4xE,MAAclvE,EAC3F,CAaDuqH,qBAAqBC,EAAgB73C,GACjCr1E,KAAK4yG,QAAUv9B,EAEf,IAAI83C,GAAgB,EAE2D,MAwB/E,GAxBI93C,IAAW9N,GAAAA,QAAAA,OAAAA,WAA4B8N,IAAW9N,GAAAA,QAAAA,OAAAA,UAClDvnE,KAAKotH,2BAIDptH,KAAKqsH,gBAAkBrsH,KAAK4sH,uBAC5B5sH,KAAKqtH,0BAETrtH,KAAK4sH,uBAAwB,EAE7B5sH,KAAKgtH,yBACLhtH,KAAKstH,sBACLttH,KAAKysH,YAAYl3D,SACjBv1D,KAAK8qH,KAAKG,eAAc,UAAAjrH,KAAKosH,SAAShC,mBAAd,eAA2BnlD,SAAUjlE,KAAKilE,SAC3DoQ,IAAW9N,GAAAA,QAAAA,OAAAA,eAClBvnE,KAAK8qH,KAAKO,eAGV8B,EAAgBntH,KAAKutH,yBAChBJ,GACDxjH,aAAa3J,KAAKwtH,gBAIrBL,EAAe,4BA7BwBzqH,EA6BxB,iCA7BwBA,EA6BxB,kBAChBwqH,EAAe73C,KAAW3yE,GAC1B1C,KAAKsiG,aAAahgG,KAAKqpH,GAAe34B,OAAO44B,oBAAqBv2C,EACrE,CACJ,CAODo4C,oBACI,IAAK,MAAMC,KAAY1tH,KAAK0sH,aACxBgB,EAASpzG,OAAO,IAAI/X,MAAM,eAE9BvC,KAAK0sH,aAAe,EACvB,CAODiB,iBACQ3tH,KAAKmoH,cAAgBnoH,KAAKmoH,aAAap3C,SACvC/wE,KAAKmoH,aAAap3C,OAAOmM,eACzBl9E,KAAKmoH,aAAap3C,OAAOsM,SAAS,MAEzC,CAODrkE,aACIhZ,KAAKysH,YAAYl3D,SACjB5rD,aAAa3J,KAAKwtH,cAClBxtH,KAAKytH,oBACLztH,KAAKmoH,aAAanvG,cAAc,UACnC,CAODnP,QACI7J,KAAKmoH,aAAat+G,SAAS,UAC9B,CAODggH,0BACI,OAAO7pH,KAAKusH,iBAAiB1C,yBAChC,CAODD,uBACI,OAAO5pH,KAAKusH,iBAAiB3C,sBAChC,CAODwD,2BACI,IAAKptH,KAAKosH,SAASN,sBAEf,OAGJ,MAAM,iBAAE7C,GAAqBjpH,KAAKmoH,aAE7BnoH,KAAK8sH,iBAEE7D,EAEAA,EAAiB/nC,cAEjB+nC,EAAiBjoC,mBACzBj2E,GAAOsM,KAAK,uCACZ4xG,EAAiBnoC,QAAoB,IAHrC/1E,GAAOuY,KAAK,sEAFZvY,GAAOuY,KAAK,+EAFZvY,GAAOuY,KAAK,wDASnB,CAQD0pG,yBACI,MAAM,mBAAEjB,GAAuB/rH,KAAKosH,SAEpC,GAAIpsH,KAAKqsH,gBAAkBN,EAAqB,EAAG,CAC/C/rH,KAAKwtH,cAAgBziH,GAAOsM,KAAM,kCAAiC00G,OACnEpiH,aAAa3J,KAAKwtH,cAElB,MAAMI,EAAgC7B,EAAmD,GAAhB9nH,KAAKE,SAAgB,IAE9F4G,GAAOkT,MAAO,2CAA0C2vG,OAExD5tH,KAAKwtH,aAAe5jH,YAChB,IAAM5J,KAAKqtH,0BACN1yG,MAAK,IAAM3a,KAAKgtH,4BACrBY,EACP,CACJ,CAQDP,0BACI,MAAM,MAAEnB,EAAF,sBAASF,GAA0BhsH,KAAKosH,SACxCrsG,EAAMisG,GACNhsH,KAAKivE,QAAQhtE,QAAQ,SAAU,YAAYA,QAAQ,QAAS,WAElE,OAAOquB,MAAMvQ,GACRpF,MAAKmS,IAGF,IAAKo/F,EACD,OAGJ,MAAM2B,EAAgB/gG,EAAS4D,QAAQvM,IAAI,iBAEvC0pG,IAAkB3B,IAClBnhH,GAAOpH,MACF,oCAAmCuoH,QAAY2B,KACpD7tH,KAAKsiG,aAAahgG,KAAKqpH,GAAe34B,OAAO64B,oBAChD,IAEJjoG,OAAMjgB,IACHoH,GAAOpH,MAAO,wCAAuCoc,IAAO,CAAEpc,SAA9D,GAEX,CAQD2pH,sBACI,IAAK,MAAMI,KAAY1tH,KAAK0sH,aACxB,GAAIgB,EAAS78C,GAAI,CACblnE,aAAa+jH,EAASh6C,SAEtB,MAAMo6C,EAAW7sH,KAAKC,MAAQwsH,EAASjkH,MAEvCzJ,KAAKg0E,OACD05C,EAAS78C,IACThsE,GAAU6oH,EAASrzG,QAAQxV,KAC3BlB,GAAS+pH,EAASpzG,OAAO3W,IACzBmqH,EACP,CAGL9tH,KAAK0sH,aAAe,EACvB,CAQDr7F,KAAKuiD,GACoB,UAArB,IAAK5zE,KAAKiwE,UAIN,MAHAllE,GAAOpH,MAAO,qDAAoD3D,KAAK4yG,iBACnE5yG,KAAK8sH,iBAAL,UAAwB9sH,KAAKmoH,oBAA7B,iBAAwB,EAAmBp3C,cAA3C,iBAAwB,EAA2BtzD,cAAnD,aAAwB,EAAmCoB,WAAa,UAEtE,IAAItc,MAAM,iBAEpBvC,KAAKmoH,aAAa92F,KAAKuiD,EAC1B,CAYDI,OAAOz7B,EAAMq5B,EAAU6B,EAASC,GAC5B,GAAK1zE,KAAKiwE,UAMV,OAAOjwE,KAAKmoH,aAAan0C,OAAOz7B,EAAMq5B,EAAU6B,EAASC,GALrDD,EAAQ,gBAMf,CAUDu3C,QAAQn6C,EAAD,GAAkB,IAAb,QAAE6C,GAAW,EACrB,OAAO,IAAIt5D,SAAQ,CAACC,EAASC,KACzB,GAAIta,KAAKiwE,UACLjwE,KAAKg0E,OACDnD,GACAhsE,GAAUwV,EAAQxV,KAClBlB,GAAS2W,EAAO3W,IAChB+vE,OACD,CACH,MAAMg6C,EAAW,CACb78C,KACAx2D,UACAC,SACA7Q,MAAOxI,KAAKC,MACZwyE,QAAS9pE,YAAW,KAEhB8jH,EAAS78C,QAAK/pE,EAGdwT,OAAOxT,EAAP,GACD4sE,IAGP1zE,KAAK0sH,aAAa9qH,KAAK8rH,EAC1B,IAER,CAODf,gCACQ3sH,KAAK8sH,mBACL/hH,GAAOuY,KAAK,yDACZtjB,KAAK2tH,iBAEZ,CAaDn6C,aAAaj7B,EAAMq5B,EAAU6B,EAASC,GAC7B1zE,KAAKiwE,UAKVjwE,KAAKmoH,aAAa30C,aAAaj7B,EAAMq5B,EAAU6B,EAASC,GAJpDD,EAAQ,gBAKf,CAODs6C,wBACI,IAAK/wG,UAAUgxG,YAAchuH,KAAKmoH,aAAaj4C,gBAAkBlwE,KAAKmoH,aAAal4C,UAC/E,OAAO,EAGXjwE,KAAKmoH,aAAa/1C,qBAAqB7K,GAAAA,QAAAA,OAAAA,eACvCvnE,KAAKmoH,aAAaj4C,eAAgB,EAElC,MAAMr1D,EAAO7a,KAAKmoH,aAAap3C,OAAOuJ,aACjChT,MAAM,CACHt2D,KAAM,cAER+jE,GAAOpN,EAAAA,GAAAA,OAAM,CACf0F,MAAO9F,GAAAA,QAAAA,GAAAA,OACPv2D,KAAM,gBAGV6J,EAAK4yD,MAAMsH,EAAKjI,QAEhB,MAAMnqD,EAAM3F,UAAUgxG,YACoB,IAAtChuH,KAAKivE,QAAQxkE,QAAQ,YAAsB,SAAQzK,KAAKivE,UAAYjvE,KAAKivE,QACzE1H,GAAAA,QAAAA,UAAkB1sD,EAAKiyD,SAO3B,OALA/hE,GAAOsM,KAAM,wCAAuCsL,KAEpD3iB,KAAKmoH,aAAap3C,OAAOoE,oBACzBn1E,KAAKmoH,aAAa/yC,iBAEX,CACV,CAUDm4C,yBACI,MAAM,iBAAEtE,GAAqBjpH,KAAKmoH,aAGlC,SAFoBc,IAAoBA,EAAiBjoC,mBAGrDhhF,KAAKysH,YAAYlE,WAEV,GAId,ECxoBE,IAAK0F,aAAAA,GAAAA,EAAAA,GAAAA,KAAAA,EAAAA,IAAAA,OAAAA,KAAAA,GAAAA,CAAAA,IAaL,MAAMC,GAAKD,GAAyBC,GAC9BC,GAAMF,GAAyBE,ICRtCpjH,IAASkC,EAAAA,EAAAA,2CAKA,MAAMmhH,GAOjBxuH,YAAYiwG,GACR7vG,KAAKquH,MAAQxe,EAAKxE,KAElBrrG,KAAKsuH,UAAYze,EAEjB7vG,KAAKuuH,yBAA2B,CAC5B,CAAC7qB,GAAU8M,QAAQ,EACnB,CAAC9M,GAAUgH,QAAQ,GAGvB1qG,KAAKwuH,gBAAkB,GACvBxuH,KAAKyuH,gBAAkB,GAEvBzuH,KAAK+9E,WAAa/9E,KAAK+9E,WAAWl7E,KAAK7C,MACvCA,KAAKquH,MAAMhsH,YAAYumF,GAAW,WAAXA,uBAAmC5oF,KAAK+9E,WAClE,CAKDqc,UACIp6F,KAAKquH,MAAM1pF,eAAeikD,GAAW,WAAXA,uBAAmC5oF,KAAK+9E,WACrE,CAODmD,cACI,OAAO7gE,QAAQrgB,KAAKquH,MAAMK,6BAC7B,CAKD5tC,OAAO36C,EAAO2sD,GACV,IAAK9yF,KAAKkhF,gBAAkBlhF,KAAKsuH,UAAUvc,cAIvC,YAHAhnG,GAAOpH,MAAO,iBAAgBwiC,6BAAiCnmC,KAAKkhF,6CACpDlhF,KAAKsuH,UAAUvc,iBAKnC,GAAI5rE,IAAUnmC,KAAKuuH,yBAAyBz7B,GAGxC,YAFA/nF,GAAOuY,KAAM,+BAA8B6iB,mBAAuB2sD,KAMtE,MAAM5pF,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKquH,MAAMK,+BAElCxlH,EAAI8E,EAAE,gBAAiB,CACnB8yE,OAAQ36C,EACR2sD,cACDvlB,KAEHvtE,KAAKquH,MAAMzvG,WAAWyS,KAAKnoB,EAC9B,CAKDylH,QAAQ77B,EAAW1mB,GACf,IAAKpsE,KAAKkhF,gBAAkBlhF,KAAKsuH,UAAUvc,cAIvC,YAHAhnG,GAAOpH,MAAO,6CAA4C3D,KAAKkhF,6CAC/ClhF,KAAKsuH,UAAUvc,iBAMnC,MAAM7oG,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKquH,MAAMK,+BAElCxlH,EAAI8E,EAAE,gBAAiB,CACnB8kF,YACA87B,eAAgBxiD,IAAOmB,KAE3BvtE,KAAKquH,MAAMzvG,WAAWyS,KAAKnoB,EAC9B,CAKDoR,OAAOw4E,EAAW1mB,GACd,IAAKpsE,KAAKkhF,gBAAkBlhF,KAAKsuH,UAAUvc,cAIvC,YAHAhnG,GAAOpH,MAAO,4CAA2C3D,KAAKkhF,6CAC9ClhF,KAAKsuH,UAAUvc,iBAMnC,MAAM7oG,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKquH,MAAMK,+BAElCxlH,EAAI8E,EAAE,gBAAiB,CACnB8kF,YACA+7B,eAAgBziD,IACjBmB,KAEHvtE,KAAKquH,MAAMzvG,WAAWyS,KAAKnoB,EAC9B,CAOD60E,WAAW/2E,GACP,MAAM,QAAE8nH,EAASh8B,UAAWhiF,EAAtB,QAA6Bqc,EAA7B,SAAsC4hG,EAAtC,MAAgDxe,EAAOye,WAAYC,GAAkBjoH,EAE3F,GAAIioH,EAAe,CACf,MAAMC,EAAUp+G,IAAU4yF,GAAU8M,MAC9BxwG,KAAKwuH,gBACLxuH,KAAKyuH,gBACLv2C,EAAUjtE,MAAMgJ,QAAQg7G,EAAcn+G,IAAUm+G,EAAcn+G,GAAS,GAEzEg+G,EACAI,EAAQn+G,QAAOsB,IAAM6lE,EAAQxqD,SAASrb,KACjCjP,SAAQgpE,GAAOpsE,KAAKquH,MAAM/rB,aACtBhgG,KAAKsmF,GAAW,WAAXA,mCAA+C93E,EAAOs7D,KAEpE8L,EAAQnnE,QAAOsB,IAAM68G,EAAQxhG,SAASrb,KACjCjP,SAAQgpE,GAAOpsE,KAAKquH,MAAM/rB,aACtBhgG,KAAKsmF,GAAW,WAAXA,mCAA+C93E,EAAOs7D,KAGpEt7D,IAAU4yF,GAAU8M,MACpBxwG,KAAKwuH,gBAAkBt2C,EAEvBl4E,KAAKyuH,gBAAkBv2C,CAE9B,WAAsBpxE,IAAZqmB,GAAyBntB,KAAKuuH,yBAAyBz9G,KAAWqc,GACzEntB,KAAKuuH,yBAAyBz9G,GAASqc,EAEvCntB,KAAKquH,MAAM/rB,aAAahgG,KAAKsmF,GAAW,WAAXA,sBAAkCz7D,EAASrc,EAAOy/F,IACxEue,EACP9uH,KAAKquH,MAAM/rB,aAAahgG,KAAKsmF,GAAW,WAAXA,uBAAmC93E,GACzDi+G,GACP/uH,KAAKquH,MAAM/rB,aAAahgG,KAAKsmF,GAAW,WAAXA,uBAAmC93E,EAEvE,EC3JL,MAAMq+G,GAAc,0BACdC,GAAwB,CAC1BC,IAAM,GAAEF,SACRG,aAAe,GAAEH,kBACjBI,OAAS,GAAEJ,YACXK,OAAS,GAAEL,aAETM,GACa,GAAEN,kBADfM,GAEO,GAAEN,YAGTpkH,IAASkC,EAAAA,EAAAA,4CAKA,MAAMyiH,GAOjB9vH,YAAYiwG,GACR7vG,KAAK6vG,KAAOA,EAEZ7vG,KAAK2vH,gBAAkB3vH,KAAK2vH,gBAAgB9sH,KAAK7C,MACjDA,KAAK6vG,KAAKxE,KAAKhpG,YAAYumF,GAAW,WAAXA,qBAAiC5oF,KAAK2vH,iBAEjE3vH,KAAK4vH,OAAS,CAAC,CAClB,CAKDx1B,UACIp6F,KAAK6vG,KAAKxE,KAAK1mE,eAAeikD,GAAW,WAAXA,qBAAiC5oF,KAAK2vH,gBACvE,CAODE,mBAAmBC,GACf,IAAK9vH,KAAKkhF,gBAAkBlhF,KAAK6vG,KAAKkC,cAIlC,YAHAhnG,GAAOpH,MAAO,2CAA0C3D,KAAKkhF,6CAC7ClhF,KAAK6vG,KAAKkC,iBAK9B,MAAMjuF,EAAU,CACZ9S,KAAMo+G,GAAsBC,IAC5BS,WAGJ9vH,KAAK++G,aAAaj7F,EACrB,CAODisG,mBAAmBC,GACf,IAAKhwH,KAAKkhF,gBAAkBlhF,KAAK6vG,KAAKkC,cAIlC,YAHAhnG,GAAOpH,MAAO,2CAA0C3D,KAAKkhF,6CAC7ClhF,KAAK6vG,KAAKkC,iBAK9B,MAAMjuF,EAAU,CACZ9S,KAAMo+G,GAAsBG,OAC5BS,mBAGJhwH,KAAK++G,aAAaj7F,EACrB,CAQDmsG,mBAAmBD,EAAiBF,GAChC,IAAK9vH,KAAKkhF,gBAAkBlhF,KAAK6vG,KAAKkC,cAIlC,YAHAhnG,GAAOpH,MAAO,2CAA0C3D,KAAKkhF,6CAC7ClhF,KAAK6vG,KAAKkC,iBAK9B,MAAMjuF,EAAU,CACZ9S,KAAMo+G,GAAsBI,OAC5BQ,kBACAF,WAGJ9vH,KAAK++G,aAAaj7F,EACrB,CAQDosG,sBAAsBC,EAAgB5hB,GAClC,IAAKvuG,KAAKkhF,gBAAkBlhF,KAAK6vG,KAAKkC,cAIlC,YAHAhnG,GAAOpH,MAAO,+CAA8C3D,KAAKkhF,6CACjDlhF,KAAK6vG,KAAKkC,iBAK9B,MAAMjuF,EAAU,CACZ9S,KAAMo+G,GAAsBE,aAC5Ba,iBACA5hB,WAGJvuG,KAAK++G,aAAaj7F,EACrB,CAQDssG,mBAAmB7Y,GACf,OAAOl3F,SAASrgB,KAAK6vG,KAAKxE,KAAKglB,uBAAyB,CAAC,GAAG9Y,GAC/D,CAKDr2B,cACI,OAAO7gE,QAAQrgB,KAAKswH,sBACvB,CAODA,sBACI,OAAOtwH,KAAK6vG,KAAKxE,KAAKklB,6BACzB,CAODC,mBAAmBC,GACfzwH,KAAK0wH,gBAAkBD,CAC1B,CAODA,iBACI,YAAoC,IAAzBzwH,KAAK0wH,gBACL1wH,KAAK0wH,gBAITnpD,GAAAA,QAAAA,iBAAyBvnE,KAAK6vG,KAAK8gB,aAAe3wH,KAAKswH,qBACjE,CAQDM,gBAAgBxkD,GACZpsE,KAAK6wH,aAAezkD,CACvB,CAOD0kD,iBACI,OAAO9wH,KAAK6wH,YACf,CAODlB,gBAAgB9c,GACZ,OAAQA,EAAQvvG,OAChB,KAAKmsH,GACDzvH,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,4BAAwCiqB,EAAQtE,SAC5E,MACJ,KAAKkhB,GAA6B,CAC9B,MAAMsB,EAAkB/wH,KAAKgxH,qBAAqBne,GAElD7yG,KAAK4vH,OAASmB,EAAgBrK,MAC9B1mH,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,uBAAmCmoC,GAC/D,KACH,EAEJ,CAQDC,qBAAqBne,GACjB,MAAMoe,EAAejxH,KAAK6vG,KAAK9oG,QAAQkqH,cACjC,MAAEvK,GAAU7T,EACZqe,EAAgB,CAAC,EAkBvB,OAhBAzxH,OAAO0gB,QAAQumG,GAAOtjH,SAAQ,IAAmB,IAAhBwE,EAAKioG,GAAW,EAC7C,MAAM,aAAEshB,EAAe,CAAC,GAAMthB,EACxBuhB,EAAuB,CAAC,EAE9B3xH,OAAO0gB,QAAQgxG,GAAc/tH,SAAQ,IAAwB,IAArBkc,EAAG4wF,GAAkB,EACrD3oC,GAAAA,QAAAA,iBAAyB2oC,EAAY9jC,OAAS6kD,IAC9CG,EAAqB9xG,GAAK4wF,EAC7B,IAGLghB,EAActpH,GAAO,IACdioG,EACHshB,aAAcC,EAFlB,IAMG,IACAve,EACH6T,MAAOwK,EAEd,CAODnS,aAAaj7F,GACT,MAAM5a,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKswH,wBAE5BpnH,EAAI8E,EAAE,iBAAkB8V,GAASypD,KAEjCvtE,KAAK6vG,KAAKxE,KAAKzsF,WAAWyS,KAAKnoB,EAClC,ECpQL,MAAM6B,IAASkC,EAAAA,EAAAA,oCAOTokH,GAAgB,QAMP,MAAMC,GAOjB1xH,YAAYiwG,GACR7vG,KAAKqrG,KAAOwE,EAAKxE,KACjBrrG,KAAKuxH,SAAW1hB,EAEhB,MAAM2hB,EAAqBxxH,KAAKyxH,oBAAoB5uH,KAAK7C,MAEzDA,KAAKuxH,SAASrsG,iBACV0jE,GAAW,WAAXA,mBACA4oC,GAEJxxH,KAAKuxH,SAASrsG,iBACV0jE,GAAW,WAAXA,yBACA4oC,GAEJxxH,KAAKuxH,SAASrsG,iBACV0jE,GAAW,WAAXA,iCACAxc,IACIpsE,KAAK0xH,aAAetlD,CAApB,GAEX,CAOD8U,cACI,OAAOlhF,KAAKqrG,KAAKsmB,cACpB,CAOD7wC,SACI,OAAK9gF,KAAKkhF,cAIH,IAAI9mE,SAAQ,CAACC,EAASC,KACzBta,KAAKuxH,SAASK,gBAAe,EAAMv3G,EAASC,EAA5C,IAJOF,QAAQE,OAAO,IAAI/X,MAAM,wBAMvC,CAODgxC,UACSvzC,KAAKkhF,eAAkBlhF,KAAKuxH,SAASxf,eAC9B/xG,KAAK6xH,WAAc7xH,KAAKuxH,SAASO,oBAI7C9xH,KAAKuxH,SAASK,gBAAe,EAChC,CAQDxO,YAAYt/F,GACJ9jB,KAAK6xH,WACL7xH,KAAK6xH,UAAUzO,YAAYn8G,KAAK8B,UAAU+a,GAAU,eAE3D,CASDiuG,mBAAmB3lH,EAAI0X,GACf9jB,KAAK6xH,WACL7xH,KAAK6xH,UAAUE,mBAAmB3lH,EAAInF,KAAK8B,UAAU+a,GAAU,eAEtE,CAQDkuG,aACI,GAAIhyH,KAAK6xH,UACL,OAAOtqD,GAAAA,QAAAA,mBAA2BvnE,KAAK6xH,UAAUlB,UAExD,CASDsB,mBAAmBh5G,GACf,GAAIjZ,KAAK6xH,UAAW,CAChB,MAAMxuH,EAAU,CAACkkG,EAAezjF,KAC5B7K,EAAS6K,EAASyjD,GAAAA,QAAAA,mBAA2BggC,GAA7C,EAKJ,OAFAvnG,KAAK6xH,UAAU9sF,GAAG6jD,GAAW,WAAXA,sBAAkCvlF,GAE7CA,CACV,CACJ,CAQD6uH,qBAAqB7uH,GACbrD,KAAK6xH,WACL7xH,KAAK6xH,UAAUjqF,IAAIghD,GAAW,WAAXA,sBAAkCvlF,EAE5D,CAOD8uH,QACI,OAAInyH,KAAK6xH,UACE7xH,KAAK6xH,UAAUM,QACjBx3G,MAAK,KACF3a,KAAK6xH,eAAY/qH,EACjBiE,GAAOsM,KAAK,mBAAZ,IAEHuM,OAAM,SAGRxJ,QAAQE,OACP,IAAI/X,MAAM,mCACrB,CAOD6vH,gBAAgBhmD,GACZpsE,KAAK0xH,aAAetlD,CACvB,CAMDqlD,sBACSzxH,KAAKkhF,eAIUlhF,KAAKuxH,SAASc,QAAUryH,KAAKuxH,SAASxf,eAEvC/xG,KAAKuxH,SAASO,qBAAuB9xH,KAAK6xH,WAEzD7xH,KAAKiT,OACA0H,MAAK,IAAM5P,GAAOsM,KAAK,uBACvBuM,OAAMhW,GAAK7C,GAAOpH,MAAM,uBAAwBiK,IAE5D,CASDqF,KAAKnT,EAAawyH,GACd,MAAMvgB,EAAc/xG,KAAKuxH,SAASc,QAAUryH,KAAKuxH,SAASxf,cAE1D,IAAK/xG,KAAK0xH,aACN,OAAOt3G,QAAQE,OAAO,IAAI/X,MAAM,kDAGpC,MAAMR,EAAWwlE,GAAAA,QAAAA,eAAuBvnE,KAAK0xH,cACvCa,EAAehrD,GAAAA,QAAAA,iBAAyBvnE,KAAK0xH,cAuHnD,OArHA1xH,KAAK6xH,UAAY7xH,KAAKqrG,KAAKmnB,WACvBzwH,EAAU,CACNwwH,eACAE,kBAAkB,EAClBC,cAAc,EACdC,aAAa,IAIjB7yH,GAEAE,KAAK6xH,UAAU1K,uBAAuB,OAAQ,CAC1Cv5E,WAAY,CAAEy/B,MAAO,mCACrBxlE,MAAO/H,IAIXiyG,GACA/xG,KAAK6xH,UAAU/e,oBAAoBue,IAAe,CAAC9pH,EAAMuU,KACrD9b,KAAKuxH,SAASjvB,aAAahgG,KAAKsmF,GAAW,WAAXA,yBAAqC9sE,EAAM,CAAEw2G,MAAO/qH,EAAKM,OAAzF,IAEJ7H,KAAK6xH,UAAU3sG,iBACX0jE,GAAW,WAAXA,mBAEA,CAAC9sE,EAAM42F,EAAM51C,EAAM81D,EAAgBzd,EAAS9/B,EAAQ+/B,EAAUyd,EAASzmD,KAEnE,IAAI3sE,OAAOiW,OAAO1V,KAAKuxH,SAASuB,SAASr+G,MAAK9I,GAAKA,EAAEygE,MAAQA,IAA7D,CAKA,IAAK,MAAMyjC,KAAQpwG,OAAOiW,OAAO1V,KAAKuxH,SAASwB,mBAAmBnD,QAC9D,GAAInwH,OAAOiW,OAAOm6F,EAAKshB,cAAc18G,MAAK5G,GAAKA,EAAEu+D,MAAQA,IACrD,OAMRpsE,KAAKuxH,SAASjvB,aAAahgG,KACvBsmF,GAAW,WAAXA,wBACArhB,GAAAA,QAAAA,mBAA2BzrD,GAC3B42F,EACA0C,EAAWA,EAAS4d,YAASlsH,EAfhC,CAWD,IAOR9G,KAAK6xH,UAAU3sG,iBACX0jE,GAAW,WAAXA,iBAA4B9sE,IAGxB9b,KAAKuxH,SAASjvB,aAAahgG,KACvBsmF,GAAW,WAAXA,sBACArhB,GAAAA,QAAAA,mBAA2BzrD,GAF/B,IAKR9b,KAAK6xH,UAAU3sG,iBACX0jE,GAAW,WAAXA,eACA,KAEInpF,OAAO6I,KAAKtI,KAAK6xH,UAAUiB,SACtB1vH,SAAQ+N,GAAKnR,KAAKuxH,SAASjvB,aAAahgG,KACrCsmF,GAAW,WAAXA,sBAAkCrhB,GAAAA,QAAAA,mBAA2Bp2D,MAErEnR,KAAK6xH,UAAUoB,QAEfjzH,KAAK6xH,eAAY/qH,EACjBiE,GAAOsM,KAAK,8BAAZ,MAIRrX,KAAK6xH,UAAU3sG,iBAAiB0jE,GAAW,WAAXA,QAAmBsqC,IAC/C,GAAIA,EAKA,OAJAlzH,KAAKuxH,SAASjvB,aAAahgG,KAAKsmF,GAAW,WAAXA,wBAEhC5oF,KAAK6xH,UAAUoB,OAGlB,IAMLjzH,KAAKuxH,SAASrsG,iBACV0jE,GAAW,WAAXA,yBACA,CAAC2lB,EAASzyF,EAAMy2F,EAAK4gB,KACjBpoH,GAAOkT,MAAO,6BAA4BswF,KAAWzyF,KAAQy2F,KACzDhE,IAAYvuG,KAAKuxH,SAAS7d,SAE1B1zG,KAAKuxH,SAASt+G,KAAKkgH,EACtB,IAETnzH,KAAK6xH,UAAU3sG,iBACX0jE,GAAW,WAAXA,eACA,CAACrlF,EAAQ6oE,KAGDA,EACApsE,KAAKuxH,SAASt+G,QAKlBjT,KAAK6xH,UAAUoB,QAEfjzH,KAAKuxH,SAASjvB,aAAahgG,KAAKsmF,GAAW,WAAXA,cAA0BrlF,GAA1D,IAKRvD,KAAKuxH,SAASrsG,iBACV0jE,GAAW,WAAXA,YACA,KACI5oF,KAAKmyH,OAAL,KAIL,IAAI/3G,SAAQ,CAACC,EAASC,KACzBta,KAAK6xH,UAAU3sG,iBAAiB0jE,GAAW,WAAXA,YAAuB,KACnDvuE,IAGIi4G,IAAUvgB,GACV/xG,KAAK6xH,UAAU1K,uBAAuBkK,GAAe,CAAExpH,MAAOyqH,KACvDtyH,KAAK6xH,UAAUr+C,cACzB,IAELxzE,KAAK6xH,UAAU3sG,iBAAiB0jE,GAAW,WAAXA,gBAA4BtuE,GAC5Dta,KAAK6xH,UAAU3sG,iBAAiB0jE,GAAW,WAAXA,+BAA2CtuE,GAC3Eta,KAAK6xH,UAAU3sG,iBAAiB0jE,GAAW,WAAXA,mBAA+BtuE,GAE/Dta,KAAK6xH,UAAU5+G,MAAf,GAGP,CAMDmgH,WAAWhnH,GACP,IAAKpM,KAAKkhF,gBAAkBlhF,KAAKuxH,SAASxf,cACtC,OAGJ,MAAM3lC,EAAM3sE,OAAO6I,KAAKtI,KAAK6xH,UAAUiB,SAClCr+G,MAAKtD,GAAKo2D,GAAAA,QAAAA,mBAA2Bp2D,KAAO/E,IAE7CggE,EACApsE,KAAK6xH,UAAUwB,KAAKjnD,GAEpBrhE,GAAOpH,MAAO,wBAAuByI,mBAE5C,CAMDknH,cAAclnH,GACV,IAAKpM,KAAKkhF,gBAAkBlhF,KAAKuxH,SAASxf,cACtC,OAKJ,IAAIwhB,EAAcvzH,KAAKuxH,SAAS7d,QAE5B1zG,KAAKuxH,SAASwB,mBAAmBtC,mBACjC8C,EAAcvzH,KAAKuxH,SAASwB,mBAAmBjC,kBAGnD,MAAM0C,EAAgB/zH,OAAO6I,KAAKtI,KAAK6xH,UAAUiB,SAC5Cr+G,MAAKtD,GAAKo2D,GAAAA,QAAAA,mBAA2Bp2D,KAAO/E,IAEjD,GAAIonH,EAAe,CACf,MAAMpnD,EAAMpsE,KAAK6xH,UAAUiB,QAAQU,GAAepnD,IAC5CqnD,GACAhsD,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI03G,IACRvlH,EAAE,IAAK,CAAEq/D,MAAO,wCAChBr/D,EAAE,SAAU,CAAE6N,GAAIuwD,IAE3BpsE,KAAKqrG,KAAKzsF,WAAWo1D,OAAOy/C,GACxB,SACA7lH,IACI7C,GAAOpH,MAAO,4BAA2ByoE,IAAOx+D,EAAhD,GAEX,MACG7C,GAAOpH,MAAO,wBAAuB6vH,mBAE5C,EC9YL,MAAMzoH,IAASkC,EAAAA,EAAAA,2CAKA,MAAMymH,GASjB9zH,YAAYiwG,GACR7vG,KAAK6vG,KAAOA,EAEZ7vG,KAAK2vH,gBAAkB3vH,KAAK2vH,gBAAgB9sH,KAAK7C,MACjDA,KAAK6vG,KAAKxE,KAAKhpG,YAAYumF,GAAW,WAAXA,oBAAgC5oF,KAAK2vH,iBAEhE3vH,KAAK2zH,UAAY,CAAC,CACrB,CAKDv5B,UACIp6F,KAAK6vG,KAAKxE,KAAK1mE,eAAeikD,GAAW,WAAXA,oBAAgC5oF,KAAK2vH,gBACtE,CAQDiE,YAAYhsH,EAAKqY,GACb,IAAKjgB,KAAKkhF,gBAAkBlhF,KAAK6vG,KAAKkC,cAIlC,YAHAhnG,GAAOpH,MAAO,wCAAuC3D,KAAKkhF,6CAC1ClhF,KAAK6vG,KAAKkC,iBAK9B,MAAMjuF,EAAU,CACZlc,MACAqY,QAGJjgB,KAAK++G,aAAaj7F,EACrB,CAOD+vG,cACI,OAAO7zH,KAAK2zH,SACf,CAKDzyC,cACI,OAAO7gE,QAAQrgB,KAAKswH,sBACvB,CAODA,sBACI,OAAOtwH,KAAK6vG,KAAKxE,KAAKyoB,4BACzB,CAODnE,gBAAgB9c,GACZ,MAAM,SAAEkhB,GAAalhB,EAEhBkhB,IAAYrS,KAAQ1hH,KAAK2zH,UAAWI,KAIzC/zH,KAAK2zH,UAAYI,EACjB/zH,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,sBAAkCmrC,GACjE,CAODhV,aAAaj7F,GACTA,EAAQ66F,IAAuB,gBAE/B,MAAMz1G,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKswH,wBAE5BpnH,EAAI8E,EAAE,gBAAiB,CACnB6hG,KAAM7vG,KAAK6vG,KAAK6D,QAChBrmC,MAAO,4BACRpmE,KAAK8B,UAAU+a,IAAUypD,KAE5BvtE,KAAK6vG,KAAKxE,KAAKzsF,WAAWyS,KAAKnoB,EAClC,4BClHL,MAAM6B,IAASkC,EAAAA,EAAAA,2CAIf,IAAI+mH,GAEAC,GAKJ,UAKIl+B,SAAUK,GAQV18E,KAAKw6G,GACDl0H,KAAK+1F,SAAWm+B,GAAmB99B,EACtC,EAMG+9B,wBASA,OARKH,KACDA,GAAqBh0H,KAAK+1F,SAASpb,QAAQ,qBACtCq5C,KACDA,GAwDhB,WACI,MAAMpyD,EAAWwyD,KAAAA,mBAIjB,OAFArpH,GAAOD,IAAI,0BAA2B82D,GAE/BA,CACV,CA9DoCyyD,GACrBr0H,KAAK+1F,SAAShjB,QAAQ,oBAAqBihD,MAI5CA,EACV,EAMGM,gBACA,IAAKL,GAAY,CACb,MAAMM,EAAQv0H,KAAK+1F,SAASpb,QAAQ,aAEpCs5C,GAAaM,GAASv0H,KAAK+1F,SAASpb,QAAQ,eAExC45C,EACAv0H,KAAK+1F,SAAShjB,QAAQ,cAAewhD,GAC7BN,KACRA,GA+ChB,WACI,MAAMO,EAWCC,KAAQA,KAAQA,KAAQA,KAP/B,OAFA1pH,GAAOD,IAAI,eAAgB0pH,GAEpBA,CACV,CArD4BE,GACb10H,KAAK+1F,SAAShjB,QAAQ,cAAekhD,IAE5C,CAED,OAAOA,EACV,EAMG1yD,gBAGA,OAAOvhE,KAAK+1F,SAASpb,QAAQ,YAChC,EAMGpZ,cAAUA,GACNA,EACAvhE,KAAK+1F,SAAShjB,QAAQ,YAAaxR,GAEnCvhE,KAAK+1F,SAAS/iB,WAAW,YAEhC,GAqCL,SAASyhD,KACL,MAAQ,GAAExwH,KAAKE,SAASqN,SAAS,eAAe5F,OAAO,EAAG,EAC7D,CCvHD,MAAMwmG,GACA9yG,EAAQ,OACNspF,WAAUA,IAAKtpF,EAAQ,KACzBkE,GAAuBlE,EAAQ,MAE/ByL,IAASkC,EAAAA,EAAAA,wCAMf,SAAS0nH,GAAsBn6G,GAC3B,IAAIjR,EAAQ,EAGZ,OAAO,SAAS8nC,GAEZ,GAAIA,EAGA,YAFA9nC,EAAQ,GAMZ,MAAMmqE,EAAUzvE,KAAK+zB,IAAI,EAAGzuB,EAAQ,GAIpC,OAFAA,GAAS,EAEFtF,KAAKF,IAAI2vE,EAAUl5D,EAfX,KAgBlB,CACJ,CASc,SAASo6G,GAAU7yH,EAAUspG,EAAM5mE,EAAS19B,GAAS,MAqB3C,EAuBrB,SAASkS,EAAS3V,GACd,GAAIA,EAAM2c,MAAQ3c,EAAM2c,KAAKshD,UAAW,CACpC,GAAIj+D,EAAMsgC,SAAWrkC,OAAO6Q,SAASwzB,OAGjC,YAFA74B,GAAOuY,KAAM,6CAA4ChgB,EAAMsgC,UAInEixF,GAAStzD,UAAYj+D,EAAM2c,KAAKshD,SAGnC,CACJ,CAtDDvhE,KAAK+B,SAAWA,EAChB/B,KAAK80H,eAAiBH,GAAsB,KAC5C30H,KAAK+0H,oBAAsBJ,GAAsB,KACjD30H,KAAK+G,QAAUA,EAGf/G,KAAKg1H,qBAAsB,EAI3Bh1H,KAAKi1H,mBAAoB,EAEzBj1H,KAAKsiG,aAAe79D,EAEpBzkC,KAAK4e,WAAaysF,EAAKzsF,WAGvB5e,KAAKk1H,UAAL,UAAiBl1H,KAAK+G,QAAQouH,aAA9B,aAAiB,EAAoBn4F,MAGhCh9B,KAAKk1H,YACNl1H,KAAKk1H,UAAa,SAAD,UAASl1H,KAAK+G,QAAQouH,aAAtB,aAAS,EAAoBlwD,UAGlDjlE,KAAKo1H,UAAYp1H,KAAK+G,QAAQsuH,qBAG9Br1H,KAAKuwB,KAAOvwB,KAAKo1H,UAAY,OAAS,OACtCrqH,GAAOsM,KAAM,SAAQrX,KAAKuwB,iCAI1BvwB,KAAKs1H,cAAgB,IAAIjnE,IAErBtnD,EAAQwuH,cACRv1H,KAAKs1H,cAAcvlG,IAAIhpB,EAAQwuH,cAsB/Bh2H,OAAO2lB,iBACP3lB,OAAO2lB,iBAAiB,UAAWjM,GAAU,GAE7C1Z,OAAOouC,YAAY,YAAa10B,EAEvC,CAED27G,GAAUpyH,UAAUgzH,WAAa,SAASppD,GACtC,IAAKA,EACD,OAAO,EAGX,IAAK,MAAMqpD,KAAYz1H,KAAKs1H,cAExB,GAAoC,IAAhClpD,EAAI3hE,QAAS,GAAEgrH,MACf,OAAO,EAIf,OAAO,CACV,EAEDb,GAAUpyH,UAAUkzH,sBAAwB,WACxC,OAAO11H,KAAKg1H,mBACf,EAEDJ,GAAUpyH,UAAUmzH,oBAAsB,WACtC,OAAO31H,KAAKi1H,iBACf,EAkBDL,GAAUpyH,UAAUozH,yBAA2B,WAAW,QAGtD,MAAM,UAAEr0D,GAAcszD,GAChBrmH,EAASxO,KAAK+G,QACd0zF,EAAa,CAAC,OAEW3zF,IAA3B0H,EAAOwkG,kBACPvY,EAAWuY,gBAAkBxkG,EAAOwkG,sBAETlsG,IAA3B0H,EAAOykG,kBACPxY,EAAWwY,gBAAkBzkG,EAAOykG,iBASnB,UAAGzkG,SAAH,UAAGA,EAAQ6qF,iBAAX,aAAG,EAAmBK,uBAAtB,WAGjBe,EAAWf,iBAAkB,GAGjC,MAAMm8B,EAAoB,CACtBp7B,aACAq7B,WAAYjB,GAASP,UACrBzkB,KAAM7vG,KAAK+B,UAOf,OAJIw/D,IACAs0D,EAAkBt0D,UAAYA,GAG3Bs0D,CACV,EAKDjB,GAAUpyH,UAAUuzH,oBAAsB,WACtC,MAAMF,EAAoB71H,KAAK41H,2BAGzBr9E,GAAOmvB,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKk1H,UACxBlkH,KAAM,QAEVunC,EAAKvqC,EAAE,aAAc,CACjBq/D,MAAO,kCACPwiC,KAAM7vG,KAAK+B,SACX,cAAe8zH,EAAkBC,aAGjCD,EAAkBt0D,WAClBhpB,EAAK+uB,MAAM,CAAE,aAAcuuD,EAAkBt0D,YAGjD,IAAK,MAAMjiD,KAAKu2G,EAAkBp7B,WAC1Bo7B,EAAkBp7B,WAAWjzF,eAAe8X,IAC5Ci5B,EAAKvqC,EACD,WAAY,CACRV,KAAMgS,EACNzX,MAAOguH,EAAkBp7B,WAAWn7E,KACrCiuD,KASf,OANIk6B,GAAAA,4BACAlvD,EAAKvqC,EAAE,WAAY,CACfV,KAAM,mBACNzF,MAAO,IAAK0lE,KAGbh1B,CACV,EAEDq8E,GAAUpyH,UAAUwzH,mBAAqB,SAASC,GAC9C,MAAMJ,EAAoB,CAAEp7B,WAAY,CAAC,GAqBzC,OAnBAo7B,EAAkBJ,SAAWtrF,KAAE8rF,GAAUxhH,KAAK,cAAcm6B,KAAK,YACjEinF,EAAkBt0D,UAAYp3B,KAAE8rF,GAAUxhH,KAAK,cAAcm6B,KAAK,cAClEinF,EAAkBzgB,SAAWjrE,KAAE8rF,GAAUxhH,KAAK,eAAem6B,KAAK,YAClEinF,EAAkBxjF,MAAyD,SAAjDlI,KAAE8rF,GAAUxhH,KAAK,cAAcm6B,KAAK,SAC9DinF,EAAkBK,MAAQ/rF,KAAE8rF,GAAUxhH,KAAK,cAAcm6B,KAAK,SAE1DzE,KAAE8rF,GAAUxhH,KAAK,6DAAiEnQ,OAAS,IAC3FuxH,EAAkBp7B,WAAW07B,eAAiB,QAG9ChsF,KAAE8rF,GAAUxhH,KAAK,2DAA+DnQ,OAAS,IACzFuxH,EAAkBp7B,WAAW27B,aAAe,QAI5CjsF,KAAE8rF,GAAUxhH,KAAK,gEAAoEnQ,OAAS,IAC9FuxH,EAAkBp7B,WAAWw6B,kBAAoB,QAG9CY,CACV,EAYDjB,GAAUpyH,UAAU6zH,sBAAwB,WACxC,OAAO,IAAIj8G,SAAQC,IACG,SAAdra,KAAKuwB,MACLxlB,GAAOsM,KAAM,2CAA0CrX,KAAKk1H,aAE5Dl1H,KAAK4e,WAAWo1D,OACZh0E,KAAK+1H,uBACLlxH,GAAU7E,KAAKs2H,iBAAiBzxH,EAAQwV,KACxC1W,GAAS3D,KAAKu2H,eAAe5yH,EAAO0W,KAMxCra,KAAK4e,WAAW/U,UAEhBkB,GAAOsM,KAAM,2CAA0CrX,KAAKo1H,aAC5D9kG,MAAMtwB,KAAKo1H,UAAW,CAClBjuG,OAAQ,OACRtM,KAAM5T,KAAK8B,UAAU/I,KAAK41H,4BAC1BllG,QAAS,CAAE,eAAgB,sBAE9B/V,MAAKmS,IACGA,EAAS0pG,GAgBd1pG,EAASoH,OAAOvZ,MAAK87G,IACjBz2H,KAAK02H,eAAeD,EAAYp8G,EAAhC,IAhBAyS,EAASnmB,OAAOgU,MAAKhU,IACjBoE,GAAOuY,KAAM,iBAAgBwJ,EAASuoD,UAAUvoD,EAAS6pG,qBAAqBhwH,KAC9E,MAAMiwH,EAAmC,MAApB9pG,EAASuoD,QAAkB1uE,EAAK8D,QAAQ,uBAAyB,EAChFosH,EAAoC,MAApB/pG,EAASuoD,OAE/Br1E,KAAKysE,aAAamqD,EAAcC,EAAex8G,EAA/C,IAEHuJ,OAAMjgB,IACHoH,GAAOuY,KAAM,UAAS3f,KACtB3D,KAAKysE,cAAL,GAMR,IAIH7oD,OAAMjgB,IACHoH,GAAOuY,KAAM,UAAS3f,KACtB3D,KAAKysE,cAAL,IAEP,GAER,EAEDmoD,GAAUpyH,UAAUk0H,eAAiB,SAASb,EAAmBjkD,GAG7D5xE,KAAK+0H,qBAAoB,GAErBc,EAAkBJ,UAClB1qH,GAAOsM,KAAM,qBAAoBw+G,EAAkBJ,YACnDz1H,KAAKs1H,cAAcvlG,IAAI8lG,EAAkBJ,WAEzC1qH,GAAOuY,KAAK,sDAGhB,MAAMwzG,EAAwE,SAAhDjB,EAAkBp7B,WAAW07B,eAiB3D,GAfAprH,GAAOsM,KAAM,2BAA0By/G,KAEvC92H,KAAKg1H,oBAAoE,SAA9Ca,EAAkBp7B,WAAW27B,aACxDrrH,GAAOsM,KAAM,oCAAmCrX,KAAKg1H,wBAEhDh1H,KAAKg1H,qBAAuBa,EAAkBt0D,YAC/Cx2D,GAAOsM,KAAM,uBAAsBw+G,EAAkBt0D,aACrDszD,GAAStzD,UAAYs0D,EAAkBt0D,WAG3CvhE,KAAKsiG,aAAahgG,KAAK8vG,GAAqB1pB,iBAAkBouC,EAAuBjB,EAAkBzgB,UAEvGp1G,KAAKi1H,kBAAoBY,EAAkBp7B,WAAWw6B,kBACtDlqH,GAAOsM,KAAM,wBAAuBrX,KAAKi1H,qBAErCY,EAAkBxjF,MAAO,CAKzB,GAHAryC,KAAK80H,gBAAe,GAGhBe,EAAkBK,QAAUl2H,KAAK+G,QAAQgwH,cAAgB/2H,KAAK+G,QAAQiwH,cAKtE,OAJAjsH,GAAOuY,KAAM,kBAAiBuyG,EAAkBK,uBAAuBL,EAAkBJ,mBAEzFz1H,KAAKsiG,aAAahgG,KAAKsmF,GAAWqB,WAAY4rC,EAAkBK,MAAOL,EAAkBJ,UAK7F1qH,GAAOsM,KAAK,yDACZu6D,GACH,KAAM,CACH,MAAMqlD,EAASj3H,KAAK80H,iBAGpB/pH,GAAOsM,KAAM,gCAA+B4/G,SAC5C13H,OAAOqK,YACH,IAAM5J,KAAKq2H,wBAAwB17G,KAAKi3D,IACxCqlD,EACP,CACJ,EAEDrC,GAAUpyH,UAAUiqE,aAAe,SAASmqD,EAAcC,EAAejlD,GASrE,GANIglD,IACA7rH,GAAOsM,KAAK,+BACZw9G,GAAStzD,eAAYz6D,GAIrB+vH,EAIA,OAHA9rH,GAAOuY,KAAK,6CACZtjB,KAAKsiG,aAAahgG,KAAKsmF,GAAWE,yBAKtC,MAAMmuC,EAASj3H,KAAK+0H,sBAEpB,GAAI6B,GAAgBK,EAAS,IAEzBlsH,GAAOsM,KAAM,qCAAoC4/G,SACjDj3H,KAAK80H,gBAAe,GACpBv1H,OAAOqK,YAAW,IAAM5J,KAAKq2H,wBAAwB17G,KAAKi3D,IAAWqlD,OAClE,CACH,MAAM7L,EAAS,kDACTznH,EAAQ,IAAIpB,MAAM6oH,GAExBrgH,GAAOpH,MAAMynH,EAAQznH,GACrBH,GAAqBE,iBAAiBC,GAItC3D,KAAKsiG,aAAahgG,KAAKsmF,GAAWa,mBACrC,CACJ,EAUDmrC,GAAUpyH,UAAU+zH,eAAiB,SAAS5yH,EAAOiuE,GAIjD,MAAMslD,EAAiB/sF,KAAExmC,GAAO8Q,KAAK,4BAErC,GAAIyiH,EAAe5yH,OAAQ,CAEvB,MAAM6yH,EAAYD,EAAetoF,KAAK,cAChCwoF,EAAgBjtF,KAAExmC,GAAO8Q,KAAK,eACpC,IAAI4iH,EAUJ,OARID,IACAC,EAAWD,EAAczwH,aAE7B3G,KAAKsiG,aAAahgG,KACdsmF,GAAWsB,kBACXitC,EACAE,EAGP,CAED,MAAMC,EACAj3G,QAAQ8pB,KAAExmC,GAAO8Q,KAAK,0BAA0BnQ,QAC3C6lC,KAAExmC,GAAO8Q,KAAK,yBAAyBnQ,QAG5CuyH,EAAgB1sF,KAAExmC,GAAO8Q,KAAK,yBAAyBnQ,OAAS,EAElEuyH,GAAiBtvD,GAAAA,QAAAA,iBAAyB5jE,EAAMykC,aAAa,SAAWpoC,KAAK+G,QAAQouH,MAAMoC,kBAG3Fv3H,KAAKg1H,qBAAsB,GAG/Bh1H,KAAKysE,aAAa6qD,EAAgBT,EAAejlD,EACpD,EAUDgjD,GAAUpyH,UAAU8zH,iBAAmB,SAC/BzxH,EACA+sE,GAEJ,MAAMikD,EAAoB71H,KAAKg2H,mBAAmBnxH,GAElD7E,KAAK02H,eAAeb,EAAmBjkD,EAC1C,EAEDgjD,GAAUpyH,UAAUg0E,aAAe,WAC/B,OAAO,IAAIp8D,SAAQ,CAACC,EAASC,KACzBta,KAAK4e,WAAWo1D,OACZh0E,KAAK+1H,uBACLlxH,IACI,MAAM08D,EAAYp3B,KAAEtlC,GAAQ4P,KAAK,cAAcm6B,KAAK,cAEhD2yB,GACAx2D,GAAOsM,KAAM,wBAAuBkqD,KACpCszD,GAAStzD,UAAYA,GAErBx2D,GAAOuY,KAAK,yCAGhBjJ,GAAS,IAEbm9G,GAAWl9G,EAAO,CACd3W,MAAOwmC,KAAEqtF,GAAS/iH,KAAK,mBAAmB6jB,KAAK,WAC/CxU,QAASqmB,KAAEqtF,GAAS/iH,KAAK,iBAAiB9N,UAhBlD,GAoBP,EAEDiuH,GAAUpyH,UAAUi1H,YAAc,SAASC,EAAaC,GACpD33H,KAAK43H,cAAyB,EAAOF,EAAaC,EACrD,EASD/C,GAAUpyH,UAAUo1H,aAAe,SAASC,EAAOC,EAAOC,GACtD,MAAMlnD,GAAKnJ,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKk1H,UACtBlkH,KAAM,QACJs2D,EAAQ,CACV+F,MAAO,kCACPwiC,KAAM7vG,KAAK+B,SACX,cAAe8yH,GAASP,WAE5B,IAAI5lH,EAAM,WAeV,SAASmuF,EAAYuuB,EAAQvnG,GACzBrgB,GAAqBE,iBAAiB,IAAInB,MAAM6oH,IAChDrgH,GAAOpH,MAAMynH,EAAQvnG,GACrBk0G,EAAUl0G,EACb,CAjBGg0G,IACAvwD,EAAMuwD,OAAQ,EACdnpH,EAAO,SAAQA,KAEnBmiE,EAAG7iE,EAAE,YAAas5D,GAclBtnE,KAAK4e,WAAWo1D,OACZnD,GACAhsE,IACI,IAAIkb,EAAMoqB,KAAEtlC,GAAQ4P,KAAK,aAAam6B,KAAK,OAE3C7uB,EAAMi4G,mBAAmBj4G,GACrBA,GACAhV,GAAOsM,KAAM,OAAM3I,MAAQqR,KAC3B+3G,EAAM/3G,IAEN88E,EAAa,iBAAgBnuF,mBAAsB7J,EACtD,GAELg4F,EAAYh6F,UAAKiE,EAAY,OAAM4H,WAE1C,EAEDkmH,GAAUpyH,UAAUy1H,iBAAmB,SAASP,EAAaC,GACzD33H,KAAK43H,cAAyB,EAAMF,EAAaC,EACpD,EAED/C,GAAUpyH,UAAU01H,OAAS,SAAStmD,GAClC,MAAMf,GAAKnJ,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKk1H,UACtBlkH,KAAM,SACJ,UAAEuwD,GAAcszD,GAEjBtzD,GAKLsP,EAAG7iE,EAAE,SAAU,CACXq/D,MAAO,kCACP,aAAc9L,IAElBvhE,KAAK4e,WAAWo1D,OACZnD,GACAhsE,IACI,IAAIszH,EAAYhuF,KAAEtlC,GAAQ4P,KAAK,UAAUm6B,KAAK,cAE1CupF,IACAA,EAAYH,mBAAmBG,IAEnCptH,GAAOsM,KAAM,oBAAmB8gH,IAAatzH,GAC7CgwH,GAAStzD,eAAYz6D,EACrB8qE,EAASumD,EAAT,IAEJx0H,IACI,MAAMynH,EAAS,eAEf5nH,GAAqBE,iBAAiB,IAAInB,MAAM6oH,IAChDrgH,GAAOpH,MAAMynH,EAAQznH,EAArB,KAxBJiuE,GA2BP,ECtjBD,MAAM7mE,IAASkC,EAAAA,EAAAA,uCAEFsC,GAAS,CAClB6oH,YAAY9sD,EAAYhkE,GACpB,IAAK,MAAM0lE,KAAS/hE,MAAM6Q,KAAKwvD,EAAWh5B,UAAW,CACjD,MAAM/qC,EAAO,CACTqmC,WAAY,CAAC,EACb0E,SAAU,GACV7sC,QAASunE,EAAMvnE,SAGnB,IAAK,MAAMmpC,KAAQ3jC,MAAM6Q,KAAKkxD,EAAMp/B,YAChCrmC,EAAKqmC,WAAWgB,EAAKthC,MAAQshC,EAAK/mC,MAEtC,MAAMlB,EAAO4gE,GAAAA,QAAAA,QAAgByF,GAEzBrmE,IAIAY,EAAKM,MAAQ0/D,GAAAA,QAAAA,YAAoB5gE,IAErCW,EAAM1F,KAAK2F,GACXvH,KAAKo4H,YAAYprD,EAAOzlE,EAAK+qC,SAChC,CACJ,EACD+lF,YAAY/wH,EAAOgxH,GACf,IAAK,IAAIxzH,EAAI,EAAGA,EAAIwC,EAAMhD,OAAQQ,IAAK,CACnC,MAAMyC,EAAOD,EAAMxC,GAEfyC,IACA+wH,EAAOtqH,EAAEzG,EAAK9B,QAAS8B,EAAKqmC,YACxBrmC,EAAKM,OACLywH,EAAOtsH,EAAEzE,EAAKM,OAEdN,EAAK+qC,UACLtyC,KAAKq4H,YAAY9wH,EAAK+qC,SAAUgmF,GAEpCA,EAAO/qD,KAEd,CAGJ,GASE,SAASgrD,GAA2BxjD,EAAMrpC,GAC7C,MAAM/oB,EAAM,GAEZ,IAAK,IAAI7d,EAAI,EAAGA,EAAIiwE,EAAKzwE,OAAQQ,IACzBiwE,EAAKjwE,GAAGW,UAAYimC,GACpB/oB,EAAI/gB,KAAKmzE,EAAKjwE,IAItB,OAAO6d,CACV,CAUD,MAAM61G,GAAuB,CAAE,QAAS,QAAS,UAMjD,SAASC,GAA2BlxH,EAAMmxH,GACtC,MAAMtjB,EAAW,CAAC,EACZujB,EAAWpxH,EAAK+qC,SAAS79B,MAAKzG,GAAmB,SAAdA,EAAEvI,UAE3C,GAAIkzH,EAAU,CACVvjB,EAASjnC,KAAO,CAAC,EACjB,MAAMpF,EAAO,CAAE,KAAM,OAAQ,UAEzB2vD,GACA3vD,EAAKnnE,KAAK,wBAGd,IAAK,MAAMsuD,KAAO6Y,EAAM,CACpB,MAAMiE,EACA2rD,EAASrmF,SAAS79B,MAAKzG,GAAKA,EAAEvI,UAAYyqD,IAE5C8c,IACAooC,EAASjnC,KAAKje,GAAO8c,EAAMnlE,MAElC,CACJ,CACD,MAAM+wH,EAAYrxH,EAAK+qC,SAAS79B,MAAKzG,GAAmB,UAAdA,EAAEvI,UAM5C,OAJImzH,IACAxjB,EAAS1gG,MAAQkkH,EAAU/wH,OAGxButG,CACV,CAKc,MAAMyjB,WAAiBvf,GAmBlC15G,YAAYgf,EAAYwtD,EAAKl7B,EAAUm6D,EAAMtkG,GACzCoxE,QACAn4E,KAAKqrG,KAAOA,EACZrrG,KAAK4e,WAAaA,EAClB5e,KAAK0zG,QAAUnsC,GAAAA,QAAAA,kBAA0B6E,GACzCpsE,KAAK2wH,UAAYvkD,EACjBpsE,KAAKkxC,SAAWA,EAChBlxC,KAAK84H,oBAAqB,EAC1B/tH,GAAOsM,KAAM,kBAAiBrX,KAAK2wH,aACnC3wH,KAAK8yH,QAAU,CAAC,EAChB9yH,KAAK+4H,QAAU,CAAC,EAChB/4H,KAAKg5H,aAAe,CAAC,EACrBh5H,KAAKi5H,qBAAuB,GAC5Bj5H,KAAKqyH,QAAS,EACdryH,KAAKk5H,mBAAoB,EACzBl5H,KAAK88D,KAAO,KACZ98D,KAAKm5H,YAAc,KACnBn5H,KAAKo5H,mBAAoB,EACzBp5H,KAAK+G,QAAUA,GAAW,CAAC,EAC3B/G,KAAKq5H,UAAY,IAAIzE,GAAU50H,KAAK0zG,QAAS1zG,KAAKqrG,KAAMrrG,KAAKsiG,aAAc+I,EAAKtkG,eACxC,IAA7B/G,KAAK+G,QAAQ4rH,aAA+B3yH,KAAK+G,QAAQ4rH,eAChE3yH,KAAKs5H,MAAQ,IAAIhI,GAAMtxH,OAE3BA,KAAKu5H,aAAe,IAAInL,GAAapuH,MACrCA,KAAKw5H,cAAgB,IAAI9J,GAAc1vH,MACvCA,KAAKy5H,aAAe,IAAI/F,GAAa1zH,MACrCA,KAAK05H,gBAAgB3yH,GACrB/G,KAAK25H,cAAgB,CAAC,EACtB35H,KAAK45H,YAAc,KACnB55H,KAAK65H,SAAW,KAChB75H,KAAKixG,gBAAkB,CAAC,EACxBjxG,KAAK85H,4BAA8B,KAEnC95H,KAAKyzC,QAAS,EACdzzC,KAAK+5H,oBAAsB9L,EAC9B,CAODyL,kBAA8B,IAAd3yH,EAAc,uDAAJ,CAAC,EACvB/G,KAAK+4H,QAAQl9G,GAAK7b,KAAK2wH,UACvB3wH,KAAK+4H,QAAQiB,IAAM,iCACnBh6H,KAAK+4H,QAAQzxH,MAAQ,GAEjBP,EAAQkzH,SACRj6H,KAAK+4H,QAAQzxH,MAAM1F,KAAK,CACpB,QAAW,WACX,MAASmF,EAAQkzH,UAIzBj6H,KAAKk6H,mBAAqBj5H,KAAKC,KAClC,CAQD+R,KAAKi+B,EAAU4nF,GAIX,OAHA94H,KAAKkxC,SAAWA,EAChBlxC,KAAK84H,mBAAqBA,EAEnB,IAAI1+G,SAAQC,IACfra,KAAK+G,QAAQ2rH,cACN3nH,GAAOsM,KAAM,iCAAgCrX,KAAK0zG,YAInD1zG,KAAK+G,QAAQ2rH,aACTt4G,QAAQC,UACRra,KAAKq5H,UAAUhD,yBAEjB17G,MAAK,KACT3a,KAAKwzE,cAAa,GAClBxzE,KAAKi5H,qBAAqBr3H,KACtB5B,KAAK4e,WAAWsG,iBACZymG,GAAe34B,OAAO44B,oBACtB5rH,KAAKm6H,oBAAoBt3H,KAAK7C,QAEtCqa,GAAS,GAPb,GAUP,CAMDm5D,aAAa4mD,GACT,MAAMv+G,EAAK7b,KAAK+4H,QAAQl9G,GAExB,IAAK7b,KAAK4e,aAAe5e,KAAK4e,WAAWqxD,YAAcp0D,IAAQ7b,KAAKqyH,SAAW+H,EAE3E,OAGJ,MAAMrlD,GAAOpN,EAAAA,GAAAA,OAAM,CAAE9rD,OAOjBu+G,IACIp6H,KAAK84H,oBACL/jD,EAAK/mE,EAAE,eAAeu/D,KAG1BwH,EAAK/mE,EAAE,IAAK,CAAEq/D,MAAOrtE,KAAK+4H,QAAQiB,MAE9Bh6H,KAAKkxC,UACL6jC,EAAK/mE,EAAE,YAAYhC,EAAEhM,KAAKkxC,UAAUq8B,KAEpCvtE,KAAK+G,QAAQszH,WACbtlD,EAAK/mE,EAAE,aAAahC,EAAEhM,KAAK+G,QAAQszH,WAAW9sD,KAGlDwH,EAAKxH,MAGTh+D,GAAO8oH,YAAYr4H,KAAK+4H,QAAQzxH,MAAOytE,GAGvC/0E,KAAKs6H,iBAAmBr5H,KAAKC,MAE7BlB,KAAK4e,WAAWyS,KAAK0jD,GACjBqlD,GAKAp6H,KAAK4e,WAAW/U,OAEvB,CAMD0wH,QAAQh3H,GACJwH,GAAOD,IAAI,WAAY9K,KAAK2wH,WAC5B,MAAM57C,GAAOpN,EAAAA,GAAAA,OAAM,CACf9rD,GAAI7b,KAAK2wH,UACT3/G,KAAM,gBAGNzN,GACAwxE,EAAK/mE,EAAE,UAAUhC,EAAEzI,GAAQgqE,KAG/BvtE,KAAK+4H,QAAQz0H,OAAS,GAerBtE,KAAK4e,WAAWkuG,kBAAoB9sH,KAAK4e,WAAW/U,QACrD7J,KAAK4e,WAAWyS,KAAK0jD,GACrB/0E,KAAK4e,WAAW/U,OACnB,CAKD2wH,gBAGI,MAAMC,GACA/yD,EAAAA,GAAAA,KAAI,CACF12D,KAAM,MACN6K,GAAI7b,KAAK0zG,UAER1lG,EAAE,QAAS,CAAEq/D,MAAO9F,GAAAA,QAAAA,GAAAA,aAE7BvnE,KAAK4e,WAAWo1D,OAAOymD,GAAS51H,IAC5B,MAAM4uC,EAGM,IAFNtJ,KAAEtlC,GAAQ4P,KAAK,+CACZnQ,OAGLmvC,IAAWzzC,KAAKyzC,SAChBzzC,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,iBAA6Bn1C,GACpDzzC,KAAKyzC,OAASA,GAGlB,MAAMinF,EACAvwF,KAAEtlC,GAAQ4P,KAAK,qEAEjBimH,EAAep2H,OACftE,KAAK26H,aAAaD,EAAe/zH,QAEjCoE,GAAOuY,KAAK,8BAGhB,MAAMs3G,EAAiF,IAAnEzwF,KAAEtlC,GAAQ4P,KAAK,yCAAyCnQ,OAEtEu2H,EACA1wF,KAAEtlC,GAAQ4P,KAAK,qEAEjBzU,KAAKs5H,OACLt5H,KAAKs5H,MAAMlH,gBAAgByI,GAAkBA,EAAev2H,OAASu2H,EAAel0H,YAASG,GAGjG,MAAMg0H,EACA3wF,KAAEtlC,GAAQ4P,KAAK,sEACfg8G,EAAiBpwG,QAAQy6G,aAAD,EAACA,EAAiBn0H,QAEhD3G,KAAKw5H,cAAchJ,mBAAmBC,GAEtC,MAAMsK,EACA5wF,KAAEtlC,GAAQ4P,KAAK,8EAEjBsmH,SAAAA,EAAuBz2H,QACvBtE,KAAKw5H,cAAc5I,gBAAgBmK,EAAsBp0H,QAGzDi0H,IAAgB56H,KAAK8xH,qBACrB9xH,KAAK8xH,mBAAqB8I,EAC1B56H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,yBAAqCgyC,IAGhE,MAAMI,EACA7wF,KAAEtlC,GAAQ4P,KAAK,yEACfwmH,EAAmBD,aAAH,EAAGA,EAAgBr0H,OAEzC,GAAIs0H,EACA,IACIj7H,KAAKy5H,aAAa9J,gBAAgB/W,GAAcqiB,GACnD,CAAC,MAAOrtH,GACL7C,GAAOuY,KAAK,8BAA+B1V,EAC9C,CACJ,IACFjK,IACCH,KAAAA,iBAAsCG,GACtCoH,GAAOpH,MAAM,4BAA6BA,EAA1C,GAEP,CAQDg3H,aAAaO,GACLl7H,KAAKk7H,YAAcA,IACfl7H,KAAKk7H,WACLnwH,GAAOuY,KAAM,2BAA0BtjB,KAAKk7H,gBAAgBA,KAEhEl7H,KAAKk7H,UAAYA,EACjBl7H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,eAA2BsyC,GAEzD,CAKDC,yBAGI,GAAIn7H,KAAK+G,QAAQ0rH,iBACb,OAGJ,MAAM2I,GAAU1zD,EAAAA,GAAAA,KAAI,CAAE12D,KAAM,MACxB6K,GAAI7b,KAAK0zG,UACR1lG,EAAE,QAAS,CAAEq/D,MAAO,yCACpBr/D,EAAE,IAAK,CAAEq/D,MAAO,gBACbr8D,KAAM,WAEdhR,KAAK4e,WAAWo1D,OAAOonD,GAASC,IAC5B,IAAKlxF,KAAEkxF,GAAM5mH,KACL,qEACwCnQ,OAAQ,CACpD,MAAM8mH,EAAS,oCAKf,OAHA5nH,KAAAA,iBAAsC,IAAIjB,MAAM6oH,SAChDrgH,GAAOpH,MAAMynH,EAGhB,CAED,MAAMkQ,GAAa5zD,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAK0zG,QAC9B1iG,KAAM,QACLhD,EAAE,QAAS,CAAEq/D,MAAO,yCAEzBiuD,EAAWttH,EAAE,IAAK,CAAEq/D,MAAO,gBACvBr8D,KAAM,WAEVsqH,EAAWttH,EAAE,QAAS,CAAE,IAAO,cAC1BA,EAAE,SACFhC,EAAE,6CAA6CuhE,KAAKA,KAEzD+tD,EAAWttH,EAAE,QAAS,CAAE,IAAO,yBAC1BA,EAAE,SAAShC,EAAE,UAAUuhE,KAAKA,KAEjCvtE,KAAK4e,WAAWo1D,OAAOsnD,EAAvB,IAED33H,IACCH,KAAAA,iBAAsCG,GACtCoH,GAAOpH,MAAM,0CAA2CA,EAAxD,GAEP,CAODw2H,oBAAoB9kD,GAEZA,IAAWs2C,GAAexiD,OAAOK,WAAaxpE,KAAKk6H,mBAAqBl6H,KAAKs6H,kBAC7Et6H,KAAKwzE,cAEZ,CAMD+nD,WAAWxmD,GACP,MAAMj5D,EAAOi5D,EAAK3sC,aAAa,QACzBozF,EAAS,CAAC,EACVC,EAAW1mD,EAAKlvE,qBAAqB,UAAU,GAEjD41H,IACAD,EAAOnmD,OAASomD,EAAStsF,aAAe,IAE5C,IAAIusF,GAAkB,EAClBC,GAAmB,EACvB,MAAMC,EACA7mD,EAAKsB,uBACH,sCAAuC,KAAK,GAC9CwlD,EACAD,GAAYA,EAAS/1H,qBAAqB,QAAQ,GAExD21H,EAAOM,qBACD/mD,EAAKlvE,qBAAqB,eAAevB,OAE/Ck3H,EAAOO,YACDF,GAAeA,EAAYzzF,aAAa,eAC9CozF,EAAO1+D,KAAO++D,GAAeA,EAAYzzF,aAAa,QAGtD,MAAMgkC,EAAMyvD,GAAeA,EAAYzzF,aAAa,OAEpDozF,EAAOpvD,IAAMA,EACbovD,EAAOQ,QAAUh8H,KAAKq5H,UAAU7D,WAAWppD,GAC3CovD,EAAO5I,eACDxmD,GAAOA,EAAI3hE,QAAQ,KAAO,GACrBzK,KAAK+G,QAAQkqH,eACR7kD,EAAInmE,UAAUmmE,EAAI3hE,QAAQ,KAAO,EAAG2hE,EAAI3hE,QAAQ,MAEhEzK,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,kBAA8B,CACjDqzC,iBAAkBT,EAAO5I,eACzBsJ,SAAUnnD,IAGd,MAAMonD,EAAMpnD,EAAK+E,cAAc,KAE3BqiD,GACAA,EAAI7oF,SAGR,MAAMhsC,EAAQ,GAEdiI,GAAO6oH,YAAYrjD,EAAMztE,GACzBtH,KAAK25H,cAAc79G,GAAQxU,EAE3B,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAMhD,OAAQQ,IAAK,CACnC,MAAMyC,EAAOD,EAAMxC,GAEnB,OAAQyC,EAAK9B,SACb,IAAK,MAAO,CACR,MAAM,WAAEmoC,GAAermC,EAEvB,IAAKqmC,EACD,MAEJ,MAAM,KAAE58B,GAAS48B,EAEjB4tF,EAAO3I,QAAU7hH,EACjB,KACH,CACD,IAAK,OACDwqH,EAAO9oB,KAAOnrG,EAAKM,MACnB,MACJ,IAAK,SACD2zH,EAAOpvH,GAAK7E,EAAKM,MACjB,MACJ,IAAK,WACD2zH,EAAOrmB,QAAU5tG,EAAKM,MACtB,MACJ,IAAK,WACD2zH,EAAOpmB,SAAWqjB,GAA2BlxH,EAAMvH,KAAK+G,QAAQ2xH,kCAChE,MACJ,IAAK,WACD8C,EAAOrsD,SAAWnvE,KAAKo8H,iBAAiB70H,GACxC,MAEJ,IAAK,OAAQ,CACT,MAAM,WAAEqmC,GAAermC,EAEvB,IAAKqmC,EACD,MAEJ,MAAM,KAAEtgC,GAASsgC,EAEJ,YAATtgC,IACAkuH,EAAO7oH,QAAUi7B,EAAW/lC,OAEhC,KACH,EAEJ,CAED,IAAK7H,KAAKqyH,SAAWryH,KAAKk5H,kBAAmB,CACzC,MAAMh4H,EAAMlB,KAAKixG,gBAAgB,oBAAsB1xG,OAAOqvB,YAAY1tB,MAE1E6J,GAAOD,IAAI,6BAA8B5J,GAEzClB,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,sBACvB5oF,KAAKk5H,mBAAoB,CAC5B,CAED,GAAIp9G,IAAS9b,KAAK2wH,UAAW,CACzB,MAAMpY,EACuB,UAAvBijB,EAAOO,YAA0BP,EAAO1+D,KAAO,OAQrD,GANI98D,KAAK88D,OAASy7C,IACdv4G,KAAK88D,KAAOy7C,EACZv4G,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,mBACA5oF,KAAK88D,QAER98D,KAAKqyH,OAAQ,CACdryH,KAAKqyH,QAAS,EACd,MAAMnxH,EAAMlB,KAAKixG,gBAAgB,cAC3B1xG,OAAOqvB,YAAY1tB,MAEzB6J,GAAOD,IAAI,uBAAwB5J,GAG/BlB,KAAKkxC,WACLlxC,KAAKyzC,QAAS,GAMdzzC,KAAKk6H,oBAAsBl6H,KAAKs6H,kBAChCt6H,KAAKwzE,eAGTxzE,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,aAItB5oF,KAAK+G,QAAQ0rH,kBAAoBzyH,KAAKw6H,eAC1C,CACJ,MAAM,QAAY1zH,IAARslE,EACPrhE,GAAOsM,KAAK,2CACT,QAA2BvQ,IAAvB9G,KAAK8yH,QAAQh3G,GAEpB9b,KAAK8yH,QAAQh3G,GAAQ0/G,EACrBzwH,GAAOD,IAAI,UAAWgR,EAAM0/G,GAC5BE,OAAoC50H,IAAlB00H,EAAOnmD,OACzBsmD,OAAsC70H,IAAnB00H,EAAO7oH,QACtB6oH,EAAOQ,QACPh8H,KAAKq8H,WAAWvgH,EAAM0/G,EAAOrsD,WAK7BnvE,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,kBACA9sE,EACA0/G,EAAO9oB,KACP8oB,EAAO1+D,KACP0+D,EAAO5I,eACP4I,EAAOrmB,QACPqmB,EAAOnmD,OACPmmD,EAAOpmB,SACPomB,EAAO3I,QACP2I,EAAOpvD,IACPovD,EAAOrsD,SACPqsD,EAAOM,sBAIXJ,GAAkB,OAEnB,CAGH,MAAMY,EAAet8H,KAAK8yH,QAAQh3G,GAE9BwgH,EAAax/D,OAAS0+D,EAAO1+D,OAC7Bw/D,EAAax/D,KAAO0+D,EAAO1+D,KAC3B98D,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,iBAA6B9sE,EAAM0/G,EAAO1+D,OAI9Cw/D,EAAaP,cAAgBP,EAAOO,cACpCO,EAAaP,YAAcP,EAAOO,aAIlCO,EAAazJ,UAAY2I,EAAO3I,UAChCyJ,EAAazJ,QAAU2I,EAAO3I,QAC9B7yH,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,4BACA9sE,EACA0/G,EAAO3I,UAGX2I,EAAOQ,UAePM,EAAaN,SAAU,EACvBh8H,KAAKq8H,WAAWvgH,EAAM0/G,EAAOrsD,WAI7BqsD,EAAO17H,cACPw8H,EAAax8H,YAAc07H,EAAO17H,aAIlCw8H,EAAajnD,SAAWmmD,EAAOnmD,SAC/BqmD,GAAkB,EAClBY,EAAajnD,OAASmmD,EAAOnmD,QAG7BinD,EAAa3pH,UAAY6oH,EAAO7oH,UAChCgpH,GAAmB,EACnBW,EAAa3pH,QAAU6oH,EAAO7oH,SAG7B+uG,KAAQ4a,EAAantD,SAAUqsD,EAAOrsD,YACvCmtD,EAAantD,SAAWqsD,EAAOrsD,SAC/BnvE,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,6BAAyC9sE,EAAM0/G,EAAOrsD,UAEpF,CAID,IAAK,IAAIrqE,EAAI,EAAGA,EAAIwC,EAAMhD,OAAQQ,IAAK,CACnC,MAAMyC,EAAOD,EAAMxC,GAEnB,OAAQyC,EAAK9B,SACb,IAAK,OACD,IAAK+1H,EAAOQ,QAAS,CACjB,MAAMl8H,EACAE,KAAKqrG,KAAKtkG,QAAQw1H,YACdh1D,GAAAA,QAAAA,mBAA2BzrD,GAC3B0/G,EAAO9oB,KAEjB1yG,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,qBACA9sE,EACAhc,EACP,CACD,MACJ,IAAK,qBACG07H,EAAOQ,UAAYh8H,KAAKo5H,oBACxBp5H,KAAKo5H,mBAAoB,EACzBp5H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,cAE3B,MACJ,IAAK,wBACD,GAAI4yC,EAAOQ,QAAS,CAChB,MAAMvhC,EAAa,CAAC,EAEpB,IAAK,IAAItpF,EAAI,EAAGA,EAAI5J,EAAK+qC,SAAShuC,OAAQ6M,IAAK,CAC3C,MAAM,WAAEy8B,GAAermC,EAAK+qC,SAASnhC,GAEjCy8B,GAAcA,EAAWhmC,MACzB6yF,EAAW7sD,EAAWhmC,KAAOgmC,EAAW/lC,MAE/C,CAED7H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,8BAA0C6R,QAIjB,IAArCz6F,KAAKw8H,8BACZx8H,KAAKw8H,4BAA0E,SAA5C/hC,EAAW,6BAC9C1vF,GAAOsM,KAAM,yCAAwCrX,KAAKy8H,gCAEjE,CACD,MACJ,IAAK,uBAAwB,CACzB,MAAM,WAAE7uF,GAAermC,EAEvB,IAAKqmC,EACD,MAGJ,MAAM,OAAEynC,GAAWznC,EAEfynC,GAAUA,IAAWr1E,KAAK+5H,sBAC1B/5H,KAAK+5H,oBAAsB1kD,EAC3Br1E,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,6BACAvT,IAKR,KACH,CACD,IAAK,eAAgB,CACjB,MAAMqnD,EAAMn1H,EAAKqmC,WAEjB,IAAK8uF,EACD,MAEJ18H,KAAK45H,YAAc8C,EAAIC,OAAS,KAChC38H,KAAK65H,SAAW6C,EAAIE,KAAO,KAC3B58H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,sBACvB,KACH,CACD,QACI5oF,KAAK68H,YAAYt1H,EAAMuU,GAE9B,CAGG4/G,GACA17H,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,gBACA9sE,EACA0/G,EAAOnmD,QAGXsmD,GACA5wH,GAAOsM,KAAM,wBAAuB+0D,MAAQovD,EAAO7oH,UAE1D,CAQDypH,iBAAiB70H,GACb,MAAM4nE,EAAW,IAAI9gB,IAErB,IAAK,IAAIl9C,EAAI,EAAGA,EAAI5J,EAAK+qC,SAAShuC,OAAQ6M,IAAK,CAC3C,MAAM,WAAEy8B,GAAermC,EAAK+qC,SAASnhC,GAEjCy8B,GAAcA,EAAWkvF,KACzB3tD,EAASp/C,IAAI6d,EAAWkvF,IAE/B,CAED,OAAO3tD,CACV,CAODktD,WAAWvgH,EAAMqzD,GACbnvE,KAAKm5H,YAAcr9G,EACnB9b,KAAK+8H,cAAgB5tD,CACxB,CAMDoiC,+BAA+Bt4F,GAC3BjZ,KAAK85H,4BAA8B7gH,CACtC,CAMDwjH,6BACI,OAAOz8H,KAAKw8H,2BACf,CAODK,YAAYt1H,EAAMuU,GAGd,IACI,IAAIkhH,EAAch9H,KAAKg5H,aAAazxH,EAAK9B,SAErC8B,EAAK9B,QAAQ6mH,WAAW,wBACxB0Q,EAAc,CAAEh9H,KAAK85H,8BAGrBkD,GACAA,EAAY55H,SAAQC,IAChBA,EAAQkE,EAAMggE,GAAAA,QAAAA,mBAA2BzrD,GAAOA,EAAhD,GAGX,CAAC,MAAOlO,GACLpK,KAAAA,iBAAsCoK,GACtC7C,GAAOpH,MAAO,oBAAmB4D,EAAK9B,gBAAiBmI,EAC1D,CACJ,CAODw1G,YAAYt/F,EAASm5G,GACjB,MAAM/zH,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAK0zG,QACxB1iG,KAAM,cAKU,SAAhBisH,EACA/zH,EAAI8E,EAAEivH,EAAa,CAAC,EAAGn5G,GAEvB5a,EAAI8E,EAAEivH,EAAa,CAAE5vD,MAAO,4BAA8BvpD,GAG9D9jB,KAAK4e,WAAWyS,KAAKnoB,GACrBlJ,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiC9kE,EAC3D,CASDiuG,mBAAmB3lH,EAAI0X,EAASm5G,GAC5B,MAAM/zH,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAK,GAAE7b,KAAK0zG,WAAWtnG,IACtC4E,KAAM,SAKU,SAAhBisH,EACA/zH,EAAI8E,EAAEivH,EAAan5G,GAASypD,KAE5BrkE,EAAI8E,EAAEivH,EAAa,CAAE5vD,MAAO,4BAA8BvpD,GACrDypD,KAGTvtE,KAAK4e,WAAWyS,KAAKnoB,GACrBlJ,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,6BAAyC9kE,EAChD,CAODo5G,WAAWpN,GACP,MAAM5mH,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAK0zG,QACxB1iG,KAAM,cAEV9H,EAAI8E,EAAE,UAAW8hH,GACjB9vH,KAAK4e,WAAWyS,KAAKnoB,EACxB,CAODi0H,sBAAsBpoD,EAAMj5D,GAExB,GAAIquB,KAAE4qC,GAAMtgE,KAAK,8CAA8CnQ,OAC3D,OAAO,EAIX,MAAM84H,EAAgBjzF,KAAE4qC,GAAMtgE,KAAK,2DAEnC,GAAI2oH,EAAc94H,OAAQ,CACtB,IAAIf,EACJ,MAAM85H,EACAlzF,KAAE4qC,GAAMtgE,KACN,kEAUR,OAPI4oH,EAAa/4H,SACbf,EAAS85H,EAAa12H,QAG1B3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,cAA0BrlF,EAAQ65H,EAAcxuF,KAAK,QAC5E5uC,KAAK4e,WAAWgoG,KAAK2T,QAAQv6H,KAAK0zG,UAE3B,CACV,CAGD,MAAMwf,EACA/oF,KAAE4qC,GACCtgE,KACG,sEAEHnQ,OACHg5H,EACAnzF,KAAE4qC,GACCtgE,KACG,sEAEHnQ,OACHi5H,EAAc99H,OAAO6I,KAAKtI,KAAK8yH,SAC/BgJ,EAAuB3xF,KAAE4qC,GAAMtgE,KAAK,eAAenQ,OAEzD,GAAIg5H,EAAQ,CACR,MAAME,EACArzF,KAAE4qC,GACHtgE,KAAK,8DACV,IAAIgpH,EAMAl6H,EAJAi6H,EAAYl5H,SACZm5H,EAAYD,EAAY5uF,KAAK,SAIjC,MAAMyuF,EACAlzF,KAAE4qC,GAAMtgE,KACV,+DAGA4oH,EAAa/4H,SACbf,EAAS85H,EAAa12H,QAM1B3G,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,OACAsqC,EACAuK,EACAl2D,GAAAA,QAAAA,mBAA2BzrD,GAC3BvY,EACAu4H,EACP,CAED,GAAI5I,EAIAqK,EAAYn6H,SAAQgpE,IAChB,MAAMovD,EAASx7H,KAAK8yH,QAAQ1mD,UAErBpsE,KAAK8yH,QAAQ1mD,UACbpsE,KAAK25H,cAAcvtD,GACrBovD,EAAOQ,SACRh8H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,gBAA4Bxc,EACtD,IAELpsE,KAAK4e,WAAWgoG,KAAK2T,QAAQv6H,KAAK0zG,SAI7B4pB,GACDt9H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,cAExB,CACH,MAAMy0C,EAAelzF,KAAE4qC,GAAMtgE,KAAK,WAC5B+mH,EAASx7H,KAAK8yH,QAAQh3G,GAC5B,IAAIvY,EAEA85H,EAAa/4H,SACbf,EAAS85H,EAAa12H,eAGnB3G,KAAK8yH,QAAQh3G,UACb9b,KAAK25H,cAAc79G,GAG1B9b,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,gBAA4B9sE,EAAMvY,GACrDi4H,SAAAA,EAAQQ,UACRjxH,GAAOsM,KAAK,gDACZrX,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,YAE9B,CACJ,CAOD80C,UAAUx0H,EAAK4S,GACX,MAAM9K,EAAO9H,EAAIk/B,aAAa,QAE9B,GAAa,UAATp3B,EAAkB,CAClB,MAAM2sH,EAAmBxzF,KAAEjhC,GAAKuL,KAAK,wBAAwB9N,OAE7D,GAAIg3H,EAAiBr5H,OAGjB,OAFAtE,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,wBAAoC+0C,IAEpD,EAEX,MAAMtG,EAAWltF,KAAEjhC,GAAKuL,KAAK,eAAe9N,OAI5C,OAFA3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,oBAAgCyuC,IAEhD,CACV,CAED,MAAM9kB,EAAMpoE,KAAEjhC,GAAKuL,KAAK,SAAS9N,OAC3BmpH,EAAU3lF,KAAEjhC,GAAKuL,KAAK,YAE5B,GAAIq7G,EAAQxrH,OAAQ,CAChB,MAAMs5H,EAAc9N,EAAQnpH,QAExBi3H,GAA+B,KAAhBA,KACf59H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,gBAA4Bg1C,GACnD7yH,GAAOD,IAAK,yBAAwB8yH,KAE3C,CAGD,IAAIC,EAAQ1zF,KAAEjhC,GAAKuL,KAAK,UAAUm6B,KAAK,SAEvC,IAAKivF,IAEDA,EAAQ1zF,KAAEjhC,GAAKuL,KAAK,6BAA6Bm6B,KAAK,SAElDivF,GAAO,CAEP,MAAMC,EACAD,EAAM12H,MAAM,2CAElB02H,EAAS,GAAEC,EAAU,MAAMA,EAAU,MAAMA,EAAU,KACxD,CAGL,GAAIhiH,IAAS9b,KAAK0zG,QAAS,CACvB,IAAIqqB,EAEJ,GAAI5zF,KAAEjhC,GAAKuL,KAAK,sEAAsEnQ,OAClFtE,KAAKw6H,qBACF,IAAKuD,EAAS5zF,KAAEjhC,GAAKuL,KAAK,4DAClBspH,EAAOz5H,OAAQ,CAC1B,MAAM05H,EAAiB7zF,KAAEjhC,GAAKuL,KAAK,4DACnC,IAAIy8B,EAEA8sF,GAAkBA,EAAe15H,SACjC4sC,EAAW8sF,EAAer3H,QAG9B3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,wBACnB9sE,EAAMiiH,EAAOnvF,KAAK,QAAS2jE,EAAKrhE,EACvC,CACJ,CAED,MAAM+sF,EAAc9zF,KAAEjhC,GAAKuL,KAAK,iBAAiB9N,OAEjD,GAAIs3H,EAAa,CACb,MAAMC,EAAal+H,KAAKqrG,KAAK8yB,sBAAsBF,GAKnD,GAAIC,QAAwBp3H,IAAV+2H,EAId,YAHA79H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,sBACnB9sE,EAAMoiH,EAIjB,CAED,GAAI3rB,EACA,GAAa,SAATvhG,EACAhR,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,yBACf9sE,EAAMy2F,EAAKvyG,KAAK2wH,UAAWkN,QAChC,GAAa,cAAT7sH,EAAsB,CAC7B,MAAMotH,EAASj0F,KAAEjhC,GAAKuL,KAAK,SAC3B,IAAIi+F,EAEA0rB,EAAO95H,OAAS,IAChBouG,EAAO0rB,EAAOz3H,QAMlB3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,iBACnB9sE,EAAMy2F,EAAKvyG,KAAK2wH,UAAWkN,EAAOnrB,EAAMryF,QAAQqyF,GACvD,CAER,CAOD2rB,gBAAgBtpD,EAAMj5D,GAClB,IAAIwiH,EAEJ,GAAIn0F,KAAE4qC,GACGtgE,KACG,mFAGHnQ,OACLyG,GAAOD,IAAI,uBAAwBgR,GACnC9b,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,wBACpB,GAAIz+C,KAAE4qC,GACJtgE,KACG,kFAGHnQ,OACYijE,GAAAA,QAAAA,iBAAyBwN,EAAK3sC,aAAa,SAE3CpoC,KAAKqrG,KAAKtkG,QAAQouH,MAAMoC,gBAKrCv3H,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,kBAGvB79E,GAAOuY,KAAK,eAAgByxD,GAC5B/0E,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,sCAEL,GAAIz+C,KAAE4qC,GAAMtgE,KAAK,8BAA8BnQ,OAClDyG,GAAOuY,KAAK,oDACRyxD,GACJ/0E,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,2BACpB,GAAIz+C,KAAE4qC,GACRtgE,KACG,0FAEkDnQ,OAAQ,CAG9D,MAAMi6H,EAAgBp0F,KAAE4qC,GAAMtgE,KAAK,iCACnC,IAAIi9G,EAEA6M,EAAcj6H,SACdotH,EAAe6M,EAAc53H,QAGjC,MAAM63H,EAAiBr0F,KAAE4qC,GAAMtgE,KAAK,wCAAwCnQ,OAAS,EAErFtE,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,gCAA4C8oC,EAAc8M,EACpF,MAAM,IAAKF,EAAuBn0F,KAAE4qC,GAAMtgE,KACnC,iFAAiFnQ,OAAQ,OAC7FyG,GAAOuY,KAAK,yBAA0ByxD,GACtC/0E,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,sBAAvB,UAAyD01C,EAAqB,GAAG1wF,WAAW0rF,aAA5F,aAAyD,EAA0CzxH,MACtG,MACGkD,GAAOuY,KAAK,eAAgByxD,GAC5B/0E,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,mBAE9B,CAOD61C,eAAeryD,EAAK2vD,GAChB,MAAM2C,GAAUh3D,EAAAA,GAAAA,KAAI,CAChB7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QAEThD,EAAE,QAAS,CAAEq/D,MAAO,yCACpBr/D,EAAE,OAAQ,CACP+tH,cACA3vD,IAAK7E,GAAAA,QAAAA,kBAA0B6E,KAElCp+D,EAAE,UAAUhC,EAAG,yCAAwC+vH,OACvDxuD,KAAKA,KAAKA,KAEXvtE,KAAK4e,WAAWo1D,OACZ0qD,GACA75H,GAAUkG,GAAOD,IAAI,4CAA6CshE,EAAK,KAAM2vD,EAAal3H,KAC1FlB,GAASoH,GAAOD,IAAI,yCAA0CnH,IACrE,CAOD0vH,KAAKjnD,GAAuC,IAAlC7oE,EAAkC,uDAAzB,wBACf,MAAMo7H,GAASj3D,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAK0zG,QAC1B1iG,KAAM,QACLhD,EAAE,QAAS,CAAEq/D,MAAO,yCACpBr/D,EAAE,OAAQ,CAAE0kG,KAAMnrC,GAAAA,QAAAA,mBAA2B6E,GAC1CtP,KAAM,SACT9uD,EAAE,UAAUhC,EAAEzI,GAAQgqE,KAAKA,KAAKA,KAErCvtE,KAAK4e,WAAWo1D,OACZ2qD,GACA95H,GAAUkG,GAAOD,IAAI,8BAA+BshE,EAAKvnE,KACzDlB,GAASoH,GAAOD,IAAI,2BAA4BnH,IACvD,CAWDi7H,SAASh3H,EAAK+8D,EAAWvjD,EAASy9G,GAE9B7+H,KAAK4e,WAAWo1D,QACZtM,EAAAA,GAAAA,KAAI,CACA7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QAELhD,EAAE,QAAS,CAAEq/D,MAAO,0CACzB1qD,IACI,GAAIwnB,KAAExnB,GACGlO,KACG,0EAEHnQ,OAAQ,CACb,MAAMw6H,GACAp3D,EAAAA,GAAAA,KAAI,CACF7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QAELhD,EAAE,QAAS,CACRq/D,MAAO,yCAGnByxD,EAAW9wH,EAAE,IAAK,CACdq/D,MAAO,gBACPr8D,KAAM,WAEV8tH,EACK9wH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFhC,EAAE,6CACFuhE,KACAA,KACLuxD,EACK9wH,EAAE,QAAS,CAAE,IAAO,8BACpBA,EAAE,SACFhC,EAAEpE,GACF2lE,KACAA,KACLuxD,EACK9wH,EAAE,QACE,CAAE,IAAO,yCACbA,EAAE,SACFhC,EAAU,OAARpE,GAA+B,IAAfA,EAAItD,OAAe,IAAM,KAC3CipE,KACAA,KAGDvtE,KAAK8xH,oBACLgN,EACK9wH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFhC,EAAE,QACFuhE,KACAA,KAKTuxD,EACK9wH,EAAE,QAAS,CAAE,IAAO,yBACpBA,EAAE,SACFhC,EAAE,UACFuhE,KACAA,KAELvtE,KAAK4e,WAAWo1D,OACZ8qD,GACA,KAII9+H,KAAKkxC,SAAWtpC,EAChB+8D,GAAW,GAEfvjD,EACP,MACGy9G,GACH,GAELz9G,EACP,CAWDwwG,eAAezkG,EAASw3C,EAAWvjD,GAC3B+L,GAAW1tB,OAAOiW,OAAO1V,KAAK8yH,SAAS/hH,QAAOpF,IAAMA,EAAEqwH,UAAS13H,QAI/D7E,OAAOiW,OAAO1V,KAAK8yH,SAAS1vH,SAAQuI,IAC5BA,EAAEygE,MAAQosD,GAAqB9qG,SAAS/hB,EAAEowH,cAC1C/7H,KAAKqrG,KAAKzsF,WAAWo1D,QACjBtM,EAAAA,GAAAA,KAAI,CACA7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QACThD,EAAE,QAAS,CACRq/D,MAAO,yCACVr/D,EAAE,OAAQ,CACP,YAAe,SACf,IAAOu5D,GAAAA,QAAAA,kBAA0B57D,EAAEygE,OACpCmB,KAAKA,KACf,IAIT,MAAMjoE,EAAgB8b,GAAoB,SAE1CphB,KAAKqrG,KAAKzsF,WAAWo1D,QACjBtM,EAAAA,GAAAA,KAAI,CACA7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QACPhD,EAAE,QAAS,CAAEq/D,MAAO,0CACvB1qD,IACI,GAAIwnB,KAAExnB,GAAKlO,KAAK,2EAA2EnQ,OAAQ,CAC/F,MAAMy6H,GACAr3D,EAAAA,GAAAA,KAAI,CACF7rD,GAAI7b,KAAK0zG,QACT1iG,KAAM,QACPhD,EAAE,QAAS,CAAEq/D,MAAO,yCAE3B0xD,EAAa/wH,EAAE,IAAK,CAChBq/D,MAAO,gBACPr8D,KAAM,WAEV+tH,EACK/wH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFhC,EAAE,6CACFuhE,KACAA,KACLwxD,EACK/wH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFhC,EAAEmhB,EAAU,OAAS,SACrBogD,KACAA,KAGDvtE,KAAKyzC,QACLsrF,EACK/wH,EAAE,QACC,CAAE,IAAO,yCACZA,EAAE,SACFhC,EAAE,KACFuhE,KACAA,KAGTvtE,KAAKqrG,KAAKzsF,WAAWo1D,OAAO+qD,EAAcp6D,EAAWr/D,EACxD,MACGA,EAAc,IAAI/C,MAAM,4CAC3B,GAEL+C,EACP,CAYD05H,cAAcp3H,EAAK8N,GACf,OAAO1V,KAAKmnH,uBAAuBv/G,EAAK8N,EAC3C,CASDyxG,uBAAuBv/G,EAAK8N,GACxBA,EAAOjQ,QAAUmC,EAEjB,MAAMq3H,EAAgBj/H,KAAK+4H,QAAQzxH,MAAMyJ,QAAOxJ,GAAQK,IAAQL,EAAK9B,UAGrE,QAA6B,IAAzBw5H,EAAc36H,QAAgBo9G,KAAQud,EAAc,GAAIvpH,KAI5D1V,KAAKknH,mBAAmBt/G,GACxB5H,KAAK+4H,QAAQzxH,MAAM1F,KAAK8T,GACxB1V,KAAKk6H,mBAAqBj5H,KAAKC,MAExB,GACV,CAQDg+H,gBAAgBt3H,GACZ,OAAO5H,KAAK+4H,QAAQzxH,MAAMmN,MAAKlN,GAAQK,IAAQL,EAAK9B,SACvD,CAMDyhH,mBAAmBt/G,GACf,MAAMN,EAAQtH,KAAK+4H,QAAQzxH,MAAMyJ,QAAOxJ,GAAQK,IAAQL,EAAK9B,UAE7DzF,KAAK+4H,QAAQzxH,MAAQA,EACrBtH,KAAKk6H,mBAAqBj5H,KAAKC,KAClC,CAOD4xG,oBAAoBxlG,EAAMjK,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAId,MAAM,+BAEpB,IAAIy6H,EAAch9H,KAAKg5H,aAAa1rH,GAE/B0vH,IACDh9H,KAAKg5H,aAAa1rH,GAAQ0vH,EAAc,KAEN,IAAlCA,EAAYvyH,QAAQpH,GACpB25H,EAAYp7H,KAAKyB,GAEjB0H,GAAOuY,KACF,sDAAqDhW,IAEjE,CAOD6xH,uBAAuB7xH,EAAMjK,GACzB,MAAM25H,EAAch9H,KAAKg5H,aAAa1rH,GAChC8xH,EAAapC,EAAcA,EAAYvyH,QAAQpH,IAAY,GAG7C,IAAhB+7H,EACApC,EAAYpyH,OAAOw0H,EAAY,GAE/Br0H,GAAOuY,KAAM,gBAAehW,uBAEnC,CAUD0uH,QAAQqD,GACJ,MAAM7D,EAASx7H,KAAK8yH,QAAQuM,GAE5B,OAAI7D,EACOA,EAAOQ,QAGX,IACV,CAKDjqB,cACI,MAAqB,cAAd/xG,KAAK88D,IACf,CAMDwiE,YAAYzuD,GACR,MAAM0uD,EAAWp1F,KAAE0mC,GAAIp8D,KAAK,qCACtBqY,EAAWqd,KAAE0mC,GAAIp8D,KAAK,sBAExB8qH,EAASj7H,QAAUwoB,EAASxoB,QACwB,SAAjD2L,OAAO6c,EAAS8hB,KAAK,UAAU/c,gBAClC9mB,GAAOuY,KAAK,iCAEZtjB,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,gBAAuB9hF,EAAWy4H,EAAS3wF,KAAK,YAAa9hB,EAAS8hB,KAAK,aAEtF,CAYD4wF,qBAAqBC,EAAY3sC,GAE7B,MAAM/d,EAAO/0E,KAAK25H,cAAe,GAAE35H,KAAK0zG,WAAW+rB,KAEnD,IAAK1qD,EAED,OAAO,KAEX,MAAM90D,EAAO,CACTsF,OAAO,EACPsuF,UAAW/gB,IAAc4Q,GAAUgH,MAAQjiB,GAAU,UAAVA,YAAmB3hF,GAElE,IAAI44H,EAAY,KAEhB,GAAI5sC,IAAc4Q,GAAU8M,MACxBkvB,EAAYnH,GAA2BxjD,EAAM,kBAC1C,IAAI+d,IAAc4Q,GAAUgH,MAc/B,OAFA3/F,GAAOpH,MAAO,2BAA0BmvF,KAEjC,KAd+B,CACtC4sC,EAAYnH,GAA2BxjD,EAAM,cAC7C,MAAM4qD,EAAgBpH,GAA2BxjD,EAAM,+BACjD6qD,EAAgBrH,GAA2BxjD,EAAM,aAEnD6qD,EAAct7H,OAAS,IACvB2b,EAAK4zF,UAAY+rB,EAAc,GAAG/3H,OAElC83H,EAAcr7H,OAAS,IACvB2b,EAAK4/G,UAAYF,EAAc,GAAG93H,MAEzC,CAIA,CAMD,OAJI63H,EAAUp7H,OAAS,IACnB2b,EAAKsF,MAA+B,SAAvBm6G,EAAU,GAAG73H,OAGvBoY,CACV,CAMD6/G,cAAcC,GACV,OAAI//H,KAAK8yH,QAAQiN,GACN//H,KAAK8yH,QAAQiN,GAASjjE,KAG1B,IACV,CAODkjE,gBAAgBC,GACZ,OAAOjgI,KAAK25H,cAAe,GAAE35H,KAAK0zG,WAAWusB,IAChD,CAMDC,KAAKx/B,GACD,OAAO1gG,KAAK4e,WAAWuhH,KAAKD,KAAKx/B,EAAQ,aACrCn5B,GAAAA,QAAAA,kBAA0BvnE,KAAK2wH,WAAY3wH,KAAKkxC,SAChDlxC,KAAKm5H,YACZ,CAKDiH,SACI,OAAOpgI,KAAK4e,WAAWuhH,KAAKC,QAC/B,CAMDC,WACI,OAAOrgI,KAAKs5H,KACf,CAKDgH,kBACI,OAAOtgI,KAAKu5H,YACf,CAKDxG,mBACI,OAAO/yH,KAAKw5H,aACf,CAKD+G,qBACI,OAAOvgI,KAAKy5H,YACf,CAKD+G,iBACI,OAAOxgI,KAAK45H,WACf,CAKD6G,cACI,OAAOzgI,KAAK65H,QACf,CAOD6G,eACI,OAAO1gI,KAAKk7H,SACf,CAQDyF,gBAAgBv0D,EAAKkyB,EAAMxL,GACvB/nF,GAAOsM,KAAK,WAAYinF,EAAMlyB,GAC9B,MAAMw0D,GAAYl5D,EAAAA,GAAAA,KACd,CAAE7rD,GAAI7b,KAAKm5H,YACPnoH,KAAM,QACThD,EAAE,OAAQ,CACPq/D,MAAQ,4BAA2BylB,IACnC1mB,QAEHpgE,EAAEsyF,EAAK9sF,YACP+7D,KAELvtE,KAAK4e,WAAWo1D,OACZ4sD,GACA/7H,GAAUkG,GAAOD,IAAI,WAAYjG,KACjClB,GAASoH,GAAOD,IAAI,iBAAkBnH,IAC7C,CAMDk9H,OAAOhwD,GAGH,GAFaA,EAAGzoC,aAAa,UAEhBpoC,KAAKm5H,YAGd,YAFApuH,GAAOuY,KAAK,oCAIhB,MAAMg7E,EAAOn0D,KAAE0mC,GAAIp8D,KAAK,QAEpB6pF,EAAKh6F,QAA0B,SAAhBg6F,EAAK33F,OACpB3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiC0V,EAAK1vD,KAAK,UAKlE7jC,GAAOuY,KAAK,qFAGnB,CAMDw9G,YAAYjwD,GAGR,GAFaA,EAAGzoC,aAAa,UAEhBpoC,KAAKm5H,YAGd,YAFApuH,GAAOuY,KAAK,oCAIhB,MAAMg7E,EAAOn0D,KAAE0mC,GAAIp8D,KAAK,QAEpB6pF,EAAKh6F,QAA0B,SAAhBg6F,EAAK33F,OACpB3G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiC0V,EAAK1vD,KAAK,UAKlE7jC,GAAOuY,KAAK,qFAGnB,CAKD2vG,QACIjzH,KAAKi5H,qBAAqB71H,SAAQkwC,GAAUA,MAC5CtzC,KAAKi5H,qBAAuB,GAE5Bj5H,KAAKqyH,QAAS,EACdryH,KAAKk5H,mBAAoB,CAC5B,CAQD/G,MAAM5uH,GAAQ,aACVvD,KAAKu5H,aAAan/B,UAClBp6F,KAAKw5H,cAAcp/B,UACnBp6F,KAAKy5H,aAAar/B,UAElB,MAAM6jB,EAAW,GAkCjB,OAhCA,UAAAj+G,KAAKs5H,aAAL,eAAYzH,YAAa5T,EAASr8G,KAAK5B,KAAKs5H,MAAMnH,SAElDlU,EAASr8G,KAAK,IAAIwY,SAAQ,CAACC,EAASC,KAChC,IAAIo5D,GAAW,EAEf,MAAMqtD,EAAY,WAAsB,IAArBC,EAAqB,wDACpC,EAAK1+B,aAAa39D,eAAeikD,GAAW,WAAXA,SAAqBm4C,GACtDp3H,aAAa+pE,GACTstD,GAEA,EAAKpiH,WAAWgoG,KAAK2T,QAAQ,EAAK7mB,SAClCp5F,EAAO,IAAI/X,MAAM,sEAEjB8X,GAEP,EAEGra,KAAKqyH,QACL3+C,EAAU9pE,YAAW,IAAMm3H,GAAU,IAAO,KAE5C/gI,KAAKizH,QACLjzH,KAAKsiG,aAAav9D,GAAG6jD,GAAW,WAAXA,SAAqBm4C,GAC1C/gI,KAAKu6H,QAAQh3H,KAKbvD,KAAK4e,WAAWgoG,KAAK2T,QAAQv6H,KAAK0zG,SAClC1zG,KAAKizH,QACR,KAGE74G,QAAQikG,WAAWJ,EAC7B,CAKDvkF,MACI,GAAI15B,KAAKw5H,cAAc/I,iBAGnB,YAFA1lH,GAAOuY,KAAK,mDAMhB,MAAMpa,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKqrG,KAAK41B,gCAEjC/3H,EAAI8E,EAAE,kBAAkBu/D,KAExBvtE,KAAKqrG,KAAKzsF,WAAWyS,KAAKnoB,EAC7B,ECz1DL,MAAM6B,IAASkC,EAAAA,EAAAA,2CAKA,MAAMi0H,WAA4BnX,GAK7CnqH,YAAYyrG,GACRlzB,QACAn4E,KAAKqrG,KAAOA,EACZrrG,KAAK0mH,MAAQ,CAAC,CACjB,CAMDhtG,KAAKkF,GACDu5D,MAAMz+D,KAAKkF,GAGX5e,KAAK4e,WAAWnb,WAAWzD,KAAKu7H,WAAW14H,KAAK7C,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAK4e,WAAWnb,WAAWzD,KAAKm9H,sBAAsBt6H,KAAK7C,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAK4e,WAAWnb,WAAWzD,KAAKq+H,gBAAgBx7H,KAAK7C,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAK4e,WAAWnb,WAAWzD,KAAK09H,UAAU76H,KAAK7C,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAK4e,WAAWnb,WAAWzD,KAAK6gI,OAAOh+H,KAAK7C,MACxC,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAK4e,WAAWnb,WAAWzD,KAAK8gI,YAAYj+H,KAAK7C,MAC7C,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAK4e,WAAWnb,WAAWzD,KAAKmhI,WAAWt+H,KAAK7C,MAC5C,iBAAkB,KAAM,MAAO,KAAM,KAC5C,CAQDwyH,WAAWpmD,EAAKl7B,EAAUnqC,GACtB,MAAMwnG,EAAUhnC,GAAAA,QAAAA,kBAA0B6E,GAE1C,GAAIpsE,KAAKohI,cAAc7yB,GAAU,CAC7B,MAAM6c,EAAS,+BAGf,MADArgH,GAAOpH,MAAMynH,GACP,IAAI7oH,MAAM6oH,EACnB,CAMD,OALAprH,KAAK0mH,MAAMnY,GAAW,IAAIsqB,GAAS74H,KAAK4e,WAAYwtD,EAChDl7B,EAAUlxC,KAAKqrG,KAAMtkG,GACzB/G,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,gBAA4B5oF,KAAK0mH,MAAMnY,IAEpCvuG,KAAK0mH,MAAMnY,EACrB,CAQD6yB,cAAc7yB,GACV,OAAOA,KAAWvuG,KAAK0mH,KAC1B,CAMD6T,QAAQnuD,GACJpsE,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,kBAA8B5oF,KAAK0mH,MAAMt6C,WACtCpsE,KAAK0mH,MAAMt6C,EACrB,CAMDmvD,WAAWxmD,GACP,MAAMj5D,EAAOi5D,EAAK3sC,aAAa,QAG/B,GAAI2sC,EAAK3sC,aAAa,QAClB,OAAO,EAGX,MAAMynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAElD,OAAK+zF,IAKD1lE,KAAE4qC,GAAMtgE,KAAK,sEACYnQ,QACzBurG,EAAKsrB,yBAGTtrB,EAAK0rB,WAAWxmD,IAET,EACV,CAMDooD,sBAAsBpoD,GAClB,MAAMj5D,EAAOi5D,EAAK3sC,aAAa,QACzBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAElD,OAAK+zF,IAILA,EAAKstB,sBAAsBpoD,EAAMj5D,IAE1B,EACV,CAMDuiH,gBAAgBtpD,GACZ,MAAMj5D,EAAOi5D,EAAK3sC,aAAa,QACzBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAElD,OAAK+zF,IAILA,EAAKwuB,gBAAgBtpD,EAAMj5D,IAEpB,EACV,CAMD4hH,UAAUx0H,GAEN,MAAM4S,EAAO5S,EAAIk/B,aAAa,QACxBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAElD,OAAK+zF,IAILA,EAAK6tB,UAAUx0H,EAAK4S,IAEb,EACV,CAMD+kH,OAAOhwD,GACH,MAAM/0D,EAAO+0D,EAAGzoC,aAAa,QACvBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAGlD,OAAK+zF,IAILA,EAAKgxB,OAAOhwD,IAEL,EACV,CAMDiwD,YAAYjwD,GACR,MAAM/0D,EAAO+0D,EAAGzoC,aAAa,QACvBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAGlD,OAAK+zF,IAILA,EAAKixB,YAAYjwD,IAEV,EACV,CAODswD,WAAWtwD,GACP,MAAM/0D,EAAO+0D,EAAGzoC,aAAa,QACvBynE,EAAO7vG,KAAK0mH,MAAMn/C,GAAAA,QAAAA,kBAA0BzrD,IAIlD,OAFA+zF,SAAAA,EAAMyvB,YAAYzuD,IAEX,CACV,4BCtNL,MAAM9lE,IAASkC,EAAAA,EAAAA,oDAQf,SAASo0H,GAAuBC,EAAOC,GACnC,MAAMh6H,GAAO8/D,EAAAA,GAAAA,QAAO,SAAU,CAC1BgG,MAAO,kCACP75D,KAAM+tH,EAAkB7zH,EACxBJ,KAAMi0H,EAAkBhvH,IAc5B,OAXIgvH,EAAkB51H,GAClBpE,EAAKyG,EAAE,YAAa,CAChBV,KAAM,OACNzF,MAAO05H,EAAkB51H,IAC1B4hE,KAEPhmE,EAAKyG,EAAE,YAAa,CAChBq/D,MAAO,2BACPi0D,UACD/zD,KAEIhmE,EAAKA,IACf,CAOD,SAASi6H,GAA0BC,GAC/B,MAAMl6H,GAAO8/D,EAAAA,GAAAA,QAAO,aAAc,CAC9BgG,MAAO,kCACP14D,WAwDejG,EAxDU+yH,EAAqB,GAyDtC,MAAR/yH,EACO,MACQ,MAARA,EACA,MAGJ,QAPX,IAAuBA,EArDnB,IAAK,IAAI5J,EAAI,EAAGA,EAAI28H,EAAqBn9H,OAAQQ,IAC7CyC,EAAKyG,EAAE,SAAU,CACbq/D,MAAO,kCACP75D,KAAMiuH,EAAqB38H,KAC5ByoE,KAGP,OAAOhmE,EAAKA,IACf,CASD,SAASm6H,GAA2B7wD,EAAIiiB,GACpC,MAAM6uC,EAASx3F,KAAE0mC,GAAIp8D,KAAK,UAAU,GACpC,IACIoT,EADAxX,EAAU85B,KAAEw3F,GAAQltH,KAAM,iBAAgBq+E,OAyB9C,OAtBIziF,EAAQ/L,OACR+L,EAAUA,EAAQ,IAGlBA,GAAUg3D,EAAAA,GAAAA,QAAO,UAAW,CACxB/5D,KAAMwlF,IACPvrF,KACHo6H,EAAOr7H,YAAY+J,IAGvBwX,EAAcsiB,KAAE95B,GAASoE,KAAK,eAE1BoT,EAAYvjB,OACZujB,EAAcA,EAAY,IAE1BA,GAAcw/C,EAAAA,GAAAA,QAAO,cAAe,CAChCgG,MAAO,6BACPv8D,MAAOgiF,IACRvrF,KACH8I,EAAQ/J,YAAYuhB,IAGjBA,CACV,CA8BM,SAAS+5G,GAAsB/wD,EAAIgxD,GAAgB,MACtD,IAAI3tG,EAEJ,IACIA,EAAO0kF,GAAcipB,EAAe1yF,YACvC,CAAC,MAAOxrC,GAGL,OAFAoH,GAAOpH,MAAO,sDAAqDk+H,EAAe1yF,eAE3E,IACV,CAED,GAAI,UAACjb,SAAD,QAAC,EAAMrd,QAEP,OAAO,KAIX,MAAMirH,EAAsBJ,GAA2B7wD,EAAI6yB,GAAU8M,OAC/DuxB,EAAsBL,GAA2B7wD,EAAI6yB,GAAUgH,OAC/Dz1F,EAAU,IAAIm5C,IAEpB,IAAK,MAAMkzE,KAASptG,EAAKrd,QACrB,GAAIqd,EAAKrd,QAAQrP,eAAe85H,GAAQ,CACpC,MAAM5tH,EAAQ,GACRsuH,EAAe9tG,EAAKrd,QAAQyqH,GAI5BW,GAAeD,aAAA,EAAAA,EAAc19H,SAAU09H,EAAa,GACpDE,GAAkBF,aAAA,EAAAA,EAAc19H,QAAS,GAAK09H,EAAa,GAC3DG,GAAeH,aAAA,EAAAA,EAAc19H,QAAS,GAAK09H,EAAa,GACxDI,GAAkBJ,aAAA,EAAAA,EAAc19H,QAAS,GAAK09H,EAAa,GAEjE,GAAIC,SAAAA,EAAc39H,OACd,IAAK,IAAIQ,EAAI,EAAGA,EAAIm9H,EAAa39H,OAAQQ,IAAK,OAC1Ci9H,EAAoBz7H,YAAY+6H,GAAuBC,EAAOW,EAAan9H,KAC3E4O,EAAM9R,KAAN,UAAWqgI,EAAan9H,UAAxB,aAAW,EAAiB4I,EAC/B,CAGL,GAAIw0H,SAAAA,EAAiB59H,OACjB,IAAK,IAAIQ,EAAI,EAAGA,EAAIo9H,EAAgB59H,OAAQQ,IACxCi9H,EAAoBz7H,YAAYk7H,GAA0BU,EAAgBp9H,KAGlF,GAAIq9H,SAAAA,EAAc79H,OACd,IAAK,IAAIQ,EAAI,EAAGA,EAAIq9H,EAAa79H,OAAQQ,IAAK,OAC1Cg9H,EAAoBx7H,YAAY+6H,GAAuBC,EAAOa,EAAar9H,KAC3E4O,EAAM9R,KAAN,UAAWugI,EAAar9H,UAAxB,aAAW,EAAiB4I,EAC/B,CAGL,GAAI00H,SAAAA,EAAiB99H,OACjB,IAAK,IAAIQ,EAAI,EAAGA,EAAIs9H,EAAgB99H,OAAQQ,IACxCg9H,EAAoBx7H,YAAYk7H,GAA0BY,EAAgBt9H,KAGlFmQ,EAAQ6xB,IAAIw6F,EAAO5tH,EACtB,CAGL,OAAOuB,CACV,CCpLM,MAgCP,GAhC6B,CAIzBotH,IAAK,MAKLC,KAAM,OAKNC,KAAM,OAKNC,OAAQ,SAKRC,IAAK,MAKLC,IAAK,OC9BF,IAAKC,aAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,SAAAA,WAAAA,EAAAA,SAAAA,WAAAA,EAAAA,SAAAA,YAAAA,KAAAA,GAAAA,CAAAA,ICEZ,MAAM53H,GAASzL,EAAAA,MAAAA,2CAqVf,GA3UuB,CAQnBsjI,aAAc,KAQdlpH,OAAmB,IAAd3S,EAAc,uDAAJ,CAAC,EACZ/G,KAAK+G,QAAUA,EACf/G,KAAK4iI,aAAe5iI,KAAK6iI,4BAEpB7iI,KAAK4iI,cACN73H,GAAOsM,KAAK,2BAEnB,EASDwrH,4BACI,OAAIriG,GAAQ60D,SACD,CAAC1wB,EAAWD,KACfnlE,OAAOujI,YAAYC,oBACfp+D,GACA,CAAChhE,EAAO+gB,KACJ,IAAIs+G,EAmBAA,EADAr/H,GAAwB,sBAAfA,EAAM2J,KACF,IAAI2iF,GACbb,IAGS,IAAIa,GACbtsF,EAAO+gB,EAAa,CAAE,YAER,mBAAdggD,GACDA,EAAUs+D,EADjB,GA7BR,EAiCGxiG,GAAQ80D,aACRt1F,KAAKijI,uBACLziG,GAAQ+0D,iBAAmB/0D,GAAQi4D,0BACnCz4F,KAAKkjI,kCACL1iG,GAAQi4D,0BACRz4F,KAAKmjI,iCAEhBp4H,GAAOD,IAAI,mCAAoC01B,GAAQw0D,WAEhD,KACV,EAODouC,uBACI,MAAM,aAAEC,GAAiBrjI,KAAK+G,QAQ9B,OAPcs8H,UAAAA,EAAcC,QAAS,CACjCC,iBAAiB,EACjBC,aAAc,EACdC,kBAAkB,EAClBC,kBAAkB,EAIzB,EAODxiD,cACI,OAA6B,OAAtBlhF,KAAK4iI,YACf,EASDK,uBAAuBt+D,EAAWD,GAAyB,eAAd39D,EAAc,uDAAJ,CAAC,EACpD,GAAIxH,OAAOokI,yBAA2BpkI,OAAOokI,wBAAwBC,kBAAmB,CACpF,MAAM,wBAAEC,EAAF,yBAA2BC,EAA3B,sBAAqDC,GAA0B/jI,KAAK+G,QAE1FxH,OAAOokI,wBAAwBC,kBAC3B,CACIG,sBACIh9H,EAAQg9H,uBAAyBA,GAAyB,CAAE,SAAU,YAE9E,SAACC,EAAUC,GACP,GAAID,EAAU,qBACV,IAAIE,GAAmB,EAEvB,GAJ4C,wDAItB,CAClBA,EAAmB,CAAC,EACpB,MAAMC,EAAsB,EAAKf,uBAEE,kBAAxBe,IACPD,EAAmB,CACfE,SAAUD,IAUC,WAAfF,IACAC,EAAiB3zC,UAAY,CACzB8zC,kBAAmB,WAG9B,CAED,MAAM3/G,EAAc,CAChBijF,MAAOu8B,EACP7zC,MAAO,CACHE,UAAW,CACP8zC,kBAAmB,UACnBC,oBAAqBN,EACrBO,aAAY,UAAEV,aAAF,EAAEA,EAAyB9/H,WAA3B,QAhKX,EAiKDygI,aAAY,UAAEX,aAAF,EAAEA,EAAyB7/H,WAA3B,QAjKX,EAkKD45C,SAAUkmF,SAAF,UAAEA,EAA0BvvG,aAA5B,aAAE,EAAiCxwB,IAC3CysF,UAAWszC,SAAF,UAAEA,EAA0BtvG,cAA5B,aAAE,EAAkCzwB,IAC7C85C,SAAQ,UAAEimF,SAAF,UAAEA,EAA0BvvG,aAA5B,aAAE,EAAiCvwB,WAAnC,QAA0CzE,OAAO00B,OAAOM,MAChEkwG,UAAS,UAAEX,SAAF,UAAEA,EAA0BtvG,cAA5B,aAAE,EAAkCxwB,WAApC,QAA2CzE,OAAO00B,OAAOO,UAM9ExX,UAAUmJ,aAAasC,aAAa/D,GAC/B/J,MAAK3I,IACF,EAAK0yH,eAAe1yH,GACpB2yD,EAAU,CACN3yD,SACA2yH,SAAUX,EACVY,WAAYX,GAHhB,IAMHrgH,OAAMC,GAAO6gD,EAAU7gD,IAC/B,MAIG6gD,EAAU,IAAIurB,GAAgBb,IAErC,IACDvrE,GAAO6gD,EAAU,IAAIurB,GACjBb,GACAvrE,KAGX,MACG6gD,EAAU,IAAIurB,GAAgBb,IAErC,EAQD+zC,gCAAgCvxD,EAAUtsE,GACtC,IAAIqjB,EAGAA,EADA3L,UAAU2L,gBACQ3L,UAAU2L,gBAAgB9lB,KAAKma,WAG/BA,UAAUmJ,aAAawC,gBAAgB9lB,KAAKma,UAAUmJ,cAG5E,MAAMwhF,EAAQ3nG,KAAKojI,uBACnB,IAAI/yC,EAAQ,CAAC,EACb,MAAM,wBAAEwzC,GAA4B7jI,KAAK+G,QAEF,iBAA5B88H,IACPxzC,EAAM6Y,UAAY26B,GAKtBxzC,EAAM6Y,kBAAoB7Y,EAAM6Y,UAAUnlG,IAEtCy8B,GAAQo2D,oBAERp2D,GAAQm1D,qBAAqB,OAAStF,EAAMw0C,iBAAmB,YAKzDhB,aAAA,EAAAA,EAAyB7/H,KAzON,IA0OrBqsF,EAAM77D,OAAS,MACf67D,EAAM97D,MAAQ,QAIY,IAA9B90B,OAAO6I,KAAK+nF,GAAO/rF,SACnB+rF,GAAQ,GAGZ,MAAM3rE,EAAc,CAChB2rE,QACAsX,QACAm9B,OAAQ,UAGZ/5H,GAAOsM,KAAK,2CAA4CqN,GAExDiE,EAAgBjE,GACX/J,MAAK3I,IACFhS,KAAK0kI,eAAe1yH,GACpB4/D,EAAS,CACL5/D,SACA2yH,SAAU3yH,EAAO5F,IAFrB,IAKHwX,OAAMjgB,IACH,MAAMohI,EAAe,CACjBC,UAAWrhI,GAASA,EAAM2J,KAC1B+pH,SAAU1zH,GAASA,EAAMmgB,QACzBmhH,WAAYthI,GAASA,EAAM8H,OAG/BV,GAAOpH,MAAM,wBAAyB+gB,EAAaqgH,GAE/CA,EAAa1N,WAAmE,IAAvD0N,EAAa1N,SAAS5sH,QAAQ,oBAGvDnF,EAAc,IAAI2qF,GAAgBb,KAKtC9pF,EAAc,IAAI2qF,GAAgBb,IAAlC,GAEX,EAQD8zC,kCAAkCtxD,EAAUtsE,GACxCyF,GAAOsM,KAAK,4CAEZ2F,UAAUmJ,aAAawC,gBAAgB,CAAE0nE,OAAO,IAC3C11E,MAAK3I,IACFhS,KAAK0kI,eAAe1yH,GACpB4/D,EAAS,CACL5/D,SACA2yH,SAAU3yH,EAAO5F,IAFrB,IAIHwX,OAAM,KACHte,EAAc,IAAI2qF,GAAgBb,IAAlC,GAGX,EAQDs1C,eAAe1yH,GACX,MAAM,wBAAE6xH,GAA4B7jI,KAAK+G,QACnCm+H,EAAelzH,EAAOmzH,iBAAiB,GAGzC,gBAAiBD,EACjBA,EAAaE,aAAcvB,aAAA,EAAAA,EAAyB7/H,KA1T3B,EA0TyD,SAAW,SAE7F+G,GAAOuY,KAAK,uDAEnB,EAQD+hH,2BAA2BC,GACvBv6H,GAAOsM,KAAM,uCAAsCiuH,KAEnDtlI,KAAK+G,QAAQ88H,wBAA0B,CACnC9/H,IA1UyB,EA2UzBC,IAAKshI,EAEZ,kBCtVL,MAAMv6H,IAASkC,EAAAA,EAAAA,qCAOTs4H,GAAU,CACZC,mBAAmB7+H,GAIRA,EAAOA,EAAK1E,QAAQ,iBAAkB,IAAM0E,EAEvD8+H,UAAUC,EAAWC,GACjB,IACI1nE,EAAKxD,EADLx6C,EAAO,KAeX,OAZKw6C,EAAQ8qE,GAAQK,SAASF,EAAW,eAAgBC,MAC7C1nE,EACEsnE,GAAQK,SACNF,EACA,aACAC,MACZ1lH,EAAO,CACHw6C,MAAO8qE,GAAQM,cAAcprE,GAC7BwD,IAAKsnE,GAAQO,YAAY7nE,KAI1Bh+C,CACV,EACD4lH,cAAct6H,GACHA,EAAKtF,UAAU,IAE1B8/H,cAAcC,GACF,eAAcA,IAE1BF,YAAYv6H,GACDA,EAAKtF,UAAU,IAE1BggI,YAAYhoE,GACA,aAAYA,IAExBioE,SAAS36H,GACEA,EAAKtF,UAAU,GAS1BkgI,mBAAmBC,GACf,MAAMC,EAAWD,EAAU3xH,MAAKlJ,GAAQA,EAAKd,QAAQ,UAAY,IAEjE,IAAK47H,EACD,OAGJ,MAAMh5H,EAAIg5H,EAASpgI,UAAUogI,EAAS57H,QAAQ,UAAY,GAE1D,OAAO86H,GAAQC,mBAAmBn4H,EACrC,EACDszD,WAAWp1D,GACP,MAAM0U,EAAO,CAAC,EACRtO,EAAQpG,EAAKtF,UAAU,GAAGyF,MAAM,KAUtC,OARAuU,EAAKnP,MAAQa,EAAM6c,QACnBvO,EAAKnO,KAAOH,EAAM6c,QAClBvO,EAAKswC,MAAQ5+C,EAAM6c,QACa,KAA5B7c,EAAMA,EAAMrN,OAAS,IACrBqN,EAAMgK,MAEVsE,EAAK6gD,IAAMnvD,EAEJsO,CACV,EACDqmH,WAAW7nE,GAEF,KAAIA,EAAM3tD,SAAS2tD,EAAM3sD,QAAQ2sD,EAAMlO,SACpCkO,EAAMqC,IAAI7tD,KAAK,OAE3BszH,YAAYh7H,GACR,MAAM0U,EAAO,CAAC,EACd,IAAItO,EAAQpG,EAAKtF,UAAU,GAAGyF,MAAM,KAQpC,OANAuU,EAAK7T,GAAKuF,EAAM6c,QAChB7c,EAAQA,EAAM,GAAGjG,MAAM,KACvBuU,EAAK3S,KAAOqE,EAAM6c,QAClBvO,EAAKumH,UAAY70H,EAAM6c,QACvBvO,EAAKg7C,SAAWtpD,EAAMrN,OAASqN,EAAM6c,QAAU,IAExCvO,CACV,EAODwmH,aAAal7H,GACT,MAAMoG,EAAQpG,EAAKtF,UAAU,IAAIyF,MAAM,KAQvC,MAAO,CAPUiG,EAAM,GACNA,EAAM,GAGHA,EAAMrN,OAAS,EAAIqN,EAAM,GAAK,KAIrD,EACD+0H,cAAcn7H,GACHA,EAAKtF,UAAU,IAE1B0gI,YAAY3zH,GACR,IAAIzH,EACG,YAAWyH,EAAGo1B,aAAa,SAASp1B,EAAGo1B,aAAa,WACnDp1B,EAAGo1B,aAAa,eAOxB,OALIp1B,EAAGo1B,aAAa,aACmB,MAAhCp1B,EAAGo1B,aAAa,cACnB78B,GAAS,IAAGyH,EAAGo1B,aAAa,eAGzB78B,CACV,EACDq7H,YAAYr7H,GACR,MAAM0U,EAAO,CAAC,EACRtO,EAAQpG,EAAKtF,UAAU,GAAGyF,MAAM,KAStC,OAPAuU,EAAKiwC,IAAMv+C,EAAM6c,QACjBvO,EAAK,gBAAkBtO,EAAM6c,QAC7BvO,EAAK,cAAgBtO,EAAM6c,QACvB7c,EAAMrN,SACN2b,EAAK,kBAAoBtO,EAAMsB,KAAK,MAGjCgN,CACV,EACDy8C,iBAAiBnxD,GACb,MAAM0U,EAAO,CAAC,EACRtO,EAAQpG,EAAKtF,UAAU,IAAIyF,MAAM,KAMvC,OAJAuU,EAAK+vB,KAAOr+B,EAAM6c,QAClBvO,EAAK4mH,YAAcl1H,EAAM6c,QAGlBvO,CACV,EACD07C,UAAUpwD,GACN,MAAM0U,EAAO,GACb,IAAItO,EAAQpG,EAAKG,MAAM,KAEvBiG,EAAM6c,QACN7c,EAAQA,EAAMsB,KAAK,KAAKvH,MAAM,KAC9B,IAAK,IAAI5G,EAAI,EAAGA,EAAI6M,EAAMrN,OAAQQ,IAAK,CACnC,IAAI8C,EAAM+J,EAAM7M,GAAG4G,MAAM,KAAK,GAE9B,KAAO9D,EAAItD,QAAqB,MAAXsD,EAAI,IACrBA,EAAMA,EAAI3B,UAAU,GAExB,MAAM4B,EAAQ8J,EAAM7M,GAAG4G,MAAM,KAAK,GAE9B9D,GAAOC,EACPoY,EAAKre,KAAK,CAAE0L,KAAM1F,EACdC,UACGD,GAEPqY,EAAKre,KAAK,CAAE0L,KAAM,GACdzF,MAAOD,GAElB,CAED,OAAOqY,CACV,EACD6mH,kBAAkBv7H,GACd,MAAM4Z,EAAY,CAAC,EACb4hH,EAAQx7H,EAAKG,MAAM,KAEzByZ,EAAUg1C,WAAa4sE,EAAM,GAAG9gI,UAAU,IAC1Ckf,EAAUvT,UAAYm1H,EAAM,GAC5B5hH,EAAUi1C,SAAW2sE,EAAM,GAAGl1G,cAC9B1M,EAAUk1C,SAAW0sE,EAAM,GAC3B5hH,EAAUtT,GAAKk1H,EAAM,GACrB5hH,EAAUrT,KAAOi1H,EAAM,GAGvB5hH,EAAUnU,KAAO+1H,EAAM,GACvB5hH,EAAUtW,WAAa,EACvB,IAAK,IAAI/J,EAAI,EAAGA,EAAIiiI,EAAMziI,OAAQQ,GAAK,EACnC,OAAQiiI,EAAMjiI,IACd,IAAK,QACDqgB,EAAU,YAAc4hH,EAAMjiI,EAAI,GAClC,MACJ,IAAK,QACDqgB,EAAU,YAAc4hH,EAAMjiI,EAAI,GAClC,MACJ,IAAK,aACDqgB,EAAUtW,WAAak4H,EAAMjiI,EAAI,GACjC,MACJ,IAAK,UACDqgB,EAAUvW,QAAUm4H,EAAMjiI,EAAI,GAC9B,MACJ,QACIiG,GAAOkT,MACF,sCACG8oH,EAAMjiI,UAAUiiI,EAAMjiI,EAAI,OAS1C,OANAqgB,EAAU6hH,QAAU,IAIpB7hH,EAAU/Y,GAAKnI,KAAKE,SAASqN,SAAS,IAAI5F,OAAO,EAAG,IAE7CuZ,CACV,EACD8hH,kBAAkBC,GACd,IAAI37H,EAAO,CACN,eAAc27H,EAAK/sE,aACpB+sE,EAAKt1H,UACLs1H,EAAK9sE,SACL8sE,EAAK7sE,SACL6sE,EAAKr1H,GACLq1H,EAAKp1H,KACL,MACAo1H,EAAKl2H,MACPiC,KAAK,KAGP,OADA1H,GAAQ,IACA27H,EAAKl2H,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGk2H,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5B57H,GAAQ,QACRA,GAAQ,IACRA,GAAQ27H,EAAK,YACb37H,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQ27H,EAAK,YACb37H,GAAQ,KAchB,OAVI27H,EAAKC,gBAAgB,aACrB57H,GAAQ,UACRA,GAAQ,IACRA,GAAQ27H,EAAKt4H,QACbrD,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQ27H,EAAKC,gBAAgB,cAAgBD,EAAKr4H,WAAa,IAExDtD,CACV,EACD67H,UAAUjzH,GAIN,MAAM8L,EAAO,IAAImuC,IACXp9B,EAAQ7c,EAAKzI,MAAM,QAEzB,IAAK,IAAI5G,EAAI,EAAGA,EAAIksB,EAAM1sB,OAAQQ,IAC9B,GAAiC,YAA7BksB,EAAMlsB,GAAGmB,UAAU,EAAG,GAAkB,CAExC,MAAMuN,EAAOwd,EAAMlsB,GAAG4G,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhDuU,EAAKkE,IAAI3Q,IACVyM,EAAK6mB,IAAItzB,EAAM,IAGnByM,EAAKkE,IAAI3Q,GAAM5R,KAAKovB,EAAMlsB,GAC7B,CAGL,OAAOmb,CACV,EAQDonH,oBAAoBjB,GAChB,MAAMkB,EAAiBlB,EAAU3xH,MAAK8yH,GAAeA,EAAY98H,QAAQ,UAAY,IAGrF,OAAO68H,aAAP,EAAOA,EAAgBrhI,UAAUqhI,EAAe78H,QAAQ,UAAY,EACvE,EASD+8H,mBAAmBpB,GACf,MAAM14H,EAAI,cACJ+5H,EAAgBrB,EAAU3xH,MAAK8yH,GAAeA,EAAY98H,QAAQiD,GAAK,IAE7E,OAAO+5H,aAAP,EAAOA,EAAexhI,UAAUwhI,EAAch9H,QAAQiD,GAAKA,EAAEpJ,OAChE,EACDojI,YAAYn8H,GACR,MAAMoG,EAAQpG,EAAKK,OAAO,IAAIF,MAAM,KAC9BuU,EAAO,CAAC,EAMd,OAJAA,EAAK4jC,GAAKlyC,EAAM6c,QAChBvO,EAAKjP,KAAOW,EAAM6c,QAClBvO,EAAKjR,OAAS2C,EAEPsO,CACV,EACDq7C,YAAY/vD,GACR,MAAMoG,EAAQpG,EAAKK,OAAO,GAAGF,MAAM,KAC7BuU,EAAO,CAAC,EAYd,OAVAA,EAAKpY,MAAQ8J,EAAM6c,SACc,IAA7BvO,EAAKpY,MAAM4C,QAAQ,KACnBwV,EAAK1R,UAAY,QAEjB0R,EAAK1R,UAAY0R,EAAKpY,MAAM+D,OAAOqU,EAAKpY,MAAM4C,QAAQ,KAAO,GAC7DwV,EAAKpY,MAAQoY,EAAKpY,MAAM+D,OAAO,EAAGqU,EAAKpY,MAAM4C,QAAQ,OAEzDwV,EAAKs7C,IAAM5pD,EAAM6c,QACjBvO,EAAKjR,OAAS2C,EAEPsO,CACV,EACD2lH,SAAS+B,EAAUC,EAAQ/qE,GACvB,IAAI7rC,EAAQ22G,EAASj8H,MAAM,QAE3B,IAAK,IAAI5G,EAAI,EAAGA,EAAIksB,EAAM1sB,OAAQQ,IAC9B,GAAIksB,EAAMlsB,GAAGmB,UAAU,EAAG2hI,EAAOtjI,UAAYsjI,EACzC,OAAO52G,EAAMlsB,GAGrB,IAAK+3D,EACD,OAAO,EAIX7rC,EAAQ6rC,EAAYnxD,MAAM,QAC1B,IAAK,IAAIyF,EAAI,EAAGA,EAAI6f,EAAM1sB,OAAQ6M,IAC9B,GAAI6f,EAAM7f,GAAGlL,UAAU,EAAG2hI,EAAOtjI,UAAYsjI,EACzC,OAAO52G,EAAM7f,GAIrB,OAAO,CACV,EACD02H,UAAUF,EAAUC,EAAQ/qE,GACxB,IAAI7rC,EAAQ22G,EAASj8H,MAAM,QAC3B,MAAMo8H,EAAU,GAEhB,IAAK,IAAIhjI,EAAI,EAAGA,EAAIksB,EAAM1sB,OAAQQ,IAC1BksB,EAAMlsB,GAAGmB,UAAU,EAAG2hI,EAAOtjI,UAAYsjI,GACzCE,EAAQlmI,KAAKovB,EAAMlsB,IAG3B,GAAIgjI,EAAQxjI,SAAWu4D,EACnB,OAAOirE,EAIX92G,EAAQ6rC,EAAYnxD,MAAM,QAC1B,IAAK,IAAIyF,EAAI,EAAGA,EAAI6f,EAAM1sB,OAAQ6M,IAC1B6f,EAAM7f,GAAGlL,UAAU,EAAG2hI,EAAOtjI,UAAYsjI,GACzCE,EAAQlmI,KAAKovB,EAAM7f,IAI3B,OAAO22H,CACV,EACDC,kBAAkBx8H,GAKd,GAAmC,IAA/BA,EAAKd,QAAQ,cAEbc,EAAQ,KAAIA,SACT,GAA8B,iBAA1BA,EAAKtF,UAAU,EAAG,IAMzB,OALA8E,GAAOuY,KACH,kEAEJvY,GAAOuY,KAAK/X,GAEL,KAE6B,SAApCA,EAAKtF,UAAUsF,EAAKjH,OAAS,KAE7BiH,EAAOA,EAAKtF,UAAU,EAAGsF,EAAKjH,OAAS,IAE3C,MAAM6gB,EAAY,CAAC,EACb4hH,EAAQx7H,EAAKG,MAAM,KAEzB,GAAiB,QAAbq7H,EAAM,GAIN,OAHAh8H,GAAOuY,KAAK,uCACZvY,GAAOuY,KAAK/X,GAEL,KAEX4Z,EAAUg1C,WAAa4sE,EAAM,GAAG9gI,UAAU,IAC1Ckf,EAAUvT,UAAYm1H,EAAM,GAC5B5hH,EAAUi1C,SAAW2sE,EAAM,GAAGl1G,cAC9B1M,EAAUk1C,SAAW0sE,EAAM,GAC3B5hH,EAAUtT,GAAKk1H,EAAM,GACrB5hH,EAAUrT,KAAOi1H,EAAM,GAGvB5hH,EAAUnU,KAAO+1H,EAAM,GAEvB5hH,EAAUtW,WAAa,IACvB,IAAK,IAAI/J,EAAI,EAAGA,EAAIiiI,EAAMziI,OAAQQ,GAAK,EACnC,OAAQiiI,EAAMjiI,IACd,IAAK,QACDqgB,EAAU,YAAc4hH,EAAMjiI,EAAI,GAClC,MACJ,IAAK,QACDqgB,EAAU,YAAc4hH,EAAMjiI,EAAI,GAClC,MACJ,IAAK,aACDqgB,EAAUtW,WAAak4H,EAAMjiI,EAAI,GACjC,MACJ,IAAK,UACDqgB,EAAUvW,QAAUm4H,EAAMjiI,EAAI,GAC9B,MACJ,QACIiG,GAAOkT,MAAO,oBAAmB8oH,EAAMjiI,UAAUiiI,EAAMjiI,EAAI,OASnE,OANAqgB,EAAU6hH,QAAU,IAIpB7hH,EAAU/Y,GAAKnI,KAAKE,SAASqN,SAAS,IAAI5F,OAAO,EAAG,IAE7CuZ,CACV,EACD6iH,oBAAoBd,GAChB,IAAI37H,EAAO,eAEXA,GAAQ27H,EAAK9+F,aAAa,cAC1B78B,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,aAC1B78B,GAAQ,IAER,IAAI6uD,EAAW8sE,EAAK9+F,aAAa,YAmBjC,OAfI5H,GAAQ5jB,aAA0C,WAA3Bw9C,EAASvoC,gBAChCuoC,EAAW,OAGf7uD,GAAQ6uD,EACR7uD,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,YAC1B78B,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,MAC1B78B,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,QAC1B78B,GAAQ,IACRA,GAAQ,MACRA,GAAS,IAAG27H,EAAK9+F,aAAa,UAC9B78B,GAAQ,IACA27H,EAAK9+F,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACG8+F,EAAK9+F,aAAa,aACX8+F,EAAK9+F,aAAa,cACzB78B,GAAQ,QACRA,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,YAC1B78B,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,YAC1B78B,GAAQ,KAchB,MAV+B,QAA3B6uD,EAASvoC,gBACTtmB,GAAQ,UACRA,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,WAC1B78B,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQ27H,EAAK9+F,aAAa,eAAiB,IAEnC,GAAE78B,OACb,EAOD08H,sBAAsBC,GAClB,MAAM7xH,EAAW6xH,EAAWx0H,MACvBjC,KAAIkC,GAAYA,EAASvH,KACzB2E,QAAO,CAACyC,EAAM8C,EAAOC,IAAUA,EAAM9L,QAAQ+I,KAAU8C,IACvDhS,OACCkS,EACC0xH,EAAW1zH,YAAc0zH,EAAW1zH,WAAWlQ,QAAW,EAEjE,GAAI+R,EAAW,GAAmB,IAAdG,EAEhB,OAEJ,IAAIZ,EAAc,KAElB,GAAiB,IAAbS,EACAT,EAAcsyH,EAAWx0H,MAAM,GAAGtH,QAC/B,GAAiB,IAAbiK,EAAgB,CAEvB,MAAMI,EACAyxH,EAAW1zH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnB8B,IACAb,EAAca,EAAS/C,MAAMhI,MAAM,KAAK,GAE/C,MAAM,GAAI2K,GAAY,EAAG,CAEtB,MAAM9B,EACA2zH,EAAW1zH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnBJ,IACAqB,EAAcrB,EAASb,MAAMhI,MAAM,KAAK,GAE/C,CAED,OAAOkK,CACV,EAMDuyH,aAAY,IACD5jI,KAAAA,UAAqB,EAAG,YAYnCgP,iBAAiBX,EAAOY,EAAMC,GAC1B,IAAK,IAAI3O,EAAI,EAAGA,EAAI8N,EAAMc,MAAMpP,SAAUQ,EAAG,CACzC,MAAMsjI,EAAWx1H,EAAMc,MAAM5O,GAE7B,GAAIsjI,EAASh8H,KAAOoH,GACb40H,EAASt5H,YAAc2E,EAC1B,OAAO20H,EAASvgI,KAEvB,CACJ,EAUDwgI,gBAAgBC,GACLA,EACF50H,MACAhI,MAAM,KACN+F,KAAImD,GAAWC,SAASD,EAAS,MAS1C2zH,SAAQ,CAAC33H,EAAKI,IACHJ,EAAIE,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAASA,IAO1Cw3H,SAAS53H,GACL,MAAM63H,EACA73H,EAAIlF,MAAM,MAAMqF,QAAOxF,GAAQA,EAAK+gH,WAAW,kBAErD,GAAImc,EAAWnkI,OAAS,EACpB,OAAOmkI,EAAW,GAAG78H,OAAO,eAAetH,OAElD,EASDokI,YAAYjqE,EAAOkqE,GACf,IAAKlqE,IAAUkqE,EACX,OAGJ,MAAMC,EAAuBnqE,EAAMxtD,IAC9BF,QAAOE,GAAOA,EAAImqD,OAASnqD,EAAImqD,MAAMvpC,gBAAkB82G,EAAU92G,gBACjEpgB,KAAIR,GAAOA,EAAI4hG,UAEpB,GAAI+1B,EAAsB,CAGtB,MAAMC,EACApqE,EAAM5rD,SACPrB,WACA9F,MAAM,KACN+F,KAAI5D,GAAKgH,SAAShH,EAAG,MAE1B,IAAK,MAAMg2C,KAAM+kF,EAAqBruG,UAAW,CAC7C,MAAMuuG,EAAeD,EAAap+H,QAAQo5C,GAE1CglF,EAAaj+H,OAAOk+H,EAAc,GAClCD,EAAahjG,QAAQge,EACxB,CACD4a,EAAM5rD,SAAWg2H,EAAa51H,KAAK,IACtC,MACGlI,GAAOpH,MAAO,0CAAyCglI,oCAE9D,EAYDI,WAAWn2H,EAAO+1H,GAAgC,IAArBK,EAAqB,wDAC9C,IAAKp2H,IAAU+1H,EACX,OAGJ,MAAMM,EAAoB,IAAI76E,IAC9B,IAAI86E,EAAY,GAEhB,IAAK,MAAMj4H,KAAO2B,EAAM3B,IAChBA,EAAImqD,OAASnqD,EAAImqD,MAAMvpC,gBAAkB82G,EAAU92G,gBAC/Cm3G,EACAC,EAAkBniG,IAAI71B,EAAI4hG,QAAS5hG,EAAImqD,OAEvC8tE,EAAUtnI,KAAKqP,EAAI4hG,UAqB/B,GAhBIm2B,IACAE,EAAYt2H,EAAM1B,KACbH,QAAOgB,IACJ,MAAMqpD,EAAQ6tE,EAAkB9kH,IAAIpS,EAAK8gG,SAEzC,QAAIz3C,IACOA,EAAMvpC,gBAAkBs3G,GAAAA,KACxBp3H,EAAKvD,OAAOkf,SAAS,gBACtB3b,EAAKvD,OAAOkf,SAAS,uBAG/B,IAEHjc,KAAIM,GAAQA,EAAK8gG,WAGtBq2B,EAAU5kI,OAAS,EAAG,CAGtB,MAAM8kI,EAAUF,EAAUz3H,KAAIM,GAAS,OAAMA,MACvCs3H,EAASz2H,EAAM1B,KAAKH,QACtBgB,IAA0C,IAAlCq3H,EAAQ3+H,QAAQsH,EAAKvD,UAEjC06H,EAAUtnI,QAAQynI,EAAO53H,KAAIM,GAAQA,EAAK8gG,WAK1C,MAIMy2B,EAJS12H,EAAMC,SAChBrB,WACA9F,MAAM,KACN+F,IAAIvB,QACca,QAAO8yC,IAAiC,IAA3BqlF,EAAUz+H,QAAQo5C,KAE/B,IAAnBylF,EAAQhlI,QAERsO,EAAMd,KAAO,EACbc,EAAMrE,UAAYo0H,GAAe4G,SACjC32H,EAAMC,SAAW,KAEjBD,EAAMC,SAAWy2H,EAAQr2H,KAAK,KAGlCL,EAAM3B,IAAM2B,EAAM3B,IAAIF,QAClBgB,IAA2C,IAAnCu3H,EAAQ7+H,QAAQsH,EAAK8gG,WACjCjgG,EAAM1B,KAAO0B,EAAM1B,KAAKH,QACpBgB,IAA2C,IAAnCu3H,EAAQ7+H,QAAQsH,EAAK8gG,WAC7BjgG,EAAM42H,SACN52H,EAAM42H,OAAS52H,EAAM42H,OAAOz4H,QACxBgB,IAA2C,IAAnCu3H,EAAQ7+H,QAAQsH,EAAK8gG,WAExC,CACJ,GAGL,MCltBe,SAAS42B,GAAI74H,GACxB,MAAME,EAAQF,EAAIlF,MAAM,UAExB,IAAK,IAAI5G,EAAI,EAAGR,EAASwM,EAAMxM,OAAQQ,EAAIR,EAAQQ,IAAK,CACpD,IAAI4kI,EAAU,KAAI54H,EAAMhM,KAEpBA,IAAMR,EAAS,IACfolI,GAAU,QAEd54H,EAAMhM,GAAK4kI,CACd,CACD,MAAM74H,EAAW,GAAEC,EAAM0d,cAEzBxuB,KAAK8Q,MAAQA,EACb9Q,KAAK01E,IAAM7kE,EAAUC,EAAMmC,KAAK,IAChCjT,KAAK6Q,QAAUA,CAClB,CCpBD,SAAS84H,GAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOtlI,SAAWulI,EAAOvlI,OACzB,OAAO,EAGX,IAAK,IAAIQ,EAAI,EAAGmH,EAAI29H,EAAOtlI,OAAQQ,EAAImH,EAAGnH,IAEtC,GAAI8kI,EAAO9kI,aAAcmG,OAAS4+H,EAAO/kI,aAAcmG,OAEnD,IAAK2+H,EAAO9kI,GAAGglI,OAAOD,EAAO/kI,IACzB,OAAO,OAER,GAAI8kI,EAAO9kI,KAAO+kI,EAAO/kI,GAG5B,OAAO,EAIf,OAAO,CACV,CAOc,SAASilI,GAAUC,EAAOC,GAGrC,GAFAjqI,KAAKgqI,MAAQA,EACbhqI,KAAKiqI,SAAWA,GACXD,EACD,MAAM,IAAIznI,MAAM,yBACb,IAAK0nI,EACR,MAAM,IAAI1nI,MAAM,2BAEvB,CClDc,SAAS2nI,GAAS1hG,GAC7B,OAAO,WACH,GAAW,OAAPA,EAAa,MAAM,IAAIjmC,MAAM,gCACjC,IAAI4nI,EAAS3hG,EACbA,EAAK,KAHiB,2BAAN9lC,EAAM,yBAANA,EAAM,gBAItBynI,EAAOrnI,MAAM9C,KAAM0C,EACtB,CACJ,CF8BD+mI,GAAIjnI,UAAU4nI,SAAU,EAMxBX,GAAIjnI,UAAU6nI,qBAAsB,EAMpCZ,GAAIjnI,UAAU8nI,qBAAsB,EAQpCb,GAAIjnI,UAAU+nI,0BAA4B,SAASz3C,GAC/C,MAAMr2B,EAAMz8D,KAAK8Q,MAAMxM,OACjBsM,EAAMsC,GAAAA,MAAgBlT,KAAK01E,KAC3BjX,EAAQ+rE,KAAU55H,EAAIE,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAAS8hF,KAGvDr0B,EAAMhC,IAAMA,EACZgC,EAAMlwD,UAAYo0H,GAAe8H,SAGjChsE,EAAMxoD,UAAOnP,EACb23D,EAAM/qD,WAAQ5M,EACd23D,EAAMjqD,gBAAa1N,EAEnB8J,EAAIE,MAAQF,EAAIE,MAAM/E,OAAO0yD,GAG7B7tD,EAAI85H,OAAOtnI,SAAQsR,IACf,GAAmB,WAAfA,EAAM1D,KAAmB,CACzB,MAAM25H,EAAOj2H,EAAMi2H,KAAKj/H,MAAM,KAE9Bi/H,EAAK/oI,KAAK66D,GACV/nD,EAAMi2H,KAAOA,EAAK13H,KAAK,IAC1B,KAELjT,KAAK01E,IAAMxiE,GAAAA,MAAgBtC,EAC9B,EAKD64H,GAAIjnI,UAAUooI,gBAAkB,WAC5B,MAAMC,EAAa,CAAC,EAEpB,IAAK,IAAIC,EAAa,EAAGA,EAAa9qI,KAAK8Q,MAAMxM,OAAQwmI,IAAc,CACnE,MAGMh6H,EAAQ,CACVg6H,aACAruE,IAJE8oE,GAAAA,SACEA,GAAAA,SAAiBvlI,KAAK8Q,MAAMg6H,GAAa,WAI7Cp3H,MAAO,CAAC,EACRc,WAAY,IAGhBq2H,EAAWC,GAAch6H,EAEzBy0H,GAAAA,UAAkBvlI,KAAK8Q,MAAMg6H,GAAa,WAAW1nI,SAAQmI,IACzD,MAAMw/H,EAAWx/H,EAAKtF,UAAU,GAAGyF,MAAM,KAAK,GAIzCoF,EAAM4C,MAAMq3H,KACbj6H,EAAM4C,MAAMq3H,GAAY,CACpBv3H,KAAMu3H,EACN/5G,MAAO,KAGflgB,EAAM4C,MAAMq3H,GAAU/5G,MAAMpvB,KAAK2J,EAAjC,IAEJg6H,GAAAA,UAAkBvlI,KAAK8Q,MAAMg6H,GAAa,iBAAiB1nI,SAAQmI,IAC/D,MAAMy6E,EAAMz6E,EAAKd,QAAQ,KACnBkK,EAAYpJ,EAAKK,OAAO,EAAGo6E,GAAKp6E,OAAO,IACvC8H,EAAQnI,EAAKK,OAAO,GAAK+I,EAAUrQ,QAAQoH,MAAM,KAEnDgI,EAAMpP,QACNwM,EAAM0D,WAAW5S,KAAK,CAClB+S,YACAjB,SAEP,GAER,CAED,OAAOm3H,CACV,EAODpB,GAAIjnI,UAAUwoI,aAAe,SAASx3H,GAElC,MAAMy3H,EAASjrI,KAAK4qI,kBACpB,IAAI/lI,GAAS,EAWb,OATApF,OAAO6I,KAAK2iI,GAAQ7nI,SAAQ0nI,IACpBjmI,GAGAomI,EAAOH,GAAYp3H,MAAMF,KACzB3O,GAAS,EACZ,IAGEA,CACV,EAGD4kI,GAAIjnI,UAAU0oI,SAAW,SAAS3yF,EAAM4yF,GAEpC5F,GAAAA,UAAkBvlI,KAAK6Q,QAAS,YAAYzN,SAAQmI,IAChD,MAAMoG,EAAQpG,EAAKG,MAAM,KACnBiJ,EAAYhD,EAAM6c,QAAQ5iB,OAAO,GAEvC2sC,EAAKvqC,EAAE,QAAS,CAAEq/D,MAAO,kCACrB14D,cACJ,IAAK,IAAIxD,EAAI,EAAGA,EAAIQ,EAAMrN,OAAQ6M,IAC9BonC,EAAKvqC,EAAE,UAAW,CAAEV,KAAMqE,EAAMR,KAAMo8D,KAE1Ch1B,EAAKg1B,IAAL,IAGJ,IAAK,IAAIzoE,EAAI,EAAGA,EAAI9E,KAAK8Q,MAAMxM,OAAQQ,IAAK,CACxC,MAAM25D,EAAQ8mE,GAAAA,WAAmBvlI,KAAK8Q,MAAMhM,GAAG4G,MAAM,QAAQ,IAE7D,GAAsB,UAAhB+yD,EAAM3tD,OACa,UAAhB2tD,EAAM3tD,OACU,gBAAhB2tD,EAAM3tD,MACX,SAGJ,IAAI0C,EACJ,MAAM43H,EAAY7F,GAAAA,SAAiBvlI,KAAK8Q,MAAMhM,GAAI,WAG9C0O,IADA43H,GACOA,EAAUnlI,UAAU,GAAGyF,MAAM,KAAK,GAK7C6sC,EAAKvqC,EAAE,UAAW,CAAEq9H,QAASF,EACzB79H,KAAMmxD,EAAM3tD,QAChB,MAAMw6H,EAAW/F,GAAAA,SAAiBvlI,KAAK8Q,MAAMhM,GAAI,UAEjD,GAAIwmI,EAAU,CAEV,MAAM7uE,EAAM8oE,GAAAA,SAAiB+F,GAE7B/yF,EAAK+uB,MAAM,CAAEh6D,KAAMmvD,GACtB,CAQD,GANoB,UAAhBgC,EAAM3tD,OAAkD,iBAAtB9Q,KAAKurI,cACvChzF,EAAKvqC,EAAE,iBACH,CAAEq/D,MAAO,iBACLxlE,MAAO7H,KAAKurI,eAAgBh+D,KAGpB,UAAhB9O,EAAM3tD,OAAqC,UAAhB2tD,EAAM3tD,MAAmB,CACpDynC,EAAKvqC,EAAE,cACH,CAAEq/D,MAAO,6BACLv8D,MAAO2tD,EAAM3tD,QACjB0C,GACA+kC,EAAK+uB,MAAM,CAAE9zD,SAEjB,IAAK,IAAIrC,EAAI,EAAGA,EAAIstD,EAAMqC,IAAIx8D,OAAQ6M,IAAK,CACvC,MAAMq6H,EACAjG,GAAAA,SACEvlI,KAAK8Q,MAAMhM,GACV,YAAW25D,EAAMqC,IAAI3vD,MAE9BonC,EAAKvqC,EAAE,eAAgBu3H,GAAAA,YAAoBiG,IAI3C,MAAMC,EACAlG,GAAAA,SACEvlI,KAAK8Q,MAAMhM,GACV,UAAS25D,EAAMqC,IAAI3vD,MAE5B,GAAIs6H,EAAW,CACX,MAAMC,EAAiBnG,GAAAA,UAAkBkG,GAGzC,IAAK,IAAInsH,EAAI,EAAGA,EAAIosH,EAAepnI,OAAQgb,IACvCi5B,EAAKvqC,EAAE,YAAa09H,EAAepsH,IAAIiuD,IAE9C,CAGDvtE,KAAK2rI,eAAe7mI,EAAGyzC,EAAMkmB,EAAMqC,IAAI3vD,IAEvConC,EAAKg1B,IACR,CAED,GAAI/5D,EAAM,CACN,MAAMyB,EAAUswH,GAAAA,UAAkBvlI,KAAK8Q,MAAMhM,IAE7C,IAAK,MAAQ8mI,EAAeC,KAAoB52H,EAAS,CACrD,MAAMshG,EAAagvB,GAAAA,oBAA4BsG,GACzCh4B,EAAY0xB,GAAAA,mBAA2BsG,GAE7CtzF,EAAKvqC,EAAE,SAAU,CACbwF,KAAMo4H,EACNt+H,KAAMipG,EACN1C,YACAxmC,MAAO,oCAGX,MAAMp3D,EAAOsvH,GAAAA,mBAA2BsG,GAGpC51H,IACAsiC,EAAKvqC,EAAE,aACPuqC,EAAK+uB,MAAM,CAAEh6D,KAAM,SACnBirC,EAAK+uB,MAAM,CAAEz/D,MAAOoO,IACpBsiC,EAAKg1B,MAGTh1B,EAAKg1B,IACR,CAIKg4D,GAAAA,UAAkBvlI,KAAK8Q,MAAMhM,GAAI,iBAExB1B,SAAQmI,IACnB,MAAMy6E,EAAMz6E,EAAKd,QAAQ,KACnBkK,EAAYpJ,EAAKK,OAAO,EAAGo6E,GAAKp6E,OAAO,IACvC8H,EAAQnI,EAAKK,OAAO,GAAK+I,EAAUrQ,QAAQoH,MAAM,KAEnDgI,EAAMpP,SACNi0C,EAAKvqC,EAAE,aAAc,CAAE2G,YACnB04D,MAAO,oCACX35D,EAAMtQ,SAAQsK,GAAK6qC,EAAKvqC,EAAE,SAAU,CAAEwF,KAAM9F,IAAK6/D,OACjDh1B,EAAKg1B,KACR,GAER,CAED,MAAMu+D,EAAWvG,GAAAA,UAAkBvlI,KAAK8Q,MAAMhM,GAAI,UAElD,GAAIgnI,EAASxnI,QAAUk8B,GAAQg4D,uBAAwB,CAGnD,MAAMuzC,EAAOD,EACRr6H,KAAIu6H,GAAWA,EAAQtgI,MAAM,KAAK,KAClC+F,KAAIw6H,GAAWA,EAAQvgI,MAAM,KAAK,KAEvCqgI,EAAK3oI,SAAQovE,IACTj6B,EAAKvqC,EAAE,SAAU,CACbwkE,MACAnF,MAAO,oCAEX90B,EAAKg1B,IAAL,IAGEg4D,GAAAA,SAAiBvlI,KAAK8Q,MAAMhM,GAAI,kBAGlCyzC,EAAKvqC,EAAE,YAAa,CAChB2G,UAAW,MACX04D,MAAO,oCAEX0+D,EAAK3oI,SAAQovE,IACTj6B,EAAKvqC,EAAE,SAAU,CAAEwkE,QAAOjF,IAA1B,IAEJh1B,EAAKg1B,KAEZ,CAEGg4D,GAAAA,SAAiBvlI,KAAK8Q,MAAMhM,GAAI,eAChCyzC,EAAKvqC,EAAE,YAAYu/D,KAIvBvtE,KAAK2rI,eAAe7mI,EAAGyzC,EAAM,KAG7B,MAAM2zF,EAAc3G,GAAAA,UAAkBvlI,KAAK8Q,MAAMhM,GAAI,YAAa9E,KAAK6Q,SAEvE,IAAK,IAAIM,EAAI,EAAGA,EAAI+6H,EAAY5nI,OAAQ6M,IAAK,CACzC,MAAMg7H,EAAS5G,GAAAA,YAAoB2G,EAAY/6H,IAS/C,GAPAonC,EAAKvqC,EAAE,aAAc,CACjBq/D,MAAO,wCACP9R,IAAK4wE,EAAO5wE,IACZnvD,GAAI+/H,EAAOtkI,QAIXskI,EAAO3kI,eAAe,aAGtB,OAAQ2kI,EAAO59H,WACf,KAAKo0H,GAAeyJ,SAChB7zF,EAAK+uB,MAAM,CAAE+kE,QAAS,cACtB,MACJ,KAAK1J,GAAe8H,SAChBlyF,EAAK+uB,MAAM,CAAE+kE,QAAS,cACtB,MACJ,KAAK1J,GAAe2J,SAChB/zF,EAAK+uB,MAAM,CAAE+kE,QAAS,SACtB,MACJ,KAAK1J,GAAe4G,SAChBhxF,EAAK+uB,MAAM,CAAE+kE,QAAS,SAM9B9zF,EAAKg1B,IACR,CAEGg4D,GAAAA,SAAiBvlI,KAAK8Q,MAAMhM,GAAI,uBAAwB9E,KAAK6Q,WAC7D0nC,EAAKvqC,EAAE,qBAAsB,CACzBq/D,MAAO,0CAEX90B,EAAKg1B,MAETh1B,EAAKg1B,IACR,CAGDvtE,KAAKusI,kBAAkBznI,EAAGyzC,GAE1B,MAAM5sC,EAAI3L,KAAK8Q,MAAMhM,GAEjBygI,GAAAA,SAAiB55H,EAAI,KAAIg3H,GAAe2J,YACxC/zF,EAAK+uB,MAAM,CAAE+kE,QAAS,SACf9G,GAAAA,SAAiB55H,EAAI,KAAIg3H,GAAeyJ,YAC/C7zF,EAAK+uB,MAAM,CAAE+kE,QAAS,cACf9G,GAAAA,SAAiB55H,EAAI,KAAIg3H,GAAe8H,YAC/ClyF,EAAK+uB,MAAM,CAAE+kE,QAAS,cACf9G,GAAAA,SAAiB55H,EAAI,KAAIg3H,GAAe4G,aAC/ChxF,EAAK+uB,MAAM,CAAE+kE,QAAS,SAKP,MAAf5tE,EAAM3sD,MAAiByzH,GAAAA,SAAiB55H,EAAG,gBAAiB3L,KAAK6Q,UAEjE0nC,EAAK+uB,MAAM,CAAE+kE,QAAS,aAE1B9zF,EAAKg1B,IACR,CAGD,OAFAh1B,EAAKg1B,KAEEh1B,CACV,EAEDkxF,GAAIjnI,UAAU+pI,kBAAoB,SAASzB,EAAYvyF,GACnDA,EAAKvqC,EAAE,aAGP,MAAMw+H,EACAjH,GAAAA,SAAiBvlI,KAAK8Q,MAAMg6H,GAAa,eAAgB9qI,KAAK6Q,SAC9D47H,EACAlH,GAAAA,SAAiBvlI,KAAK8Q,MAAMg6H,GAAa,aAAc9qI,KAAK6Q,SAElE,GAAI27H,EAAU,CACV,MAAME,EAAYnH,GAAAA,cAAsBiH,GAExCj0F,EAAKvqC,EAAE,UAAW,CACdq/D,MAAO,yCACPqzB,OAAQgsC,EACRtyE,SAAU,uBAId7hB,EAAK+uB,MAAM,CAAErlD,QAAS,IACtBs2B,EAAKg1B,IACR,MAAM,GAAIk/D,EAAS,CAChB,MAAMC,EAAYnH,GAAAA,aAAqBkH,GAEvCl0F,EAAKvqC,EAAE,UAAW,CACdq/D,MAAO,yCACPqzB,OAAQgsC,EAAU,GAClBtyE,SAAUsyE,EAAU,KAIpBA,EAAUpoI,OAAS,EACnBi0C,EAAK+uB,MAAM,CAAErlD,QAASyqH,EAAU,KAEhCn0F,EAAK+uB,MAAM,CAAErlD,QAAS,IAE1Bs2B,EAAKg1B,IACR,CAIKg4D,GAAAA,UACEvlI,KAAK8Q,MAAMg6H,GACX,iBACA9qI,KAAK6Q,SAEAzN,SAAQmI,IACjB,MAAMs7H,EAActB,GAAAA,iBAAyBh6H,GAE7Cs7H,EAAYx5D,MAAQ,8BACpB90B,EAAKvqC,EAAE,eAAehC,EAAE66H,EAAYA,oBAC7BA,EAAYA,YAEnB,MAAM8F,EACApH,GAAAA,SACEvlI,KAAK8Q,MAAMg6H,GACX,WACA9qI,KAAK6Q,SAET87H,IACA9F,EAAY9uF,MAAQ40F,EAAU/gI,OAAO,IAEzC2sC,EAAK+uB,MAAMu/D,GACXtuF,EAAKg1B,IAAL,IAEJ,MAAMq/D,EAAgBrH,GAAAA,UAAkBvlI,KAAK8Q,MAAMg6H,GAAa9qI,KAAK6Q,SAEjE+7H,IACAA,EAAcv/D,MAAQ,uCACtB90B,EAAK+uB,MAAMslE,GAILrH,GAAAA,UACEvlI,KAAK8Q,MAAMg6H,GACX,eACA9qI,KAAK6Q,SAEEzN,SAAQmI,IACnB,MAAM4Z,EAAYogH,GAAAA,kBAA0Bh6H,GAExCvL,KAAKoqI,UACLjlH,EAAUtT,GAAK,WAEnB,MAAMuoD,EACAj1C,GAA2C,iBAAvBA,EAAUi1C,SAC1Bj1C,EAAUi1C,SAASvoC,cACnB,GAEL7xB,KAAKqqI,sBACe,QAAbjwE,GAAmC,WAAbA,IAC1Bp6D,KAAKsqI,qBAAoC,QAAblwE,GAGpC7hB,EAAKvqC,EAAE,YAAamX,GAAWooD,IAA/B,KAGRh1B,EAAKg1B,IACR,EAGDk8D,GAAIjnI,UAAUmpI,eAAiB,SAASb,EAAYvyF,EAAMs0F,GAEhDtH,GAAAA,UACEvlI,KAAK8Q,MAAMg6H,GACV,aAAY+B,KAEfzpI,SAAQmI,IACV,MAAMuhI,EAAWvH,GAAAA,YAAoBh6H,GAEf,YAAlBuhI,EAAS97H,MACTunC,EAAKvqC,EAAE,kBAAmB,CACtBq/D,MAAO,qCACPxlE,MAAOilI,EAAS99H,OAAO,KAE3BupC,EAAKg1B,OAELh1B,EAAKvqC,EAAE,UAAW,CACdq/D,MAAO,qCACPr8D,KAAM87H,EAAS97H,OAEf87H,EAAS99H,OAAO1K,OAAS,GACzBi0C,EAAK+uB,MAAM,CAAE,QAAWwlE,EAAS99H,OAAO,KAE5CupC,EAAKg1B,KACR,GAER,EAEDk8D,GAAIjnI,UAAUuqI,iBAAmB,SAASx0F,EAAMs0F,GAC5C,IAAIj8H,EAAM,GACV,MAAMo8H,EACAz0F,EAAK9jC,KACH,gEAsBR,OApBIu4H,EAAsB1oI,SACtBsM,GAAO,uBACHo8H,EAAsBp+F,KAAK,SAC3Bh+B,GAAOo8H,EAAsBp+F,KAAK,SAElCh+B,GAAO,IAEXA,GAAO,QAGc2nC,EAAK9jC,KAAK,wDAElBq0B,MAAK,CAAC7tB,EAAGihD,KACtBtrD,GAAQ,aAAYi8H,KAAe3wE,EAAG9zB,aAAa,UAC/C8zB,EAAG54B,aAAa,aAChB1yB,GAAQ,IAAGsrD,EAAG9zB,aAAa,cAE/Bx3B,GAAO,MAAP,IAGGA,CACV,EAGD64H,GAAIjnI,UAAUyqI,WAAa,SAAStL,GAChC,MAAMpgE,EAAYtgE,KAAKC,MAGvBlB,KAAK01E,IACE,cAAMnU,yCAMb,MAAMmpE,EACAvgG,KAAEw3F,GAAQltH,KAAK,mDAEjBi2H,EAAOpmI,QACPomI,EAAO5hG,MAAK,CAACk9C,EAAKtxE,KACd,MAAM69B,EACApI,KAAEz1B,GACCD,KAAK,YACLhD,KAAI,CAACwJ,EAAG5K,IAAYA,EAAQ+3B,aAAa,UACzCjkB,MAELouB,EAASjuC,OAAS,IAClBtE,KAAK01E,KACG,WACAhhE,EAAM0zB,aAAa,cACZ1zB,EAAM0zB,aAAa,WAC1BmK,EAASt/B,KAAK,WACzB,IAITjT,KAAK6Q,QAAU7Q,KAAK01E,IACpBisD,EAAOltH,KAAK,YAAYq0B,MAAK,CAAC7tB,EAAG5K,KAC7B,MAAM1E,EAAI3L,KAAKktI,aAAa/iG,KAAE95B,IAE9BrQ,KAAK8Q,MAAMlP,KAAK+J,EAAhB,IAWJ3L,KAAK01E,IAAM11E,KAAK6Q,QAAU7Q,KAAK8Q,MAAMmC,KAAK,GAC7C,EAGDw2H,GAAIjnI,UAAU0qI,aAAe,SAAS78H,GAClC,MAAM8D,EAAO9D,EAAQoE,KAAK,gBACpBjK,EAAY6F,EAAQoE,KAAK,4DAC/B,IAAI7D,EAAM,GACV,MAAMqwD,EAAOz2D,EAAUiK,KACnB,4DAEE3D,EAAQ,CAAEA,MAAOqD,EAAKy6B,KAAK,SAEjC99B,KAAa,KAiEb,OAhEgC,aAA5BT,EAAQu+B,KAAK,aAEb99B,EAAMgB,KAAO,KAEbtH,EAAUiK,KAAK,qDAAqDnQ,OACpEwM,EAAMy/C,MAAQ0Q,EAAK38D,OAAS,gBAAkB,oBAE9CwM,EAAMy/C,MAAQ,oBAEd0Q,EAAK38D,QACLsM,GAAQ,iBAAgBE,EAAMgB,4CAC9BlB,GAAQ,eAAcqwD,EAAKryB,KAAK,gBAChCh+B,GAAO,kCAEPE,EAAMgwD,IACA3sD,EACGM,KAAK,iBACLhD,KAAI,CAACwJ,EAAG8/C,IAAgBA,EAAY3yB,aAAa,QACjDjkB,MACTvT,GAAQ,GAAE20H,GAAAA,WAAmBz0H,UAGjCF,GAAO,uBACFqwD,EAAK38D,SACNsM,GAAO,+BAIPpG,EAAUlG,SACNkG,EAAUokC,KAAK,WACfh+B,GAAQ,GAAE20H,GAAAA,cAAsB/6H,EAAUokC,KAAK,iBAE/CpkC,EAAUokC,KAAK,SACfh+B,GAAQ,GAAE20H,GAAAA,YAAoB/6H,EAAUokC,KAAK,eAEjDpkC,EAAUiK,KAAK,qDAAqDq0B,MAAK,CAAC7tB,EAAG4rH,KACzEj2H,GAAQ,iBAAgBi2H,EAAYz+F,aAAa,UACjDx3B,GAAQ,IAAGu5B,KAAE08F,GAAalgI,SAC1BiK,GAAO,OACHi2H,EAAYvjG,aAAa,WACzB1yB,GAAQ,WAAUi2H,EAAYz+F,aAAa,eAC9C,KAKT59B,EAAUiK,KAAK,cACVq0B,MAAK,CAAC7tB,EAAGkK,KACN,IAAIi1C,EAAWj1C,EAAUijB,aAAa,YAEtCgyB,EAC0B,iBAAbA,EAAwBA,EAASvoC,cAAgB,GAEzD7xB,KAAKqqI,sBACe,QAAbjwE,GAAmC,WAAbA,IAC1Bp6D,KAAKsqI,qBAAoC,QAAblwE,IAEzBp6D,KAAKoqI,SACZjlH,EAAUkjB,aAAa,KAAM,WAGjCz3B,GAAO20H,GAAAA,oBAA4BpgH,GAAnC,IAGA9U,EAAQu+B,KAAK,YACrB,IAAK,YACDh+B,GAAQ,KAAI+xH,GAAeyJ,eAC3B,MACJ,IAAK,YACDx7H,GAAQ,KAAI+xH,GAAe8H,eAC3B,MACJ,IAAK,OACD75H,GAAQ,KAAI+xH,GAAe4G,eAC3B,MACJ,IAAK,OACD34H,GAAQ,KAAI+xH,GAAe2J,eAG/B17H,GAAQ,SAAQP,EAAQu+B,KAAK,cAMzBz6B,EAAKM,KAAK,aAAanQ,SACvBsM,GAAO,kBAGXuD,EAAKM,KAAK,iBAAiBq0B,MAAK,CAAC7tB,EAAG8/C,KAChCnqD,GAAQ,GAAE20H,GAAAA,YAAoBxqE,SAC1B5wB,KAAE4wB,GAAatmD,KAAK,cAAcnQ,SAClCsM,GAAQ,UAASmqD,EAAY3yB,aAAa,SAC1Cx3B,GACOu5B,KAAE4wB,GACAtmD,KAAK,cACLhD,KAAI,CAAC07H,EAAIpxE,KACN,MAAMzuD,EAAOyuD,EAAU3zB,aAAa,QAEpC,OACK96B,EAAQ,GAAEA,KAAU,IACfyuD,EAAU3zB,aAAa,QAFjC,IAIHjkB,MACAlR,KAAK,KACdrC,GAAO,QAIXA,GAAO5Q,KAAK+sI,iBAAiB5iG,KAAE4wB,GAAcA,EAAY3yB,aAAa,MAAtE,IAIJx3B,GAAO5Q,KAAK+sI,iBAAiB54H,EAAM,KAGnCA,EACKM,KAAK,8DACLq0B,MAAK,CAAC7tB,EAAGmyH,KACNx8H,GACQ,YAAWw8H,EAAOhlG,aAAa,SAC/BglG,EAAOhlG,aAAa,YAF5B,IAIJj0B,EAAKM,KAAK,sEAAsEnQ,OAAS,IACzFsM,GAAO,4BAIXuD,EACKM,KAAK,wDACLq0B,MAAK,CAAC7tB,EAAGqtH,KACN,MAAM3zH,EAAY2zH,EAAUlgG,aAAa,aACnC10B,EACAy2B,KAAEm+F,GACC7zH,KAAK,WACLhD,KAAI,CAAC07H,EAAIp1H,IAAWA,EAAOqwB,aAAa,UACxCjkB,MAELzQ,EAAMpP,SACNsM,GAAQ,gBAAe+D,KAAajB,EAAMT,KAAK,WAClD,IAIT,IAAIo6H,EAAc,GACdC,EAAiB,GAwCrB,OAtCAn5H,EACKM,KAAK,oDACLq0B,MAAK,CAAC7tB,EAAGlD,KACN,MAAMvE,EAAOuE,EAAOqwB,aAAa,QACjC,IAAImlG,GAAe,EACfC,EAAY,GAEhBrjG,KAAEpyB,GACGtD,KAAK,cACLq0B,MAAK,CAACqkG,EAAIpxE,KAAc,MACrB,MAAMzuD,EAAOyuD,EAAU3zB,aAAa,QACpC,IAAIvgC,EAAQk0D,EAAU3zB,aAAa,SAEnCvgC,EAAQ09H,GAAAA,mBAA2B19H,GACnC2lI,GAAc,UAASh6H,KAAQlG,IAE3BzF,GAASA,EAAMvD,SACfkpI,GAAc,IAAG3lI,KAGrB2lI,GAAa,OAEb,UAAI3lI,SAAJ,OAAI,EAAO6lB,SAAS,kBAChB6/G,GAAe,EAClB,IAGLA,EACAF,GAAeG,EAEfF,GAAkBE,CACrB,IAKT58H,GAAO08H,EAAiBD,EAEjBz8H,CACV,EC5uBDm5H,GAAUvnI,UAAUirI,YAAc,WAE9B,MAAMC,EAAW1tI,KAAKgqI,MAAMY,kBACtB+C,EAAe3tI,KAAKiqI,SAASW,kBAC7BgD,EAAW,CAAC,EAoFlB,OAlFAnuI,OAAO6I,KAAKqlI,GAAcvqI,SAAQyqI,IAC9B,MAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhBtuI,OAAO6I,KAAKylI,EAAYr6H,OAAOtQ,SAAQoQ,MACe,IAA9C/T,OAAO6I,KAAKwlI,EAAQp6H,OAAOjJ,QAAQ+I,IAY5Bu6H,EAAYr6H,MAAMF,GAAMwd,OACpB88G,EAAQp6H,MAAMF,GAAMwd,YAGclqB,IADvBgnI,EAAQp6H,MAAMF,GAAMwd,MAAMvc,MAC5ClJ,IAAkC,IAA1BA,EAAKd,QAAQ,iBAEoB3D,IADtBinI,EAAYr6H,MAAMF,GAAMwd,MAAMvc,MACjDlJ,IAAkC,IAA1BA,EAAKd,QAAQ,cAfpBmjI,EAASC,KACVD,EAASC,GAAkB,CACvB/C,WAAYiD,EAAYjD,WACxBruE,IAAKsxE,EAAYtxE,IACjB/oD,MAAO,CAAC,EACRc,WAAY,KAGpBo5H,EAASC,GAAgBn6H,MAAMF,GAAQu6H,EAAYr6H,MAAMF,GAqB5D,IAILu6H,EAAYv5H,WAAWpR,SAAQ4qI,IAG3B,IAAIz3D,GAAU,EAEd,IAAK,IAAIzxE,EAAI,EAAGA,EAAIgpI,EAAQt5H,WAAWlQ,OAAQQ,IAAK,CAChD,MAAMmpI,EAAcH,EAAQt5H,WAAW1P,GAEvC,GAAIkpI,EAAer5H,YAAcs5H,EAAYt5H,WACtCg1H,GAAYqE,EAAet6H,MAAOu6H,EAAYv6H,OAAQ,CAEzD6iE,GAAU,EACV,KACH,CACJ,CAEIA,IAIIq3D,EAASC,KACVD,EAASC,GAAkB,CACvB/C,WAAYiD,EAAYjD,WACxBruE,IAAKsxE,EAAYtxE,IACjB/oD,MAAO,CAAC,EACRc,WAAY,KAGpBo5H,EAASC,GAAgBr5H,WAAW5S,KAAKosI,GAC5C,KAxEDJ,EAASC,GAAkBE,CA2C/B,IAiCGH,CACV,EAKD7D,GAAUvnI,UAAU0oI,SAAW,SAASgD,GACpC,MAAMC,EAAgBnuI,KAAKytI,cAE3B,IAAIW,GAAW,EA8Df,OA5DA3uI,OAAO6I,KAAK6lI,GAAe/qI,SAAQ0nI,IAC/BsD,GAAW,EACX,MAAMt9H,EAAQq9H,EAAcrD,GAE5BoD,EAAOlgI,EAAE,UAAW,CAAEV,KAAMwD,EAAM2rD,MAElCyxE,EAAOlgI,EAAE,cACL,CAAEq/D,MAAO,6BACLv8D,MAAOA,EAAM2rD,MAKrBh9D,OAAO6I,KAAKwI,EAAM4C,OAAOtQ,SAAQirI,IAC7B,MAAMC,EAAYx9H,EAAM4C,MAAM26H,GACxBjI,EAAYkI,EAAUt9G,MACtBulF,EAAagvB,GAAAA,oBAA4Ba,GACzCvyB,EAAY0xB,GAAAA,mBAA2Ba,GAE7C8H,EAAOlgI,EAAE,SAAU,CAAEq/D,MAAO,oCAC5B6gE,EAAO5mE,MAAM,CACTh6D,KAAMipG,EACN1C,YACArgG,KAAM86H,EAAU96H,OAIpB,MAAMyC,EAAOsvH,GAAAA,mBAA2Ba,GAEpCnwH,IACAi4H,EAAOlgI,EAAE,aACTkgI,EAAO5mE,MAAM,CAAEh6D,KAAM,SACrB4gI,EAAO5mE,MAAM,CAAEz/D,MAAOoO,IACtBi4H,EAAO3gE,MAGX2gE,EAAO3gE,IAAP,IAIJz8D,EAAM0D,WAAWpR,SAAQklI,IACjBA,EAAU50H,MAAMpP,SAEhB4pI,EAAOlgI,EAAE,aAAc,CACnB2G,UAAW2zH,EAAU3zH,UACrB04D,MAAO,oCAGXi7D,EAAU50H,MAAMtQ,SAAQoQ,IACpB06H,EAAOlgI,EAAE,SAAU,CAAEwF,SAChB+5D,IADL,IAGJ2gE,EAAO3gE,KACV,IAGL2gE,EAAO3gE,KACP2gE,EAAO3gE,IAAP,IAGG6gE,CACV,EEtNM,IAYHG,GAZOC,GAA8C,mBAAnBC,gBAAiCA,eAC5DC,GAA0C,mBAAjBC,cAA+BA,aACxDC,GAAiC,iBAAZ/nF,SAAoD,mBAArBA,QAAQgoF,SAanEN,GADAC,GACSC,eACFC,GACEC,aACFC,GACE/nF,QAAQgoF,SAfd,SAAkBrmG,GACrB5+B,WAAW4+B,EAAI,EAClB,EAkBD,UAhBqBsmG,GAgBDP,GAfT,SAAC/lG,GAAD,2BAAQ9lC,EAAR,iCAAQA,EAAR,yBAAiBosI,IAAM,IAAMtmG,KAAM9lC,IAAnC,GADJ,IAAcosI,GCNN,MAAMC,GACjBnvI,cACII,KAAKsoC,KAAOtoC,KAAKgvI,KAAO,KACxBhvI,KAAKsE,OAAS,CACjB,CAED2qI,WAAW1nI,GAQP,OAPIA,EAAKmb,KAAMnb,EAAKmb,KAAKrb,KAAOE,EAAKF,KAChCrH,KAAKsoC,KAAO/gC,EAAKF,KAClBE,EAAKF,KAAME,EAAKF,KAAKqb,KAAOnb,EAAKmb,KAChC1iB,KAAKgvI,KAAOznI,EAAKmb,KAEtBnb,EAAKmb,KAAOnb,EAAKF,KAAO,KACxBrH,KAAKsE,QAAU,EACRiD,CACV,CAEDgpC,QACI,KAAMvwC,KAAKsoC,MAAMtoC,KAAKwuB,QACtB,OAAOxuB,IACV,CAED88C,YAAYv1C,EAAM2nI,GACdA,EAAQxsH,KAAOnb,EACf2nI,EAAQ7nI,KAAOE,EAAKF,KAChBE,EAAKF,KAAME,EAAKF,KAAKqb,KAAOwsH,EAC3BlvI,KAAKgvI,KAAOE,EACjB3nI,EAAKF,KAAO6nI,EACZlvI,KAAKsE,QAAU,CAClB,CAED+B,aAAakB,EAAM2nI,GACfA,EAAQxsH,KAAOnb,EAAKmb,KACpBwsH,EAAQ7nI,KAAOE,EACXA,EAAKmb,KAAMnb,EAAKmb,KAAKrb,KAAO6nI,EAC3BlvI,KAAKsoC,KAAO4mG,EACjB3nI,EAAKmb,KAAOwsH,EACZlvI,KAAKsE,QAAU,CAClB,CAEDuhC,QAAQt+B,GACAvH,KAAKsoC,KAAMtoC,KAAKqG,aAAarG,KAAKsoC,KAAM/gC,GACvC4nI,GAAWnvI,KAAMuH,EACzB,CAED3F,KAAK2F,GACGvH,KAAKgvI,KAAMhvI,KAAK88C,YAAY98C,KAAKgvI,KAAMznI,GACtC4nI,GAAWnvI,KAAMuH,EACzB,CAEDinB,QACI,OAAOxuB,KAAKsoC,MAAQtoC,KAAKivI,WAAWjvI,KAAKsoC,KAC5C,CAED3sB,MACI,OAAO3b,KAAKgvI,MAAQhvI,KAAKivI,WAAWjvI,KAAKgvI,KAC5C,CAEDtmG,UACI,MAAO,IAAI1oC,KACd,CAEgB,EAAfub,OAAOC,YAEL,IADA,IAAI4zH,EAAMpvI,KAAKsoC,KACR8mG,SACGA,EAAInvH,KACVmvH,EAAMA,EAAI/nI,IAEjB,CAEDisC,OAAQ+7F,GAEJ,IADA,IAAIC,EAAOtvI,KAAKsoC,KACVgnG,GAAM,CACR,IAAI,KAACjoI,GAAQioI,EACTD,EAAOC,IACPtvI,KAAKivI,WAAWK,GAEpBA,EAAOjoI,CACV,CACD,OAAOrH,IACV,EAGL,SAASmvI,GAAWI,EAAKhoI,GACrBgoI,EAAIjrI,OAAS,EACbirI,EAAIjnG,KAAOinG,EAAIP,KAAOznI,CACzB,CCLD,SAASioI,GAAct8F,EAAS0+B,GAC5B,OAAO1+B,EAAQv4B,MAAK9S,IAChB4nI,GAAe79D,EAAU,KAAM/pE,EAA/B,IACDgc,IACC4rH,GAAe79D,EAAU/tD,GAAOA,EAAIC,QAAUD,EAAM,IAAIthB,MAAMshB,GAA9D,GAEP,CAED,SAAS4rH,GAAe79D,EAAUjuE,EAAOkE,GACrC,IACI+pE,EAASjuE,EAAOkE,EACnB,CAAC,MAAOgc,GACL8qH,IAAa/gI,IAAO,MAAMA,CAAN,GAAWiW,EAClC,CACJ,CCjGD,SAAS6rH,GAAQlnG,GACb,MAAkC,kBAA3BA,EAAGjtB,OAAOse,YACpB,CAeD,SALA,SAAmB81G,GACf,GAAuB,mBAAZA,EAAwB,MAAM,IAAIptI,MAAM,uBACnD,OAAOmtI,GAAQC,GD6CXD,GADyB1iF,EC5CM2iF,GD8CxB,WAAiC,2BAApBjtI,EAAoB,yBAApBA,EAAoB,gBACpC,MAAMkvE,EAAWlvE,EAAKiZ,MAEtB,OAAO6zH,GADSxiF,EAAKlqD,MAAM9C,KAAM0C,GACHkvE,EACjC,GElEgBppC,EFqEA,SAAU9lC,EAAMkvE,GACjC,IAAI/sE,EACJ,IACIA,EAASmoD,EAAKlqD,MAAM9C,KAAM0C,EAC7B,CAAC,MAAOkL,GACL,OAAOgkE,EAAShkE,EACnB,CAED,GAAI/I,GAAiC,mBAAhBA,EAAO8V,KACxB,OAAO60H,GAAc3qI,EAAQ+sE,GAE7BA,EAAS,KAAM/sE,EAEtB,EEjFM,WAAiC,2BAApBnC,EAAoB,yBAApBA,EAAoB,gBACpC,IAAIkvE,EAAWlvE,EAAKiZ,MACpB,OAAO6sB,EAAG/gC,KAAKzH,KAAM0C,EAAMkvE,EAC9B,GDY6C+9D,ED4CnC,IAAkB3iF,EE5DRxkB,CDiBxB,EEZc,SAAS5/B,GAAMkoE,EAAQ8+D,EAAa/8B,GAC/C,GAAmB,MAAf+8B,EACAA,EAAc,OAEb,GAAmB,IAAhBA,EACJ,MAAM,IAAI7oG,WAAW,gCAGzB,IAAIgzE,EAAU81B,GAAU/+D,GACpBg/D,EAAa,EACbC,EAAc,GAClB,MAAMtqG,EAAS,CACX9hC,MAAO,GACPqsI,MAAO,GACPC,UAAW,GACXC,YAAa,GACb3/F,MAAO,IAeX,SAAS3I,EAAKtkC,EAAOD,GACjB,OAAKC,EACAD,OACLoiC,EAAOniC,GAASmiC,EAAOniC,GAAOyN,QAAOytE,GAAMA,IAAOn7E,KAD7BoiC,EAAOniC,GAAS,GADlB7D,OAAO6I,KAAKm9B,GAAQriC,SAAQo7E,GAAM/4C,EAAO+4C,GAAM,IAGrE,CAED,SAASlnC,EAASh0C,GAAgB,2BAANZ,EAAM,iCAANA,EAAM,kBAC9B+iC,EAAOniC,GAAOF,SAAQC,GAAWA,KAAWX,IAC/C,CAED,IAAIytI,GAAsB,EAC1B,SAASC,EAAQnwH,EAAMowH,EAAeC,EAAe1+D,GACjD,GAAgB,MAAZA,GAAwC,mBAAbA,EAC3B,MAAM,IAAIrvE,MAAM,oCAIpB,IAAIogB,EAAK4tH,EACT,SAASC,EAAiB3sH,GAGtB,GAAIA,EAAK,OAAOysH,EAAgBC,EAAI1sH,GAAOlB,IAHP,2BAANjgB,EAAM,iCAANA,EAAM,kBAIpC,GAAIA,EAAK4B,QAAU,EAAG,OAAOqe,EAAIjgB,EAAK,IACtCigB,EAAIjgB,EACP,CATDsnC,EAAEymG,SAAU,EAWZ,IAAI1+H,EAAOi4B,EAAE0mG,gBACTzwH,EACAqwH,EAAgBE,EACX5+D,GAAY4+D,GAiBrB,GAdIH,EACArmG,EAAE2mG,OAAO9qG,QAAQ9zB,GAEjBi4B,EAAE2mG,OAAO/uI,KAAKmQ,GAGbo+H,IACDA,GAAsB,EACtBxB,IAAa,KACTwB,GAAsB,EACtBnmG,EAAE6c,SAAF,KAIJypF,IAAkB1+D,EAClB,OAAO,IAAIx3D,SAAQ,CAACC,EAASC,KACzBqI,EAAMtI,EACNk2H,EAAMj2H,CAAN,GAGX,CAED,SAASs2H,EAAUC,GACf,OAAO,SAAUhtH,GACbisH,GAAc,EADa,2BAANptI,EAAM,iCAANA,EAAM,kBAG3B,IAAK,IAAIoC,EAAI,EAAGmH,EAAI4kI,EAAMvsI,OAAQQ,EAAImH,EAAGnH,IAAK,CAC1C,IAAIk+F,EAAO6tC,EAAM/rI,GAEbwR,EAAQy5H,EAAYtlI,QAAQu4F,GAClB,IAAV1sF,EACAy5H,EAAYvhH,QACLlY,EAAQ,GACfy5H,EAAYnlI,OAAO0L,EAAO,GAG9B0sF,EAAKpxB,SAAS/tD,KAAQnhB,GAEX,MAAPmhB,GACAyzB,EAAQ,QAASzzB,EAAKm/E,EAAK/iF,KAElC,CAEG6vH,GAAe9lG,EAAE4lG,YAAc5lG,EAAErpB,QACjC22B,EAAQ,eAGRtN,EAAE8mG,QACFx5F,EAAQ,SAEZtN,EAAE6c,SACL,CACJ,CAED,SAASkqF,EAAY9wH,GACjB,QAAoB,IAAhBA,EAAK3b,SAAgB0lC,EAAE8mG,SAEvBnC,IAAa,IAAMr3F,EAAQ,WACpB,GAGd,CAED,MAAM05F,EAAe1jI,GAAUjK,IAC3B,IAAKA,EACD,OAAO,IAAI+W,SAAQ,CAACC,EAASC,MAzGrC,SAAehX,EAAOD,GAClB,MAAM4tI,EAAkB,WACpBrpG,EAAItkC,EAAO2tI,GAwGI,EAACptH,EAAK5D,KACb,GAAI4D,EAAK,OAAOvJ,EAAOuJ,GACvBxJ,EAAQ4F,EAAR,EAzGR5c,IAAW,UACd,EACDoiC,EAAOniC,GAAO1B,KAAKqvI,EACtB,CAoGWzsG,CAAKl3B,EAAL,IAMRs6B,EAAIt6B,GApHR,SAAahK,EAAOD,GAChBoiC,EAAOniC,GAAO1B,KAAKyB,EACtB,CAmHG0hC,CAAGz3B,EAAMjK,EAAT,EAIJ,IAAI6tI,GAAe,EACflnG,EAAI,CACJ2mG,OAAQ,IAAI5B,GACZ2B,gBAAe,CAAEzwH,EAAM2xD,KACZ,CACH3xD,OACA2xD,aAGR,EAAEr2D,OAAOC,kBACEwuB,EAAE2mG,OAAOp1H,OAAOC,WAC1B,EACDo0H,cACA/8B,UACAlyF,OAAQivH,EAAc,EACtBa,SAAS,EACTv+H,QAAQ,EACRtQ,KAAMqe,EAAM2xD,GACR,GAAI3mE,MAAMgJ,QAAQgM,GAAO,CACrB,GAAI8wH,EAAY9wH,GAAO,OACvB,OAAOA,EAAKxO,KAAI0/H,GAASf,EAAQe,GAAO,GAAO,EAAOv/D,IACzD,CACD,OAAOw+D,EAAQnwH,GAAM,GAAO,EAAO2xD,EACtC,EACDw/D,UAAWnxH,EAAM2xD,GACb,GAAI3mE,MAAMgJ,QAAQgM,GAAO,CACrB,GAAI8wH,EAAY9wH,GAAO,OACvB,OAAOA,EAAKxO,KAAI0/H,GAASf,EAAQe,GAAO,GAAO,EAAMv/D,IACxD,CACD,OAAOw+D,EAAQnwH,GAAM,GAAO,EAAM2xD,EACrC,EACDy/D,OACIzpG,IACAoC,EAAE2mG,OAAOpgG,OACZ,EACD1K,QAAS5lB,EAAM2xD,GACX,GAAI3mE,MAAMgJ,QAAQgM,GAAO,CACrB,GAAI8wH,EAAY9wH,GAAO,OACvB,OAAOA,EAAKxO,KAAI0/H,GAASf,EAAQe,GAAO,GAAM,EAAOv/D,IACxD,CACD,OAAOw+D,EAAQnwH,GAAM,GAAM,EAAO2xD,EACrC,EACD0/D,aAAcrxH,EAAM2xD,GAChB,GAAI3mE,MAAMgJ,QAAQgM,GAAO,CACrB,GAAI8wH,EAAY9wH,GAAO,OACvB,OAAOA,EAAKxO,KAAI0/H,GAASf,EAAQe,GAAO,GAAM,EAAMv/D,IACvD,CACD,OAAOw+D,EAAQnwH,GAAM,GAAM,EAAM2xD,EACpC,EACDt+B,OAAQ+7F,GACJrlG,EAAE2mG,OAAOr9F,OAAO+7F,EACnB,EACDxoF,UAGI,IAAIqqF,EAAJ,CAIA,IADAA,GAAe,GACRlnG,EAAE93B,QAAU49H,EAAa9lG,EAAE4lG,aAAe5lG,EAAE2mG,OAAOrsI,QAAO,CAC7D,IAAIusI,EAAQ,GAAI5wH,EAAO,GACnBhU,EAAI+9B,EAAE2mG,OAAOrsI,OACb0lC,EAAE6oE,UAAS5mG,EAAIhI,KAAKF,IAAIkI,EAAG+9B,EAAE6oE,UACjC,IAAK,IAAI/tG,EAAI,EAAGA,EAAImH,EAAGnH,IAAK,CACxB,IAAIyC,EAAOyiC,EAAE2mG,OAAOniH,QACpBqiH,EAAMjvI,KAAK2F,GACXwoI,EAAYnuI,KAAK2F,GACjB0Y,EAAKre,KAAK2F,EAAK0Y,KAClB,CAED6vH,GAAc,EAEU,IAApB9lG,EAAE2mG,OAAOrsI,QACTgzC,EAAQ,SAGRw4F,IAAe9lG,EAAE4lG,aACjBt4F,EAAQ,aAGZ,IAAIlvB,EAAK8hH,GAAS0G,EAAUC,IAC5B92B,EAAQ95F,EAAMmI,EACjB,CACD8oH,GAAe,CA1Bd,CA2BJ,EACD5sI,OAAM,IACK0lC,EAAE2mG,OAAOrsI,OAEpBitI,QAAO,IACIzB,EAEXC,YAAW,IACAA,EAEXe,KAAI,IACO9mG,EAAE2mG,OAAOrsI,OAASwrI,IAAe,EAE5Cz+D,QACIrnC,EAAE93B,QAAS,CACd,EACDo/D,UACqB,IAAbtnC,EAAE93B,SACN83B,EAAE93B,QAAS,EACXy8H,GAAa3kG,EAAE6c,SAClB,GAyBL,OAtBApnD,OAAO+xI,iBAAiBxnG,EAAG,CACvBimG,UAAW,CACPhwG,UAAU,EACVp4B,MAAOmpI,EAAY,cAEvBd,YAAa,CACTjwG,UAAU,EACVp4B,MAAOmpI,EAAY,gBAEvBzgG,MAAO,CACHtQ,UAAU,EACVp4B,MAAOmpI,EAAY,UAEvBhB,MAAO,CACH/vG,UAAU,EACVp4B,MAAOmpI,EAAY,UAEvBrtI,MAAO,CACHs8B,UAAU,EACVp4B,MAAOmpI,EAAY,YAGpBhnG,CACV,CChRD,MAAMj/B,IAASkC,EAAAA,EAAAA,yCAKA,MAAMwkI,GAIjB7xI,cCqIW,IAAUkxE,EACjBipC,EDrIA/5G,KAAK0xI,QCoIY5gE,EDpIG9wE,KAAK2xI,mBAAmB9uI,KAAK7C,MAAO,ECqIxD+5G,EAAU81B,GAAU/+D,GACjBloE,IAAM,CAAC82E,EAAOt3D,KACjB2xF,EAAQr6B,EAAM,GAAIt3D,EAAlB,GDvIwD,ECwI5C,IDvIZpoB,KAAK4xI,UAAW,CACnB,CAKDr7G,QACIv2B,KAAK0xI,OAAOL,MACf,CAKDM,mBAAmB3uC,EAAM6uC,GACrB,IACI7uC,EAAK6uC,EACR,CAAC,MAAOluI,GACLoH,GAAOpH,MAAO,gBAAeA,aAAhB,EAAgBA,EAAO8H,SACpComI,EAAiBluI,EACpB,CACJ,CAKD0tE,QACIrxE,KAAK0xI,OAAOrgE,OACf,CAmBDzvE,KAAKohG,EAAMpxB,GACH5xE,KAAK4xI,SACLhgE,GAAYA,EAAS,IAAIrvE,MAAM,+BAInCvC,KAAK0xI,OAAO9vI,KAAKohG,EAAMpxB,EAC1B,CAKDN,SACItxE,KAAK0xI,OAAOpgE,QACf,CAMDwgE,WACI9xI,KAAK4xI,UAAW,CACnB,EElFE,IAAKG,aAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,SAAAA,KAAAA,GAAAA,CAAAA,IAqBL,MAAMC,GAAUD,GAAmBC,QAC7BC,GAASF,GAAmBE,OAC5BC,GAAQH,GAAmBG,MCjBlCnnI,IAASkC,EAAAA,EAAAA,4CAOA,MAAMklI,WAAsB74B,GAcvC15G,YACQ2yE,EACA6/D,EACAlnB,EACAtsG,EACAyzH,EACAC,EACA9xB,GACJroC,QACAn4E,KAAKuyE,IAAMA,EACXvyE,KAAKoyI,SAAWA,EAChBpyI,KAAKkrH,UAAYA,EACjBlrH,KAAK4e,WAAaA,EAClB5e,KAAKqyI,iBAAmBA,EACxBryI,KAAKsyI,SAAWA,EAOhBtyI,KAAKwgH,YAAcA,EAMnBxgH,KAAKuyI,SAAU,EAKfvyI,KAAKwyI,cAAgB,GAMrBxyI,KAAK6vG,KAAO,KAOZ7vG,KAAKyyI,gBAAkB,KAMvBzyI,KAAKmmC,MAAQ,KAMbnmC,KAAKgwG,IAAM,IACd,CAMG0iC,mBACA,OAAO1yI,KAAKwgH,YAAcxgH,KAAKoyI,SAAWpyI,KAAKkrH,SAClD,CAMGynB,mBACA,OAAO3yI,KAAKwgH,YAAcxgH,KAAKkrH,UAAYlrH,KAAKoyI,QACnD,CAaDr0C,WAAW8R,EAAMG,EAAK4iC,EAAgB7rI,GAClC,GAAmB,OAAf/G,KAAKmmC,MAAgB,CACrB,MAAMilF,EACC,kCAAiCprH,KAAKuyE,oCAC3BvyE,KAAKmmC,QAGvB,MADAp7B,GAAOpH,MAAMynH,GACP,IAAI7oH,MAAM6oH,EACnB,CAGDprH,KAAK6vG,KAAOA,EACZ7vG,KAAKgwG,IAAMA,EACXhwG,KAAKyyI,gBAAkBG,EACvB5yI,KAAKmmC,MAAQ4rG,GACb/xI,KAAK6yI,aAAa9rI,EACrB,CAQD8rI,aAAa9rI,GAAY,CAWzB+rI,iBAAiBvgG,GAAY,CAQ7BwgG,WACI,OAAO/yI,KAAKmmC,KACf,CASD6sG,WAAWzgG,GAAY,CAOvB0gG,cAAc1gG,GAAY,CAiB1B2gG,UAAUzzD,EAAS0zD,EAASpsI,GAAW,CAWvCqsI,YAAYzR,EAAQliD,EAAS0zD,GAAW,MC3MvCE,aAAAA,GAAAA,EAAAA,kCAAAA,mDAAAA,KAAAA,GAAAA,CAAAA,IAOL,YCsBMtoI,IAASkC,EAAAA,EAAAA,8CAOTqmI,GAAa,IA+BnB,SAASC,GAAkB1rH,EAAana,EAAG8lI,EAAOv9H,GAE9C4R,EAAY7Z,EAAE,SAAU,CACpBq/D,MAAO,kCACP75D,KAAMggI,EACNlmI,KAAMI,EAAEqK,SAEP/J,EAAE,YAAa,CACZV,KAAM,OACNzF,MAAOoO,IAEVs3D,KACAv/D,EAAE,YAAa,CACZq/D,MAAO,2BACPi0D,MAAO5zH,EAAE4zH,QAEZ/zD,KACAA,IACR,CAwBc,MAAMkmE,WAAwBtB,GASjB,yBAACuB,GACrB,MAAMC,EAAgBD,EAAej/H,KAAK,0BAE1C,GAAIk/H,EAAcrvI,OAAQ,CACtB,MAAM+nI,EAAUsH,EAAc,GAAGvrG,aAAa,WAE9C,GAAgB,SAAZikG,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,CAEd,CAED,OAAO,IACV,CAS+B,iCAACqH,GAC7B,MAAME,EAAsB,GACtBC,EAAuBH,EAAej/H,KAAK,8CACjD,IAAIgwH,EAAWluB,EAEf,OAAIs9B,EAAqBvvI,QACrBuvI,EAAqB/qG,MAAK,CAAC7tB,EAAGlD,KAC1Bw+F,EAAax+F,EAAOqwB,aAAa,cACjCq8F,EAAY1sH,EAAOqwB,aAAa,aAChCwrG,EAAoBhyI,KAAK,CACrB6iI,YACAluB,cAFJ,IAMGq9B,GAGJ,IACV,CAoBDh0I,YACQ2yE,EACA6/D,EACAlnB,EACAtsG,EACAyzH,EACAC,EACA3zC,EACA6hB,GACJroC,MACI5F,EACA6/D,EACAlnB,EAAWtsG,EAAYyzH,EAAkBC,EAAU9xB,GAWvDxgH,KAAK8zI,iBAAmB,KAQxB9zI,KAAK+zI,wBAAqBjtI,EAQ1B9G,KAAKg0I,wBAAqBltI,EAQ1B9G,KAAKi0I,6BAA+B,KAYpCj0I,KAAKk0I,2BAA6B,KAOlCl0I,KAAKm0I,gCAA6BrtI,EAgBlC9G,KAAKo0I,8BAA+B,EAYpCp0I,KAAKq0I,+BAAgC,EASrCr0I,KAAKs0I,oBAAqB,EAE1Bt0I,KAAKu0I,kBAAmB,EACxBv0I,KAAKw0I,QAAS,EAQdx0I,KAAK2+F,MAAQA,EAOb3+F,KAAKy0I,8BAA2B3tI,EAQhC9G,KAAK00I,sBAAwB,EAQ7B10I,KAAK20I,sBAAwB,EAO7B30I,KAAK40I,iCAA8B9tI,EAUnC9G,KAAK60I,kBAAoB,IAAIpD,GAC7BzxI,KAAK60I,kBAAkBxjE,QAOvBrxE,KAAKmpB,cAAe,EAQpBnpB,KAAK80I,2BAAwBhuI,EAE7B9G,KAAK+0I,eAAiB,GACtB/0I,KAAK+0I,eAAenzI,KAChBgd,EAAWsG,iBACPymG,GAAe34B,OAAO44B,oBACtB5rH,KAAKg1I,oBAAoBnyI,KAAK7C,QAGtCA,KAAKi1I,iDAA8CnuI,CACtD,CASDouI,kBACI,OAAOl1I,KAAKmmC,QAAU4rG,EACzB,CAMDc,aAAa9rI,GACT/G,KAAKoqI,QAAU/pH,QAAQtZ,EAAQqjI,SAC/BpqI,KAAKu0I,kBAAmB,EACxBv0I,KAAK+G,QAAUA,EAMf/G,KAAKm1I,aAAc,EAMnBn1I,KAAKo1I,WAAY,EACjBp1I,KAAKq1I,oBAAsBh1H,QAAQtZ,EAAQsuI,qBAC3Cr1I,KAAKs1I,oBAAsBj1H,QAAQtZ,EAAQuuI,qBAE3C,MAAMC,EAAY,CAAEC,WAAYzuI,EAAQyuI,YAgBjC,UAdHzuI,EAAQ0uI,cACRF,EAAUG,SAtWI,KAwWlBH,EAAUI,uBAAwB,EAClCJ,EAAUK,cAAgB7uI,EAAQ6uI,cAClCL,EAAUM,wBAA0B9uI,EAAQ8uI,wBAC5CN,EAAUO,aAAe/uI,EAAQ+uI,aACjCP,EAAUQ,eAAiBhvI,EAAQgvI,eACnCR,EAAUlS,aAAet8H,EAAQs8H,aACjCkS,EAAUv/H,gBAAkBhW,KAAKgW,gBAAkBwqB,GAAQy4D,sBAEvDj5F,KAAK2+F,MAEL42C,EAAUS,kBAAmB,GAG7BT,EAAUS,iBACJjvI,EAAQivI,mBAAoB,UAAAjvI,EAAQ+uI,oBAAR,eAAsBG,kBAAmB9M,GAAAA,KAG3EoM,EAAUI,sBAAwBJ,EAAUS,oBACa,iBAAhD,UAAOjvI,EAAQ88H,+BAAf,aAAO,EAAiC7/H,OACtC,UAAA+C,EAAQ88H,+BAAR,eAAiC7/H,KhB3ZnB,IgB8ZzB+C,EAAQguG,cACRwgC,EAAUxgC,aAAc,GAG5B/0G,KAAKykB,eACCzkB,KAAKgwG,IAAIkmC,qBACHl2I,KAAKyyI,gBACLzyI,KAAKsyI,SACLtyI,KAAK2+F,MACL42C,GAEZv1I,KAAKykB,eAAe0xH,eAAiB33D,IACjC,IAAKA,EAMD,OAIJ,MAAMr5D,EAAYq5D,EAAGr5D,UACfjkB,EAAM3B,OAAOqvB,YAAY1tB,MAE/B,GAAIikB,EAAW,CAC6B,OAApCnlB,KAAKk0I,6BACLl0I,KAAKk0I,2BAA6BhzI,GAItC,IAAIk5D,EAAWj1C,EAAUi1C,SAEzB,GAAwB,iBAAbA,EAEP,GADAA,EAAWA,EAASvoC,cACH,QAAbuoC,GAAmC,WAAbA,GACtB,GAAIp6D,KAAKs1I,oBACL,YAED,GAAiB,QAAbl7E,GACHp6D,KAAKq1I,oBACL,MAIf,MAAWr1I,KAAKs0I,qBAEblpC,GAAWgE,cACPvd,GACA,CACIukD,MAAO,YACPvuI,MAAO3G,EAAMlB,KAAKk0I,2BAClBxqC,IAAK1pG,KAAK2+F,MACV03C,UAAWr2I,KAAKwgH,cAExBxgH,KAAKs0I,oBAAqB,GAE1Bt0I,KAAK2+F,OACL3+F,KAAKs2I,iBAAiBnxH,EACzB,EAULnlB,KAAKykB,eAAe8xH,uBAAyB,KACE,WAAvCv2I,KAAKykB,eAAerC,eACpBpiB,KAAKo1I,WAAY,EAC6B,WAAvCp1I,KAAKykB,eAAerC,gBACgB,WAAxCpiB,KAAKykB,eAAeoB,iBACvB7lB,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,iBAA6B5oF,KAC5D,EASLA,KAAKykB,eAAe+xH,2BAA6B,KAC7C,MAAMt1I,EAAM3B,OAAOqvB,YAAY1tB,MAC/B,IAAIu1I,GAAW,EAuBf,OArBKz2I,KAAK2+F,QACN3+F,KAAK6vG,KAAKoB,gBACL,aAAYjxG,KAAKykB,eAAekB,sBAC/BzkB,GAEV6J,GAAOD,IAAK,cAAa9K,KAAKykB,eAAekB,sBAAsB3lB,KAAK2+F,MAAQ,MAAQ,WAAYz9F,GAEpGkqG,GAAWgE,cACPrd,GACA,CACI2X,IAAK1pG,KAAK2+F,MACVx4D,MAAOnmC,KAAKykB,eAAekB,mBAC3B,gBAAmB3lB,KAAKykB,eAAerC,eACvCs0H,UAAW12I,KAAKm1I,YAChBttI,MAAO3G,IAGflB,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,6BACA5oF,KACAA,KAAKykB,eAAekB,oBAChB3lB,KAAKykB,eAAekB,oBAC5B,IAAK,WACD3lB,KAAKi0I,6BAA+B/yI,EACpC,MACJ,IAAK,YAGD,GAA2C,WAAvClB,KAAKykB,eAAerC,eAA6B,CACjDq0H,GAAW,EACX,MAAME,GAA2B32I,KAAK+G,QAAQ6vI,kBACvC52I,KAAK6vG,KAAK4sB,8BAEbz8H,KAAKm1I,aAAewB,IACpB32I,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,oBAAgC5oF,KAE3C,CASD,IAAKA,KAAKmpB,eACFnpB,KAAKo1I,WACFqB,GACCz2I,KAAKgW,iBAAmBhW,KAAKwgH,cACzBhgF,GAAQo2D,mBAAqBp2D,GAAQ+0D,kBAAoB,CAErE6V,GAAWgE,cACPvd,GACA,CACIukD,MAAO,WACPvuI,MAAO3G,EAAMlB,KAAKi0I,6BAClBvqC,IAAK1pG,KAAK2+F,MACV03C,UAAWr2I,KAAKwgH,cAMxB,MAAMq2B,EACA5yI,KAAKF,IACH/D,KAAKi0I,6BACLj0I,KAAKk0I,4BAEbl0I,KAAK80I,sBAAwB5zI,EAAM21I,EAEnCzrC,GAAWgE,cACPvd,GACA,CACIukD,MAAO,gBACPvuI,MAAO7H,KAAK80I,sBACZprC,IAAK1pG,KAAK2+F,MACV03C,UAAWr2I,KAAKwgH,cAGxBxgH,KAAKmpB,cAAe,EACpBnpB,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,uBAAmC5oF,KAC1C,CACDA,KAAKm1I,aAAc,EACnB,MACJ,IAAK,eACDn1I,KAAKm1I,aAAc,EAIfn1I,KAAKo1I,WACLp1I,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,uBAAmC5oF,MAE3C,MACJ,IAAK,SACDA,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,sBAAkC5oF,MA7E1C,EAuFJA,KAAKykB,eAAeqyH,wBAA0B,KAC1C,MAAMC,EAAW/2I,KAAKykB,eAAekB,mBAGhC,WADG3lB,KAAKykB,eAAeoB,iBAMP,iBAAbkxH,GACA/2I,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,sBAAkC5oF,KAR9C,EAkBJA,KAAKykB,eAAeuyH,oBAAsB,KACtC,MAAM7wG,EAAQnmC,KAAKykB,eAAerC,eAC5B60H,EAAoBj3I,KAAKykB,eAAewyH,kBAE9C,GAAIj3I,KAAKgW,kBACDhW,KAAK2+F,OACI,WAAVx4D,GACA8wG,GACiC,iBAA1BA,EAAkBrmI,IAAkB,CAC9C7F,GAAOsM,KAAM,GAAErX,qCAAqCA,KAAKykB,kBAEzD,MAAMyyH,EAAerF,IACjB7xI,KAAKm3I,eACAx8H,MAAK,IAAMk3H,MAAoBluI,GAASkuI,EAAiBluI,IAD9D,EAIJ3D,KAAK60I,kBAAkBjzI,KACnBs1I,GACAvzI,IACQA,EACAoH,GAAOpH,MAAO,GAAE3D,iCAAkC2D,GAElDoH,GAAOkT,MAAO,GAAEje,yCACnB,GAEZ,EAER,CAODo3I,8BACI,GAAIp3I,KAAK2+F,MACL,OAAO3+F,KAAKy0I,wBAInB,CAOD4C,qCACI,GAAIr3I,KAAK2+F,MACL,OAAO3+F,KAAK40I,2BAInB,CAOD0B,iBAAiBnxH,GACb,MAAMmyH,EAAW,IAAI7N,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAE9D,GAAIuU,GAAaA,EAAUA,UAAU7gB,SAAWtE,KAAKu0I,iBAAkB,CACnE,MAAMgD,EAAMhS,GAAAA,UAAkB+R,EAASxmI,MAAMqU,EAAUqyH,eAAgBF,EAASzmI,SAC1E4mI,EAAQlS,GAAAA,kBAA0BpgH,EAAUA,WAElD,IAAMoyH,IAAOE,EAAQ,CACjB,MAAMC,EAAgB,6BAKtB,OAHAl0I,KAAAA,iBAAsC,IAAIjB,MAAMm1I,SAChD3sI,GAAOpH,MAAM+zI,EAGhB,CACDH,EAAIlqE,MAAQ,uCAERrtE,KAAKuyI,SAC6B,IAA9BvyI,KAAKwyI,cAAcluI,QACnBsF,YAAW,KAC2B,IAA9B5J,KAAKwyI,cAAcluI,SAGvBtE,KAAK23I,kBAAkB33I,KAAKwyI,eAC5BxyI,KAAKwyI,cAAgB,GAArB,GArqBW,KAwqBnBxyI,KAAKwyI,cAAc5wI,KAAKujB,IAExBnlB,KAAK23I,kBAAkB,CAAExyH,GAEhC,MACGpa,GAAOD,IAAK,GAAE9K,yCAGdA,KAAKu0I,kBAAmB,CAE/B,CAQDoD,kBAAkBjmI,GACd,IAAK1R,KAAKk1I,gBAAgB,qBAEtB,OAGJnqI,GAAOD,IAAK,GAAE9K,0BAA0BiH,KAAK8B,UAAU2I,MACvD,MAAMw1H,GAAOx/D,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UACxBl6G,KAAM,QACLhD,EAAE,SAAU,CAAEq/D,MAAO,oBAClBr5D,OAAQ,iBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAEZ+kE,EAAW,IAAI7N,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAE9D,IAAK,IAAI6rD,EAAM,EAAGA,EAAM66E,EAASxmI,MAAMxM,OAAQm4D,IAAO,CAClD,MAAMm7E,EAAQlmI,EAAWX,QAAOiC,GAAMA,EAAGwkI,gBAAkB/6E,IACrDgC,EACA8mE,GAAAA,WAAmB+R,EAASxmI,MAAM2rD,GAAK/wD,MAAM,QAAQ,IAE3D,GAAIksI,EAAMtzI,OAAS,EAAG,CAClB,MAAMizI,EACAhS,GAAAA,UAAkB+R,EAASxmI,MAAM2rD,GAAM66E,EAASzmI,SAEtD0mI,EAAIlqE,MAAQ,uCACZ65D,EAAKl5H,EAAE,UAAW,CACdq9H,QAASrrI,KAAK0yI,eAAiB1yI,KAAKoyI,SAC9B,YAAc,YACpB9kI,KAAMsqI,EAAM,GAAGC,OAASD,EAAM,GAAGC,OAASp5E,EAAM3tD,QACjD9C,EAAE,YAAaupI,GAClB,IAAK,IAAIzyI,EAAI,EAAGA,EAAI8yI,EAAMtzI,OAAQQ,IAAK,CACnC,MAAMqgB,EACAogH,GAAAA,kBAA0BqS,EAAM9yI,GAAGqgB,WAIrCnlB,KAAKoqI,UACLjlH,EAAUtT,GAAK,WAEnBq1H,EAAKl5H,EAAE,YAAamX,GAAWooD,IAClC,CAGD,MAAMuqE,EACAvS,GAAAA,SACE+R,EAASxmI,MAAM2rD,GACf,iBAAkB66E,EAASzmI,SAEnC,GAAIinI,EAAiB,CACjB,MAAMh/G,EAAMysG,GAAAA,iBAAyBuS,GAErCh/G,EAAIi/G,UAAW,EACf7Q,EAAKl5H,EACD,cACA,CAAEq/D,MAAO,gCACRrhE,EAAE8sB,EAAI+tG,oBACJ/tG,EAAI+tG,YACXK,EAAK5/D,MAAMxuC,GACXouG,EAAK35D,IACR,CACD25D,EAAK35D,KACL25D,EAAK35D,IACR,CACJ,CAKDvtE,KAAK4e,WAAWo1D,OACZkzD,EAAM,KAAMlnI,KAAKg4I,sBAAsB9Q,GAAOoM,GACrD,CASD2E,4BACI,MAAMC,GACAxwE,EAAAA,GAAAA,KAAI,CACF7rD,GAAI7b,KAAKkrH,UACTl6G,KAAM,QACThD,EAAE,SAAU,CAAEq/D,MAAO,oBAClBr5D,OAAQ,eACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MACbvkE,EAAE,YAAa,CAAEq/D,MAAO,oCACxBrhE,EAAE,UACFuhE,KAELvtE,KAAK8zI,kBACEoE,EAAYlqI,EACX,iBAAkB,CACdq/D,MAAO,kCACPjhE,GAAIpM,KAAK8zI,mBAGrB9zI,KAAK4e,WAAWosG,QACZktB,EAAa,CAMTxkE,QAAS,KAEZ9vD,MAAM5jB,KAAKg4I,sBAAsBE,GACzC,CAKDpF,iBAAiBv6F,GACb,GAA2C,WAAvCv4C,KAAKykB,eAAerC,eAGpB,YAFArX,GAAOuY,KAAM,GAAEtjB,uDAKnB,MAAMm4I,EAAgB,GAEtB5/F,EAAK9jC,KAAK,gCACLq0B,MAAK,CAACk9C,EAAK7gE,KACR,IAAI5Z,EAAOg6H,GAAAA,oBAA4BpgH,GAEvC5Z,EAAOA,EAAKtJ,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,MAAMm2I,EAAe,IAAIC,gBAAgB,CACrCb,cAAe,EAOfK,OAAQ,GACR1yH,UAAW5Z,IAGf4sI,EAAcv2I,KAAKw2I,EAAnB,IAGHD,EAAc7zI,QAsBnByG,GAAOkT,MAAO,GAAEje,oBAAoBm4I,EAAc7zI,+BAClDtE,KAAK60I,kBAAkBjzI,MAbFiwI,IACjB,IAAK,MAAMyG,KAAgBH,EACvBn4I,KAAKykB,eAAe8zH,gBAAgBD,GAC/B39H,MACG,IAAM5P,GAAOkT,MAAO,GAAEje,8BACtB6jB,GAAO9Y,GAAOpH,MAAO,GAAE3D,+BAAgC6jB,KAGnEguH,IACA9mI,GAAOkT,MAAO,GAAEje,oCAAhB,KAlBA+K,GAAOpH,MAAO,GAAE3D,kCAAmCu4C,EAAK,IAAMA,EAAK,GAAGigG,UAuB7E,CAMDC,aAAalmG,GACKpI,KAAEoI,GAAU99B,KAAK,gEAEzBq0B,MAAK,CAAChkC,EAAG4zI,KACX,MAAMllI,EAAOtD,OAAOwoI,EAAYtwG,aAAa,SAE7C,GAAIswG,EAAYp1G,aAAa,QAAS,CAClC,MAAMizE,EAAamiC,EAAYtwG,aAAa,QAE5CpoC,KAAKyyI,gBAAgBkG,mBAAmBnlI,EAAM+iG,EACjD,CAEGv2G,KAAK2+F,MAEL3+F,KAAKyyI,gBAAgBmG,aAAaplI,EAAM+zD,GAAAA,QAAAA,mBAA2BvnE,KAAKkrH,YAExE/gF,KAAEuuG,GACGjkI,KAAK,gDACLq0B,MAAK,CAAC+vG,EAAIC,KACP,MAAMxX,EAAQwX,EAAgB1wG,aAAa,SAt3BnE,IAAuB2wG,EAw3BKzX,SAAAA,EAAOh9H,SACHggC,MAAM9wB,IAASA,EAAO,EACtBzI,GAAOuY,KAAM,GAAEtjB,qBAAqBwT,wBAA2B8tH,KAE/DthI,KAAKyyI,gBAAgBmG,aAAaplI,GA53B3CulI,EA43B+DzX,EA33B3E/5D,GAAAA,QAAAA,mBAA2BwxE,IAAoBA,IA63BjC,GAEZ,GAER,CAODC,uBACQh5I,KAAKykB,eACLzkB,KAAKykB,eAAeu0H,uBAEpBjuI,GAAOpH,MAAO,GAAE3D,4DAEvB,CAKDi5I,0BACI,OAAOj5I,KAAKykB,eAAew0H,yBAC9B,CAgBD7F,YAAY8F,EAAaz5D,EAAS0zD,EAASx3B,GACvC37G,KAAKm5I,oBACDD,GACA,KAIIl5I,KAAKo5I,mBAAkB,KAEnBruI,GAAOkT,MAAM,iEACbje,KAAK60I,kBAAkBvjE,SAEvBmO,IACAz/E,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,eAA2B5oF,MAOvD,MAAMq5I,EAAc19B,EAAY5qG,QAAOuU,GAASA,EAAMoqF,YAAchM,GAAUgH,QAE9E2uC,EAAY/0I,QAAU+0I,EAAYzuI,OAAO,EAAG,GACxC68F,GAAAA,mCAAkD4xC,EAAY/0I,QAC9DtE,KAAKs5I,UAAUD,EAClB,IAEL11I,IACIwvI,EAAQxvI,GACR3D,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiC5oF,KAAM2D,EAAnE,GAtBJ,GAyBJwvI,EACAx3B,EACP,CAQDoiB,SAAyB,IAAlBpiB,EAAkB,uDAAJ,GACjB,IAAK37G,KAAKwgH,YACN,MAAM,IAAIj+G,MAAM,+CAEpBwI,GAAOkT,MAAO,GAAEje,8BAEhB,MAAMs5I,EAAY,GAElB,IAAK,MAAMh0H,KAASq2F,EAChB29B,EAAU13I,KAAK5B,KAAKykB,eAAe80H,SAASj0H,EAAOtlB,KAAKwgH,cAG5DpmG,QAAQ0c,IAAIwiH,GACP3+H,MAAK,IAAM3a,KAAKykB,eAAe+0H,YAAYx5I,KAAKqyI,oBAChD13H,MAAK8+H,GAAYz5I,KAAKykB,eAAei1H,oBAAoBD,KACzD9+H,MAAK,KACF3a,KAAKykB,eAAek1H,kCAAkCh+B,GACtD37G,KAAK45I,oBAAoB55I,KAAKykB,eAAewD,iBAAiBrX,IAA9D,IAEH+J,MAAK,KACF5P,GAAOkT,MAAO,GAAEje,4BAAhB,IAEH4jB,OAAMjgB,IACHoH,GAAOpH,MAAO,GAAE3D,oBAAqB2D,EAArC,GAEX,CAYDi2I,oBAAoBH,GAChB,IAAI//H,GAAOguD,EAAAA,GAAAA,KAAI,CACX7rD,GAAI7b,KAAKkrH,UACTl6G,KAAM,QACPhD,EAAE,SAAU,CACXq/D,MAAO,oBACPr5D,OAAQ,mBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAGd,IAAIk3D,GAAIgQ,GAAUvO,SACdxxH,EACA1Z,KAAKwgH,YAAc,YAAc,aACrC9mG,EAAOA,EAAKozD,OACZ/hE,GAAOkT,MAAO,GAAEje,0BAA2B0Z,GAC3C1Z,KAAK4e,WAAWo1D,OAAOt6D,GACnB,KACI3O,GAAOsM,KAAM,GAAErX,yCAAf,IAEJ2D,IACIoH,GAAOpH,MAAO,GAAE3D,gCAAiC2D,EAAjD,GAEJ2vI,GACP,CAODuG,UAAUC,GACN,IAAK95I,KAAKwgH,YACN,MAAM,IAAIj+G,MAAM,oDAEpBwI,GAAOkT,MAAO,GAAEje,iCAEhB,MAAM+5I,EAAe/5I,KAAKg6I,yBAAyBF,GAC7CG,EAAc,IAAIxQ,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAC3DqmI,EAAoB,IAAIp/H,sBAAsB,CAChD7G,KAAM,SACNJ,IAAKmpI,EAAarkE,MAGtB11E,KAAKykB,eAAey1H,qBAAqBjD,GACpCt8H,MAAK,KACF,GAAI3a,KAAKmmC,QAAU4rG,GAA4B,CAC3C/xI,KAAKmmC,MAAQ4rG,GAGbhnI,GAAOkT,MAAM,iEACbje,KAAK60I,kBAAkBvjE,SACvB,MAAM6oE,EAAc,IAAI1Q,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAEjE5Q,KAAKo6I,oBACLp6I,KAAKq6I,mBAAmBJ,EAAaE,EACxC,KAEJx/H,MAAK,KACF5P,GAAOkT,MAAO,GAAEje,2BAAhB,IAEH4jB,OAAMjgB,IACHoH,GAAOpH,MAAO,GAAE3D,+BAA+B2D,IAA/C,GAEX,CAcDw1I,oBAAoBmB,EAAqB76D,EAAS0zD,GAA2B,IAAlBx3B,EAAkB,uDAAJ,GACrE5wG,GAAOkT,MAAO,GAAEje,2CAEhB,MAAMs5I,EAAY,GACZiB,EAAc5+B,EAAY5qG,QAAOuU,GAASA,EAAMoqF,YAAchM,GAAU8M,QACxE6oC,EAAc19B,EAAY5qG,QAAOuU,GAASA,EAAMoqF,YAAchM,GAAUgH,QAC9E,IAAIx9E,EAASyuF,EAKTlU,GAAAA,mCAAkD4xC,EAAY/0I,OAAS,IACvE4oB,EAAS,IAAKqtH,EAAalB,EAAY,KAE3C,IAAK,MAAM/zH,KAAS4H,EAChBosH,EAAU13I,KAAK5B,KAAKykB,eAAe80H,SAASj0H,EAAOtlB,KAAKwgH,cAE5D,MAAMu5B,EAAe/5I,KAAKg6I,yBAAyBM,GAE7CE,EADgBrwG,KAAEmwG,GAAqB7lI,KAAK,4DACZm6B,KAAK,MAEvC4rG,IAAoBx6I,KAAK8zI,mBACzB9zI,KAAK8zI,iBAAmB0G,GAG5BpgI,QAAQ0c,IAAIwiH,GACP3+H,MAAK,IAAM3a,KAAKm3I,aAAa4C,EAAarkE,OAC1C/6D,MAAK,KACF3a,KAAKykB,eAAek1H,kCAAkCzsH,GAClDltB,KAAKmmC,QAAU4rG,KACf/xI,KAAKmmC,MAAQ4rG,IAST/xI,KAAK2+F,OAAW3+F,KAAKo0I,+BAAgCp0I,KAAKm0I,4BAC1Dn0I,KAAKo6I,oBAEZ,IAGJz/H,MAAK,KACF5P,GAAOkT,MAAO,GAAEje,sCAChBy/E,GAAS,IAEZ77D,OAAMjgB,IACHoH,GAAOpH,MAAO,GAAE3D,yCAAyC2D,KACzDwvI,EAAQxvI,EAAR,GAEX,CASD82I,eAAeC,GACX,GAAI16I,KAAKk1I,kBAAmB,CACxBnqI,GAAOsM,KAAM,GAAErX,wBAAwB06I,KACvC16I,KAAKykB,eAAeg2H,eAAeC,GAGnC,MAAMxD,EAAerF,IACjB7xI,KAAKm3I,eAAex8H,MAChB,KACI5P,GAAOkT,MAAO,GAAEje,oCAET6xI,OACRluI,IACCoH,GAAOpH,MAAO,GAAE3D,oCAAoC2D,KAE7CkuI,EAAiBluI,KARhC,EAYJoH,GAAOkT,MAAO,GAAEje,mCAGhBA,KAAK60I,kBAAkBjzI,KAAKs1I,EAC/B,CACJ,CAYDyD,iBAAiBC,EAAiBn7D,EAAS0zD,GACvC,GAAInzI,KAAK+G,QAAQ8zI,mBAAoB,CACjC,MAAMjqI,EAAM,IAAI64H,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAKzD,OAHA5Q,KAAK86I,oBAAoBlqI,EAAK6uE,EAAS0zD,QACvCnzI,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiC5oF,KAGhE,CACDA,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,eAA2B5oF,MAMvD,MAAM+6I,EAAgBH,EAAgB1+F,QAEtC0+F,EACKnmI,KAAK,yBACLm6B,KAAK,UAAW,YAQrBgsG,EACKnmI,KAAK,+BACL6+B,SACLsnG,EACKnmI,KAAK,mCACL6+B,SAML,MAAM0nG,EAAiBJ,EAAgBnmI,KAAK,kCAE5CumI,EAAepsG,KAAK,OAAQ,SAC5BosG,EAAer0I,KAAK,+DA+BpBoE,GAAOkT,MAAO,GAAEje,gCAGhBA,KAAK60I,kBAAkBjzI,MAhCFiwI,IAEjB7xI,KAAKm5I,oBACDyB,GACA,KAEI56I,KAAKm5I,oBACD4B,GACA,KACI,MAAMzD,EAAW,IAAI7N,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAErB,iBAA9B5Q,KAAK+G,QAAQk0I,cAA6Bj7I,KAAK+G,QAAQk0I,cAAgB,IAC9E3D,EAAS/L,aAAevrI,KAAK+G,QAAQk0I,cAGzCj7I,KAAK86I,oBAAoBxD,EAAU73D,EAAS0zD,GAE5CnzI,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,oBACA5oF,KACA+6I,GAEJlJ,GAAkB,IACnBluI,GAASkuI,EAAiBluI,IAjBjC,IAmBDA,GAASkuI,EAAiBluI,IAvBjC,IAgCAA,IACQA,GACAoH,GAAOpH,MAAO,GAAE3D,iCAAiC2D,KACjDwvI,EAAQxvI,KAERoH,GAAOkT,MAAO,GAAEje,8BAChBy/E,IACH,GAEZ,CAUD25D,kBAAkB35D,EAAS0zD,GAGvB,MAAMmE,EAAW,IAAI7N,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KACxDsqI,GAASxzE,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UAC1Bl6G,KAAM,QACLhD,EAAE,SAAU,CAAEq/D,MAAO,oBAClBr5D,OAAQ,iBACRqiI,UAAWr2I,KAAK0yI,aAChByI,UAAWn7I,KAAK2yI,aAChBpgE,IAAKvyE,KAAKuyE,MAEdvyE,KAAKs1I,sBACLgC,EAASjN,qBAAsB,GAE/BrqI,KAAKq1I,sBACLiC,EAAShN,qBAAsB,GAE/BtqI,KAAKoqI,UACLkN,EAASlN,SAAU,GAEkB,iBAA9BpqI,KAAK+G,QAAQk0I,cAA6Bj7I,KAAK+G,QAAQk0I,cAAgB,IAC9E3D,EAAS/L,aAAevrI,KAAK+G,QAAQk0I,cAEzC3D,EAASpM,SACLgQ,EACAl7I,KAAK0yI,eAAiB1yI,KAAKoyI,SAAW,YAAc,aAExDrnI,GAAOsM,KAAM,GAAErX,+BACf+K,GAAOkT,MAAMi9H,EAAOpuE,QACpB9sE,KAAK4e,WAAWo1D,OAAOknE,EACnBz7D,EACAz/E,KAAKg4I,sBAAsBkD,GAAQv3I,IAC/BwvI,EAAQxvI,GAIR3D,KAAK6vG,KAAKvN,aAAahgG,KACnBsmF,GAAW,WAAXA,uBAAmC5oF,KADvC,IAGJszI,GAqBP,CAOD8G,oBACI,MAAM/N,EAAUrsI,KAAKo0I,6BAA+B,OAAS,OACvDgH,GACA1zE,EAAAA,GAAAA,KAAI,CACF7rD,GAAI7b,KAAKkrH,UACTl6G,KAAM,QAELhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,iBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAEbvkE,EAAE,UAAW,CACVV,KAAMo2F,GAAUgH,MAChB2hC,iBAGmC,IAApCrsI,KAAKm0I,4BACZn0I,KAAKm0I,2BAA2B/wI,SAAQ,CAACqhI,EAAWluB,KAChD6kC,EACKptI,EAAE,sBAAuB,CAAEq/D,MAAO,mCAClC/F,MAAM,CACHivC,aACAkuB,cAGR2W,EAAc7tE,KACdxiE,GAAOsM,KAAM,GAAErX,gDAAgDu2G,iBAA0BkuB,IAAzF,IAIR15H,GAAOkT,MAAMm9H,EAActuE,QAE3B9sE,KAAK4e,WAAWo1D,OACZonE,EACA,KACAp7I,KAAKg4I,sBAAsBoD,GAC3B9H,GACP,CAQD+H,2BAA2BC,GACvBvwI,GAAOsM,KAAM,GAAErX,kDAAkDiH,KAAK8B,UAAUuyI,MAChFt7I,KAAKm0I,2BAA6BmH,EAE9Bt7I,KAAK2+F,OAGD3+F,KAAKmmC,QAAU4rG,IACf/xI,KAAKo6I,mBAGhB,CAYDU,oBAAoBxD,EAAU73D,EAAS0zD,GACnC,MAAMoI,GAAkB7zE,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UACnCl6G,KAAM,QACLhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,mBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAGlB+kE,EAASxmI,MAAM1N,SAAQ,CAACo4I,EAAYx1D,KAChC,MAAMvnB,EAAQ8mE,GAAAA,WAAmBiW,EAAW9vI,MAAM,QAAQ,IAE1D6vI,EAAgBvtI,EAAE,UACd,CACIq9H,QACIrrI,KAAK0yI,eAAiB1yI,KAAKoyI,SACrB,YACA,YACV9kI,KAAMmxD,EAAM3tD,QAGpBwmI,EAAS/K,kBAAkBvmD,EAAKu1D,GAChCA,EAAgBhuE,IAAhB,IAGJxiE,GAAOsM,KAAM,GAAErX,iCACf+K,GAAOkT,MAAMs9H,EAAgBzuE,QAE7B9sE,KAAK4e,WAAWo1D,OAAOunE,EACnB97D,EACAz/E,KAAKg4I,sBAAsBuD,EAAiBpI,GAC5CG,GACP,CAaDmI,oBAAoBh8D,EAAS0zD,GAGzB,MAAMuI,GAAkBh0E,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UACnCl6G,KAAM,QACLhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,mBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAGlBxnE,GAAOsM,KAAM,GAAErX,mCACf+K,GAAOkT,MAAMy9H,EAAgB5uE,QAE7B9sE,KAAK4e,WAAWo1D,OAAO0nE,EACnBj8D,EACAz/E,KAAKg4I,sBAAsB0D,EAAiBvI,GAC5CG,GACP,CASDqI,yBAAyBC,GAAmC,IAAnBrlC,EAAmB,uDAAN,KAClD,GAAIv2G,KAAKk1I,kBAAmB,CACxBnqI,GAAOsM,KAAM,GAAErX,kCAAkC47I,kBAA+BrlC,KAEhF,MAAMslC,EAAkBtlC,EAClBv2G,KAAKgwG,IAAI8rC,sBAAsBrnI,MAAK6Q,GAASA,EAAMy2H,kBAAoBxlC,IACvEv2G,KAAKgwG,IAAIgsC,qBAEf,OAAOh8I,KAAKykB,eAAew3H,0BAA0BL,EAAgBC,EACxE,CAED,OAAOzhI,QAAQC,SAClB,CAKD64H,UAAUzzD,EAAS0zD,EAASpsI,GACxB,GAAI/G,KAAKmmC,QAAU4rG,GAAnB,CAIA,IAAKhrI,GAAWsZ,QAAQtZ,EAAQm1I,sBAAuB,CACnD,MAAMC,GACAz0E,EAAAA,GAAAA,KAAI,CACF7rD,GAAI7b,KAAKkrH,UACTl6G,KAAM,QAELhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,oBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAEbvkE,EAAE,UACFA,EAAGjH,GAAWA,EAAQxD,QAAW,WACjCgqE,KAELxmE,GAAWA,EAAQq1I,kBACnBD,EACKnuI,EAAE,QACFhC,EAAEjF,EAAQq1I,mBACV7uE,KACAA,KAEL4uE,EAAiB5uE,KAGrBvtE,KAAK8zI,kBACEqI,EAAiBnuI,EAChB,iBAAkB,CACdq/D,MAAO,kCACPjhE,GAAIpM,KAAK8zI,iBACTuI,QAASt1I,IAAsC,IAA3BA,EAAQu1I,iBAC7B/uE,KAEXxiE,GAAOsM,KAAM,GAAErX,kCACf+K,GAAOkT,MAAMk+H,EAAiBrvE,QAE9B9sE,KAAK4e,WAAWo1D,OACZmoE,EACA18D,EACAz/E,KAAKg4I,sBAAsBmE,EAAkBhJ,GAC7CG,GACP,MACGvoI,GAAOsM,KAAM,GAAErX,0CAInBA,KAAK4e,WAAW+iH,OAAOuR,UAAUlzI,KAAKuyE,IAjDrC,CAkDJ,CAODgqE,aAAaC,EAAiBC,GAI1B1xI,GAAOsM,KAAM,GAAErX,0BAA2Bw8I,EAAiBC,GAE3Dz8I,KAAK+0I,eAAe3xI,SAAQuhC,GAAkBA,MAC9C3kC,KAAK+0I,eAAiB,GAElB/0I,KAAKi1I,6CACLj1I,KAAKi1I,8CAGLxtC,GAAAA,4BAA2CznG,KAAKykB,gBAChDzkB,KAAKykB,eAAei4H,kBAAkBt5I,SAAQkiB,IAC1CtlB,KAAK6vG,KAAKvN,aAAahgG,KAAKssF,GAAiBpB,cAAeloE,EAA5D,IAIRtlB,KAAKif,OACR,CAOD+1H,oBAAoB3/D,GACZA,IAAWs2C,GAAexiD,OAAOK,WAAaxpE,KAAK+zI,qBACnDhpI,GAAOsM,KAAM,GAAErX,yCACfA,KAAKq6I,mBACDr6I,KAAK+zI,mBACL/zI,KAAKg0I,oBAEhB,CAYD2I,4BAA4BC,EAAeC,GACvC,MAAMC,EAAc,GACd19I,EAAOY,KA0Eb,OAxEAmqC,KAAEyyG,GAAe9zG,MAAK,CAACi0G,EAAI1sI,KACvB,MAAM/C,EAAO68B,KAAE95B,GAASu+B,KAAK,QAC7B,IAAI5d,EAAQ,GAEZmZ,KAAE95B,GACGoE,KAAK,uDACLq0B,MAAK,WAEF,MAAMn0B,EAAY3U,KAAKooC,aAAa,aAC9B10B,EACAy2B,KAAEnqC,MACCyU,KAAK,WACLhD,KAAI,WAED,OAAOzR,KAAKooC,aAAa,OAC5B,IACAjkB,MAELzQ,EAAMpP,SACN0sB,GAAU,gBAAerc,KAAajB,EAAMT,KAAK,WAExD,IAICk3B,KAAE95B,GAASoE,KACT,mDAGJq0B,MAAK,WACL,MAAMt1B,EAAO22B,KAAEnqC,MAAM4uC,KAAK,QAEtBiuG,EAAiB7R,aAAax3H,KAG5BpU,EAAK4W,kBAAmB5W,EAAKu/F,QACxB5zF,GAAOuY,KAAM,GAAElkB,2CAA8CoU,KAMxE22B,KAAEnqC,MAAMyU,KAAK,cAAcq0B,MAAK,WAC5B9X,GAAU,UAASxd,KAAQ22B,KAAEnqC,MAAM4uC,KAAK,UACpCzE,KAAEnqC,MAAM4uC,KAAK,UAAYzE,KAAEnqC,MAAM4uC,KAAK,SAAStqC,SAC/C0sB,GAAU,IAAGmZ,KAAEnqC,MAAM4uC,KAAK,YAE9B5d,GAAS,MACZ,GACJ,IAED,IAAIgsH,GAAW,EAGfH,EAAiB/rI,MAAM1N,SAAQ,CAAC0N,EAAOmsI,KAC9B1X,GAAAA,SAAiBz0H,EAAQ,SAAQxD,OAGjCwvI,EAAYG,KACbH,EAAYG,GAAM,IAEtBH,EAAYG,IAAOjsH,EACnBgsH,GAAW,EAAX,KAKCA,GAAYh9I,KAAK2+F,QAClBm+C,EAAYxvI,GAAQ0jB,EACvB,IAGE8rH,CACV,CAMDI,gBAAgB3kG,GACZv4C,KAAKm9I,0BAAyB,EAAgB5kG,EACjD,CAMD6kG,mBAAmB7kG,GACfv4C,KAAKm9I,0BAAyB,EAAoB5kG,EACrD,CAUDq7D,iBAAiB9vF,EAASgvE,GACtB,MAAMuqD,EAAW,GAEjB,IAAK,MAAMl7I,KAAO2hB,EAAQw5H,cAAe,CAErC,IAAI,MAAEhc,EAAF,OAASvpH,EAAT,KAAiBvE,EAAjB,UAAuBqgG,GAAc1xG,EAErCo7I,EAAa/pI,EAEjB,GAHkBxT,KAAKykB,eAAe+4H,cAAchqI,EAAMuE,GAG3C,CACXslI,EAASz7I,KAAKO,GAGd,MAAMgT,EAAUnV,KAAKykB,eAAeg5H,cAAct5H,IAAIpM,GAElD5C,IACAooI,EAAapoI,EACbmsH,OAAQx6H,EACRiR,OAASjR,EAEhB,CACD,MAAMwe,EAAQtlB,KAAKykB,eAAe0iF,eAAeo2C,GAEjD,GAAIj4H,EAAO,CASP,GARAva,GAAOkT,MAAO,iBAAgBzK,gBAAmB8tH,kBAAsBvpH,KAGvE/X,KAAKyyI,gBAAgBmG,aAAaplI,EAAM8tH,GAGxCh8G,EAAMo4H,cAAc3lI,GACpBuN,EAAMq4H,SAASrc,GACXxuC,IAAc4Q,GAAUgH,MAAO,CAC/B,MAAM15F,EAAqB,WAAd6iG,EAAyBprB,GAAU,UAAVA,OAAmBA,GAAU,UAAVA,QAEzDnjE,EAAMs4H,cAAc5sI,EACvB,CAID,MAAM6sI,EAAgB79I,KAAKyyI,gBAAgBqL,iBAAiBxc,EAAOxuC,EAAW/6E,GAE9E8lI,GAAiB79I,KAAKykB,eAAes5H,oBAAoBhmI,EAAQ8lI,EAAct4H,MAClF,CACJ,CAGD,GAAI83H,EAAS/4I,OAAQ,CACjB,IAAIiD,GAAO8/D,EAAAA,GAAAA,QAAO,UAAW,CACzBgG,MAAO,oBACP//D,KAAMwlF,IACP9kF,EAAE,cAAe,CAChBq/D,MAAO,6BACPv8D,MAAOgiF,IAGX,IAAK,MAAM3wF,KAAOk7I,EAAU,CACxB,MAAM,IAAE59E,EAAF,KAAOjsD,EAAP,OAAauE,GAAW5V,EAC9B,IAAI8T,EAEJ,GAAI68E,IAAc4Q,GAAUgH,MAAO,CAC/B,MAAM1kB,IAAQhmF,KAAK00I,sBAEnBz+H,EAAQ,gBAAe+vE,kBAAoBA,IAE/B,OAARvmB,IACA8zE,GAAkBhsI,EAAMpF,EAAKs9D,EAAKxpD,GAClC1O,EAAKyG,EAAE,aAAc,CACjBq/D,MAAO,kCACP14D,UAAW,QAEV3G,EAAE,SAAU,CACTq/D,MAAO,kCACP75D,SAEH+5D,KACAv/D,EAAE,SAAU,CACTq/D,MAAO,kCACP75D,KAAMisD,IAET8N,KACAA,KAEZ,KAAM,CACH,MAAMyY,IAAQhmF,KAAK20I,sBAEnB1+H,EAAQ,gBAAe+vE,kBAAoBA,GAC9C,CACDutD,GAAkBhsI,EAAMpF,EAAKqR,EAAMyC,GACnCjW,KAAKykB,eAAeg5H,cAAc32G,IAAI/uB,EAAQvE,EACjD,CACDjM,EAAOA,EAAKgmE,KACZvtE,KAAKm9I,0BAAyB,EAAgB51I,EAAKA,KACtD,CACJ,CAQDy2I,2BAA2B5xI,GAcvBrB,GAAOkT,MAAO,GAAEje,+DAA+DoM,KAE/EpM,KAAK60I,kBAAkBjzI,MAfFq8I,IACjB,MAAMC,EAAiBl+I,KAAKykB,eAAe05H,iCAAiC/xI,GAE5E,GAAI8xI,EAAe55I,OAAQ,CACvB,MAAMy1I,EAAe/5I,KAAKo+I,2BAA2BF,GAErDl+I,KAAKm3I,aAAa4C,EAAarkE,KAC1B/6D,MAAK,IAAMsjI,MAAkBt6I,GAASs6I,EAAet6I,IAC7D,MACGs6I,GACH,IAODt6I,IACQA,EACAoH,GAAOpH,MAAO,GAAE3D,yCAA0C2D,GAE1DoH,GAAOsM,KAAM,GAAErX,wCAClB,GAEZ,CAUDm9I,yBAAyBkB,EAAO9lG,GAC5B,MAAM33B,EAAYy9H,EAAQ,kBAAoB,qBAE1CA,GACAr+I,KAAKy4I,aAAalgG,GAmCtBxtC,GAAOkT,MAAO,GAAEje,eAAe4gB,UAG/B5gB,KAAK60I,kBAAkBjzI,MAnCFiwI,IACjB,IAAK7xI,KAAKykB,eAAewD,mBACjBjoB,KAAKykB,eAAewD,iBAAiBrX,IAAK,CAC9C,MAAM0tI,EAAU,GAAE19H,qCAKlB,OAHA7V,GAAOpH,MAAM26I,QACbzM,EAAiByM,EAGpB,CAEDvzI,GAAOD,IAAK,GAAE9K,mBAAmB4gB,KAEjC,MAAMhQ,EAAM,IAAI64H,GAAIzpI,KAAKykB,eAAewyH,kBAAkBrmI,KACpD2tI,EACAF,EACIr+I,KAAK28I,4BAA4BpkG,EAAM3nC,GACvC5Q,KAAKw+I,+BAA+BjmG,EAAM3nC,GAC9CmpI,EACAsE,EACIr+I,KAAKy+I,wBAAwBF,GAC7Bv+I,KAAKo+I,2BAA2BG,GAE1Cv+I,KAAKm3I,aAAa4C,EAAarkE,KAAK/6D,MAAK,KACrC5P,GAAOD,IAAK,GAAE9K,QAAQ4gB,UACtBixH,GAAkB,IACnBluI,IACCoH,GAAOpH,MAAO,GAAE3D,QAAQ4gB,YAAqBjd,GAC7CkuI,EAAiBluI,EAAjB,GALJ,GAaP,CAODq2I,yBAAyB3pC,GACrB,MAAMquC,EAAY,IAAIjV,GAAI,IAe1B,OAbIzpI,KAAKs1I,sBACLoJ,EAAUrU,qBAAsB,GAEhCrqI,KAAKq1I,sBACLqJ,EAAUpU,qBAAsB,GAEhCtqI,KAAKoqI,UACLsU,EAAUtU,SAAU,GAGxBsU,EAAUzR,WAAW58B,GACrBrwG,KAAKy4I,aAAatuG,KAAEkmE,GAAS57F,KAAK,aAE3BiqI,CACV,CASDN,2BAA2BF,GAAgB,MACvC,MAAMQ,EAAY1+I,KAAKgW,gBACjB,IAAIyzH,GAAIzpI,KAAKykB,eAAeA,eAAewyH,kBAAkBrmI,KAC7D,IAAI64H,GAAIzpI,KAAKykB,eAAewyH,kBAAkBrmI,KACpD,IAAI8C,EAiDJ,OA/CAwqI,EAAe96I,SAAQ,CAAC4tB,EAAOg1D,KAM3B,IAJAh1D,EAAQA,EAAMtlB,MAAM,SACdiQ,MACNjI,EAAQsd,EAAMvf,KAAIlG,IAAI,aAAI2E,OAAM,UAAC3E,EAAKG,MAAM,WAAW,UAAvB,aAAC,EAA0BA,MAAM,KAAK,GAAhD,IAElB1L,KAAKgW,gBAAiB,CACtB,IAAIymD,EAEJzrC,EAAM5tB,SAAQmI,IAEV,GADAkxD,EAAMiiF,EAAU5tI,MAAM6tI,WAAU/rI,GAASA,EAAM8a,SAASniB,KACpDkxD,GAAO,EAEP,GADAiiF,EAAU5tI,MAAM2rD,GAAOiiF,EAAU5tI,MAAM2rD,GAAKx6D,QAAS,GAAEsJ,QAAY,IAC/DvL,KAAK2+F,MAAO,OACZ,MAAM7L,EAAS,UAAGyyC,GAAAA,WAAmBmZ,EAAU5tI,MAAM2rD,GAAK/wD,MAAM,QAAQ,WAAzD,aAAG,EAA2DoF,MACvE8tI,EAAmB5+I,KAAKykB,eAAeo6H,yBAAyB/rD,GAAW,GAEjF,CAAE6vC,GAAe2J,SAAU3J,GAAeyJ,UAAWhpI,SAAQmL,IACzDmwI,EAAU5tI,MAAM2rD,GAAOiiF,EAAU5tI,MAAM2rD,GAClCx6D,QAAS,KAAIsM,IAAc,KAAIqwI,IADpC,GAGP,KAAM,CAEHF,EAAU5tI,MAAM2rD,GAAOiiF,EAAU5tI,MAAM2rD,GAClCx6D,QAAS,KAAI0gI,GAAeyJ,WAAa,KAAIzJ,GAAe4G,YAKjE,MAAM,MAAEz4H,EAAF,KAASgB,GAASyzH,GAAAA,WAAmBmZ,EAAU5tI,MAAM2rD,GAAK/wD,MAAM,QAAQ,IAE9EgzI,EAAU5tI,MAAM2rD,GAAOiiF,EAAU5tI,MAAM2rD,GAAKx6D,QAAS,KAAI6O,KAASgB,IAAS,KAAIhB,MAClF,CACJ,GAER,MACGkgB,EAAM5tB,SAAQmI,IACVmzI,EAAU5tI,MAAMk1E,GAAO04D,EAAU5tI,MAAMk1E,GAAK/jF,QAAS,GAAEsJ,QAAY,GAAnE,GAEP,KAIA,QAAL,EAAAmI,SAAA,eAAOpP,SAAUtE,KAAKyyI,gBAAgBqM,iBAAiBprI,GAEvDgrI,EAAUhpE,IAAMgpE,EAAU7tI,QAAU6tI,EAAU5tI,MAAMmC,KAAK,IAElDyrI,CACV,CASDD,wBAAwB3B,GACpB,IAAI4B,EAAY,IAAIjV,GAAIzpI,KAAKykB,eAAewyH,kBAAkBrmI,KA2B9D,OAvBIksI,EAAYx4I,OAASo6I,EAAU5tI,MAAMxM,QAClCtE,KAAK2+F,OACL3+F,KAAKgW,kBACR0oI,EAAUnU,0BAA0B7mC,GAAUgH,OAC9Cg0C,EAAY,IAAIjV,GAAIiV,EAAUhpE,MAElConE,EAAY15I,SAAQ,CAAC4tB,EAAOg1D,KAKxB,GAJA04D,EAAU5tI,MAAMk1E,IAAQh1D,EAIpBhxB,KAAK2+F,OAAS3+F,KAAKgW,gBAAiB,OACpC,MAAM88E,EAAS,UAAGyyC,GAAAA,WAAmBmZ,EAAU5tI,MAAMk1E,GAAKt6E,MAAM,QAAQ,WAAzD,aAAG,EAA2DoF,MACvE8tI,EAAmB5+I,KAAKykB,eAAeo6H,yBAAyB/rD,GAAW,GAEjF,CAAE6vC,GAAe8H,SAAU9H,GAAe4G,UAAWnmI,SAAQmL,IACzDmwI,EAAU5tI,MAAMk1E,GAAO04D,EAAU5tI,MAAMk1E,GAClC/jF,QAAS,KAAIsM,IAAc,KAAIqwI,IADpC,GAGP,KAELF,EAAUhpE,IAAMgpE,EAAU7tI,QAAU6tI,EAAU5tI,MAAMmC,KAAK,IAElDyrI,CACV,CAWDvH,aAAa4H,GACT,GAA2C,WAAvC/+I,KAAKykB,eAAerC,eAA6B,CACjD,MAAMze,EAAQ,IAAIpB,MAAM,4CAIxB,OAFAvC,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiCjlF,EAAO3D,MAE7Doa,QAAQE,OAAO3W,EACzB,CAED,MAAM+6I,EAAYK,GAAqB/+I,KAAKykB,eAAewyH,kBAAkBrmI,IAE7E,IAAK8tI,EAAW,CACZ,MAAM/6I,EAAQ,IAAIpB,MAAO,kEAAiEvC,KAAKmmC,SAI/F,OAFAnmC,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiCjlF,EAAO3D,MAE7Doa,QAAQE,OAAO3W,EACzB,CAED,MAAMszI,EAAoB,IAAIp/H,sBAAsB,CAChD7G,KAAM,QACNJ,IAAK8tI,IAGHM,EAAch/I,KAAKykB,eAAewD,iBAAiBrX,IAIzD,OAFA7F,GAAOkT,MAAO,GAAEje,gDAETA,KAAKykB,eAAey1H,qBAAqBjD,GAC3Ct8H,MAAK,KACF5P,GAAOkT,MAAO,GAAEje,qCAETA,KAAKykB,eAAew6H,aAAaj/I,KAAKqyI,qBAEhD13H,MAAKukI,IACFn0I,GAAOkT,MAAO,GAAEje,+CAETA,KAAKykB,eAAei1H,oBAAoBwF,MAElDvkI,MAAK,KACEqkI,GAEAh/I,KAAKq6I,mBAAmB,IAAI5Q,GAAIuV,GAAc,IAAIvV,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KAC9F,GAEZ,CAUD0oI,YAA8B,IAApB39B,EAAoB,uDAAN,KACpB,IAAKlU,GAAAA,mCACGkU,UAAAA,EAAar3G,QACdq3G,EAAYlnG,MAAK6Q,GAASA,EAAMoqF,YAAchM,GAAUgH,QAC3D,OAAOtwF,QAAQE,OAAO,IAAI/X,MAAM,8DAGpC,MAAM48I,EAAgB,GAChBjI,EAAerF,IACjB,MAAM6M,EAAY,IAAIjV,GAAIzpI,KAAKykB,eAAeA,eAAewyH,kBAAkBrmI,KACzEwuI,EAAsBp/I,KAAKykB,eAAeA,eAAekD,kBACtDlT,MAAKzI,GAAKA,EAAEi4B,SAAS3e,MAAMD,OAASq+E,GAAUgH,OACxC1+F,EAAEuC,YAAco0H,GAAe8H,UAC/Bz+H,EAAEqzI,mBAAqB1c,GAAe8H,WAKrD,IAAK,MAAMnlH,KAASq2F,EACX37G,KAAK2+F,OAAUygD,GAChBV,EAAUnU,0BAA0BjlH,EAAMoqF,WAIlD1vG,KAAKm3I,aAAauH,EAAUhpE,KACvB/6D,MAAK,KAEF,IAAK,MAAM2K,KAASq2F,EAChBwjC,EAAcv9I,KAAK5B,KAAKykB,eAAeyC,aAAa,KAAM5B,IAG9D,OAAOlL,QAAQ0c,IAAIqoH,EAAnB,IAKHxkI,MAAK,IAAM3a,KAAKm3I,iBAChBx8H,MAAK,IAAMk3H,MAAoBluI,GAASkuI,EAAiBluI,IAb9D,EAgBJ,OAAO,IAAIyW,SAAQ,CAACC,EAASC,KACzBvP,GAAOkT,MAAO,GAAEje,4CAEhBA,KAAK60I,kBAAkBjzI,KACnBs1I,GACAvzI,IACQA,GACAoH,GAAOpH,MAAO,GAAE3D,0CAA2C2D,GAC3D2W,EAAO3W,KAEPoH,GAAOkT,MAAO,GAAEje,mDAChBqa,IACH,GATT,GAYP,CAQDilI,uBAAuB/0C,GACnB,OAAOvqG,KAAKykB,eAAe86H,SAASD,uBAAuB/0C,GACtD5vF,MAAK,KACF3a,KAAKykB,eAAe+6H,oBAAsBj1C,EAC1CvqG,KAAKykB,eAAeg7H,oBAAsBl1C,EAG1C,MAAM0T,EAAW,GAEjB,IAAK,MAAM34F,KAAStlB,KAAKgwG,IAAI8rC,sBACzB79B,EAASr8G,KAAK5B,KAAKykB,eAAei7H,8BAA8Bp6H,IAGpE,OAAOlL,QAAQikG,WAAWJ,EAA1B,GAEX,CAcD/2F,aAAay4H,EAAUC,GACnB,MAAM1I,EAAerF,IACjB9mI,GAAOkT,MAAO,GAAEje,gDAAgD2/I,iBAAwBC,KAEnF5/I,KAAKgW,kBAKFhW,KAAKykB,eAAe1d,QAAQ4uI,uBACzBgK,GAAYC,GAAYA,EAASh4C,gBAMpC5nG,KAAKykB,eAAeo7H,qBAInBF,GAAYC,GAAYA,EAASh4C,eAMlC5nG,KAAKykB,eAAeo7H,oBAGbF,GAAYA,EAAS/3C,iBAAmBg4C,IAK/C5/I,KAAKykB,eAAeo7H,oBACpB7/I,KAAKykB,eAAeu0H,yBAI5Bh5I,KAAKykB,eAAeyC,aAAay4H,EAAUC,GACtCjlI,MAAKmlI,IACF,IAAI5sG,EAAU94B,QAAQC,UAStB,OAPAtP,GAAOkT,MAAO,GAAEje,uDACZ8/I,2BAA2C9/I,KAAKmmC,SAEhD25G,IAAsBH,GAAYC,IAAa5/I,KAAKmmC,QAAU4rG,KAC9D7+F,EAAUlzC,KAAKm3I,gBAGZjkG,EAAQv4B,MAAK,KAEZglI,GAAYC,GAAYD,EAAS/3C,gBACjCg4C,EAASlC,cAAciC,EAAS5D,gBACnC,GAJL,IAOHphI,MAAK,IAAMk3H,MAAoBluI,GAASkuI,EAAiBluI,IAlB9D,EAqBJ,OAAO,IAAIyW,SAAQ,CAACC,EAASC,KACzBvP,GAAOkT,MAAO,GAAEje,8CAA8C2/I,kBAAyBC,KAEvF5/I,KAAK60I,kBAAkBjzI,KACnBs1I,GACAvzI,IACQA,GACAoH,GAAOpH,MAAO,GAAE3D,4BAA6B2D,GAC7C2W,EAAO3W,KAEPoH,GAAOsM,KAAM,GAAErX,6BACfqa,IACH,GATT,GAYP,CAYDmkI,+BAA+BuB,EAAkBlD,GAC7C,MAAMqB,EAAiB,GA2DvB,OAzDA/zG,KAAE41G,GAAkBj3G,MAAK,CAACi0G,EAAI1sI,KAC1B,MAAM/C,EAAO68B,KAAE95B,GAASu+B,KAAK,QAC7B,IAAI5d,EAAQ,GAEZmZ,KAAE95B,GACGoE,KAAK,uDACLq0B,MAAK,WAEF,MAAMn0B,EAAY3U,KAAKooC,aAAa,aAC9B10B,EACAy2B,KAAEnqC,MACCyU,KAAK,WACLhD,KAAI,WACD,OAAOzR,KAAKooC,aAAa,OAC5B,IACAjkB,MAELzQ,EAAMpP,SACN0sB,GACQ,gBAAerc,KACfjB,EAAMT,KAAK,WAI1B,IACL,MAAMS,EAAQ,GAIRy2B,KAAE95B,GAASoE,KACT,mDAEJq0B,MAAK,WAEL,MAAMt1B,EAAO22B,KAAEnqC,MAAM4uC,KAAK,QAE1Bl7B,EAAM9R,KAAK4R,EACd,IACDqpI,EAAiB/rI,MAAM1N,SAAQ,CAAC0N,EAAOmsI,KAC9B1X,GAAAA,SAAiBz0H,EAAQ,SAAQxD,OAGjC4wI,EAAejB,KAChBiB,EAAejB,GAAM,IAEzBvpI,EAAMtQ,SAAQoQ,IACV,MAAM4yH,EACAb,GAAAA,UAAkBz0H,EAAQ,UAAS0C,KAErC4yH,EAAU9hI,SACV45I,EAAejB,IAAQ,GAAE7W,EAAUnzH,KAAK,cAC3C,IAELirI,EAAejB,IAAOjsH,EAAtB,GAfJ,IAmBGktH,CACV,CAcD8B,qBAAqBC,EAAeC,GAChC,MAAMC,EACA,IAAI1W,GAAIzpI,KAAKykB,eAAewD,iBAAiBrX,KACnD,IAAIwvI,EAAU,IAAIrW,GAAUmW,EAAQC,GACpC,MAAME,EAAaD,EAAQ3S,cAE3B,GAAIhuI,OAAO6I,KAAK+3I,GAAY/7I,OAGxB,OAFAyG,GAAOpH,MAAO,GAAE3D,kCAAkCigJ,IAAiBI,IAE5D,EAGXD,EAAU,IAAIrW,GAAUoW,EAAiBD,GACzC,MAAMI,EAAeF,EAAQ3S,cAE7B,OAAIhuI,OAAO6I,KAAKg4I,GAAch8I,SAC1ByG,GAAOpH,MAAO,GAAE3D,qCAAqCigJ,IAAiBK,IAE/D,EAId,CASDC,aAAaj7H,GACT,OAAOtlB,KAAKwgJ,iBAAgB,EAAiBl7H,GACxC3K,MAAK,KAGF,GAAI2K,EAAMsiF,eACN,OAAO5nG,KAAKykB,eAAei7H,8BAA8Bp6H,EAC5D,GAEZ,CAUDm7H,kBAAkBn7H,GACd,OAAOtlB,KAAKwgJ,iBAAgB,EAAmBl7H,EAClD,CAQDk7H,gBAAgBE,EAAUp7H,GACtB,IAAKA,EACD,OAAOlL,QAAQE,OAAO,kCAE1B,MAAM2lI,EAAgBS,EAAW,cAAgB,WAC3CxJ,EAAerF,IACjB,MAAMtzC,EAAMv+F,KAAKykB,eAEjB,IAAK85E,EAGD,YAFAszC,EAAkB,iBAAgBoO,0CAItC,MAAMjB,EAAczgD,EAAIt2E,iBAAiBrX,KAEnC8vI,EACIniD,EAAIkiD,kBAAkBn7H,GACtBi5E,EAAIgiD,aAAaj7H,IAGtB3K,MAAKmlI,IACEA,GAAqBd,GAAezgD,EAAI04C,kBAAkBrmI,IAC1D5Q,KAAKm3I,eACAx8H,MAAK,MAGD3a,KAAKgW,iBAAmBhW,KAAKggJ,qBAAqBC,EAAe,IAAIxW,GAAIuV,IAC1EnN,GAAkB,IAG1BA,GACH,GAELA,EAdJ,EAmBJ,OAFA9mI,GAAOkT,MAAO,GAAEje,eAAeigJ,UAExB,IAAI7lI,SAAQ,CAACC,EAASC,KACzBta,KAAK60I,kBAAkBjzI,KACnBs1I,GACAvzI,IACQA,GACAoH,GAAOpH,MAAO,GAAE3D,QAAQigJ,YACxB3lI,EAAO3W,KAEPoH,GAAOkT,MAAO,GAAEje,QAAQigJ,UACxB5lI,IACH,GATT,GAYP,CAUDsmI,0BAA0BC,GACtB,OAAK5gJ,KAAKykB,eAKNzkB,KAAKo0I,+BAAiCwM,GACtC5gJ,KAAKo0I,6BAA+BwM,EAChC5gJ,KAAK2+F,OAAS3+F,KAAKmmC,QAAU4rG,IAC7B/xI,KAAKo6I,oBAGFp6I,KAAKykB,eACPo8H,uBAAuB7gJ,KAAKo0I,8BAAgCp0I,KAAKq0I,gCAGnEj6H,QAAQC,UAdJD,QAAQE,OAAO,4EAe7B,CAODwmI,eAAepN,GACX,MAAMqN,EAAkBtN,GAAgBuN,kBAAkBtN,GACpDuN,EAAwBxN,GAAgByN,0BAA0BxN,GAOxE,GALIuN,IACAjhJ,KAAK40I,4BAA8BqM,EACnCjhJ,KAAKsiG,aAAahgG,KAAK+wI,GAAAA,kCAAsDrzI,KAAMihJ,IAG/D,OAApBF,EAGA,YAFAh2I,GAAOpH,MAAO,GAAE3D,+EAKpB,IAAKA,KAAKk1I,kBACN,OAGJ,MAAMiM,EACoB,SAApBJ,GAC0B,cAApBA,GAAmC/gJ,KAAKwgH,aACpB,cAApBugC,IAAoC/gJ,KAAKwgH,YAEjD2gC,IAAwBnhJ,KAAKq0I,gCAC7BtpI,GAAOkT,MAAO,GAAEje,iCAAiCmhJ,KACjDnhJ,KAAKq0I,8BAAgC8M,EAErCnhJ,KAAKykB,eACAo8H,uBAAuB7gJ,KAAKo0I,8BAAgCp0I,KAAKq0I,+BAE7E,CAODgG,mBAAmB6F,EAAQkB,GACvB,GAAIphJ,KAAKmmC,QAAU4rG,GAGf,YAFAhnI,GAAOuY,KAAM,GAAEtjB,iCAAiCA,KAAKmmC,kBAKzD,IAAKnmC,KAAK4e,WAAWqxD,UAQjB,OANKjwE,KAAK+zI,qBACN/zI,KAAK+zI,mBAAqBmM,GAE9BlgJ,KAAKg0I,mBAAqBoN,OAC1Br2I,GAAOuY,KAAM,GAAEtjB,oEAKnBA,KAAK+zI,wBAAqBjtI,EAC1B9G,KAAKg0I,wBAAqBltI,EAE1B,MAAMu6I,EAAwBC,IAC1B,MAAM1T,EAAW0T,EAAU7T,cAC3B,IAAI/5H,EAAQ,GACRo/E,EAAY,KAYhB,OATArzF,OAAO6I,KAAKslI,GAAUxqI,SAAQm+I,IAC1B,MAAMC,EAAgB/hJ,OAAO6I,KAAKslI,EAAS2T,GAAY7tI,OAEvDo/E,EAAY86C,EAAS2T,GAAY9kF,IAC7B+kF,SAAAA,EAAel9I,SACfoP,EAAQA,EAAM3H,OAAOy1I,GACxB,IAGE,CACH1uD,YACAp/E,QAFJ,EAOJ,IAAI4tI,EAAY,IAAIvX,GAAUqX,EAAQlB,GACtC,MAAM5sG,GAASo0B,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UAC1Bl6G,KAAM,QACLhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,gBACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAIlB+uE,EAAUpW,SAAS53F,GAInB,MAAMmuG,EAAM,CAAC,EACPC,EAAkBL,EAAsBC,GAE1CI,EAAgBhuI,MAAMpP,SAEtByG,GAAOsM,KAAM,GAAErX,kCAAkC0hJ,EAAgB5uD,mBACjD4uD,EAAgBhuI,SAChC1T,KAAK4e,WAAWo1D,OACZ1gC,GACA,KACItzC,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,cAA0B5oF,KAAMyhJ,EAA5D,GAEJzhJ,KAAKg4I,sBAAsB1kG,GAAQ3vC,IAC/B3D,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,oBAAgC5oF,KAAM2D,EAAO89I,EAAzE,IAEJnO,KAIRgO,EAAY,IAAIvX,GAAUmW,EAAQkB,GAClC,MAAMrxH,GAAM23C,EAAAA,GAAAA,KAAI,CAAE7rD,GAAI7b,KAAKkrH,UACvBl6G,KAAM,QACLhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQ,aACRqiI,UAAWr2I,KAAK0yI,aAChBngE,IAAKvyE,KAAKuyE,MAIlB+uE,EAAUpW,SAASn7G,GACnB,MAAM4xH,EAAgBN,EAAsBC,GAExCK,EAAcjuI,MAAMpP,SAEpByG,GAAOsM,KAAM,GAAErX,+BAA+B2hJ,EAAc7uD,mBAAmB6uD,EAAcjuI,SAC7F1T,KAAK4e,WAAWo1D,OACZjkD,GACA,KACI/vB,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,WAAuB5oF,KAAMyhJ,EAAzD,GAEJzhJ,KAAKg4I,sBAAsBjoH,GAAKpsB,IAC5B3D,KAAK6vG,KAAKvN,aAAahgG,KAAKsmF,GAAW,WAAXA,iBAA6B5oF,KAAM2D,EAAOg+I,EAAc7uD,UAAW2uD,EAA/F,IAEJnO,IAEX,CAoBD0E,sBAAsB4J,EAAS7pB,GAC3B,OAAO8pB,IAEH,MAAMl+I,EAAQ,CAAC,EAGTm+I,EAAa33G,KAAE03G,GAAaptI,KAAK,SAEvC,GAAIqtI,EAAWx9I,OAAQ,CACnBX,EAAMge,KAAOmgI,EAAWlzG,KAAK,QAC7B,MAAMmzG,EAAiB53G,KAAE03G,GAAaptI,KAAK,gBAEvCstI,EAAez9I,SACfX,EAAMJ,OAASw+I,EAAe,GAAGt8I,SAGrC,MAAMu8I,EAAcF,EAAWrtI,KAAK,SAEhCutI,EAAY19I,SACZX,EAAMuF,IAAM84I,EAAYr7I,OAE/B,CAEIk7I,IACDl+I,EAAMJ,OAAS,WAGnBI,EAAMkN,QAAU7Q,KAAKwR,WAEjBumH,EACAA,EAAUp0H,GACH3D,KAAKmmC,QAAU4rG,IACM,mBAAjBpuI,EAAMJ,OAMjBwH,GAAOkT,MAAO,GAAEje,sBAAsBiH,KAAK8B,UAAUpF,MAErDH,KAAAA,iBACI,IAAIjB,MACC,iBAAgB0E,KAAK8B,UAAUpF,MAC3C,CAER,CAMDs+I,wBACI,OAAOjiJ,KAAKykB,eAAey9H,oBAC9B,CAKDjjI,QACIjf,KAAKmmC,MAAQ4rG,GACb/xI,KAAK80I,2BAAwBhuI,EAEzB9G,KAAKykB,iBACLzkB,KAAKykB,eAAe0xH,eAAiB,KACrCn2I,KAAKykB,eAAe+xH,2BAA6B,KACjDx2I,KAAKykB,eAAeuyH,oBAAsB,KAC1Ch3I,KAAKykB,eAAe8xH,uBAAyB,MAGjDxrI,GAAOkT,MAAO,GAAEje,mCAGhBA,KAAK60I,kBAAkBt+G,QAEvBxrB,GAAOkT,MAAO,GAAEje,6BAChBA,KAAK60I,kBAAkBjzI,MAAKq8I,IAExBj+I,KAAKykB,gBAAkBzkB,KAAKykB,eAAexF,QAC3Cg/H,IACAlzI,GAAOkT,MAAO,GAAEje,2BAAhB,IAGJ+K,GAAOkT,MAAO,GAAEje,oCAGhBA,KAAK60I,kBAAkB/C,UAC1B,CAMDtgI,WACI,MAAQ,2BAA0BxR,KAAK2+F,MAAQ,MAAQ,mBAAmB3+F,KAAKwgH,mBAAmBxgH,KAAKuyE,MAC1G,ECjuFL,MAAMxnE,IAASkC,EAAAA,EAAAA,6CAYf,SAASk1I,GAAoB33I,GACzB,MAAMkH,EAAay4B,KAAE3/B,GAAWiK,KAAK,cAC/B2tI,EAAkB,GAexB,OAZA1wI,EAAWo3B,MAAK,CAAC7tB,EAAGkK,KAChB,MAAMyoB,EAAazoB,EAAUyoB,WACvBy0G,EAAiB,GAEvB,IAAK,IAAIv9I,EAAI,EAAGA,EAAI8oC,EAAWtpC,OAAQQ,IAAK,CACxC,MAAM8pC,EAAOhB,EAAW9oC,GAExBu9I,EAAezgJ,KAAM,GAAEgtC,EAAKthC,SAASshC,EAAK/mC,QAC7C,CACDu6I,EAAgBxgJ,KAAKygJ,EAAepvI,KAAK,KAAzC,IAGGmvI,CACV,CAKc,MAAME,WAA+Br4B,GAQhDrqH,YAAYyrG,EAAM/I,EAAcigD,GAC5BpqE,QACAn4E,KAAKqrG,KAAOA,EACZrrG,KAAKsiG,aAAeA,EACpBtiG,KAAKwiJ,SAAW,CAAC,EACjBxiJ,KAAKyiJ,aAAeF,EAAUG,IAC9B1iJ,KAAK2iJ,aAAeJ,EAAU74C,IAC9B1pG,KAAKqyI,iBAAmB,CACpBuQ,qBAAqB,EACrBC,qBAAqB,EAE5B,CAMDnpI,KAAKkF,GACDu5D,MAAMz+D,KAAKkF,GACX5e,KAAK4e,WAAWnb,WAAWzD,KAAK8iJ,SAASjgJ,KAAK7C,MAC1C,oBAAqB,KAAM,MAAO,KAAM,KAC/C,CAMD8iJ,SAASjyE,GACL,MAAM0B,EAAMpoC,KAAE0mC,GAAIp8D,KAAK,UAAUm6B,KAAK,OAChC56B,EAASm2B,KAAE0mC,GAAIp8D,KAAK,UAAUm6B,KAAK,UACnCm0G,EAAUlyE,EAAGzoC,aAAa,QAG1Bg5E,GAAM15C,EAAAA,GAAAA,KAAI,CAAE12D,KAAM,SACpB6K,GAAIknI,EACJ32I,GAAIykE,EAAGzoC,aAAa,QAGxB,IAAI46G,EAAOhjJ,KAAKwiJ,SAASjwE,GAEzB,GAAe,qBAAXv+D,EAA+B,CAC/B,IAAKgvI,EAcD,OAbA5hC,EAAI95C,MAAM,CAAEt2D,KAAM,UAClBowG,EAAIpzG,EAAE,QAAS,CAAEgD,KAAM,WAClBhD,EAAE,iBAAkB,CACjBq/D,MAAO,wCAEVE,KACAv/D,EAAE,kBAAmB,CAClBq/D,MAAO,6BAEftiE,GAAOuY,KAAM,uBAAsBivD,KACnCxnE,GAAOkT,MAAM4yD,GACb7wE,KAAK4e,WAAWyS,KAAK+vF,IAEd,EAIX,GAAI2hC,IAAYC,EAAK93B,UAcjB,OAbAngH,GAAOuY,KACH,8BAA+BivD,EAAKywE,EAAK93B,UAAWr6C,GACxDuwC,EAAI95C,MAAM,CAAEt2D,KAAM,UAClBowG,EAAIpzG,EAAE,QAAS,CAAEgD,KAAM,WAClBhD,EAAE,iBAAkB,CACjBq/D,MAAO,wCAEVE,KACAv/D,EAAE,kBAAmB,CAClBq/D,MAAO,6BAEfrtE,KAAK4e,WAAWyS,KAAK+vF,IAEd,CAEd,MAAM,QAAat6G,IAATk8I,EAYP,OATA5hC,EAAI95C,MAAM,CAAEt2D,KAAM,UAClBowG,EAAIpzG,EAAE,QAAS,CAAEgD,KAAM,WAClBhD,EAAE,sBAAuB,CACtBq/D,MAAO,wCAEVE,KACLxiE,GAAOuY,KAAK,uBAAwBivD,EAAK1B,GACzC7wE,KAAK4e,WAAWyS,KAAK+vF,IAEd,EAEX,MAAMlgH,EAAM3B,OAAOqvB,YAAY1tB,MAKzBy9F,EAAgD,UAAxCp3B,GAAAA,QAAAA,mBAA2Bw7E,GAInCE,EAAe94G,KAAE0mC,GAAIp8D,KAAK,uBAEhC,GAAIwuI,SAAAA,EAAc3+I,OAAQ,OACtB,IAAI4+I,EAEJn4I,GAAOsM,KAAM,mCAAkCrD,sCAC/C,IAAK,IAAIlP,EAAI,EAAGA,EAAIm+I,EAAa3+I,OAAQQ,IAErCo+I,EAAkBthB,GAAsB/wD,EAAIoyE,EAAan+I,IAG7D,aAAIo+I,SAAJ,OAAI,EAAiBp2F,KAAM,CACvB,MAAMq2F,EAAa,GAEnB,IAAK,MAAMC,KAAYF,EAAgB56I,OACnC66I,EAAWvhJ,KAAM,GAAEwhJ,MAAaF,EAAgB/+H,IAAIi/H,OAExDr4I,GAAOkT,MAAO,YAAWjK,UAAe+uI,kBAAwBI,EAAWlwI,KAAK,QACnF,CAIJ,CAED,OAAQe,GACR,IAAK,mBAAoB,CACrBjJ,GAAOD,IAAI,sCAAuC5J,GAClD,MAAMmiJ,EAAal5G,KAAE0mC,GAAIp8D,KAAK,qBAG9B,GADAkqF,GAAS5zF,GAAOkT,MAAO,YAAWjK,UAAe+uI,KAC7CM,SAAAA,EAAY/+I,OAAQ,CACpB,MAAM+vG,EAAagvC,EAAWz0G,KAAK80D,GAAU8M,OACvC8D,EAAa+uC,EAAWz0G,KAAK80D,GAAUgH,OAE7C1qG,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,uBACe,SAAfyrB,EACe,SAAfC,EACP,CACD,MAAMg+B,EAAW3zC,EAAQ3+F,KAAK2iJ,aAAe3iJ,KAAKyiJ,aAElDO,EACM,IAAIvP,GACFtpG,KAAE0mC,GAAIp8D,KAAK,UAAUm6B,KAAK,OAC1BzE,KAAE0mC,GAAIjiC,KAAK,MACXm0G,EACA/iJ,KAAK4e,WACL5e,KAAKqyI,iBACL7H,KAAU8H,GACV3zC,GACgB,GAExB3+F,KAAKwiJ,SAASQ,EAAKzwE,KAAOywE,EAC1BhjJ,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,cAA0Bo6D,EAAM74G,KAAE0mC,GAAIp8D,KAAK,WAAYvT,GAC9E,KACH,CACD,IAAK,iBAAkB,CACnB,MAAMwS,EAAQ,GACR6+B,EAAWpI,KAAE0mC,GAAIp8D,KAAK,kBAG5B,IAAK,MAAMpE,KAAWkiC,EAAU,CAC5B,MAAM/+B,EAAO22B,KAAE95B,GAASoE,KAAK,eAAem6B,KAAK,QAEjDp7B,GAAQE,EAAM9R,KAAK4R,EACtB,CACDzI,GAAOkT,MAAO,YAAWjK,UAAe+uI,gBAAsBrvI,KAC9D1T,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,cAA0Bo6D,EAAM74G,KAAE0mC,GAAIp8D,KAAK,YAClE,KACH,CACD,IAAK,iBACD1J,GAAOkT,MAAO,YAAWjK,UAAe+uI,KACxCC,EAAKlC,eAAe32G,KAAE0mC,GAAIp8D,KAAK,YAC/B,MAEJ,IAAK,iBAAkB,CACnB,MAAM/C,EAAaywI,GAAoBh4G,KAAE0mC,GAAIp8D,KAAK,6BAElD1J,GAAOkT,MAAO,YAAWjK,UAAe+uI,oBAA0BrxI,EAAWuB,KAAK,SAClFjT,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,eAA2Bo6D,EAAM74G,KAAE0mC,GAAIp8D,KAAK,YACnE,KACH,CACD,IAAK,oBAAqB,CACtB1J,GAAOD,IAAI,iBAAkBk4I,EAAKzwE,KAClC,IAAIiqE,EAAkB,KAClBC,EAAa,KAEbtyG,KAAE0mC,GAAIp8D,KAAK,kBAAkBnQ,SAC7Bk4I,EACMryG,KAAE0mC,GAAIp8D,KAAK,yBAAyB,GAAGhP,QAC7Cg3I,EAAatyG,KAAE0mC,GAAIp8D,KAAK,uBAAuB9N,QAEnDoE,GAAOkT,MAAO,YAAWjK,UAAe+uI,uBAA6BtG,KACrEz8I,KAAKkzI,UAAU8P,EAAKzwE,IAAKiqE,EAAiBC,GAC1Cz8I,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,WAAuBo6D,EAAMxG,EAAiBC,GACrE,KACH,CACD,IAAK,oBAAqB,OACtB1xI,GAAOsM,KAAK,oCAAqCnW,GACjD,MAAMsJ,EAAY2/B,KAAE0mC,GAAIp8D,KAAK,4BACvB/C,EAAaywI,GAAoB33I,GACjC84I,EAAWn5G,KAAE3/B,GAAWokC,KAAK,SAC7B20G,EAASp5G,KAAE3/B,GAAWokC,KAAK,OAC3B40G,EAAe,UAAGr5G,KAAE3/B,GAAWiK,KAAK,uBAArB,aAAG,EAAmC9N,OAE3DoE,GAAOkT,MAAO,YAAWjK,UAAe+uI,mBAAyBO,aACpDC,uBAA4BC,iBAA+B9xI,EAAWuB,KAAK,SAExFm4F,GAAWgE,cAAczc,GACrBvB,GACA,CACIsY,IAAK/K,EACL92F,MAAO3G,KAGf8hJ,EAAKrI,iBAAiBxwG,KAAE0mC,GAAIp8D,KAAK,YAAY,KACzC,MAAMgvI,EAAclkJ,OAAOqvB,YAAY1tB,MAEvC6J,GAAOsM,KAAK,sCAAuCosI,GACnDr4C,GAAWgE,cAAczc,GACrBtB,GACA,CACIqY,IAAK/K,EACL92F,MAAO47I,IAJf,IAMD9/I,IACCH,KAAAA,iBAAsCG,GACtCoH,GAAOpH,MAAM,2BAA4BA,GACzCq/I,EAAKvH,qBAAL,IAEJ,KACH,CACD,IAAK,aACDuH,EAAK9F,gBAAgB/yG,KAAE0mC,GAAIp8D,KAAK,oBAChC,MACJ,IAAK,gBACDuuI,EAAK5F,mBAAmBjzG,KAAE0mC,GAAIp8D,KAAK,oBACnC,MACJ,QACI1J,GAAOuY,KAAK,gCAAiCtP,GAC7CotG,EAAI95C,MAAM,CAAEt2D,KAAM,UAClBowG,EAAIpzG,EAAE,QAAS,CAAEgD,KAAM,WAClBhD,EAAE,cACC,CAAEq/D,MAAO,wCACZE,KAKT,OAFAvtE,KAAK4e,WAAWyS,KAAK+vF,IAEd,CACV,CASDsiC,oBAAoBpyG,EAAItvB,GACpB,MAAMghI,EACA,IAAIvP,GACFlvI,KAAAA,gBAA2B,IAC3B+sC,EACAtvB,EACAhiB,KAAK4e,WACL5e,KAAKqyI,iBACLryI,KAAK2iJ,cACK,GACM,GAIxB,OAFA3iJ,KAAKwiJ,SAASQ,EAAKzwE,KAAOywE,EAEnBA,CACV,CAQD9P,UAAU3gE,EAAKiqE,EAAiBC,GACxBz8I,KAAKwiJ,SAASh7I,eAAe+qE,KACI,UAA7BvyE,KAAKwiJ,SAASjwE,GAAKpsC,OACnBnmC,KAAKwiJ,SAASjwE,GAAKgqE,aAAaC,EAAiBC,UAE9Cz8I,KAAKwiJ,SAASjwE,GAE5B,CAKDoxE,4BAcI3jJ,KAAK4e,WAAWo1D,QACZtM,EAAAA,GAAAA,KAAI,CAAE12D,KAAM,MACR6K,GAAI7b,KAAKqrG,KAAKtkG,QAAQouH,MAAMlwD,SAC3Bj3D,EAAE,WAAY,CAAEq/D,MAAO,yBAC5Bu2E,GAAS5jJ,KAAK6jJ,gCAAgCD,KAC9C,KACI74I,GAAOuY,KAAK,sEACZtjB,KAAK4e,WAAWo1D,QACZtM,EAAAA,GAAAA,KAAI,CAAE12D,KAAM,MACR6K,GAAI7b,KAAKqrG,KAAKtkG,QAAQouH,MAAMlwD,SAC3Bj3D,EAAE,WAAY,CAAEq/D,MAAO,yBAC5By2E,GAAS9jJ,KAAK6jJ,gCAAgCC,KAC9C,KACI/4I,GAAOuY,KAAK,mCACZvY,GAAOuY,KAAK,8DAAZ,GAPR,GAWX,CAQDugI,gCAAgClhI,GAC5B,MAAMohI,EAAa,GAEnB55G,KAAExnB,GAAKlO,KAAK,qBAAqBq0B,MAAK,CAACk9C,EAAKhzE,KAGxC,MAAMgxI,EAAO,CAAC,EACRhzI,GAFNgC,EAAKm3B,KAAEn3B,IAES47B,KAAK,QAErB,OAAQ59B,GACR,IAAK,OACDgzI,EAAKC,KAAQ,QAAOjxI,EAAG47B,KAAK,UACxB57B,EAAG47B,KAAK,UACRo1G,EAAKC,MAAS,IAAGjxI,EAAG47B,KAAK,WAE7Bm1G,EAAWniJ,KAAKoiJ,GAChB,MACJ,IAAK,OACL,IAAK,QAAS,CACVA,EAAKC,KAAQ,GAAEjzI,KACfgzI,EAAKpiF,SAAW5uD,EAAG47B,KAAK,YACxBo1G,EAAKC,MAAQjxI,EAAG47B,KAAK,QACR57B,EAAG47B,KAAK,UAGjBo1G,EAAKC,MAAS,IAAGjxI,EAAG47B,KAAK,WAE7B,MAAMpkC,EAAYwI,EAAG47B,KAAK,aAEtBpkC,GAA2B,QAAdA,IACbw5I,EAAKC,MAAS,cAAaz5I,KAG/Bw5I,EAAKh/H,WAAahS,EAAG47B,KAAK,aACfo1G,EAAKh/H,WAChB++H,EAAWniJ,KAAKoiJ,GAChB,KACH,EA5BD,IAgCJ,MAAMj9I,EAAU/G,KAAKqrG,KAAKtkG,QAG1B,IAAK,IAAIjC,EAAIi/I,EAAWz/I,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CAC5C,MAAMqM,EAAIlN,KAAKC,MAAMD,KAAKE,UAAYW,EAAI,IACpCo/I,EAAOH,EAAWj/I,GAExBi/I,EAAWj/I,GAAKi/I,EAAW5yI,GAC3B4yI,EAAW5yI,GAAK+yI,CACnB,CAED,IAAInzI,EAYJ,OATIA,EADAhK,EAAQo9I,WACCz2I,GAAKA,EAAEu2I,KAAK33B,WAAW,QAGvB5+G,GAAKA,EAAEu2I,KAAK33B,WAAW,SAAY5+G,EAAEu2I,KAAKx5I,QAAQ,kBAAoB,EAGnFzK,KAAKyiJ,aAAa39H,WAAai/H,EAAWhzI,OAAOA,GACjD/Q,KAAK2iJ,aAAa79H,WAAai/H,EAExBA,EAAWz/I,OAAS,CAC9B,CAKD8/I,SACI,MAAMnkI,EAAO,CAAC,EAgBd,OAdAxgB,OAAO6I,KAAKtI,KAAKwiJ,UAAUp/I,SAAQmvE,IAC/B,MACMpwD,EADUniB,KAAKwiJ,SAASjwE,GACX9tD,eAEftC,GAAMA,EAAGkiI,YAETpkI,EAAM,UAASsyD,KAAS,CACpB8xE,UAAWliI,EAAGkiI,UACdviI,MAAOK,EAAGL,MACV/B,IAAKxgB,OAAO6Q,SAASiyB,MAE5B,IAGEpiB,CACV,EC5dL,MAAMqkI,WAAsBr6B,GAIxBrqH,cACIu4E,QACAn4E,KAAK8K,IAAM,EACd,CAMD4O,KAAKkF,GACDu5D,MAAMz+D,KAAKkF,GACX5e,KAAK4e,WAAWu0D,SAAWnzE,KAAKukJ,YAAY1hJ,KAAK7C,MACjDA,KAAK4e,WAAWw0D,UAAYpzE,KAAKwkJ,YAAY3hJ,KAAK7C,KACrD,CAMDukJ,YAAY3wE,GACR5zE,KAAK8K,IAAIlJ,KAAK,EAAE,IAAIX,MAAO4rB,UAAW,WAAY+mD,GACrD,CAMD4wE,YAAY5wE,GACR5zE,KAAK8K,IAAIlJ,KAAK,EAAE,IAAIX,MAAO4rB,UAAW,WAAY+mD,GACrD,EClCL,MAAM7oE,IAASkC,EAAAA,EAAAA,2CAETw3I,GAAa,kBAKJ,MAAMC,WAA6Bz6B,GAK9CvwG,KAAKkF,GACDu5D,MAAMz+D,KAAKkF,GAEX5e,KAAK4e,WAAWnb,WACZzD,KAAK2kJ,OAAO9hJ,KAAK7C,MAAOykJ,GAAY,KAAM,MAAO,KAAM,KAC9D,CAMDE,OAAO9zE,GACH9lE,GAAOsM,KAAK,UAAWw5D,EAC1B,CAYDqvD,KAAKrkH,EAAIC,EAAM/Z,EAAU6iJ,EAAUzrB,GAC/B,OAAO,IAAI/+G,SAAQ,CAACC,EAASC,KACzB,IAAK6+G,EAGD,YAFA7+G,EAAO,IAAI/X,MAAM,oBAIrB,MAAMy0B,GAAM0wC,EAAAA,GAAAA,KAAI,CACZ12D,KAAM,MACN6K,GAAIs9G,IAGRniG,EAAIhpB,EAAE,OAAQ,CACVq/D,MAAOo3E,GACP5oI,KACAC,SAEJkb,EAAIhpB,EAAE,SAAU,CACZV,KAAM,cACNzF,MAAO9F,IACRwrE,KAECq3E,GAAYA,EAAStgJ,QACrB0yB,EAAIhpB,EAAE,SAAU,CACZV,KAAM,kBACNzF,MAAO+8I,IACRr3E,KAGPvtE,KAAK4e,WAAWo1D,OACZh9C,GACAnyB,IACIkG,GAAOsM,KAAK,eAAgBxS,GAG5B,MAAMizE,EAAW3tC,KAAEtlC,GAAQ4P,KAAK,OAAOm6B,KAAK,OAE5C5uC,KAAK6kJ,aAAe/sE,EAASlsE,OAAO,QAAQtH,QAC5CyG,GAAOsM,KAAM,2BAA0BrX,KAAK6kJ,gBAC5CxqI,GAAS,IAEb1W,IACIoH,GAAOsM,KAAK,cAAe1T,GAC3B2W,EAAO3W,EAAP,GAdR,GAiBP,CAODy8H,SACI,OAAO,IAAIhmH,SAAQ,CAACC,EAASC,KACzB,IAAKta,KAAK6kJ,aAIN,OAHAvqI,EAAO,IAAI/X,MAAM,6BACjBwI,GAAOuY,KAAK,uBAKhB,MAAM0T,GAAM0wC,EAAAA,GAAAA,KAAI,CACZ12D,KAAM,MACN6K,GAAI7b,KAAK6kJ,eAGb7tH,EAAIhpB,EAAE,SAAU,CACZq/D,MAAOo3E,KAGXzkJ,KAAK4e,WAAWo1D,OAAOh9C,GAAKnyB,IACxBkG,GAAOsM,KAAK,iBAAkBxS,GAC9B7E,KAAK6kJ,aAAe,KACpBxqI,GAAS,IACV1W,IACCoH,GAAOsM,KAAK,gBAAiB1T,GAC7B3D,KAAK6kJ,aAAe,KACpBvqI,EAAO,IAAI/X,MAAM,iBAAjB,GAPJ,GAUP,ECpHL,MAAMwI,IAASkC,EAAAA,EAAAA,2CAkBf,IAAI63I,IAAmB,EAQvB,MAAMC,GAA8B,6BAO9BC,GACA,wDCjBAj6I,IAASkC,EAAAA,EAAAA,mCAKTg4I,GAAgB,4DAwDf,MAAMC,GAAuB,CAChC,CAAEjB,KAAM,6CASCtlC,GAAsB,OAMtBwmC,GAAiB,mCAOjBhnC,GAAe,8BAKb,MAAMinC,WAAa9rC,GAiB9B15G,YAAYmH,EAASs+I,GACjBltE,QACAn4E,KAAK4e,WAAa,KAClB5e,KAAKslJ,sBAAuB,EAC5BtlJ,KAAKixG,gBAAkB,CAAC,EACxBjxG,KAAK+G,QAAUA,EACf/G,KAAKqlJ,MAAQA,EACbrlJ,KAAKulJ,mBAAoB,EAEpBvlJ,KAAK+G,QAAQy+I,iBACdxlJ,KAAK+G,QAAQy+I,eAAiB,CAAC,GAInCxlJ,KAAKylJ,YAAc,GDhGvBl+E,GAAAA,QAAAA,IAAc,SAASv8D,EAAO9B,GAe1B,OATA6B,GAAOmR,MAAM,UAAWlR,EAAO9B,GACZ,iBAARA,IAC6B,IAA7BA,EAAIuB,QAAQ,cAC0C,IAAtDvB,EAAIuB,QAAQ,uCAEnBO,EAAQu8D,GAAAA,QAAAA,SAAAA,MAIJv8D,GACR,KAAKu8D,GAAAA,QAAAA,SAAAA,OAGwB,IAArBu9E,IACOC,GAA4Bp0I,KAAKzH,KACxC6B,GAAOkT,MAAM,yBACb6mI,IAAmB,GAEvB,MACJ,KAAKv9E,GAAAA,QAAAA,SAAAA,KACDx8D,GAAOuY,KAAM,YAAWpa,KACxB,MAAMw8I,EAAmBV,GAAuBj5G,KAAK7iC,GAEjDw8I,GAAgD,IAA5BA,EAAiBphJ,SACrCwgJ,GAAkBjwI,SAAS6wI,EAAiB,GAAI,IAChD36I,GAAOkT,MAAO,2BAA0B6mI,OAE5C,MACJ,KAAKv9E,GAAAA,QAAAA,SAAAA,MACL,KAAKA,GAAAA,QAAAA,SAAAA,MAEDr+D,EAAO,YAAWA,IAClB1F,KAAAA,iBAAsC,IAAIjB,MAAM2G,IAChD6B,GAAOpH,MAAMuF,GAKpB,EAQDq+D,GAAAA,QAAAA,mBAA6B,WACzB,OAAOu9E,EACV,EAEDv9E,GAAAA,QAAAA,gBAA0B,SAAS8N,GAC/B,OAAQA,GACR,KAAK9N,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,MACD,MAAO,QACX,KAAKA,GAAAA,QAAAA,OAAAA,WACD,MAAO,aACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,eACD,MAAO,iBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,UACD,MAAO,YACX,KAAKA,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,cACD,MAAO,gBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,QACI,MAAO,UAEd,EFnFDA,GAAAA,QAAAA,oBAA4B,SAAU,IAAI+8E,IGsGtC,MAAMn4B,EAAWplH,EAAQolH,UAAY,CAAC,EAGtCA,EAASlnD,OAASl+D,EAAQouH,MAAMlwD,OAEhCjlE,KAAK4e,WA5Gb,YAOgB,IAPU,sBACtBktG,EADsB,WAEtBG,EAAa,aAFS,MAGtBC,EAHsB,MAItBm5B,EAJsB,mBAKtBt5B,EALsB,sBAMtBC,EANsB,SAOtBG,GAAY,EAQZ,OALIk5B,IAEAp5B,GAAe,IAA+B,IAA7BA,EAAWxhH,QAAQ,KAAc,IAAM,YAAY46I,KAGjE,IAAI15B,GAAe,CACtBG,wBACAG,aACAF,qBACAC,wBACAG,WACAD,SAEP,CAqFyBy5B,CAAiB,CAC/B75B,sBAAuB/kH,EAAQ+kH,sBAG/BG,WAAYllH,EAAQklH,YAAcllH,EAAQ6+I,KAC1CP,QACAt5B,mBAAoBhlH,EAAQglH,mBAC5BC,sBAAuBjlH,EAAQilH,sBAC/BG,WACAD,MAAOnlH,EAAQy+I,eAAet5B,QAIlClsH,KAAK4e,WAAWmmB,GAAG4mF,GAAe34B,OAAO64B,oBAAoB,KAEzD,MAAMx5B,EAAU,CACZwzD,eAAe,EACfC,aAAc9lJ,KAAK4e,WAAWksG,KAAKQ,qBACnCy6B,wBAAyB/lJ,KAAK4e,WAAWirG,2BAI7C7pH,KAAKsiG,aAAahgG,KACdm2G,GACAK,QACAhyG,OACAA,EACAurF,EALJ,IAQJryF,KAAKgmJ,sBAELhmJ,KAAK6+D,KAAO,IAAI2nD,GAAKxmH,KAAK4e,WAA6B,gCAGvD5e,KAAKimJ,mBAOL97G,KAAE5qC,QAAQwlC,IAAM/kC,KAAK+G,QAAQm/I,4BAA8B,GAAK,iBAAlD,UAA2E1nE,IACrFx+E,KAAKgZ,WAAWwlE,GAAI56D,OAAM,QAA1B,GAIP,CAMDqiI,mBAGIjmJ,KAAK6+D,KAAKugB,WAAW,qBACrBp/E,KAAK6+D,KAAKugB,WAAW,8BACrBp/E,KAAK6+D,KAAKugB,WAAW,wCACrBp/E,KAAK6+D,KAAKugB,WAAW,+BACrBp/E,KAAK6+D,KAAKugB,WAAW,0CACrBp/E,KAAK6+D,KAAKugB,WAAW,kCACrBp/E,KAAK6+D,KAAKugB,WAAW,kCACrBp/E,KAAK6+D,KAAKugB,WAAW,0CAEfp/E,KAAK+G,QAAQyuI,YAAeh1G,GAAQ24D,eACtCn5F,KAAK6+D,KAAKugB,WAAW,sBAEU,IAA/Bp/E,KAAK+G,QAAQo/I,eAA0B3lH,GAAQu4D,oBAC/C/4F,KAAK6+D,KAAKugB,WAAW,mCAGc,IAA5Bp/E,KAAK+G,QAAQq/I,YAA8BpmJ,KAAK+G,QAAQq/I,aAC/DpmJ,KAAK6+D,KAAKugB,WAAW,yBAIpB5+C,GAAQ5jB,kBAAkD,IAA3B5c,KAAK+G,QAAQs/I,YAA6BrmJ,KAAK+G,QAAQs/I,WACvFrmJ,KAAK6+D,KAAKugB,WAAW,wBAYrB5+C,GAAQo2D,oBAAoD,IAA/B52F,KAAK+G,QAAQu/I,gBAC1Cv7I,GAAOsM,KAAK,sBACZrX,KAAK6+D,KAAKugB,WAAW,kCAGrBp/E,KAAK4e,WAAWuhH,MAChBngI,KAAK6+D,KAAKugB,WAAW,0BAGrBsmC,GAAcxkC,YAAYlhF,KAAK+G,UAC/B/G,KAAK6+D,KAAKugB,WAAW++B,IAAc,GAAO,GAI9CpzG,GAAOkT,MAAM,oCACbje,KAAK6+D,KAAKugB,WAAW,gCAErBr0E,GAAOkT,MAAM,+CACbje,KAAK6+D,KAAKugB,WAAW,mDAGjBqoB,GAAAA,4BACAznG,KAAK6+D,KAAKugB,WAAW,qCAOrBqoB,GAAAA,4BACAznG,KAAK6+D,KAAKugB,WAAW,8BAE5B,CAKDmnE,gBACI,OAAOvmJ,KAAK4e,UACf,CAaD4nI,oBAAiD,IAA/B/1H,EAA+B,uDAAjB,CAAC,EAAG4kD,EAAa,uCAALnsE,EAAK,uCAC7C,MAAMhI,EAAM3B,OAAOqvB,YAAY1tB,MACzBulJ,EAAYl/E,GAAAA,QAAAA,gBAAwB8N,GAAQxjD,cASlD,GAPA7xB,KAAKixG,gBAAgBw1C,GAAavlJ,EAClC6J,GAAOD,IACF,kBAAiB27I,IAAYv9I,EAAO,IAAGA,KAAS,QACjDhI,GAEJlB,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,0BAAsCn4D,EAAa4kD,EAAQnsE,GAClFlJ,KAAK0mJ,+BACDrxE,IAAW9N,GAAAA,QAAAA,OAAAA,WAA4B8N,IAAW9N,GAAAA,QAAAA,OAAAA,SAE9CvnE,KAAK2mJ,qBACL3mJ,KAAK4e,WAAWupG,aAAap0C,cAAc/zE,KAAK2mJ,oBAChD3mJ,KAAK2mJ,mBAAqB,MAG9B3mJ,KAAK4mJ,eAAiB5mJ,KAAK4e,WAAW+iH,OAAOgiB,4BAE7C54I,GAAOsM,KAAM,iBAAgBrX,KAAK4e,WAAWwtD,OAG7CpsE,KAAK6mJ,cAGL7mJ,KAAK8mJ,oBAAqB,EAC1B9mJ,KAAK4mJ,eAAiB5mJ,KAAK6+D,KAAKuoD,yBAAyBpnH,KAAK+G,QAAQouH,MAAMlwD,QACvEtqD,MAAK,IAA8B,IAA7B,SAAEw0D,EAAF,WAAYo3C,GAAiB,EAC3Bp3C,EAASjrD,IAAIqjD,GAAAA,QAAAA,GAAAA,OACdx8D,GAAOpH,MAAO,yBACV3D,KAAK+G,QAAQouH,MAAMlwD,0DAG3BjlE,KAAK+mJ,4BACDxgC,OAAYz/G,EADhB,IAGH8c,OAAMjgB,IACH,MAAMynH,EAAS,0BAEf5nH,KAAAA,iBACI,IAAIjB,MAAO,GAAE6oH,MAAWznH,MAC5BoH,GAAOpH,MAAMynH,EAAQznH,GAErB3D,KAAK0mJ,8BAA6B,EAAlC,IAIR1mJ,KAAK4mJ,eAAgB,EAEjBn2H,EAAYygB,WACZlxC,KAAKulJ,mBAAoB,GAEzBvlJ,KAAK4e,YAAc5e,KAAK4e,WAAWqxD,WAChC1I,GAAAA,QAAAA,mBAA2BvnE,KAAK4e,WAAWwtD,MAG9CpsE,KAAKsiG,aAAahgG,KACdm2G,GACAlxC,GAAAA,QAAAA,mBAA2BvnE,KAAK4e,WAAWwtD,WAEhD,GAAIiJ,IAAW9N,GAAAA,QAAAA,OAAAA,SACN,+BAARr+D,EACAlJ,KAAKgnJ,2BAA4B,EAEjChnJ,KAAKinJ,kBAAmB,EAE5BjnJ,KAAKknJ,aAAeh+I,EACR,cAARA,GACAlJ,KAAKsiG,aAAahgG,KACdm2G,GACAK,GAAmC5vG,QAExC,GAAImsE,IAAW9N,GAAAA,QAAAA,OAAAA,MAClBvnE,KAAKknJ,aAAeh+I,OACjB,GAAImsE,IAAW9N,GAAAA,QAAAA,OAAAA,aAA6B,CAE/CvnE,KAAK4e,WAAWksG,KAAKO,eACrB,MAAM87B,EAA2B9mI,QAAQrgB,KAAKslJ,sBACxChH,EAASp1I,GAAOlJ,KAAKknJ,aAE3B,GAAIlnJ,KAAKgnJ,0BAELhnJ,KAAKsiG,aAAahgG,KACdm2G,GACAK,SACD,GAAI94G,KAAKinJ,iBACZjnJ,KAAKsiG,aAAahgG,KACdm2G,GACAK,GACAwlC,OACAx3I,EACA9G,KAAKonJ,0CACN,GAAID,EACPnnJ,KAAKsiG,aAAahgG,KACdm2G,GAA+C6lC,OAChD,CAMHvzI,GAAOpH,MAAM,4BAIb,MAAMmhJ,EAAkBv9E,GAAAA,QAAAA,qBAEpBu9E,GAAmB,KAAOA,EAAkB,IAC5C9kJ,KAAKsiG,aAAahgG,KACdm2G,GACAK,GACAwlC,GAAU,oBACQx3I,EAClB9G,KAAKonJ,qCAETpnJ,KAAKsiG,aAAahgG,KACdm2G,GACAK,GACAwlC,GAAU,gCACQx3I,EAClB9G,KAAKonJ,oCAEhB,CACJ,MAAM,GAAI/xE,IAAW9N,GAAAA,QAAAA,OAAAA,SAAyB,CAC3C,MAAM8/E,EAAuBrnJ,KAAKumJ,gBAAgB38B,uBAGlD5pH,KAAKsiG,aAAahgG,KACdm2G,GACAK,GACA5vG,GAAOlJ,KAAKsnJ,8BAA8BD,GAC1C52H,EACP,CACJ,CASDs2H,4BAA4BxgC,EAAYp3C,GAEpCo3C,EAAWnjH,SAAQgyG,IAqBf,GApBsB,kBAAlBA,EAASpkG,OACThR,KAAK0uH,6BAA+BtZ,EAAS9nG,KAC7CtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAK0uH,+BAGT,mBAAlBtZ,EAASpkG,OACThR,KAAKihI,8BAAgC7rB,EAAS9nG,KAC9CtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAKihI,gCAGT,iBAAlB7rB,EAASpkG,OACThR,KAAKunJ,6BAA+BnyC,EAAS9nG,KAC7CtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAKunJ,+BAGT,wBAAlBnyC,EAASpkG,OACThR,KAAKwnJ,mCAAqCpyC,EAAS9nG,KACnDtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAKwnJ,qCAGT,eAAlBpyC,EAASpkG,KAAuB,CAChChR,KAAK2xH,gBAAiB,EACtB,MAAM81B,EAAuB3sI,IACzBA,EAAE1X,SAAQskJ,IACFA,EAAG55C,SAAS,0BACZ9tG,KAAKsiG,aAAahgG,KAAKm2G,GAC1B,GAHL,EAOAtpC,EACAs4E,EAAqBt4E,GAErBimC,EAAS9nG,MAAQtN,KAAK6+D,KAAKuoD,yBAAyBhS,EAAS9nG,KAAM8nG,EAASpkG,MACvE2J,MAAK,QAAGw0D,SAAUr0D,GAAb,SAAqB2sI,EAAqB3sI,EAA1C,IACL8I,OAAMhW,GAAK7C,GAAOuY,KAAK,qCAAsC1V,GAAKA,EAAEkW,UAEhF,CAcD,GAZsB,UAAlBsxF,EAASpkG,OACThR,KAAK+G,QAAQy+I,eAAet5B,MAAQlsH,KAAK4e,WAAWstG,MAAQ9W,EAAS9nG,MAGnD,WAAlB8nG,EAASpkG,OACThR,KAAK+G,QAAQy+I,eAAemC,OAAS3nJ,KAAK4e,WAAW+oI,OAASvyC,EAAS9nG,MAGrD,YAAlB8nG,EAASpkG,OACThR,KAAK+G,QAAQy+I,eAAeoC,eAAiBxyC,EAAS9nG,MAGpC,mBAAlB8nG,EAASpkG,KAA2B,CACpChR,KAAKuwH,8BAAgCnb,EAAS9nG,KAC9CtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAKuwH,+BAE3B,MAAMs3B,EAA+B/sI,IACjC9a,KAAKqwH,sBAAwB,CAAC,EAE9Bv1G,EAAE1X,SAAQskJ,IACFA,EAAG55C,SAAS,aACZ9tG,KAAKqwH,sBAAsBy3B,QAAS,EACvC,GAHL,EAOA34E,EACA04E,EAA6B14E,GAE7BimC,EAAS9nG,MAAQtN,KAAK6+D,KAAKuoD,yBAAyBhS,EAAS9nG,KAAM8nG,EAASpkG,MACvE2J,MAAK,QAAGw0D,SAAUr0D,GAAb,SAAqB+sI,EAA6B/sI,EAAlD,IACL8I,OAAMhW,GAAK7C,GAAOuY,KAAK,6CAA8C1V,GAAKA,EAAEkW,UAExF,CAEqB,kBAAlBsxF,EAASpkG,OACThR,KAAK8zH,6BAA+B1e,EAAS9nG,KAC7CtN,KAAKylJ,YAAY7jJ,KAAK5B,KAAK8zH,8BAC9B,IAGL9zH,KAAK0mJ,8BAA6B,GAE9B1mJ,KAAKylJ,YAAYnhJ,OAAS,GAC1BtE,KAAK4e,WAAWnb,WAAWzD,KAAK+nJ,kBAAkBllJ,KAAK7C,MAAO,KAAM,UAAW,KAAM,KAE5F,CAQDsnJ,8BAA8Bp+I,GAC1B,IAAKA,EACD,OAAO,KAGX,MAAM+5B,EAAUgiH,GAAcl5G,KAAK7iC,GAEnC,OAAO+5B,EAAUA,EAAQ,GAAK,IACjC,CAODovC,SAASjG,EAAKl7B,GA4BVlxC,KAAK6mJ,cAGL7mJ,KAAK4mJ,eAAgB,EACrB5mJ,KAAK8mJ,oBAAqB,EAEtB9mJ,KAAK4e,WAAWupG,cAAgBnoH,KAAK4e,WAAWupG,aAAapxC,eAC7D/2E,KAAK2mJ,mBAAqB3mJ,KAAK4e,WAAWupG,aAAapxC,eACnD/2E,KAAKgoJ,iBAAiBnlJ,KAAK7C,MAC3B,KACA,WAGJ+K,GAAOuY,KAAK,gEAGhBtjB,KAAK4e,WAAW7F,QACZqzD,EACAl7B,EACAlxC,KAAKwmJ,kBAAkB3jJ,KAAK7C,KAAM,CAC9BosE,MACAl7B,aAEX,CAQD82G,iBAAiB9+I,GAEb,GAAwC,IAApCihC,KAAEjhC,GAAKuL,KAAK,aAAanQ,QAAiD,IAAjC6lC,KAAEjhC,GAAKuL,KAAK,UAAUnQ,OAC/D,OAGJtE,KAAK4mJ,eAAgB,EAErB,MAAMqB,EAAkBjoJ,KAAK4e,WAAW+iH,OAAOkiB,gCAAgC36I,IAEzE,SAAEimE,EAAF,WAAYo3C,GAAeD,GAAep9G,GAEhDlJ,KAAK+mJ,4BAA4BxgC,EAAYp3C,IAEzC84E,GAAmB1hC,EAAWz5D,KAAO,GAAKqiB,EAASriB,KAAO,KAC1D9sD,KAAK4e,WAAWupG,aAAap0C,cAAc/zE,KAAK2mJ,oBAChD3mJ,KAAK2mJ,mBAAqB,KAEjC,CASDr0E,OAAOvrE,GACH/G,KAAK6mJ,cAGL7mJ,KAAK4mJ,eAAgB,EAErB,MAAM1lJ,EAAMlB,KAAKixG,gBAAgBi3C,UAAY3oJ,OAAOqvB,YAAY1tB,MAEhE6J,GAAOD,IAAI,8BAA+B5J,GAC1ClB,KAAK4e,WAAW0zD,OAAOvrE,EAAQqlE,IAAKrlE,EAAQwrE,IACxC19D,SAAS9N,EAAQyrE,IAAK,IAAM,EAC5BxyE,KAAKwmJ,kBAAkB3jJ,KAAK7C,KAAM,CAC9BosE,IAAKrlE,EAAQqlE,IACbl7B,SAAUnqC,EAAQmqC,WAE7B,CAMD21G,cACI7mJ,KAAKgnJ,2BAA4B,EACjChnJ,KAAKinJ,kBAAmB,EACxBjnJ,KAAKknJ,kBAAepgJ,EACpB9G,KAAKslJ,0BAAuBx+I,CAC/B,CAODiS,QAAQqzD,EAAKl7B,GACT,IAAKk7B,EAAK,CACN,MAAM,gBAAEmrD,EAAF,OAAmBtyD,GAAWjlE,KAAK+G,QAAQouH,MACjD,IAAIgzB,EAAe5wB,GAAmBtyD,EAStC,MAAM,SAAE70D,GAAa7Q,OAErB,GAAIg4H,EAAiB,CACjB,MAAMtzG,EAAS7T,GAAYA,EAAS6T,QAE/BA,IAA4C,IAAlCA,EAAOxZ,QAAQ,eACnBzK,KAAKqlJ,SACZ8C,EAAeljF,EAEtB,CAGDmH,EAAM+7E,GAAiB/3I,GAAYA,EAASg4I,QAC/C,CAED,OAAOpoJ,KAAKqyE,SAASjG,EAAKl7B,EAC7B,CAYDshF,WAAWzwH,EAAUgF,EAASshJ,GAE1B,MAAMpjF,EAASljE,EAASkjE,QAAUl+D,EAAQwrH,aAG1C,IAAI7e,EAAW,GAAE1zG,KAAKsoJ,WAAWvmJ,EAAUkjE,MAC3C,MAAMsjF,EAAcF,EACdA,EAAiBroJ,KAAK4e,WAAWwtD,IAAKpsE,KAAKulJ,mBAC3ChhJ,KAAAA,gBAA2B,GAAGstB,cAKpC,OAHA9mB,GAAOsM,KAAM,OAAMrX,KAAK4e,WAAWwtD,0BAA0Bm8E,KAC7D70C,GAAW60C,EAEJvoJ,KAAK4e,WAAWgoG,KAAK4L,WAAW9e,EAAS,KAAM3sG,EACzD,CASDuhJ,WAAWvmJ,EAAUkjE,GACjB,MAAQ,GAAEljE,KAAYkjE,GAAkBjlE,KAAK+G,QAAQouH,MAAMqzB,IAAI32H,eAClE,CAQDuvG,cAAcr/H,EAAUkjE,GACpB,OAAOjlE,KAAK4e,WAAWgoG,KAAKwa,cAAcphI,KAAKsoJ,WAAWvmJ,EAAUkjE,GACvE,CAOD2vC,SACI,OAAO50G,KAAK4e,WAAWwtD,GAC1B,CAMDq8E,eACI,MAAM9mB,EAAS3hI,KAAK4e,WAAW+iH,OAG/B,OAAOA,EAASA,EAAOyiB,SAAW,CAAC,CACtC,CAKDsE,aACI,OAAQ1oJ,KAAK4e,WAAW7T,QAAU,CAAC,GAAGD,KAAO,IAChD,CAKDo1H,OACIlgI,KAAK4e,WAAWuhH,KAAKD,QAAQ,UAChC,CAQDpV,KAAKp3C,GACD,OAAO,IAAIt5D,SAAQ,CAACC,EAASC,KACzBta,KAAK4e,WAAWksG,KAAKA,KAAK9qH,KAAK4e,WAAWmuG,WAAY1yG,EAASC,EAAQo5D,EAAvE,GAEP,CAKDi1E,cACI,OAAO3oJ,KAAK4e,WAAW+iH,OAAO6gB,QACjC,CASDxpI,WAAWwlE,GACP,OAAIx+E,KAAKslJ,qBACEtlJ,KAAKslJ,qBACJtlJ,KAAK4e,YAIjB5e,KAAKslJ,qBAAuB,IAAIlrI,SAAQC,IACpC,MAAMuuI,EAAqB,CAACn4H,EAAa4kD,KACjCA,IAAW9N,GAAAA,QAAAA,OAAAA,eACXvnE,KAAKsiG,aAAa39D,eAAeikD,GAAW,WAAXA,0BAAsCggE,GACvEvuI,IACH,EAGLra,KAAKsiG,aAAav9D,GAAG6jD,GAAW,WAAXA,0BAAsCggE,EAA3D,IAGJ5oJ,KAAK6oJ,uBAAuBrqE,GAErBx+E,KAAKslJ,sBAhBDlrI,QAAQC,SAiBtB,CAWDwuI,uBAAuBrqE,GAWnB,IAFCx+E,KAAK4e,WAAWkuG,kBAAoB9sH,KAAK4e,WAAW/U,SAEhD7J,KAAK4e,WAAWkuG,kBAAjB,MAAqCtuC,EAA0C,CAC/E,MAAMsqE,EAAStqE,EAAGxtE,KAElB,IAAe,iBAAX83I,GAAwC,WAAXA,KAI7B9oJ,KAAK4e,WAAW7X,QAAQq1E,MAAO,EAG3Bp8E,KAAK4e,WAAWmvG,yBAEhB,MAGX,CAED/tH,KAAK4e,WAAW5F,cAEqB,IAAjChZ,KAAK4e,WAAW7X,QAAQq1E,MACxBp8E,KAAK4e,WAAW/U,OAEvB,CAKDm8I,sBACI,MAAMzD,EAAY,CACdG,IAAK,CAAE59H,WAAY,IACnB4kF,IAAK,CAAE5kF,WAAY,KAGjBikI,EAAkB/oJ,KAAK+G,QAAQ2iG,KAC9B1pG,KAAK+G,QAAQ2iG,IAAIs/C,aAAgB9D,GAEpCj6I,MAAMgJ,QAAQ80I,KACdh+I,GAAOsM,KAAK,qBAAsB0xI,GAClCxG,EAAU74C,IAAI5kF,WAAaikI,GAG3B/oJ,KAAK+G,QAAQ2iG,KAAO1pG,KAAK+G,QAAQ2iG,IAAIu/C,qBACrCl+I,GAAOsM,KAAK,6BACRrX,KAAK+G,QAAQ2iG,IAAIu/C,oBAErB1G,EAAU74C,IAAIu/C,mBACRjpJ,KAAK+G,QAAQ2iG,IAAIu/C,oBAG3BjpJ,KAAK4e,WAAWuuD,oBAAoB,OAAQ,IAAI+zD,GAAoBlhI,OACpEA,KAAK4e,WAAWuuD,oBAAoB,SAAU,IAAIm1E,GAAuBtiJ,KAAMA,KAAKsiG,aAAcigD,IAClGviJ,KAAK4e,WAAWuuD,oBAAoB,OAAQ,IAAIu3E,GACnD,CAQD0C,oCACI,MAAM/0D,EAAU,CAAC,EAGjB,GAAIryF,KAAK+G,QAAQy+I,gBACVxlJ,KAAK+G,QAAQy+I,eAAet5B,OAC5BlsH,KAAK4e,WAAWy7D,oBAAqB,CAGxC,MAAM6uE,EAAalpJ,KAAK4e,WAAWy7D,oBAC9Bl0B,OAAOz6C,MAAM,WACZglB,EAAU,CAAC,EAEjBw4H,EAAW9lJ,SAAQmI,IACf,MAAMoG,EAAQpG,EAAKG,MAAM,MACnB+kC,EAAS9+B,EAAM6c,QACf3mB,EAAQ8J,EAAMsB,KAAK,MAEzByd,EAAQ+f,GAAU5oC,CAAlB,IAIJwqF,EAAQwzD,cACF7lJ,KAAK+G,QAAQy+I,eAAet5B,QACtBx7F,EAAQ,gBAEvB,CAQD,OAJA2hE,EAAQyzD,aAAe9lJ,KAAK4e,WAAWksG,KAAKQ,qBAC5Cj5B,EAAQ0zD,wBAA0B/lJ,KAAK4e,WAAWirG,0BAG3Cx3B,CACV,CAQD+M,yBAAyBmP,EAASvtG,GAE9B,IAAKhB,KAAKunJ,+BAAiCh5C,EACvC,OAGJ,MAAMrlG,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKunJ,+BAE5Br+I,EAAI8E,EAAE,eAAgB,CAClBq/D,MAAO,2BACPwiC,KAAMtB,EACNvtG,YACCusE,KAELvtE,KAAK4e,WAAWyS,KAAKnoB,EACxB,CAODigJ,uBAAuB56C,EAASsE,GAE5B,IAAK7yG,KAAKunJ,+BAAiCh5C,EACvC,OAGJ,MAAMrlG,GAAMu+D,EAAAA,GAAAA,MAAK,CAAE5rD,GAAI7b,KAAKunJ,+BAE5Br+I,EAAI8E,EAAE,gBAAiB,CACnBq/D,MAAO,2BACPwiC,KAAMtB,EACN66C,eAAgBv2C,EAAQu2C,eACxB//I,UAAWwpG,EAAQxpG,UACnB45F,SAAU4P,EAAQ5P,WACnB11B,KAEHvtE,KAAK4e,WAAWyS,KAAKnoB,EACxB,CAWDi1H,sBAAsBkrB,GAElB,IAAKA,EACD,OAAO,EAGX,IACI,MAAMn1H,EAAO0kF,GAAcywC,GAS3B,GAAIn1H,GAAwB,iBAATA,EAAmB,CAClC,MAAMljB,EAAOkjB,EAAKyqF,IAElB,QAAoB,IAAT3tG,EACP,OAAOkjB,EAGXnpB,GAAOkT,MAAM,yDACM,UAAWjN,EACjC,CACJ,CAAC,MAAOpD,GAGL,OAFA7C,GAAOpH,MAAO,sBAAqB0lJ,IAAcz7I,IAE1C,CACV,CAED,OAAO,CACV,CASDm6I,kBAAkB7+I,GACd,MAAM4S,EAAO5S,EAAIk/B,aAAa,QAE9B,IAAKpoC,KAAKylJ,YAAY/3H,SAAS5R,GAC3B,OAAO,EAGX,MAAMmiH,EAAc9zF,KAAEjhC,GAAKuL,KAAK,iBAC3B9N,OACCu3H,EAAal+H,KAAKm+H,sBAAsBF,GAE9C,OAAKC,IAImC,iBAApCA,EAAWvf,KAA2Cuf,EAAWorB,MACjEtpJ,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,uBAAmCs1C,EAAWorB,OAC1B,wBAApCprB,EAAWvf,KAAkDuf,EAAWqrB,kBAC/EvpJ,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,8BAA0Cs1C,EAAWqrB,mBACjC,kBAApCrrB,EAAWvf,IAClB3+G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,uBAAmCs1C,GACf,mBAApCA,EAAWvf,IAClB3+G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,qBAAiCs1C,GACb,kBAApCA,EAAWvf,KAClB3+G,KAAKsiG,aAAahgG,KAAKsmF,GAAW,WAAXA,oBAAgCs1C,IAGpD,EACV,CAUDwoB,6BAA6B58I,GACzB,MAAM0/I,EAAmB,CACrBjiF,GAAAA,QAAAA,OAAAA,MACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,aACAA,GAAAA,QAAAA,OAAAA,aAGJ,KAAKz9D,GAAW0/I,EAAiB97H,SAAS1tB,KAAK4e,WAAWy2D,SAAWr1E,KAAK8mJ,oBACtE,OAKJ,MAAM2C,EAASzpJ,KAAK+G,QAAQy+I,eAE5B,GAAIiE,GAAUhqJ,OAAO6I,KAAKmhJ,GAAQnlJ,OAAS,EAAG,CAC1C,MAAM2tG,EAAY,CAAC,EAEnB,IAAK,MAAMrjE,KAAQ66G,EACXA,EAAOjiJ,eAAeonC,KACtBqjE,EAAUrjE,GAAQ66G,EAAO76G,IAKjCw8D,GAAW/R,UAAUc,uBAAuB,IAAK8X,IAEjDA,EAAU7lG,GAAK,kBACf,MAAM8iD,EAAQjoD,KAAK8B,UAAUkpG,GAE7B7G,GAAWwD,QAAQ1/C,GACnBnkD,GAAOsM,KAAK63C,EACf,CAEDlvD,KAAK8mJ,oBAAqB,CAC7B,ECriCU,SAAS4C,GAAT,GASZ,IAEKC,GAX2C,GAE/Cv9I,EAF+C,SAG/C8kC,EAH+C,iBAI/Cm3G,EAJ+C,kBAQ/CuB,GACD,EACKC,GAAW,EAEXx+C,EAAO,IAAI+5C,GAAKplJ,KAAK4e,WAAW7X,SAEpC,MAAM8/C,EAAU,IAAIzsC,SAAQ,CAACC,EAASC,KAIlCqvI,EAAgBrvI,EAGhB+wF,EAAKhpG,YACDsvF,IACA,KACI0Z,OAAOvkG,CAAP,IAERukG,EAAKhpG,YACD0oF,IACA,KACQ8+D,IAKJD,GAAqBA,IAGRv+C,EAAKmnB,WACdxyH,KAAK+G,QAAQuG,KACbtN,KAAK+G,QAAQyH,OACb65I,GAGChvB,UAAU7iD,eACV77D,MAAK,KACF0wF,GAAQA,EAAKryF,aAET6wI,GAMJ7pJ,KAAK6vG,KAAKwpB,UAAUhD,wBAAwByzB,QAAQzvI,EAApD,IAEHuJ,OAAM,IAAwB,IAAvB,MAAEjgB,EAAF,QAASmgB,GAAc,EAC3BunF,EAAKryF,aAELsB,EAAO,CACHyvI,oBAAqBpmJ,EACrBmgB,WAFJ,IAfR,IAqBRunF,EAAKhpG,YACDq2G,IACA,CAACsxC,EAAiBlmI,EAAS2M,KACvBnW,EAAO,CACH0vI,kBACAv5H,cACA3M,YAEJunF,OAAOvkG,CAAP,IAGR+iJ,GAAYx+C,EAAKtyF,QAAQ3M,EAAI8kC,EAA7B,IAgBJ,OANA2V,EAAQ0O,OAAS,KACbs0F,GAAW,EACXF,EAAc,CAAC,GACft+C,GAAQA,EAAKryF,YAAb,EAGG6tC,CACV,CC9ID,MAAM97C,IAASkC,EAAAA,EAAAA,4CAGTg9I,GAA4B,CAAE9gB,GAAAA,IAAmBA,GAAAA,IAAmBA,GAAAA,MACpE+gB,GAA+B,CAAE/gB,GAAAA,KAAoBA,GAAAA,IAAmBA,GAAAA,KACxEghB,GAA2B,CAAEhhB,GAAAA,IAAmBA,GAAAA,IAAmBA,GAAAA,MASlE,MAAMihB,GASTxqJ,YAAY0tG,EAAYvmG,GACpB/G,KAAKstG,WAAaA,EAClBttG,KAAK+G,QAAUA,EACf/G,KAAKqqJ,qBAAuB,CAAC,EAE7B,IAAK,MAAMC,KAAkB7qJ,OAAO6I,KAAKvB,GAAU,CAE/C,IAAI,cAAEwjJ,EAAF,eAAiBtU,EAAjB,gBAAiCuU,GAAoBzjJ,EAAQujJ,GACjE,MAAMG,EAAkB,IAAIp8F,IAAIruD,KAAK0qJ,yBAAyBJ,IAG9D,IAAIK,EAAgB1/I,MAAM6Q,KAAK2uI,GAE/B,GAAID,EACAA,EAAkBA,EAAgB/4I,KAAI2pD,GAASA,EAAMvpC,gBAGrD84H,EAAgBH,EAAgBz5I,QAAOqqD,GAASqvF,EAAgBvmI,IAAIk3C,UAGjE,GAAI66E,GAAkBsU,EAAe,SACxCA,EAAa,UAAGA,SAAH,aAAG,EAAe14H,cAC/BokH,EAAc,UAAGA,SAAH,aAAG,EAAgBpkH,cAG7B04H,GAAiBA,IAAkBphB,GAAAA,MACnCwhB,EAAgBA,EAAc55I,QAAOqqD,GAASA,IAAUmvF,KAG5D,MAAMj0I,EAAQq0I,EAAchM,WAAUvjF,GAASA,IAAU66E,IAGrDA,IAA6B,IAAX3/H,IAClBq0I,EAAc//I,OAAO0L,EAAO,GAC5Bq0I,EAAc9kH,QAAQowG,GAE7B,CAKD,GAAwB,QAAnBqU,IAA6B9pH,GAAQ83D,eAAkBt4F,KAAKstG,WAAW6V,gBAAiB,CACzF,MAAM7sG,EAAQq0I,EAAchM,WAAUvjF,GAASA,IAAU+tE,GAAAA,OAE1C,IAAX7yH,IACAq0I,EAAc//I,OAAO0L,EAAO,GAIvBtW,KAAKstG,WAAW6V,iBACjBwnC,EAAc/oJ,KAAKunI,GAAAA,KAG9B,CAEDp+H,GAAOsM,KAAM,8BAA6BizI,mBAAgCK,KAC1E3qJ,KAAKqqJ,qBAAqBC,GAAkBK,CAC/C,CAED3qJ,KAAKstG,WAAWvoE,GACZqlD,IACAv5E,GAAW7Q,KAAK4qJ,sBAAsB/5I,KAC1C7Q,KAAKstG,WAAWvoE,GACZqlD,IACA,IAAMpqF,KAAK4qJ,0BACf5qJ,KAAKstG,WAAWvoE,GACZqlD,IACA,IAAMpqF,KAAK4qJ,yBAClB,CAQDF,yBAAyBJ,GAKrB,OAJ4B9pH,GAAQw2D,kBAAuC,QAAnBszD,EAClDJ,GACA1pH,GAAQw2D,iBAAmBmzD,GAA2BF,IAEjCl5I,QAAOqqD,IAAK,mBACnC,oBAAC77D,OAAOq4F,sBAAR,iBAAC,EAAuBC,uBAAxB,iBAAC,SAAyC6L,GAAUgH,cAApD,aAAC,EAA2DrsC,cAA5D,QAAsE,IACjE5mD,MAAKozI,GAAkBA,EAAe7xD,SAASnnE,gBAAmB,GAAE6xE,GAAUgH,SAAStvC,KAFzD,GAG1C,CAOD0vF,wBAEI,OAAI9qJ,KAAKstG,WAAW6V,gBACTnjH,KAAKqqJ,qBAAqB3H,IAAI3xI,QAAOqqD,GAASA,IAAU+tE,GAAAA,MAG5DnpI,KAAKqqJ,qBAAqB3H,GACpC,CAQDkI,sBAAsBG,GAClB,MAAMl6I,EAAUk6I,GAA8B/qJ,KAAKstG,WAAWkC,iBAE9D,IAAK3+F,EACD,OAEJ,MAAMm6I,EAAoBn6I,EAAQ4T,eAAewmI,2BAC3CC,EAA2Br6I,IAAY7Q,KAAKstG,WAAWkC,iBACvDxvG,KAAK8qJ,wBACL9qJ,KAAKqqJ,qBAAqB3gD,IAE1ByhD,EAAqBnrJ,KAAKstG,WAAWqH,kBAAkBljG,KAAIy+F,GAAeA,EAAY8G,UACtFo0C,EAA6BD,aAAH,EAAGA,EAAoB15I,KAAI45I,IAAU,MACjE,MAAMxN,EAAgBhtI,EAAQ4hI,gBAAgBqL,iBAAiBuN,EAAQ3nD,GAAUgH,OAEjF,OAAOmzC,EAAa,UACdA,EAAcnD,iBADA,QACa,CAAEmD,EAAche,WAC3C,EAFN,IAKEyrB,EAAqBJ,EAAyB35I,QAAO,CAACF,EAAKk6I,KAC7D,IAAIC,GAA4B,EAIhC,IAAK36I,EAAQ8tF,MAGT,IAAK,MAAM8sD,KAAgBL,EACvBI,EAA4BA,IACpBC,EAAah3I,MAAKi3I,GAAoBA,IAAqBH,IAQ3E,OAJKC,GACDn6I,EAAIzP,KAAK2pJ,GAGNl6I,CAAP,GACD,IAEEi6I,EAAmBhnJ,OAOnBgnJ,EAAmBK,OAAM,CAAC1zH,EAAK3hB,IAAU2hB,IAAQ+yH,EAAkB10I,MACpEzF,EAAQ4pI,eAAe6Q,GAPvBvgJ,GAAOuY,KAAK,0EASnB,CAQDsoI,uBAAuBtB,GACnB,OAAOtqJ,KAAKqqJ,qBAAqBC,EACpC,EC9LL,MAAMv/I,IAASkC,EAAAA,EAAAA,2CAMA,MAAM4+I,GAYjBjsJ,YAAY6kB,EAAgBH,EAAOmgB,EAAS6oE,GACxC,IAAK7oF,IAAmBH,EACpB,MAAM,IAAI5I,UAAU,kDACjB,GAAI+I,GAAkBH,EACzB,MAAM,IAAI5I,UAAU,qDAmCxB,GAhCI+I,EACA1Z,GAAOkT,MAAM,qCAEblT,GAAOkT,MAAO,6BAA4BqG,MAK9CtkB,KAAK8rJ,SAAW,KAGhB9rJ,KAAKy1G,YAAcnI,EAInBttG,KAAK+rJ,gBAAajlJ,EAGlB9G,KAAKgsJ,cAAgBvnH,EAIrBzkC,KAAKisJ,MAAQ,KAGbjsJ,KAAKksJ,oBAAqB,EAG1BlsJ,KAAKmsJ,mBAAoB,EAIrB1nI,EAAgB,CAChB,MAAM2nI,EACA3nI,EAAe4nI,kBACb,mBAAoB,CAChBjyF,SAAU,uCAItBp6D,KAAKssJ,eAAeF,GACpBpsJ,KAAKisJ,MAAQ,aAGhB,MAAU3nI,IACPtkB,KAAKksJ,oBAAqB,EAC1BlsJ,KAAKusJ,OAASjoI,EACdtkB,KAAKwsJ,iBAEZ,CAODA,iBAEI,MAAMC,EAAK,IAAI3tI,UAAU9e,KAAKusJ,QAG9BvsJ,KAAKssJ,eAAeG,GACpBzsJ,KAAKisJ,MAAQ,WAChB,CAODS,0BACI,IAAIC,EAAW,EAEf,MAAMC,EAAS,MACU5sJ,KAAK8rJ,UAA0C,eAA7B9rJ,KAAK8rJ,SAASjtI,YAC1C7e,KAAK8rJ,SAASjtI,aAAeC,UAAUsqD,WAW9CppE,KAAK6sJ,WAGT7sJ,KAAKwsJ,eAAexsJ,KAAKusJ,QACzBI,EAAW1oJ,KAAKF,IAAe,EAAX4oJ,EAAc,IAClC3sJ,KAAK8sJ,cAAgBljJ,WAAWgjJ,EAAmB,IAAXD,IAVpC3sJ,KAAK8sJ,cAAgBljJ,WAAWgjJ,EAAmB,IAAXD,EAU5C,EAGJ3sJ,KAAK8sJ,cAAgBljJ,WAAWgjJ,EAAmB,IAAXD,EAC3C,CAODI,yBACQ/sJ,KAAK8sJ,gBACLnjJ,aAAa3J,KAAK8sJ,eAClB9sJ,KAAK8sJ,mBAAgBhmJ,EAE5B,CAQDkmJ,0BAA0BtrI,GACtB,IAAK1hB,KAAKksJ,mBACN,OAEJ,MAAM,KAAEvqI,EAAF,OAAQpe,GAAWme,EAEzB0pF,GAAWgE,chFmW2B,EAAEztF,EAAcpe,KAAhB,CAC1CyN,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,uBACR45B,WAAY,CACRjsB,OACApe,YgFxWyB0pJ,CAA+BtrI,EAAMpe,IAC9DvD,KAAKksJ,oBAAqB,EAC1BlsJ,KAAKgsJ,cAAcxnH,KAAKmiD,GAAAA,QAAAA,mBAA6B,KACjD3mF,KAAK+sJ,yBACL/sJ,KAAKksJ,oBAAqB,CAA1B,IAEJlsJ,KAAK0sJ,yBACR,CAMGn8H,WACA,OAAOvwB,KAAKisJ,KACf,CAKDhtI,QAII,GAHAjf,KAAKmsJ,mBAAoB,EACzBnsJ,KAAK+sJ,yBACL/sJ,KAAKksJ,oBAAqB,EACtBlsJ,KAAK8rJ,SAAU,CACf,IACI9rJ,KAAK8rJ,SAAS7sI,OACjB,CAAC,MAAOtb,GAAS,CAElB3D,KAAK8rJ,SAAW,IACnB,CACJ,CAODe,SACI,OAAO7sJ,KAAK8rJ,WAA0C,SAA7B9rJ,KAAK8rJ,SAASjtI,YAChC7e,KAAK8rJ,SAASjtI,aAAeC,UAAUC,KACjD,CAODmuI,yBAAyBr6C,GACrB7yG,KAAKuzE,MAAM,CACP45E,aAAc,mBACXt6C,GAEV,CAWDuQ,YAAYvnG,EAAIg3F,GACZ7yG,KAAKuzE,MAAM,CACP45E,aAAc,kBACdC,WAAYv6C,EACZh3F,MAEP,CAMDwxI,oBAAoBxlJ,GAChBkD,GAAOD,IAAK,iBAAgBjD,MAE5B7H,KAAKuzE,MAAM,CACP45E,aAAc,oBACdG,MAAOzlJ,GAEd,CAOD0lJ,oCAAoC7oI,GAChC3Z,GAAOD,IAAK,yCAAwC7D,KAAK8B,UAAU2b,MACnE1kB,KAAKuzE,MAAM,CACP45E,aAAc,8BACXzoI,GAEV,CASD8oI,2BAA2Bj3C,EAAY1C,GACnC9oG,GAAOsM,KAAM,kDAAiDk/F,MAAe1C,KAC7E7zG,KAAKuzE,MAAM,CACP45E,aAAc,yBACd52C,aACA1C,aAEP,CAKDy4C,eAAexmI,GACX,MAAM2e,EAAUzkC,KAAKgsJ,cAErBlmI,EAAQwL,OAAS,KACbvmB,GAAOsM,KAAM,GAAErX,KAAKisJ,wBAEpBjsJ,KAAK+rJ,YAAa,EAElBtnH,EAAQniC,KAAKqkF,GAAAA,QAAAA,kBAAb,EAGJ7gE,EAAQ7iB,QAAUK,IAGK,cAAftD,KAAKisJ,OACLlhJ,GAAOpH,MAAO,kBAAiBL,EAAMwgB,UACxC,EAGLgC,EAAQ0L,UAAY,IAAc,IAE1BxqB,GAFa,KAAEiZ,GAAW,EAI9B,IACIjZ,EAAM4xG,GAAc34F,EACvB,CAAC,MAAOtc,GAIL,OAHAH,KAAAA,iBAAsCG,QACtCoH,GAAOpH,MAAM,4CAA6Csc,EAAMtc,EAGnE,CAED,MAAMwpJ,EAAenmJ,EAAImmJ,aAEzB,OAAQA,GACR,IAAK,qCAAsC,CACvC,MAAM,wBAAEM,EAAF,iBAA2BC,EAAmB,GAA9C,QAAkD1sJ,GAAYgG,EAEpE+D,GAAOkT,MAAO,qBAAoBwvI,yBAA+CC,KACjFjpH,EAAQniC,KAAKqkF,GAAAA,QAAAA,yBAAoC8mE,EAAyBC,EAAkB1sJ,GAC5F,KACH,CACD,IAAK,wCAAyC,CAC1C,MAAMoiJ,EAAWp8I,EAAIo8I,SACfuK,EAA0B,SAAf3mJ,EAAIujG,OAErBx/F,GAAOsM,KAAM,uCAAsC+rI,YAAmBuK,KACtElpH,EAAQniC,KAAKqkF,GAAAA,QAAAA,6BAAwCy8D,EAAUuK,GAE/D,KACH,CACD,IAAK,kBACDlpH,EAAQniC,KAAKqkF,GAAAA,QAAAA,0BAAqC3/E,EAAI8U,KAAM9U,EAAIomJ,YAEhE,MAEJ,IAAK,gBACD3oH,EAAQniC,KAAKqkF,GAAAA,QAAAA,wBAAmC3/E,EAAI8U,KAAM9U,GAE1D,MAEJ,IAAK,mBAAoB,CACrB,MAAM4mJ,EAAmB5mJ,EAAI4mJ,iBAE7B7iJ,GAAOsM,KAAM,0BAAyBu2I,KACtCnpH,EAAQniC,KAAKqkF,GAAAA,QAAAA,0BAAqCinE,GAElD,KACH,CACD,IAAK,0BAC6B,iBAAnB5mJ,EAAIuvG,YAAoD,iBAAlBvvG,EAAIy9H,WACjD15H,GAAOsM,KAAM,4BAA2BrQ,EAAIuvG,gBAAgBvvG,EAAIy9H,aAChEhgG,EAAQniC,KAAKqkF,GAAAA,QAAAA,iCAA4C3/E,IAEzD+D,GAAOpH,MAAO,oCAAmCqD,EAAIuvG,gBAAgBvvG,EAAIy9H,aAE7E,MAEJ,IAAK,cACD15H,GAAOsM,KAAM,iCAAgCrQ,EAAI2L,YACjD,MAEJ,IAAK,kBACD5H,GAAOsM,KAAM,6BAA4BpQ,KAAK8B,UAAU/B,EAAIs2I,kBAC5D74G,EAAQniC,KAAKqkF,GAAAA,QAAAA,qBAAgC3/E,GAC7C,MAEJ,IAAK,kBACD+D,GAAOsM,KAAM,6BAA4BpQ,KAAK8B,UAAU/B,EAAIs2I,kBAC5D74G,EAAQniC,KAAKqkF,GAAAA,QAAAA,qBAAgC3/E,GAC7C,MAEJ,QACI+D,GAAOkT,MAAM,mCAAoCjX,GAMjDy9B,EAAQniC,KAAM,mBAAkB6qJ,IAAgBnmJ,GAjEpD,EAsEJ8e,EAAQyL,QAAUjuB,IAGd,GAFAyH,GAAOkT,MAAO,sBAAoBje,KAAKmsJ,kBAAoB,SAAW,WAElErmI,IAAY9lB,KAAK8rJ,SAArB,CAaA,KAHwB9rJ,KAAKmsJ,mBACN,OAAf7oJ,EAAMqe,MAA4D,IAA3C3hB,KAAKy1G,YAAYo4C,uBAE1B,CAClB,MAAM,KAAElsI,EAAF,OAAQpe,GAAWD,EAEzByH,GAAOpH,MAAO,mBAAkBge,KAAQpe,KAErB,cAAfvD,KAAKisJ,QACLjsJ,KAAKgtJ,0BAA0B1pJ,IAGP,IAApBtD,KAAK+rJ,YACLtnH,EAAQniC,KAAKqkF,GAAAA,QAAAA,oBAA+B,CACxChlE,OACApe,WAIf,CAEDvD,KAAK+rJ,YAAa,EAGlB/rJ,KAAK8rJ,SAAW,IA9Bf,MAHG/gJ,GAAOkT,MAAM,kEAiCjB,EAIJje,KAAK8rJ,SAAWhmI,CACnB,CASDytD,MAAMu6E,GACF,MAAMhoI,EAAU9lB,KAAK8rJ,SAErB,IAAK9rJ,KAAK6sJ,SAEN,MADA9hJ,GAAOpH,MAAM,2CACP,IAAIpB,MAAM,qBAGpBujB,EAAQuL,KAAKpqB,KAAK8B,UAAU+kJ,GAC/B,4BCzaL,IAAIC,IAAe,EACfC,IAAuB,EAUpB,SAASC,GAAeC,EAAU58I,EAAM68I,GAC7C,MAAMhnJ,EAAQ+mJ,EAAS/mJ,MAAMmK,GAC7B,OAAOnK,GAASA,EAAM7C,QAAU6pJ,GAAOt5I,SAAS1N,EAAMgnJ,GAAM,GAC7D,CAKM,SAASC,GAAwB7uJ,EAAQ8uJ,EAAiB32E,GAC/D,IAAKn4E,EAAOwd,kBACV,OAEF,MAAMwzC,EAAQhxD,EAAOwd,kBAAkBva,UACjC8rJ,EAAyB/9F,EAAMrrC,iBACrCqrC,EAAMrrC,iBAAmB,SAASqpI,EAAiBnmI,GACjD,GAAImmI,IAAoBF,EACtB,OAAOC,EAAuBxrJ,MAAM9C,KAAM0I,WAE5C,MAAM8lJ,EAAmB5gJ,IACvB,MAAM6gJ,EAAgB/2E,EAAQ9pE,GAC1B6gJ,IACErmI,EAAGsmI,YACLtmI,EAAGsmI,YAAYD,GAEfrmI,EAAGqmI,GAEN,EAOH,OALAzuJ,KAAK2uJ,UAAY3uJ,KAAK2uJ,WAAa,CAAC,EAC/B3uJ,KAAK2uJ,UAAUN,KAClBruJ,KAAK2uJ,UAAUN,GAAmB,IAAIjgG,KAExCpuD,KAAK2uJ,UAAUN,GAAiBvnH,IAAI1e,EAAIomI,GACjCF,EAAuBxrJ,MAAM9C,KAAM,CAACuuJ,EACzCC,GACH,EAED,MAAMI,EAA4Br+F,EAAM1pB,oBACxC0pB,EAAM1pB,oBAAsB,SAAS0nH,EAAiBnmI,GACpD,GAAImmI,IAAoBF,IAAoBruJ,KAAK2uJ,YACzC3uJ,KAAK2uJ,UAAUN,GACrB,OAAOO,EAA0B9rJ,MAAM9C,KAAM0I,WAE/C,IAAK1I,KAAK2uJ,UAAUN,GAAiBnqI,IAAIkE,GACvC,OAAOwmI,EAA0B9rJ,MAAM9C,KAAM0I,WAE/C,MAAMmmJ,EAAc7uJ,KAAK2uJ,UAAUN,GAAiBlqI,IAAIiE,GAQxD,OAPApoB,KAAK2uJ,UAAUN,GAAiB7uD,OAAOp3E,GACM,IAAzCpoB,KAAK2uJ,UAAUN,GAAiBvhG,aAC3B9sD,KAAK2uJ,UAAUN,GAEmB,IAAvC5uJ,OAAO6I,KAAKtI,KAAK2uJ,WAAWrqJ,eACvBtE,KAAK2uJ,UAEPC,EAA0B9rJ,MAAM9C,KAAM,CAACuuJ,EAC5CM,GACH,EAEDpvJ,OAAOwc,eAAes0C,EAAO,KAAO89F,EAAiB,CACnDlqI,MACE,OAAOnkB,KAAK,MAAQquJ,EACrB,EACDvnH,IAAI1e,GACEpoB,KAAK,MAAQquJ,KACfruJ,KAAK6mC,oBAAoBwnH,EACrBruJ,KAAK,MAAQquJ,WACVruJ,KAAK,MAAQquJ,IAElBjmI,GACFpoB,KAAKklB,iBAAiBmpI,EAClBruJ,KAAK,MAAQquJ,GAAmBjmI,EAEvC,EACDwR,YAAY,EACZoG,cAAc,GAEjB,CAEM,SAAS8uH,GAAWjkH,GACzB,MAAoB,kBAATA,EACF,IAAItoC,MAAM,yBAA2BsoC,EACxC,4BAENkjH,GAAeljH,EACPA,EAAQ,8BACZ,6BACL,CAMM,SAASkkH,GAAgBlkH,GAC9B,MAAoB,kBAATA,EACF,IAAItoC,MAAM,yBAA2BsoC,EACxC,4BAENmjH,IAAwBnjH,EACjB,oCAAsCA,EAAO,WAAa,WAClE,CAEM,SAAS//B,KACd,GAAsB,iBAAXvL,OAAqB,CAC9B,GAAIwuJ,GACF,OAEqB,oBAAZ1jJ,SAAkD,mBAAhBA,QAAQS,KACnDT,QAAQS,IAAIhI,MAAMuH,QAAS3B,UAE9B,CACF,CAKM,SAASsmJ,GAAWC,EAAWC,GAC/BlB,IAGL3jJ,QAAQiZ,KAAK2rI,EAAY,8BAAgCC,EACrD,YACL,CAuDD,SAASp/F,GAAS73B,GAChB,MAA+C,oBAAxCx4B,OAAO+C,UAAUgP,SAAS/J,KAAKwwB,EACvC,CAOM,SAASk3H,GAAclvI,GAC5B,OAAK6vC,GAAS7vC,GAIPxgB,OAAO6I,KAAK2X,GAAM1O,QAAO,SAASm7C,EAAa9kD,GACpD,MAAMw9D,EAAQtV,GAAS7vC,EAAKrY,IACtBC,EAAQu9D,EAAQ+pF,GAAclvI,EAAKrY,IAAQqY,EAAKrY,GAChD6hC,EAAgB27B,IAAU3lE,OAAO6I,KAAKT,GAAOvD,OACnD,YAAcwC,IAAVe,GAAuB4hC,EAClBijB,EAEFjtD,OAAOC,OAAOgtD,EAAa,CAAC,CAAC9kD,GAAMC,GAC3C,GAAE,CAAC,GAXKoY,CAYV,CAGM,SAASmvI,GAAUttI,EAAOiB,EAAMssI,GAChCtsI,IAAQssI,EAAUnrI,IAAInB,EAAK3W,MAGhCijJ,EAAUvoH,IAAI/jB,EAAK3W,GAAI2W,GACvBtjB,OAAO6I,KAAKya,GAAM3f,SAAQkK,IACpBA,EAAKwgG,SAAS,MAChBshD,GAAUttI,EAAOA,EAAMqC,IAAIpB,EAAKzV,IAAQ+hJ,GAC/B/hJ,EAAKwgG,SAAS,QACvB/qF,EAAKzV,GAAMlK,SAAQgJ,IACjBgjJ,GAAUttI,EAAOA,EAAMqC,IAAI/X,GAAKijJ,EAAhC,GAEH,IAEJ,CAGM,SAASC,GAAYzqJ,EAAQygB,EAAOiqI,GACzC,MAAMC,EAAkBD,EAAW,eAAiB,cAC9CE,EAAiB,IAAIrhG,IAC3B,GAAc,OAAV9oC,EACF,OAAOmqI,EAET,MAAMC,EAAa,GAcnB,OAbA7qJ,EAAOzB,SAAQyE,IACM,UAAfA,EAAMmJ,MACNnJ,EAAM2jB,kBAAoBlG,EAAMlZ,IAClCsjJ,EAAW9tJ,KAAKiG,EACjB,IAEH6nJ,EAAWtsJ,SAAQusJ,IACjB9qJ,EAAOzB,SAAQ0e,IACTA,EAAM9Q,OAASw+I,GAAmB1tI,EAAM8tI,UAAYD,EAAUvjJ,IAChEgjJ,GAAUvqJ,EAAQid,EAAO2tI,EAC1B,GAHH,IAMKA,CACR,CC3PD,MAAM3vE,GAAUlb,GAET,SAASirF,GAAiBtwJ,EAAQuwJ,GACvC,MAAM9yI,EAAYzd,GAAUA,EAAOyd,UAEnC,IAAKA,EAAUmJ,aACb,OAGF,MAAM4pI,EAAuB,SAAS/hJ,GACpC,GAAiB,iBAANA,GAAkBA,EAAEuiF,WAAaviF,EAAEo2H,SAC5C,OAAOp2H,EAET,MAAMgiJ,EAAK,CAAC,EA4CZ,OA3CAvwJ,OAAO6I,KAAK0F,GAAG5K,SAAQwE,IACrB,GAAY,YAARA,GAA6B,aAARA,GAA8B,gBAARA,EAC7C,OAEF,MAAMmG,EAAuB,iBAAXC,EAAEpG,GAAqBoG,EAAEpG,GAAO,CAACqoJ,MAAOjiJ,EAAEpG,SAC5Cd,IAAZiH,EAAEmiJ,OAA0C,iBAAZniJ,EAAEmiJ,QACpCniJ,EAAEhK,IAAMgK,EAAE/J,IAAM+J,EAAEmiJ,OAEpB,MAAMC,EAAW,SAAS5rI,EAAQjX,GAChC,OAAIiX,EACKA,EAASjX,EAAK6pB,OAAO,GAAGwd,cAAgBrnC,EAAKpC,MAAM,GAE3C,aAAToC,EAAuB,WAAaA,CAC7C,EACD,QAAgBxG,IAAZiH,EAAEkiJ,MAAqB,CACzBD,EAAG5rB,SAAW4rB,EAAG5rB,UAAY,GAC7B,IAAIgsB,EAAK,CAAC,EACa,iBAAZriJ,EAAEkiJ,OACXG,EAAGD,EAAS,MAAOvoJ,IAAQmG,EAAEkiJ,MAC7BD,EAAG5rB,SAASxiI,KAAKwuJ,GACjBA,EAAK,CAAC,EACNA,EAAGD,EAAS,MAAOvoJ,IAAQmG,EAAEkiJ,MAC7BD,EAAG5rB,SAASxiI,KAAKwuJ,KAEjBA,EAAGD,EAAS,GAAIvoJ,IAAQmG,EAAEkiJ,MAC1BD,EAAG5rB,SAASxiI,KAAKwuJ,GAEpB,MACetpJ,IAAZiH,EAAEmiJ,OAA0C,iBAAZniJ,EAAEmiJ,OACpCF,EAAGz/D,UAAYy/D,EAAGz/D,WAAa,CAAC,EAChCy/D,EAAGz/D,UAAU4/D,EAAS,GAAIvoJ,IAAQmG,EAAEmiJ,OAEpC,CAAC,MAAO,OAAO9sJ,SAAQitJ,SACNvpJ,IAAXiH,EAAEsiJ,KACJL,EAAGz/D,UAAYy/D,EAAGz/D,WAAa,CAAC,EAChCy/D,EAAGz/D,UAAU4/D,EAASE,EAAKzoJ,IAAQmG,EAAEsiJ,GACtC,GAEJ,IAECriJ,EAAEsiJ,WACJN,EAAG5rB,UAAY4rB,EAAG5rB,UAAY,IAAIr4H,OAAOiC,EAAEsiJ,WAEtCN,CACR,EAEKO,EAAmB,SAAS7rI,EAAasoC,GAC7C,GAAI8iG,EAAen9I,SAAW,GAC5B,OAAOq6C,EAAKtoC,GAGd,IADAA,EAAczd,KAAKP,MAAMO,KAAK8B,UAAU2b,MACQ,iBAAtBA,EAAYijF,MAAoB,CACxD,MAAM6oD,EAAQ,SAASxpJ,EAAKkH,EAAGD,GACzBC,KAAKlH,KAASiH,KAAKjH,KACrBA,EAAIiH,GAAKjH,EAAIkH,UACNlH,EAAIkH,GAEd,EAEDsiJ,GADA9rI,EAAczd,KAAKP,MAAMO,KAAK8B,UAAU2b,KACtBijF,MAAO,kBAAmB,uBAC5C6oD,EAAM9rI,EAAYijF,MAAO,mBAAoB,wBAC7CjjF,EAAYijF,MAAQooD,EAAqBrrI,EAAYijF,MACtD,CACD,GAAIjjF,GAA4C,iBAAtBA,EAAY2rE,MAAoB,CAExD,IAAIogE,EAAO/rI,EAAY2rE,MAAMqgE,WAC7BD,EAAOA,IAA0B,iBAATA,EAAqBA,EAAO,CAACR,MAAOQ,IAC5D,MAAME,EAA6Bb,EAAen9I,QAAU,GAE5D,GAAK89I,IAAwB,SAAfA,EAAKP,OAAmC,gBAAfO,EAAKP,OACf,SAAfO,EAAKR,OAAmC,gBAAfQ,EAAKR,UACtCjzI,EAAUmJ,aAAayqI,0BACvB5zI,EAAUmJ,aAAayqI,0BAA0BF,YAChDC,GAA6B,CAElC,IAAI1tH,EAMJ,UAPOve,EAAY2rE,MAAMqgE,WAEN,gBAAfD,EAAKP,OAA0C,gBAAfO,EAAKR,MACvChtH,EAAU,CAAC,OAAQ,QACK,SAAfwtH,EAAKP,OAAmC,SAAfO,EAAKR,QACvChtH,EAAU,CAAC,UAETA,EAEF,OAAOjmB,EAAUmJ,aAAaC,mBAC7BzL,MAAK0L,IAEJ,IAAIwqI,GADJxqI,EAAUA,EAAQtV,QAAOxL,GAAgB,eAAXA,EAAE8f,QACd5Q,MAAKlP,GAAK09B,EAAQxrB,MAAKtQ,GACvC5B,EAAE2V,MAAM2W,cAAcnE,SAASvmB,OAUjC,OATK0pJ,GAAOxqI,EAAQ/hB,QAAU2+B,EAAQvV,SAAS,UAC7CmjI,EAAMxqI,EAAQA,EAAQ/hB,OAAS,IAE7BusJ,IACFnsI,EAAY2rE,MAAM9pE,SAAWkqI,EAAKP,MAAQ,CAACA,MAAOW,EAAItqI,UACZ,CAAC0pI,MAAOY,EAAItqI,WAExD7B,EAAY2rE,MAAQ0/D,EAAqBrrI,EAAY2rE,OACrDvQ,GAAQ,WAAa74E,KAAK8B,UAAU2b,IAC7BsoC,EAAKtoC,EAAZ,GAGL,CACDA,EAAY2rE,MAAQ0/D,EAAqBrrI,EAAY2rE,MACtD,CAED,OADAvQ,GAAQ,WAAa74E,KAAK8B,UAAU2b,IAC7BsoC,EAAKtoC,EACb,EAEKosI,EAAa,SAASljJ,GAC1B,OAAIkiJ,EAAen9I,SAAW,GACrB/E,EAEF,CACLN,KAAM,CACJyjJ,sBAAuB,kBACvBC,yBAA0B,kBAC1BC,kBAAmB,kBACnBC,qBAAsB,gBACtBC,4BAA6B,uBAC7BC,gBAAiB,mBACjBC,+BAAgC,kBAChCC,wBAAyB,kBACzBC,gBAAiB,aACjBC,mBAAoB,aACpBC,mBAAoB,cACpB7jJ,EAAEN,OAASM,EAAEN,KACfwW,QAASlW,EAAEkW,QACXssE,WAAYxiF,EAAEwiF,YAAcxiF,EAAEuiF,eAC9B3+E,WACE,OAAOxR,KAAKsN,MAAQtN,KAAK8jB,SAAW,MAAQ9jB,KAAK8jB,OAClD,EAEJ,EAgBD,GALA9G,EAAUyL,aATY,SAAS/D,EAAaigD,EAAWvjD,GACrDmvI,EAAiB7rI,GAAa1W,IAC5BgP,EAAUC,mBAAmBjP,EAAG22D,GAAW/2D,IACrCwT,GACFA,EAAQ0vI,EAAWljJ,GACpB,GAHH,GAMH,EACsC/K,KAAKma,GAKxCA,EAAUmJ,aAAasC,aAAc,CACvC,MAAMN,EAAmBnL,EAAUmJ,aAAasC,aAC5C5lB,KAAKma,EAAUmJ,cACnBnJ,EAAUmJ,aAAasC,aAAe,SAASk0E,GAC7C,OAAO4zD,EAAiB5zD,GAAI3uF,GAAKma,EAAiBna,GAAG2M,MAAK3I,IACxD,GAAIhE,EAAE25F,QAAU31F,EAAO0/I,iBAAiBptJ,QACpC0J,EAAEqiF,QAAUr+E,EAAOmzH,iBAAiB7gI,OAItC,MAHA0N,EAAOoT,YAAYhiB,SAAQkiB,IACzBA,EAAMnb,MAAN,IAEI,IAAIwnJ,aAAa,GAAI,iBAE7B,OAAO3/I,CAAP,IACCpE,GAAKwM,QAAQE,OAAOw2I,EAAWljJ,OACnC,CACF,CACF,CClLM,SAASgkJ,GAAoBryJ,EAAQsyJ,GACtCtyJ,EAAOyd,UAAUmJ,cACnB,oBAAqB5mB,EAAOyd,UAAUmJ,cAGlC5mB,EAAOyd,UAAUmJ,eAKI,mBAAhB0rI,EAKXtyJ,EAAOyd,UAAUmJ,aAAawC,gBAC5B,SAAyBjE,GACvB,OAAOmtI,EAAYntI,GAChB/J,MAAKgqH,IACJ,MAAMmtB,EAAiBptI,EAAY2rE,OAAS3rE,EAAY2rE,MAAM97D,MACxDw9H,EAAkBrtI,EAAY2rE,OAClC3rE,EAAY2rE,MAAM77D,OACdw9H,EAAqBttI,EAAY2rE,OACrC3rE,EAAY2rE,MAAM6Y,UAcpB,OAbAxkF,EAAY2rE,MAAQ,CAClBE,UAAW,CACT8zC,kBAAmB,UACnBC,oBAAqBK,EACrBH,aAAcwtB,GAAsB,IAGpCF,IACFptI,EAAY2rE,MAAME,UAAU1yC,SAAWi0G,GAErCC,IACFrtI,EAAY2rE,MAAME,UAAUk0C,UAAYstB,GAEnCxyJ,EAAOyd,UAAUmJ,aAAasC,aAAa/D,EAAlD,GAEL,EA5BDra,QAAQ1G,MAAM,+DA6BjB,CCnCM,SAASsuJ,GAAgB1yJ,GAC9BA,EAAO2yJ,YAAc3yJ,EAAO2yJ,aAAe3yJ,EAAO4yJ,iBACnD,CAEM,SAASC,GAAY7yJ,GAC1B,GAAsB,iBAAXA,GAAuBA,EAAOwd,qBAAuB,YAC5Dxd,EAAOwd,kBAAkBva,WAAY,CACvC/C,OAAOwc,eAAe1c,EAAOwd,kBAAkBva,UAAW,UAAW,CACnE2hB,MACE,OAAOnkB,KAAKqyJ,QACb,EACDvrH,IAAIhsB,GACE9a,KAAKqyJ,UACPryJ,KAAK6mC,oBAAoB,QAAS7mC,KAAKqyJ,UAEzCryJ,KAAKklB,iBAAiB,QAASllB,KAAKqyJ,SAAWv3I,EAChD,EACD8e,YAAY,EACZoG,cAAc,IAEhB,MAAMsyH,EACF/yJ,EAAOwd,kBAAkBva,UAAU03I,qBACvC36I,EAAOwd,kBAAkBva,UAAU03I,qBACjC,WAuCE,OAtCKl6I,KAAKuyJ,eACRvyJ,KAAKuyJ,aAAgB3kJ,IAGnBA,EAAEoE,OAAOkT,iBAAiB,YAAYimB,IACpC,IAAIlH,EAEFA,EADE1kC,EAAOwd,kBAAkBva,UAAUgwJ,aAC1BxyJ,KAAKwyJ,eACb/9I,MAAK1G,GAAKA,EAAEuX,OAASvX,EAAEuX,MAAMlZ,KAAO++B,EAAG7lB,MAAMlZ,KAErC,CAACkZ,MAAO6lB,EAAG7lB,OAGxB,MAAMhiB,EAAQ,IAAIi0C,MAAM,SACxBj0C,EAAMgiB,MAAQ6lB,EAAG7lB,MACjBhiB,EAAM2gC,SAAWA,EACjB3gC,EAAMikB,YAAc,CAAC0c,YACrB3gC,EAAM2e,QAAU,CAACrU,EAAEoE,QACnBhS,KAAKyyJ,cAAcnvJ,EAAnB,IAEFsK,EAAEoE,OAAOoT,YAAYhiB,SAAQkiB,IAC3B,IAAI2e,EAEFA,EADE1kC,EAAOwd,kBAAkBva,UAAUgwJ,aAC1BxyJ,KAAKwyJ,eACb/9I,MAAK1G,GAAKA,EAAEuX,OAASvX,EAAEuX,MAAMlZ,KAAOkZ,EAAMlZ,KAElC,CAACkZ,SAEd,MAAMhiB,EAAQ,IAAIi0C,MAAM,SACxBj0C,EAAMgiB,MAAQA,EACdhiB,EAAM2gC,SAAWA,EACjB3gC,EAAMikB,YAAc,CAAC0c,YACrB3gC,EAAM2e,QAAU,CAACrU,EAAEoE,QACnBhS,KAAKyyJ,cAAcnvJ,EAAnB,GAbF,EAgBFtD,KAAKklB,iBAAiB,YAAallB,KAAKuyJ,eAEnCD,EAAyBxvJ,MAAM9C,KAAM0I,UAC7C,CACJ,MAICk8D,GAA8BrlE,EAAQ,SAASqO,IACxCA,EAAE2Z,aACL9nB,OAAOwc,eAAerO,EAAG,cACvB,CAAC/F,MAAO,CAACo8B,SAAUr2B,EAAEq2B,YAElBr2B,IAGZ,CAEM,SAAS8kJ,GAAuBnzJ,GAErC,GAAsB,iBAAXA,GAAuBA,EAAOwd,qBACnC,eAAgBxd,EAAOwd,kBAAkBva,YAC3C,qBAAsBjD,EAAOwd,kBAAkBva,UAAW,CAC5D,MAAMmwJ,EAAqB,SAASxwI,EAAImD,GACtC,MAAO,CACLA,QACIstI,WAQF,YAPmB9rJ,IAAf9G,KAAK6yJ,QACY,UAAfvtI,EAAMD,KACRrlB,KAAK6yJ,MAAQ1wI,EAAG2wI,iBAAiBxtI,GAEjCtlB,KAAK6yJ,MAAQ,MAGV7yJ,KAAK6yJ,KACb,EACDE,IAAK5wI,EAER,EAGD,IAAK5iB,EAAOwd,kBAAkBva,UAAUwwJ,WAAY,CAClDzzJ,EAAOwd,kBAAkBva,UAAUwwJ,WAAa,WAE9C,OADAhzJ,KAAKizJ,SAAWjzJ,KAAKizJ,UAAY,GAC1BjzJ,KAAKizJ,SAAS/nJ,OACtB,EACD,MAAMgoJ,EAAe3zJ,EAAOwd,kBAAkBva,UAAU+2I,SACxDh6I,EAAOwd,kBAAkBva,UAAU+2I,SACjC,SAAkBj0H,EAAOtT,GACvB,IAAIwV,EAAS0rI,EAAapwJ,MAAM9C,KAAM0I,WAKtC,OAJK8e,IACHA,EAASmrI,EAAmB3yJ,KAAMslB,GAClCtlB,KAAKizJ,SAASrxJ,KAAK4lB,IAEdA,CACR,EAEH,MAAM2rI,EAAkB5zJ,EAAOwd,kBAAkBva,UAAU4wJ,YAC3D7zJ,EAAOwd,kBAAkBva,UAAU4wJ,YACjC,SAAqB5rI,GACnB2rI,EAAgBrwJ,MAAM9C,KAAM0I,WAC5B,MAAMs9E,EAAMhmF,KAAKizJ,SAASxoJ,QAAQ+c,IACrB,IAATw+D,GACFhmF,KAAKizJ,SAASroJ,OAAOo7E,EAAK,EAE7B,CACJ,CACD,MAAMqtE,EAAgB9zJ,EAAOwd,kBAAkBva,UAAU8wJ,UACzD/zJ,EAAOwd,kBAAkBva,UAAU8wJ,UAAY,SAAmBthJ,GAChEhS,KAAKizJ,SAAWjzJ,KAAKizJ,UAAY,GACjCI,EAAcvwJ,MAAM9C,KAAM,CAACgS,IAC3BA,EAAOoT,YAAYhiB,SAAQkiB,IACzBtlB,KAAKizJ,SAASrxJ,KAAK+wJ,EAAmB3yJ,KAAMslB,GAA5C,GAEH,EAED,MAAMiuI,EAAmBh0J,EAAOwd,kBAAkBva,UAAUgxJ,aAC5Dj0J,EAAOwd,kBAAkBva,UAAUgxJ,aACjC,SAAsBxhJ,GACpBhS,KAAKizJ,SAAWjzJ,KAAKizJ,UAAY,GACjCM,EAAiBzwJ,MAAM9C,KAAM,CAACgS,IAE9BA,EAAOoT,YAAYhiB,SAAQkiB,IACzB,MAAMkC,EAASxnB,KAAKizJ,SAASx+I,MAAK/G,GAAKA,EAAE4X,QAAUA,IAC/CkC,GACFxnB,KAAKizJ,SAASroJ,OAAO5K,KAAKizJ,SAASxoJ,QAAQ+c,GAAS,EACrD,GAEJ,CACJ,MAAM,GAAsB,iBAAXjoB,GAAuBA,EAAOwd,mBACrC,eAAgBxd,EAAOwd,kBAAkBva,WACzC,qBAAsBjD,EAAOwd,kBAAkBva,WAC/CjD,EAAOsnB,gBACL,SAAUtnB,EAAOsnB,aAAarkB,WAAY,CACrD,MAAMixJ,EAAiBl0J,EAAOwd,kBAAkBva,UAAUwwJ,WAC1DzzJ,EAAOwd,kBAAkBva,UAAUwwJ,WAAa,WAC9C,MAAM3mB,EAAUonB,EAAe3wJ,MAAM9C,KAAM,IAE3C,OADAqsI,EAAQjpI,SAAQokB,GAAUA,EAAOurI,IAAM/yJ,OAChCqsI,CACR,EAED5sI,OAAOwc,eAAe1c,EAAOsnB,aAAarkB,UAAW,OAAQ,CAC3D2hB,MAQE,YAPmBrd,IAAf9G,KAAK6yJ,QACiB,UAApB7yJ,KAAKslB,MAAMD,KACbrlB,KAAK6yJ,MAAQ7yJ,KAAK+yJ,IAAID,iBAAiB9yJ,KAAKslB,OAE5CtlB,KAAK6yJ,MAAQ,MAGV7yJ,KAAK6yJ,KACb,GAEJ,CACF,CAEM,SAASa,GAAan0J,GAC3B,IAAKA,EAAOwd,kBACV,OAGF,MAAM42I,EAAep0J,EAAOwd,kBAAkBva,UAAU6f,SACxD9iB,EAAOwd,kBAAkBva,UAAU6f,SAAW,WAC5C,MAAOyvB,EAAU8hH,EAAQC,GAASnrJ,UAIlC,GAAIA,UAAUpE,OAAS,GAAyB,mBAAbwtC,EACjC,OAAO6hH,EAAa7wJ,MAAM9C,KAAM0I,WAKlC,GAA4B,IAAxBirJ,EAAarvJ,SAAsC,IAArBoE,UAAUpE,QACpB,mBAAbwtC,GACT,OAAO6hH,EAAa7wJ,MAAM9C,KAAM,IAGlC,MAAM8zJ,EAAkB,SAAShnI,GAC/B,MAAMC,EAAiB,CAAC,EAiBxB,OAhBgBD,EAASjoB,SACjBzB,SAAQyf,IACd,MAAMmK,EAAgB,CACpB5gB,GAAIyW,EAAOzW,GACX/C,UAAWwZ,EAAOxZ,UAClB2H,KAAM,CACJ+iJ,eAAgB,kBAChBC,gBAAiB,oBACjBnxI,EAAO7R,OAAS6R,EAAO7R,MAE3B6R,EAAOtc,QAAQnD,SAAQkK,IACrB0f,EAAc1f,GAAQuV,EAAOoK,KAAK3f,EAAlC,IAEFyf,EAAeC,EAAc5gB,IAAM4gB,CAAnC,IAGKD,CACR,EAGKknI,EAAe,SAASnyI,GAC5B,OAAO,IAAIssC,IAAI3uD,OAAO6I,KAAKwZ,GAAOrQ,KAAI7J,GAAO,CAACA,EAAKka,EAAMla,MAC1D,EAED,GAAIc,UAAUpE,QAAU,EAAG,CACzB,MAAM4vJ,EAA0B,SAASpnI,GACvC8mI,EAAOK,EAAaH,EAAgBhnI,IACrC,EAED,OAAO6mI,EAAa7wJ,MAAM9C,KAAM,CAACk0J,EAC/BpiH,GACH,CAGD,OAAO,IAAI13B,SAAQ,CAACC,EAASC,KAC3Bq5I,EAAa7wJ,MAAM9C,KAAM,CACvB,SAAS8sB,GACPzS,EAAQ45I,EAAaH,EAAgBhnI,IACtC,EAAExS,GAHL,IAICK,KAAKi5I,EAAQC,EACjB,CACF,CAEM,SAASM,GAA2B50J,GACzC,KAAwB,iBAAXA,GAAuBA,EAAOwd,mBACvCxd,EAAOsnB,cAAgBtnB,EAAOq4F,gBAChC,OAIF,KAAM,aAAcr4F,EAAOsnB,aAAarkB,WAAY,CAClD,MAAMixJ,EAAiBl0J,EAAOwd,kBAAkBva,UAAUwwJ,WACtDS,IACFl0J,EAAOwd,kBAAkBva,UAAUwwJ,WAAa,WAC9C,MAAM3mB,EAAUonB,EAAe3wJ,MAAM9C,KAAM,IAE3C,OADAqsI,EAAQjpI,SAAQokB,GAAUA,EAAOurI,IAAM/yJ,OAChCqsI,CACR,GAGH,MAAM6mB,EAAe3zJ,EAAOwd,kBAAkBva,UAAU+2I,SACpD2Z,IACF3zJ,EAAOwd,kBAAkBva,UAAU+2I,SAAW,WAC5C,MAAM/xH,EAAS0rI,EAAapwJ,MAAM9C,KAAM0I,WAExC,OADA8e,EAAOurI,IAAM/yJ,KACNwnB,CACR,GAEHjoB,EAAOsnB,aAAarkB,UAAU6f,SAAW,WACvC,MAAMmF,EAASxnB,KACf,OAAOA,KAAK+yJ,IAAI1wI,WAAW1H,MAAK9V,GAK9B+/D,GAAkB//D,EAAQ2iB,EAAOlC,OAAO,IAC3C,CACF,CAGD,KAAM,aAAc/lB,EAAOq4F,eAAep1F,WAAY,CACpD,MAAM4xJ,EAAmB70J,EAAOwd,kBAAkBva,UAAUgwJ,aACxD4B,IACF70J,EAAOwd,kBAAkBva,UAAUgwJ,aACjC,WACE,MAAM6B,EAAYD,EAAiBtxJ,MAAM9C,KAAM,IAE/C,OADAq0J,EAAUjxJ,SAAQ6gC,GAAYA,EAAS8uH,IAAM/yJ,OACtCq0J,CACR,GAELzvF,GAA8BrlE,EAAQ,SAASqO,IAC7CA,EAAEq2B,SAAS8uH,IAAMnlJ,EAAE0mJ,WACZ1mJ,KAETrO,EAAOq4F,eAAep1F,UAAU6f,SAAW,WACzC,MAAM4hB,EAAWjkC,KACjB,OAAOA,KAAK+yJ,IAAI1wI,WAAW1H,MAAK9V,GAC9B+/D,GAAkB//D,EAAQo/B,EAAS3e,OAAO,IAC7C,CACF,CAED,KAAM,aAAc/lB,EAAOsnB,aAAarkB,cACpC,aAAcjD,EAAOq4F,eAAep1F,WACtC,OAIF,MAAMmxJ,EAAep0J,EAAOwd,kBAAkBva,UAAU6f,SACxD9iB,EAAOwd,kBAAkBva,UAAU6f,SAAW,WAC5C,GAAI3Z,UAAUpE,OAAS,GACnBoE,UAAU,aAAcnJ,EAAOg1J,iBAAkB,CACnD,MAAMjvI,EAAQ5c,UAAU,GACxB,IAAI8e,EACAyc,EACApgB,EAoBJ,OAnBA7jB,KAAKgzJ,aAAa5vJ,SAAQsK,IACpBA,EAAE4X,QAAUA,IACVkC,EACF3D,GAAM,EAEN2D,EAAS9Z,EAEZ,IAEH1N,KAAKwyJ,eAAepvJ,SAAQ2K,IACtBA,EAAEuX,QAAUA,IACV2e,EACFpgB,GAAM,EAENogB,EAAWl2B,GAGRA,EAAEuX,QAAUA,KAEjBzB,GAAQ2D,GAAUyc,EACb7pB,QAAQE,OAAO,IAAIq3I,aACxB,4DACA,uBACOnqI,EACFA,EAAOnF,WACL4hB,EACFA,EAAS5hB,WAEXjI,QAAQE,OAAO,IAAIq3I,aACxB,gDACA,sBACH,CACD,OAAOgC,EAAa7wJ,MAAM9C,KAAM0I,UACjC,CACF,CAEM,SAAS8rJ,GAAkCj1J,GAIhDA,EAAOwd,kBAAkBva,UAAUiyJ,gBACjC,WAEE,OADAz0J,KAAK00J,qBAAuB10J,KAAK00J,sBAAwB,CAAC,EACnDj1J,OAAO6I,KAAKtI,KAAK00J,sBACrBjjJ,KAAIuyH,GAAYhkI,KAAK00J,qBAAqB1wB,GAAU,IACxD,EAEH,MAAMkvB,EAAe3zJ,EAAOwd,kBAAkBva,UAAU+2I,SACxDh6I,EAAOwd,kBAAkBva,UAAU+2I,SACjC,SAAkBj0H,EAAOtT,GACvB,IAAKA,EACH,OAAOkhJ,EAAapwJ,MAAM9C,KAAM0I,WAElC1I,KAAK00J,qBAAuB10J,KAAK00J,sBAAwB,CAAC,EAE1D,MAAMltI,EAAS0rI,EAAapwJ,MAAM9C,KAAM0I,WAMxC,OALK1I,KAAK00J,qBAAqB1iJ,EAAO5F,KAE+B,IAA1DpM,KAAK00J,qBAAqB1iJ,EAAO5F,IAAI3B,QAAQ+c,IACtDxnB,KAAK00J,qBAAqB1iJ,EAAO5F,IAAIxK,KAAK4lB,GAF1CxnB,KAAK00J,qBAAqB1iJ,EAAO5F,IAAM,CAAC4F,EAAQwV,GAI3CA,CACR,EAEH,MAAM6rI,EAAgB9zJ,EAAOwd,kBAAkBva,UAAU8wJ,UACzD/zJ,EAAOwd,kBAAkBva,UAAU8wJ,UAAY,SAAmBthJ,GAChEhS,KAAK00J,qBAAuB10J,KAAK00J,sBAAwB,CAAC,EAE1D1iJ,EAAOoT,YAAYhiB,SAAQkiB,IAEzB,GADsBtlB,KAAKgzJ,aAAav+I,MAAK/G,GAAKA,EAAE4X,QAAUA,IAE5D,MAAM,IAAIqsI,aAAa,wBACnB,qBACL,IAEH,MAAMgD,EAAkB30J,KAAKgzJ,aAC7BK,EAAcvwJ,MAAM9C,KAAM0I,WAC1B,MAAMksJ,EAAa50J,KAAKgzJ,aACrBjiJ,QAAO8jJ,IAAqD,IAAxCF,EAAgBlqJ,QAAQoqJ,KAC/C70J,KAAK00J,qBAAqB1iJ,EAAO5F,IAAM,CAAC4F,GAAQjG,OAAO6oJ,EACxD,EAED,MAAMrB,EAAmBh0J,EAAOwd,kBAAkBva,UAAUgxJ,aAC5Dj0J,EAAOwd,kBAAkBva,UAAUgxJ,aACjC,SAAsBxhJ,GAGpB,OAFAhS,KAAK00J,qBAAuB10J,KAAK00J,sBAAwB,CAAC,SACnD10J,KAAK00J,qBAAqB1iJ,EAAO5F,IACjCmnJ,EAAiBzwJ,MAAM9C,KAAM0I,UACrC,EAEH,MAAMyqJ,EAAkB5zJ,EAAOwd,kBAAkBva,UAAU4wJ,YAC3D7zJ,EAAOwd,kBAAkBva,UAAU4wJ,YACjC,SAAqB5rI,GAanB,OAZAxnB,KAAK00J,qBAAuB10J,KAAK00J,sBAAwB,CAAC,EACtDltI,GACF/nB,OAAO6I,KAAKtI,KAAK00J,sBAAsBtxJ,SAAQ4gI,IAC7C,MAAMh+C,EAAMhmF,KAAK00J,qBAAqB1wB,GAAUv5H,QAAQ+c,IAC3C,IAATw+D,GACFhmF,KAAK00J,qBAAqB1wB,GAAUp5H,OAAOo7E,EAAK,GAEC,IAA/ChmF,KAAK00J,qBAAqB1wB,GAAU1/H,eAC/BtE,KAAK00J,qBAAqB1wB,EAClC,IAGEmvB,EAAgBrwJ,MAAM9C,KAAM0I,UACpC,CACJ,CAEM,SAASosJ,GAAwBv1J,EAAQuwJ,GAC9C,IAAKvwJ,EAAOwd,kBACV,OAGF,GAAIxd,EAAOwd,kBAAkBva,UAAU+2I,UACnCuW,EAAen9I,SAAW,GAC5B,OAAO6hJ,GAAkCj1J,GAK3C,MAAMw1J,EAAsBx1J,EAAOwd,kBAAkBva,UAChDiyJ,gBACLl1J,EAAOwd,kBAAkBva,UAAUiyJ,gBACjC,WACE,MAAMO,EAAgBD,EAAoBjyJ,MAAM9C,MAEhD,OADAA,KAAKi1J,gBAAkBj1J,KAAKi1J,iBAAmB,CAAC,EACzCD,EAAcvjJ,KAAIO,GAAUhS,KAAKi1J,gBAAgBjjJ,EAAO5F,KAChE,EAEH,MAAMinJ,EAAgB9zJ,EAAOwd,kBAAkBva,UAAU8wJ,UACzD/zJ,EAAOwd,kBAAkBva,UAAU8wJ,UAAY,SAAmBthJ,GAahE,GAZAhS,KAAKk1J,SAAWl1J,KAAKk1J,UAAY,CAAC,EAClCl1J,KAAKi1J,gBAAkBj1J,KAAKi1J,iBAAmB,CAAC,EAEhDjjJ,EAAOoT,YAAYhiB,SAAQkiB,IAEzB,GADsBtlB,KAAKgzJ,aAAav+I,MAAK/G,GAAKA,EAAE4X,QAAUA,IAE5D,MAAM,IAAIqsI,aAAa,wBACnB,qBACL,KAIE3xJ,KAAKi1J,gBAAgBjjJ,EAAO5F,IAAK,CACpC,MAAM+oJ,EAAY,IAAI51J,EAAO2yJ,YAAYlgJ,EAAOoT,aAChDplB,KAAKk1J,SAASljJ,EAAO5F,IAAM+oJ,EAC3Bn1J,KAAKi1J,gBAAgBE,EAAU/oJ,IAAM4F,EACrCA,EAASmjJ,CACV,CACD9B,EAAcvwJ,MAAM9C,KAAM,CAACgS,GAC5B,EAED,MAAMuhJ,EAAmBh0J,EAAOwd,kBAAkBva,UAAUgxJ,aA6D5D,SAAS4B,EAAwBjzI,EAAI0F,GACnC,IAAIjX,EAAMiX,EAAYjX,IAOtB,OANAnR,OAAO6I,KAAK6Z,EAAG8yI,iBAAmB,IAAI7xJ,SAAQiyJ,IAC5C,MAAMC,EAAiBnzI,EAAG8yI,gBAAgBI,GACpCE,EAAiBpzI,EAAG+yI,SAASI,EAAelpJ,IAClDwE,EAAMA,EAAI3O,QAAQ,IAAIgN,OAAOsmJ,EAAenpJ,GAAI,KAC5CkpJ,EAAelpJ,GADnB,IAGK,IAAIyL,sBAAsB,CAC/B7G,KAAM6W,EAAY7W,KAClBJ,OAEH,CAxEDrR,EAAOwd,kBAAkBva,UAAUgxJ,aACjC,SAAsBxhJ,GACpBhS,KAAKk1J,SAAWl1J,KAAKk1J,UAAY,CAAC,EAClCl1J,KAAKi1J,gBAAkBj1J,KAAKi1J,iBAAmB,CAAC,EAEhD1B,EAAiBzwJ,MAAM9C,KAAM,CAAEA,KAAKk1J,SAASljJ,EAAO5F,KAAO4F,WACpDhS,KAAKi1J,gBAAiBj1J,KAAKk1J,SAASljJ,EAAO5F,IAC9CpM,KAAKk1J,SAASljJ,EAAO5F,IAAIA,GAAK4F,EAAO5F,WAClCpM,KAAKk1J,SAASljJ,EAAO5F,GAC7B,EAEH7M,EAAOwd,kBAAkBva,UAAU+2I,SACjC,SAAkBj0H,EAAOtT,GACvB,GAA4B,WAAxBhS,KAAKoiB,eACP,MAAM,IAAIuvI,aACR,sDACA,qBAEJ,MAAM1vI,EAAU,GAAG/W,MAAMzD,KAAKiB,UAAW,GACzC,GAAuB,IAAnBuZ,EAAQ3d,SACP2d,EAAQ,GAAGmD,YAAY3Q,MAAKzI,GAAKA,IAAMsZ,IAG1C,MAAM,IAAIqsI,aACR,gHAEA,qBAIJ,GADsB3xJ,KAAKgzJ,aAAav+I,MAAK/G,GAAKA,EAAE4X,QAAUA,IAE5D,MAAM,IAAIqsI,aAAa,wBACnB,sBAGN3xJ,KAAKk1J,SAAWl1J,KAAKk1J,UAAY,CAAC,EAClCl1J,KAAKi1J,gBAAkBj1J,KAAKi1J,iBAAmB,CAAC,EAChD,MAAMO,EAAYx1J,KAAKk1J,SAASljJ,EAAO5F,IACvC,GAAIopJ,EAKFA,EAAUjc,SAASj0H,GAGnBlL,QAAQC,UAAUM,MAAK,KACrB3a,KAAKyyJ,cAAc,IAAIl7G,MAAM,qBAA7B,QAEG,CACL,MAAM49G,EAAY,IAAI51J,EAAO2yJ,YAAY,CAAC5sI,IAC1CtlB,KAAKk1J,SAASljJ,EAAO5F,IAAM+oJ,EAC3Bn1J,KAAKi1J,gBAAgBE,EAAU/oJ,IAAM4F,EACrChS,KAAKszJ,UAAU6B,EAChB,CACD,OAAOn1J,KAAKgzJ,aAAav+I,MAAK/G,GAAKA,EAAE4X,QAAUA,GAChD,EA8BH,CAAC,cAAe,gBAAgBliB,SAAQ,SAAS+jB,GAC/C,MAAMC,EAAe7nB,EAAOwd,kBAAkBva,UAAU2kB,GAClDsuI,EAAY,CAAC,CAACtuI,KAClB,MAAMzkB,EAAOgG,UAGb,OAFqBA,UAAUpE,QACH,mBAAjBoE,UAAU,GAEZ0e,EAAatkB,MAAM9C,KAAM,CAC7B6nB,IACC,MAAM1T,EAAOihJ,EAAwBp1J,KAAM6nB,GAC3CnlB,EAAK,GAAGI,MAAM,KAAM,CAACqR,GAArB,EAED0P,IACKnhB,EAAK,IACPA,EAAK,GAAGI,MAAM,KAAM+gB,EACrB,EACAnb,UAAU,KAGV0e,EAAatkB,MAAM9C,KAAM0I,WAC/BiS,MAAKkN,GAAeutI,EAAwBp1J,KAAM6nB,IACpD,GACDtoB,EAAOwd,kBAAkBva,UAAU2kB,GAAUsuI,EAAUtuI,EACxD,IAED,MAAMuuI,EACFn2J,EAAOwd,kBAAkBva,UAAUk3I,oBACvCn6I,EAAOwd,kBAAkBva,UAAUk3I,oBACjC,WACE,OAAKhxI,UAAUpE,QAAWoE,UAAU,GAAGsI,MAGvCtI,UAAU,GA7Cd,SAAiCyZ,EAAI0F,GACnC,IAAIjX,EAAMiX,EAAYjX,IAOtB,OANAnR,OAAO6I,KAAK6Z,EAAG8yI,iBAAmB,IAAI7xJ,SAAQiyJ,IAC5C,MAAMC,EAAiBnzI,EAAG8yI,gBAAgBI,GACpCE,EAAiBpzI,EAAG+yI,SAASI,EAAelpJ,IAClDwE,EAAMA,EAAI3O,QAAQ,IAAIgN,OAAOqmJ,EAAelpJ,GAAI,KAC5CmpJ,EAAenpJ,GADnB,IAGK,IAAIyL,sBAAsB,CAC/B7G,KAAM6W,EAAY7W,KAClBJ,OAEH,CAiCkB+kJ,CAAwB31J,KAAM0I,UAAU,IAChDgtJ,EAAwB5yJ,MAAM9C,KAAM0I,YAHlCgtJ,EAAwB5yJ,MAAM9C,KAAM0I,UAI9C,EAIH,MAAMktJ,EAAuBn2J,OAAOo2J,yBAChCt2J,EAAOwd,kBAAkBva,UAAW,oBACxC/C,OAAOwc,eAAe1c,EAAOwd,kBAAkBva,UAC3C,mBAAoB,CAClB2hB,MACE,MAAM0D,EAAc+tI,EAAqBzxI,IAAIrhB,MAAM9C,MACnD,MAAyB,KAArB6nB,EAAY7W,KACP6W,EAEFutI,EAAwBp1J,KAAM6nB,EACtC,IAGPtoB,EAAOwd,kBAAkBva,UAAU4wJ,YACjC,SAAqB5rI,GACnB,GAA4B,WAAxBxnB,KAAKoiB,eACP,MAAM,IAAIuvI,aACR,sDACA,qBAIJ,IAAKnqI,EAAOurI,IACV,MAAM,IAAIpB,aAAa,yFAC2B,aAGpD,GADgBnqI,EAAOurI,MAAQ/yJ,KAE7B,MAAM,IAAI2xJ,aAAa,6CACnB,sBAKN,IAAI3/I,EADJhS,KAAKk1J,SAAWl1J,KAAKk1J,UAAY,CAAC,EAElCz1J,OAAO6I,KAAKtI,KAAKk1J,UAAU9xJ,SAAQ0yJ,IAChB91J,KAAKk1J,SAASY,GAAU1wI,YACtC3Q,MAAK6Q,GAASkC,EAAOlC,QAAUA,MAEhCtT,EAAShS,KAAKk1J,SAASY,GACxB,IAGC9jJ,IACgC,IAA9BA,EAAOoT,YAAY9gB,OAGrBtE,KAAKwzJ,aAAaxzJ,KAAKi1J,gBAAgBjjJ,EAAO5F,KAG9C4F,EAAOohJ,YAAY5rI,EAAOlC,OAE5BtlB,KAAKyyJ,cAAc,IAAIl7G,MAAM,sBAEhC,CACJ,CAEM,SAASw+G,GAAmBx2J,EAAQuwJ,IACpCvwJ,EAAOwd,mBAAqBxd,EAAOy2J,0BAEtCz2J,EAAOwd,kBAAoBxd,EAAOy2J,yBAE/Bz2J,EAAOwd,mBAKR+yI,EAAen9I,QAAU,IAC3B,CAAC,sBAAuB,uBAAwB,mBAC3CvP,SAAQ,SAAS+jB,GAChB,MAAMC,EAAe7nB,EAAOwd,kBAAkBva,UAAU2kB,GAClDsuI,EAAY,CAAC,CAACtuI,KAIlB,OAHAze,UAAU,GAAK,IAAiB,oBAAXye,EACjB5nB,EAAO84I,gBACP94I,EAAOsY,uBAAuBnP,UAAU,IACrC0e,EAAatkB,MAAM9C,KAAM0I,UACjC,GACDnJ,EAAOwd,kBAAkBva,UAAU2kB,GAAUsuI,EAAUtuI,EACxD,GAER,CAGM,SAAS8uI,GAAqB12J,EAAQuwJ,GAC3ClrF,GAA8BrlE,EAAQ,qBAAqBqO,IACzD,MAAMuU,EAAKvU,EAAEo2B,OACb,KAAI8rH,EAAen9I,QAAU,IAAOwP,EAAG+zI,kBACI,WAAvC/zI,EAAG+zI,mBAAmBC,eACE,WAAtBh0I,EAAGC,eAIT,OAAOxU,CAAP,GAEH,CCjrBM,SAASiiJ,GAAiBtwJ,EAAQuwJ,GACvC,MAAM9yI,EAAYzd,GAAUA,EAAOyd,UAC7Bu3I,EAAmBh1J,GAAUA,EAAOg1J,iBAS1C,GAPAv3I,EAAUyL,aAAe,SAAS/D,EAAaigD,EAAWvjD,GAExDwjD,GAAiB,yBACb,uCACJ5nD,EAAUmJ,aAAasC,aAAa/D,GAAa/J,KAAKgqD,EAAWvjD,EAClE,IAEK0uI,EAAen9I,QAAU,IAC3B,oBAAqBqK,EAAUmJ,aAAayqI,2BAA4B,CAC1E,MAAMJ,EAAQ,SAASxpJ,EAAKkH,EAAGD,GACzBC,KAAKlH,KAASiH,KAAKjH,KACrBA,EAAIiH,GAAKjH,EAAIkH,UACNlH,EAAIkH,GAEd,EAEKkoJ,EAAqBp5I,EAAUmJ,aAAasC,aAC9C5lB,KAAKma,EAAUmJ,cAUnB,GATAnJ,EAAUmJ,aAAasC,aAAe,SAASza,GAM7C,MALiB,iBAANA,GAAqC,iBAAZA,EAAE25F,QACpC35F,EAAI/G,KAAKP,MAAMO,KAAK8B,UAAUiF,IAC9BwiJ,EAAMxiJ,EAAE25F,MAAO,kBAAmB,sBAClC6oD,EAAMxiJ,EAAE25F,MAAO,mBAAoB,wBAE9ByuD,EAAmBpoJ,EAC3B,EAEGumJ,GAAoBA,EAAiB/xJ,UAAU6zJ,YAAa,CAC9D,MAAMC,EAAoB/B,EAAiB/xJ,UAAU6zJ,YACrD9B,EAAiB/xJ,UAAU6zJ,YAAc,WACvC,MAAMrvJ,EAAMsvJ,EAAkBxzJ,MAAM9C,KAAM0I,WAG1C,OAFA8nJ,EAAMxpJ,EAAK,qBAAsB,mBACjCwpJ,EAAMxpJ,EAAK,sBAAuB,oBAC3BA,CACR,CACF,CAED,GAAIutJ,GAAoBA,EAAiB/xJ,UAAU+zJ,iBAAkB,CACnE,MAAMC,EACJjC,EAAiB/xJ,UAAU+zJ,iBAC7BhC,EAAiB/xJ,UAAU+zJ,iBAAmB,SAASvoJ,GAMrD,MALkB,UAAdhO,KAAKqlB,MAAiC,iBAANrX,IAClCA,EAAI/G,KAAKP,MAAMO,KAAK8B,UAAUiF,IAC9BwiJ,EAAMxiJ,EAAG,kBAAmB,sBAC5BwiJ,EAAMxiJ,EAAG,mBAAoB,wBAExBwoJ,EAAuB1zJ,MAAM9C,KAAM,CAACgO,GAC5C,CACF,CACF,CACF,CCxDM,SAAS4jJ,GAAoBryJ,EAAQk3J,GACtCl3J,EAAOyd,UAAUmJ,cACnB,oBAAqB5mB,EAAOyd,UAAUmJ,cAGlC5mB,EAAOyd,UAAUmJ,eAGvB5mB,EAAOyd,UAAUmJ,aAAawC,gBAC5B,SAAyBjE,GACvB,IAAMA,IAAeA,EAAY2rE,MAAQ,CACvC,MAAMxsE,EAAM,IAAI8tI,aAAa,0DAK7B,OAHA9tI,EAAIvW,KAAO,gBAEXuW,EAAIlC,KAAO,EACJvH,QAAQE,OAAOuJ,EACvB,CAMD,OAL0B,IAAtBa,EAAY2rE,MACd3rE,EAAY2rE,MAAQ,CAACqmE,YAAaD,GAElC/xI,EAAY2rE,MAAMqmE,YAAcD,EAE3Bl3J,EAAOyd,UAAUmJ,aAAasC,aAAa/D,EACnD,EACJ,CCrBM,SAAS0tI,GAAY7yJ,GACJ,iBAAXA,GAAuBA,EAAOo3J,eACpC,aAAcp3J,EAAOo3J,cAAcn0J,aAClC,gBAAiBjD,EAAOo3J,cAAcn0J,YAC1C/C,OAAOwc,eAAe1c,EAAOo3J,cAAcn0J,UAAW,cAAe,CACnE2hB,MACE,MAAO,CAAC8f,SAAUjkC,KAAKikC,SACxB,GAGN,CAEM,SAAS8xH,GAAmBx2J,EAAQuwJ,GACzC,GAAsB,iBAAXvwJ,IACLA,EAAOwd,oBAAqBxd,EAAOsd,qBACvC,QAEGtd,EAAOwd,mBAAqBxd,EAAOsd,uBAEtCtd,EAAOwd,kBAAoBxd,EAAOsd,sBAGhCizI,EAAen9I,QAAU,IAE3B,CAAC,sBAAuB,uBAAwB,mBAC3CvP,SAAQ,SAAS+jB,GAChB,MAAMC,EAAe7nB,EAAOwd,kBAAkBva,UAAU2kB,GAClDsuI,EAAY,CAAC,CAACtuI,KAIlB,OAHAze,UAAU,GAAK,IAAiB,oBAAXye,EACjB5nB,EAAO84I,gBACP94I,EAAOsY,uBAAuBnP,UAAU,IACrC0e,EAAatkB,MAAM9C,KAAM0I,UACjC,GACDnJ,EAAOwd,kBAAkBva,UAAU2kB,GAAUsuI,EAAUtuI,EACxD,IAGP,MAAMyvI,EAAmB,CACvBC,WAAY,cACZC,YAAa,eACbC,cAAe,iBACfhD,eAAgB,kBAChBC,gBAAiB,oBAGbgD,EAAiBz3J,EAAOwd,kBAAkBva,UAAU6f,SAC1D9iB,EAAOwd,kBAAkBva,UAAU6f,SAAW,WAC5C,MAAOyvB,EAAU8hH,EAAQC,GAASnrJ,UAClC,OAAOsuJ,EAAel0J,MAAM9C,KAAM,CAAC8xC,GAAY,OAC5Cn3B,MAAKmH,IACJ,GAAIguI,EAAen9I,QAAU,KAAOihJ,EAGlC,IACE9xI,EAAM1e,SAAQ6pB,IACZA,EAAKjc,KAAO4lJ,EAAiB3pI,EAAKjc,OAASic,EAAKjc,IAAhD,GAEH,CAAC,MAAOpD,GACP,GAAe,cAAXA,EAAEN,KACJ,MAAMM,EAGRkU,EAAM1e,SAAQ,CAAC6pB,EAAMnoB,KACnBgd,EAAMglB,IAAIhiC,EAAGrF,OAAOC,OAAO,CAAC,EAAGutB,EAAM,CACnCjc,KAAM4lJ,EAAiB3pI,EAAKjc,OAASic,EAAKjc,OAD5C,GAIH,CAEH,OAAO8Q,CAAP,IAEDnH,KAAKi5I,EAAQC,EACjB,CACF,CAEM,SAASoD,GAAmB13J,GACjC,GAAwB,iBAAXA,IAAuBA,EAAOwd,oBACvCxd,EAAOsnB,aACT,OAEF,GAAItnB,EAAOsnB,cAAgB,aAActnB,EAAOsnB,aAAarkB,UAC3D,OAEF,MAAMixJ,EAAiBl0J,EAAOwd,kBAAkBva,UAAUwwJ,WACtDS,IACFl0J,EAAOwd,kBAAkBva,UAAUwwJ,WAAa,WAC9C,MAAM3mB,EAAUonB,EAAe3wJ,MAAM9C,KAAM,IAE3C,OADAqsI,EAAQjpI,SAAQokB,GAAUA,EAAOurI,IAAM/yJ,OAChCqsI,CACR,GAGH,MAAM6mB,EAAe3zJ,EAAOwd,kBAAkBva,UAAU+2I,SACpD2Z,IACF3zJ,EAAOwd,kBAAkBva,UAAU+2I,SAAW,WAC5C,MAAM/xH,EAAS0rI,EAAapwJ,MAAM9C,KAAM0I,WAExC,OADA8e,EAAOurI,IAAM/yJ,KACNwnB,CACR,GAEHjoB,EAAOsnB,aAAarkB,UAAU6f,SAAW,WACvC,OAAOriB,KAAKslB,MAAQtlB,KAAK+yJ,IAAI1wI,SAASriB,KAAKslB,OACvClL,QAAQC,QAAQ,IAAI+zC,IACzB,CACF,CAEM,SAAS8oG,GAAqB33J,GACnC,GAAwB,iBAAXA,IAAuBA,EAAOwd,oBACvCxd,EAAOsnB,aACT,OAEF,GAAItnB,EAAOsnB,cAAgB,aAActnB,EAAOq4F,eAAep1F,UAC7D,OAEF,MAAM4xJ,EAAmB70J,EAAOwd,kBAAkBva,UAAUgwJ,aACxD4B,IACF70J,EAAOwd,kBAAkBva,UAAUgwJ,aAAe,WAChD,MAAM6B,EAAYD,EAAiBtxJ,MAAM9C,KAAM,IAE/C,OADAq0J,EAAUjxJ,SAAQ6gC,GAAYA,EAAS8uH,IAAM/yJ,OACtCq0J,CACR,GAEHzvF,GAA8BrlE,EAAQ,SAASqO,IAC7CA,EAAEq2B,SAAS8uH,IAAMnlJ,EAAE0mJ,WACZ1mJ,KAETrO,EAAOq4F,eAAep1F,UAAU6f,SAAW,WACzC,OAAOriB,KAAK+yJ,IAAI1wI,SAASriB,KAAKslB,MAC/B,CACF,CAEM,SAAS6xI,GAAiB53J,GAC1BA,EAAOwd,qBACR,iBAAkBxd,EAAOwd,kBAAkBva,aAG/CjD,EAAOwd,kBAAkBva,UAAUgxJ,aACjC,SAAsBxhJ,GACpB4yD,GAAiB,eAAgB,eACjC5kE,KAAKgzJ,aAAa5vJ,SAAQokB,IACpBA,EAAOlC,OAAStT,EAAOoT,YAAYsI,SAASlG,EAAOlC,QACrDtlB,KAAKozJ,YAAY5rI,EAClB,GAEJ,EACJ,CAEM,SAAS4vI,GAAmB73J,GAG7BA,EAAO83J,cAAgB93J,EAAO+3J,iBAChC/3J,EAAO+3J,eAAiB/3J,EAAO83J,YAElC,CAEM,SAASE,GAAmBh4J,GAIjC,GAAwB,iBAAXA,IAAuBA,EAAOwd,kBACzC,OAEF,MAAMy6I,EAAqBj4J,EAAOwd,kBAAkBva,UAAUi1J,eAC1DD,IACFj4J,EAAOwd,kBAAkBva,UAAUi1J,eACjC,WACEz3J,KAAK03J,sBAAwB,GAC7B,MAAMC,EAAiBjvJ,UAAU,GAC3BkvJ,EAAqBD,GACD,kBAAmBA,EACzCC,GAEFD,EAAeE,cAAcz0J,SAAS00J,IACpC,GAAI,QAASA,IACM,oBACHnnJ,KAAKmnJ,EAActlF,KAC/B,MAAM,IAAI92D,UAAU,+BAGxB,GAAI,0BAA2Bo8I,KACvB35G,WAAW25G,EAAcC,wBAA0B,GACvD,MAAM,IAAIhxH,WAAW,2CAGzB,GAAI,iBAAkB+wH,KACd35G,WAAW25G,EAAcE,eAAiB,GAC9C,MAAM,IAAIjxH,WAAW,+BAExB,IAGL,MAAMxf,EAAciwI,EAAmB10J,MAAM9C,KAAM0I,WACnD,GAAIkvJ,EAAoB,CAQtB,MAAM,OAACpwI,GAAUD,EACXvY,EAASwY,EAAOywI,mBAChB,cAAejpJ,IAEY,IAA5BA,EAAOkpJ,UAAU5zJ,QAC2B,IAA5C7E,OAAO6I,KAAK0G,EAAOkpJ,UAAU,IAAI5zJ,UACpC0K,EAAOkpJ,UAAYP,EAAeE,cAClCrwI,EAAOqwI,cAAgBF,EAAeE,cACtC73J,KAAK03J,sBAAsB91J,KAAK4lB,EAAOR,cAAchY,GAClD2L,MAAK,YACG6M,EAAOqwI,aAAd,IACCj0I,OAAM,YACA4D,EAAOqwI,aAAd,KAIP,CACD,OAAOtwI,CACR,EAEN,CAEM,SAAS4wI,GAAkB54J,GAChC,GAAwB,iBAAXA,IAAuBA,EAAOsnB,aACzC,OAEF,MAAMuxI,EAAoB74J,EAAOsnB,aAAarkB,UAAUy1J,cACpDG,IACF74J,EAAOsnB,aAAarkB,UAAUy1J,cAC5B,WACE,MAAMjpJ,EAASopJ,EAAkBt1J,MAAM9C,KAAM0I,WAI7C,MAHM,cAAesG,IACnBA,EAAOkpJ,UAAY,GAAGnsJ,OAAO/L,KAAK63J,eAAiB,CAAC,CAAC,KAEhD7oJ,CACR,EAEN,CAEM,SAASqpJ,GAAgB94J,GAI9B,GAAwB,iBAAXA,IAAuBA,EAAOwd,kBACzC,OAEF,MAAMu7I,EAAkB/4J,EAAOwd,kBAAkBva,UAAUg3I,YAC3Dj6I,EAAOwd,kBAAkBva,UAAUg3I,YAAc,WAC/C,OAAIx5I,KAAK03J,uBAAyB13J,KAAK03J,sBAAsBpzJ,OACpD8V,QAAQ0c,IAAI92B,KAAK03J,uBACvB/8I,MAAK,IACG29I,EAAgBx1J,MAAM9C,KAAM0I,aAEpCohJ,SAAQ,KACP9pJ,KAAK03J,sBAAwB,EAA7B,IAGGY,EAAgBx1J,MAAM9C,KAAM0I,UACpC,CACF,CAEM,SAAS6vJ,GAAiBh5J,GAI/B,GAAwB,iBAAXA,IAAuBA,EAAOwd,kBACzC,OAEF,MAAMy7I,EAAmBj5J,EAAOwd,kBAAkBva,UAAUy8I,aAC5D1/I,EAAOwd,kBAAkBva,UAAUy8I,aAAe,WAChD,OAAIj/I,KAAK03J,uBAAyB13J,KAAK03J,sBAAsBpzJ,OACpD8V,QAAQ0c,IAAI92B,KAAK03J,uBACvB/8I,MAAK,IACG69I,EAAiB11J,MAAM9C,KAAM0I,aAErCohJ,SAAQ,KACP9pJ,KAAK03J,sBAAwB,EAA7B,IAGGc,EAAiB11J,MAAM9C,KAAM0I,UACrC,CACF,CC7RM,SAAS+vJ,GAAoBl5J,GAClC,GAAsB,iBAAXA,GAAwBA,EAAOwd,kBAA1C,CAYA,GATM,oBAAqBxd,EAAOwd,kBAAkBva,YAClDjD,EAAOwd,kBAAkBva,UAAUiyJ,gBACjC,WAIE,OAHKz0J,KAAK04J,gBACR14J,KAAK04J,cAAgB,IAEhB14J,KAAK04J,aACb,KAEC,cAAen5J,EAAOwd,kBAAkBva,WAAY,CACxD,MAAMm2J,EAAYp5J,EAAOwd,kBAAkBva,UAAU+2I,SACrDh6I,EAAOwd,kBAAkBva,UAAU8wJ,UAAY,SAAmBthJ,GAC3DhS,KAAK04J,gBACR14J,KAAK04J,cAAgB,IAElB14J,KAAK04J,cAAchrI,SAAS1b,IAC/BhS,KAAK04J,cAAc92J,KAAKoQ,GAI1BA,EAAO0/I,iBAAiBtuJ,SAAQkiB,GAASqzI,EAAUlxJ,KAAKzH,KAAMslB,EAC5DtT,KACFA,EAAOmzH,iBAAiB/hI,SAAQkiB,GAASqzI,EAAUlxJ,KAAKzH,KAAMslB,EAC5DtT,IACH,EAEDzS,EAAOwd,kBAAkBva,UAAU+2I,SACjC,SAAkBj0H,GAAmB,2BAATrD,EAAS,iCAATA,EAAS,kBAUnC,OATIA,GACFA,EAAQ7e,SAAS4O,IACVhS,KAAK04J,cAEE14J,KAAK04J,cAAchrI,SAAS1b,IACtChS,KAAK04J,cAAc92J,KAAKoQ,GAFxBhS,KAAK04J,cAAgB,CAAC1mJ,EAGvB,IAGE2mJ,EAAU71J,MAAM9C,KAAM0I,UAC9B,CACJ,CACK,iBAAkBnJ,EAAOwd,kBAAkBva,YAC/CjD,EAAOwd,kBAAkBva,UAAUgxJ,aACjC,SAAsBxhJ,GACfhS,KAAK04J,gBACR14J,KAAK04J,cAAgB,IAEvB,MAAMpiJ,EAAQtW,KAAK04J,cAAcjuJ,QAAQuH,GACzC,IAAe,IAAXsE,EACF,OAEFtW,KAAK04J,cAAc9tJ,OAAO0L,EAAO,GACjC,MAAM4W,EAASlb,EAAOoT,YACtBplB,KAAKgzJ,aAAa5vJ,SAAQokB,IACpB0F,EAAOQ,SAASlG,EAAOlC,QACzBtlB,KAAKozJ,YAAY5rI,EAClB,GAEJ,EA1DJ,CA4DF,CAEM,SAASoxI,GAAqBr5J,GACnC,GAAsB,iBAAXA,GAAwBA,EAAOwd,oBAGpC,qBAAsBxd,EAAOwd,kBAAkBva,YACnDjD,EAAOwd,kBAAkBva,UAAUq2J,iBACjC,WACE,OAAO74J,KAAK84J,eAAiB94J,KAAK84J,eAAiB,EACpD,KAEC,gBAAiBv5J,EAAOwd,kBAAkBva,YAAY,CAC1D/C,OAAOwc,eAAe1c,EAAOwd,kBAAkBva,UAAW,cAAe,CACvE2hB,MACE,OAAOnkB,KAAK+4J,YACb,EACDjyH,IAAIhsB,GACE9a,KAAK+4J,eACP/4J,KAAK6mC,oBAAoB,YAAa7mC,KAAK+4J,cAC3C/4J,KAAK6mC,oBAAoB,QAAS7mC,KAAKg5J,mBAEzCh5J,KAAKklB,iBAAiB,YAAallB,KAAK+4J,aAAej+I,GACvD9a,KAAKklB,iBAAiB,QAASllB,KAAKg5J,iBAAoBprJ,IACtDA,EAAEqU,QAAQ7e,SAAQ4O,IAIhB,GAHKhS,KAAK84J,iBACR94J,KAAK84J,eAAiB,IAEpB94J,KAAK84J,eAAeprI,SAAS1b,GAC/B,OAEFhS,KAAK84J,eAAel3J,KAAKoQ,GACzB,MAAM1O,EAAQ,IAAIi0C,MAAM,aACxBj0C,EAAM0O,OAASA,EACfhS,KAAKyyJ,cAAcnvJ,EAAnB,GAVF,EAaH,IAEH,MAAMgvJ,EACJ/yJ,EAAOwd,kBAAkBva,UAAU03I,qBACrC36I,EAAOwd,kBAAkBva,UAAU03I,qBACjC,WACE,MAAM/3H,EAAKniB,KAiBX,OAhBKA,KAAKg5J,kBACRh5J,KAAKklB,iBAAiB,QAASllB,KAAKg5J,iBAAmB,SAASprJ,GAC9DA,EAAEqU,QAAQ7e,SAAQ4O,IAIhB,GAHKmQ,EAAG22I,iBACN32I,EAAG22I,eAAiB,IAElB32I,EAAG22I,eAAeruJ,QAAQuH,IAAW,EACvC,OAEFmQ,EAAG22I,eAAel3J,KAAKoQ,GACvB,MAAM1O,EAAQ,IAAIi0C,MAAM,aACxBj0C,EAAM0O,OAASA,EACfmQ,EAAGswI,cAAcnvJ,EAAjB,GAEH,GAEIgvJ,EAAyBxvJ,MAAMqf,EAAIzZ,UAC3C,CACJ,CACF,CAEM,SAASuwJ,GAAiB15J,GAC/B,GAAsB,iBAAXA,IAAwBA,EAAOwd,kBACxC,OAEF,MAAMva,EAAYjD,EAAOwd,kBAAkBva,UACrC81J,EAAkB91J,EAAUg3I,YAC5Bgf,EAAmBh2J,EAAUy8I,aAC7BvF,EAAsBl3I,EAAUk3I,oBAChCQ,EAAuB13I,EAAU03I,qBACjC3B,EAAkB/1I,EAAU+1I,gBAElC/1I,EAAUg3I,YACR,SAAqB0f,EAAiBvhC,GACpC,MAAM5wH,EAAW2B,UAAUpE,QAAU,EAAKoE,UAAU,GAAKA,UAAU,GAC7DwqC,EAAUolH,EAAgBx1J,MAAM9C,KAAM,CAAC+G,IAC7C,OAAK4wH,GAGLzkF,EAAQv4B,KAAKu+I,EAAiBvhC,GACvBv9G,QAAQC,WAHN64B,CAIV,EAEH1wC,EAAUy8I,aACR,SAAsBia,EAAiBvhC,GACrC,MAAM5wH,EAAW2B,UAAUpE,QAAU,EAAKoE,UAAU,GAAKA,UAAU,GAC7DwqC,EAAUslH,EAAiB11J,MAAM9C,KAAM,CAAC+G,IAC9C,OAAK4wH,GAGLzkF,EAAQv4B,KAAKu+I,EAAiBvhC,GACvBv9G,QAAQC,WAHN64B,CAIV,EAEH,IAAIimH,EAAe,SAAStxI,EAAaqxI,EAAiBvhC,GACxD,MAAMzkF,EAAUwmG,EAAoB52I,MAAM9C,KAAM,CAAC6nB,IACjD,OAAK8vG,GAGLzkF,EAAQv4B,KAAKu+I,EAAiBvhC,GACvBv9G,QAAQC,WAHN64B,CAIV,EACD1wC,EAAUk3I,oBAAsByf,EAEhCA,EAAe,SAAStxI,EAAaqxI,EAAiBvhC,GACpD,MAAMzkF,EAAUgnG,EAAqBp3I,MAAM9C,KAAM,CAAC6nB,IAClD,OAAK8vG,GAGLzkF,EAAQv4B,KAAKu+I,EAAiBvhC,GACvBv9G,QAAQC,WAHN64B,CAIV,EACD1wC,EAAU03I,qBAAuBif,EAEjCA,EAAe,SAASh0I,EAAW+zI,EAAiBvhC,GAClD,MAAMzkF,EAAUqlG,EAAgBz1I,MAAM9C,KAAM,CAACmlB,IAC7C,OAAKwyG,GAGLzkF,EAAQv4B,KAAKu+I,EAAiBvhC,GACvBv9G,QAAQC,WAHN64B,CAIV,EACD1wC,EAAU+1I,gBAAkB4gB,CAC7B,CAEM,SAAStJ,GAAiBtwJ,GAC/B,MAAMyd,EAAYzd,GAAUA,EAAOyd,UAEnC,GAAIA,EAAUmJ,cAAgBnJ,EAAUmJ,aAAasC,aAAc,CAEjE,MAAMtC,EAAenJ,EAAUmJ,aACzBizI,EAAgBjzI,EAAasC,aAAa5lB,KAAKsjB,GACrDnJ,EAAUmJ,aAAasC,aAAgB/D,GAC9B00I,EAAcC,GAAgB30I,GAExC,EAEI1H,EAAUyL,cAAgBzL,EAAUmJ,cACvCnJ,EAAUmJ,aAAasC,eACvBzL,EAAUyL,aAAe,SAAsB/D,EAAa0D,EAAIkxI,GAC9Dt8I,EAAUmJ,aAAasC,aAAa/D,GACnC/J,KAAKyN,EAAIkxI,EACX,EAACz2J,KAAKma,GAEV,CAEM,SAASq8I,GAAgB30I,GAC9B,OAAIA,QAAqC5d,IAAtB4d,EAAY2rE,MACtB5wF,OAAOC,OAAO,CAAC,EACpBglB,EACA,CAAC2rE,MAAOzrB,GAAoBlgD,EAAY2rE,SAIrC3rE,CACR,CAEM,SAAS60I,GAAqBh6J,GACnC,IAAKA,EAAOwd,kBACV,OAGF,MAAMy8I,EAAqBj6J,EAAOwd,kBAClCxd,EAAOwd,kBACL,SAA2Bu1H,EAAUmnB,GACnC,GAAInnB,GAAYA,EAASxtH,WAAY,CACnC,MAAM40I,EAAgB,GACtB,IAAK,IAAI50J,EAAI,EAAGA,EAAIwtI,EAASxtH,WAAWxgB,OAAQQ,IAAK,CACnD,IAAIigB,EAASutH,EAASxtH,WAAWhgB,IAC5BigB,EAAOvd,eAAe,SACvBud,EAAOvd,eAAe,QACxBo9D,GAAiB,mBAAoB,qBACrC7/C,EAAS9d,KAAKP,MAAMO,KAAK8B,UAAUgc,IACnCA,EAAOk/H,KAAOl/H,EAAOhF,WACdgF,EAAOhF,IACd25I,EAAc93J,KAAKmjB,IAEnB20I,EAAc93J,KAAK0wI,EAASxtH,WAAWhgB,GAE1C,CACDwtI,EAASxtH,WAAa40I,CACvB,CACD,OAAO,IAAIF,EAAmBlnB,EAAUmnB,EACzC,EACHl6J,EAAOwd,kBAAkBva,UAAYg3J,EAAmBh3J,UAEpD,wBAAyBg3J,GAC3B/5J,OAAOwc,eAAe1c,EAAOwd,kBAAmB,sBAAuB,CACrEoH,IAAG,IACMq1I,EAAmBtxI,qBAIjC,CAEM,SAASyxI,GAA0Bp6J,GAElB,iBAAXA,GAAuBA,EAAOo3J,eACrC,aAAcp3J,EAAOo3J,cAAcn0J,aACjC,gBAAiBjD,EAAOo3J,cAAcn0J,YAC1C/C,OAAOwc,eAAe1c,EAAOo3J,cAAcn0J,UAAW,cAAe,CACnE2hB,MACE,MAAO,CAAC8f,SAAUjkC,KAAKikC,SACxB,GAGN,CAEM,SAAS21H,GAAsBr6J,GACpC,MAAM+4J,EAAkB/4J,EAAOwd,kBAAkBva,UAAUg3I,YAC3Dj6I,EAAOwd,kBAAkBva,UAAUg3I,YACjC,SAAqBqgB,GACnB,GAAIA,EAAc,MACgC,IAArCA,EAAajX,sBAEtBiX,EAAajX,sBACTiX,EAAajX,qBAEnB,MAAMkX,EAAmB95J,KAAK2nB,kBAAkBlT,MAAK8S,GACf,UAApCA,EAAY0c,SAAS3e,MAAMD,QACY,IAArCw0I,EAAajX,qBAAiCkX,EACb,aAA/BA,EAAiBvrJ,UACfurJ,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBvrJ,UAAY,WAES,aAA/BurJ,EAAiBvrJ,YACtBurJ,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBvrJ,UAAY,aAGa,IAArCsrJ,EAAajX,qBACnBkX,GACH95J,KAAKy3J,eAAe,QAAS,CAAClpJ,UAAW,kBAGK,IAArCsrJ,EAAahX,sBAEtBgX,EAAahX,sBACTgX,EAAahX,qBAEnB,MAAMmX,EAAmBh6J,KAAK2nB,kBAAkBlT,MAAK8S,GACf,UAApCA,EAAY0c,SAAS3e,MAAMD,QACY,IAArCw0I,EAAahX,qBAAiCmX,EACb,aAA/BA,EAAiBzrJ,UACfyrJ,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBzrJ,UAAY,WAES,aAA/ByrJ,EAAiBzrJ,YACtByrJ,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBzrJ,UAAY,aAGa,IAArCsrJ,EAAahX,qBACnBmX,GACHh6J,KAAKy3J,eAAe,QAAS,CAAClpJ,UAAW,YAE5C,CACD,OAAO+pJ,EAAgBx1J,MAAM9C,KAAM0I,UACpC,CACJ,CAEM,SAASuxJ,GAAiB16J,GACT,iBAAXA,GAAuBA,EAAO2gG,eAGzC3gG,EAAO2gG,aAAe3gG,EAAO4gG,mBAC9B,2BClVM,SAAS+5D,GAAoB36J,GAGlC,IAAKA,EAAO84I,iBAAoB94I,EAAO84I,iBAAmB,eACtD94I,EAAO84I,gBAAgB71I,UACzB,OAGF,MAAM23J,EAAwB56J,EAAO84I,gBACrC94I,EAAO84I,gBAAkB,SAAyB31I,GAQhD,GANoB,iBAATA,GAAqBA,EAAKyiB,WACA,IAAjCziB,EAAKyiB,UAAU1a,QAAQ,SACzB/H,EAAOuE,KAAKP,MAAMO,KAAK8B,UAAUrG,KAC5ByiB,UAAYziB,EAAKyiB,UAAUvZ,OAAO,IAGrClJ,EAAKyiB,WAAaziB,EAAKyiB,UAAU7gB,OAAQ,CAE3C,MAAM81J,EAAkB,IAAID,EAAsBz3J,GAC5C23J,EAAkB9gG,KAAAA,eAAwB72D,EAAKyiB,WAC/Cm1I,EAAqB76J,OAAOC,OAAO06J,EACrCC,GAWJ,OARAC,EAAmBC,OAAS,WAC1B,MAAO,CACLp1I,UAAWm1I,EAAmBn1I,UAC9B0yH,OAAQyiB,EAAmBziB,OAC3BL,cAAe8iB,EAAmB9iB,cAClC98E,iBAAkB4/F,EAAmB5/F,iBAExC,EACM4/F,CACR,CACD,OAAO,IAAIH,EAAsBz3J,EAClC,EACDnD,EAAO84I,gBAAgB71I,UAAY23J,EAAsB33J,UAIzDoiE,GAA8BrlE,EAAQ,gBAAgBqO,IAChDA,EAAEuX,WACJ1lB,OAAOwc,eAAerO,EAAG,YAAa,CACpC/F,MAAO,IAAItI,EAAO84I,gBAAgBzqI,EAAEuX,WACpC8a,SAAU,UAGPryB,IAEV,CAEM,SAAS4sJ,GAAmBj7J,EAAQuwJ,GACzC,IAAKvwJ,EAAOwd,kBACV,OAGI,SAAUxd,EAAOwd,kBAAkBva,WACvC/C,OAAOwc,eAAe1c,EAAOwd,kBAAkBva,UAAW,OAAQ,CAChE2hB,MACE,YAA6B,IAAfnkB,KAAKy6J,MAAwB,KAAOz6J,KAAKy6J,KACxD,IAIL,MAmFMnI,EACF/yJ,EAAOwd,kBAAkBva,UAAU03I,qBACvC36I,EAAOwd,kBAAkBva,UAAU03I,qBACjC,WAKE,GAJAl6I,KAAKy6J,MAAQ,KAIkB,WAA3B3K,EAAetvH,SAAwBsvH,EAAen9I,SAAW,GAAI,CACvE,MAAM,aAACwjJ,GAAgBn2J,KAAKk2J,mBACP,WAAjBC,GACF12J,OAAOwc,eAAejc,KAAM,OAAQ,CAClCmkB,MACE,YAA6B,IAAfnkB,KAAKy6J,MAAwB,KAAOz6J,KAAKy6J,KACxD,EACD7gI,YAAY,EACZoG,cAAc,GAGnB,CAED,GAxGsB,SAASnY,GACjC,IAAKA,IAAgBA,EAAYjX,IAC/B,OAAO,EAET,MAAMmpD,EAAWR,KAAAA,cAAuB1xC,EAAYjX,KAEpD,OADAmpD,EAASvrC,QACFurC,EAAStiD,MAAK+kD,IACnB,MAAM5pD,EAAQ2mD,KAAAA,WAAoBiD,GAClC,OAAO5pD,GAAwB,gBAAfA,EAAMyS,OACqB,IAApCzS,EAAMwnD,SAAS3vD,QAAQ,OAD9B,GAGH,CA6FOiwJ,CAAkBhyJ,UAAU,IAAK,CAEnC,MAAMkU,EA7FoB,SAASiL,GAEvC,MAAM1gB,EAAQ0gB,EAAYjX,IAAIzJ,MAAM,mCACpC,GAAc,OAAVA,GAAkBA,EAAM7C,OAAS,EACnC,OAAQ,EAEV,MAAMqO,EAAUkC,SAAS1N,EAAM,GAAI,IAEnC,OAAOwL,GAAYA,GAAW,EAAIA,CACnC,CAoFuBgoJ,CAAwBjyJ,UAAU,IAG9CkyJ,EArFqB,SAASC,GAKxC,IAAIC,EAAwB,MAwB5B,MAvB+B,YAA3BhL,EAAetvH,UAKbs6H,EAJAhL,EAAen9I,QAAU,IACF,IAArBkoJ,EAGsB,MAIA,WAEjB/K,EAAen9I,QAAU,GAML,KAA3Bm9I,EAAen9I,QAAiB,MAAQ,MAGlB,YAGrBmoJ,CACR,CAuDwBC,CAAyBn+I,GAGtCo+I,EAxDc,SAASnzI,EAAagzI,GAG9C,IAAI9rJ,EAAiB,MAKU,YAA3B+gJ,EAAetvH,SACgB,KAA3BsvH,EAAen9I,UACrB5D,EAAiB,OAGnB,MAAM5H,EAAQoyD,KAAAA,YAAqB1xC,EAAYjX,IAC7C,uBAUF,OATIzJ,EAAM7C,OAAS,EACjByK,EAAiB8F,SAAS1N,EAAM,GAAGyE,OAAO,IAAK,IACX,YAA3BkkJ,EAAetvH,UACO,IAArBq6H,IAIV9rJ,EAAiB,YAEZA,CACR,CA+BuBksJ,CAAkBvyJ,UAAU,GAAIkU,GAGlD,IAAI7N,EAEFA,EADiB,IAAf6rJ,GAAkC,IAAdI,EACL9qJ,OAAOgrJ,kBACA,IAAfN,GAAkC,IAAdI,EACZ/2J,KAAKD,IAAI42J,EAAYI,GAErB/2J,KAAKF,IAAI62J,EAAYI,GAKxC,MAAM/5F,EAAO,CAAC,EACdxhE,OAAOwc,eAAeglD,EAAM,iBAAkB,CAC5C98C,IAAG,IACMpV,IAGX/O,KAAKy6J,MAAQx5F,CACd,CAED,OAAOqxF,EAAyBxvJ,MAAM9C,KAAM0I,UAC7C,CACJ,CAEM,SAASyyJ,GAAuB57J,GACrC,IAAMA,EAAOwd,qBACT,sBAAuBxd,EAAOwd,kBAAkBva,WAClD,OAOF,SAAS44J,EAAWC,EAAIl5I,GACtB,MAAMm5I,EAAsBD,EAAGhqI,KAC/BgqI,EAAGhqI,KAAO,WACR,MAAMpR,EAAOvX,UAAU,GACjBpE,EAAS2b,EAAK3b,QAAU2b,EAAK6sC,MAAQ7sC,EAAKsY,WAChD,GAAsB,SAAlB8iI,EAAGx8I,YACHsD,EAAG8+C,MAAQ38D,EAAS6d,EAAG8+C,KAAKlyD,eAC9B,MAAM,IAAI2M,UAAU,4CAClByG,EAAG8+C,KAAKlyD,eAAiB,WAE7B,OAAOusJ,EAAoBx4J,MAAMu4J,EAAI3yJ,UACtC,CACF,CACD,MAAM6yJ,EACJh8J,EAAOwd,kBAAkBva,UAAU6pJ,kBACrC9sJ,EAAOwd,kBAAkBva,UAAU6pJ,kBACjC,WACE,MAAMmP,EAAcD,EAAsBz4J,MAAM9C,KAAM0I,WAEtD,OADA0yJ,EAAWI,EAAax7J,MACjBw7J,CACR,EACH52F,GAA8BrlE,EAAQ,eAAeqO,IACnDwtJ,EAAWxtJ,EAAEkY,QAASlY,EAAEo2B,QACjBp2B,IAEV,CAUM,SAAS6tJ,GAAoBl8J,GAClC,IAAKA,EAAOwd,mBACR,oBAAqBxd,EAAOwd,kBAAkBva,UAChD,OAEF,MAAM+tD,EAAQhxD,EAAOwd,kBAAkBva,UACvC/C,OAAOwc,eAAes0C,EAAO,kBAAmB,CAC9CpsC,MACE,MAAO,CACLu3I,UAAW,YACXC,SAAU,cACV37J,KAAK2lB,qBAAuB3lB,KAAK2lB,kBACpC,EACDiU,YAAY,EACZoG,cAAc,IAEhBvgC,OAAOwc,eAAes0C,EAAO,0BAA2B,CACtDpsC,MACE,OAAOnkB,KAAK47J,0BAA4B,IACzC,EACD90H,IAAI1e,GACEpoB,KAAK47J,2BACP57J,KAAK6mC,oBAAoB,wBACrB7mC,KAAK47J,iCACF57J,KAAK47J,0BAEVxzI,GACFpoB,KAAKklB,iBAAiB,wBAClBllB,KAAK47J,yBAA2BxzI,EAEvC,EACDwR,YAAY,EACZoG,cAAc,IAGhB,CAAC,sBAAuB,wBAAwB58B,SAAS+jB,IACvD,MAAM00I,EAAatrG,EAAMppC,GACzBopC,EAAMppC,GAAU,WAcd,OAbKnnB,KAAK87J,6BACR97J,KAAK87J,2BAA6BluJ,IAChC,MAAMuU,EAAKvU,EAAEo2B,OACb,GAAI7hB,EAAG45I,uBAAyB55I,EAAG0D,gBAAiB,CAClD1D,EAAG45I,qBAAuB55I,EAAG0D,gBAC7B,MAAMm2I,EAAW,IAAIzkH,MAAM,wBAAyB3pC,GACpDuU,EAAGswI,cAAcuJ,EAClB,CACD,OAAOpuJ,CAAP,EAEF5N,KAAKklB,iBAAiB,2BACpBllB,KAAK87J,6BAEFD,EAAW/4J,MAAM9C,KAAM0I,UAC/B,CAfD,GAiBH,CAEM,SAASuzJ,GAAuB18J,EAAQuwJ,GAE7C,IAAKvwJ,EAAOwd,kBACV,OAEF,GAA+B,WAA3B+yI,EAAetvH,SAAwBsvH,EAAen9I,SAAW,GACnE,OAEF,GAA+B,WAA3Bm9I,EAAetvH,SAAwBsvH,EAAen9I,SAAW,IACnE,OAEF,MAAMupJ,EAAY38J,EAAOwd,kBAAkBva,UAAU03I,qBACrD36I,EAAOwd,kBAAkBva,UAAU03I,qBACnC,SAA8B/lI,GAC5B,GAAIA,GAAQA,EAAKvD,MAAuD,IAAhDuD,EAAKvD,IAAInG,QAAQ,0BAAkC,CACzE,MAAMmG,EAAMuD,EAAKvD,IAAIlF,MAAM,MAAMqF,QAAQxF,GAChB,yBAAhBA,EAAK46C,SACXlzC,KAAK,MAEJ1T,EAAOsY,uBACP1D,aAAgB5U,EAAOsY,sBACzBnP,UAAU,GAAK,IAAInJ,EAAOsY,sBAAsB,CAC9C7G,KAAMmD,EAAKnD,KACXJ,QAGFuD,EAAKvD,IAAMA,CAEd,CACD,OAAOsrJ,EAAUp5J,MAAM9C,KAAM0I,UAC9B,CACF,CAEM,SAASyzJ,GAA+B58J,EAAQuwJ,GAKrD,IAAMvwJ,EAAOwd,oBAAqBxd,EAAOwd,kBAAkBva,UACzD,OAEF,MAAM45J,EACF78J,EAAOwd,kBAAkBva,UAAU+1I,gBAClC6jB,GAA0D,IAAjCA,EAAsB93J,SAGpD/E,EAAOwd,kBAAkBva,UAAU+1I,gBACjC,WACE,OAAK7vI,UAAU,IAWkB,WAA3BonJ,EAAetvH,SAAwBsvH,EAAen9I,QAAU,IAClC,YAA3Bm9I,EAAetvH,SACZsvH,EAAen9I,QAAU,IACD,WAA3Bm9I,EAAetvH,UACjB93B,UAAU,IAAiC,KAA3BA,UAAU,GAAGyc,UAC3B/K,QAAQC,UAEV+hJ,EAAsBt5J,MAAM9C,KAAM0I,YAjBnCA,UAAU,IACZA,UAAU,GAAG5F,MAAM,MAEdsX,QAAQC,UAelB,EACJ,CAIM,SAASgiJ,GAAqC98J,EAAQuwJ,GAC3D,IAAMvwJ,EAAOwd,oBAAqBxd,EAAOwd,kBAAkBva,UACzD,OAEF,MAAM85J,EACF/8J,EAAOwd,kBAAkBva,UAAUk3I,oBAClC4iB,GAAkE,IAArCA,EAA0Bh4J,SAG5D/E,EAAOwd,kBAAkBva,UAAUk3I,oBACjC,WACE,IAAIvlI,EAAOzL,UAAU,IAAM,CAAC,EAC5B,GAAoB,iBAATyL,GAAsBA,EAAKnD,MAAQmD,EAAKvD,IACjD,OAAO0rJ,EAA0Bx5J,MAAM9C,KAAM0I,WAU/C,GADAyL,EAAO,CAACnD,KAAMmD,EAAKnD,KAAMJ,IAAKuD,EAAKvD,MAC9BuD,EAAKnD,KACR,OAAQhR,KAAKoiB,gBACX,IAAK,SACL,IAAK,mBACL,IAAK,uBACHjO,EAAKnD,KAAO,QACZ,MACF,QACEmD,EAAKnD,KAAO,SAIlB,OAAImD,EAAKvD,KAAsB,UAAduD,EAAKnD,MAAkC,WAAdmD,EAAKnD,KACtCsrJ,EAA0Bx5J,MAAM9C,KAAM,CAACmU,KAErB,UAAdA,EAAKnD,KAAmBhR,KAAKw5I,YAAcx5I,KAAKi/I,cACjDn8I,MAAM9C,MACf2a,MAAKpV,GAAK+2J,EAA0Bx5J,MAAM9C,KAAM,CAACuF,KACrD,EACJ,EC/ZM,WAIJ,IAJ4B,OAAChG,GAI7B,uDAJuC,CAAC,EAAGwH,EAI3C,uDAJqD,CACtDw1J,YAAY,EACZC,aAAa,EACbC,YAAY,GAGZ,MAAM38E,EAAUlb,GACVkrF,ET8HD,SAAuBvwJ,GAE5B,MAAMsF,EAAS,CAAC27B,QAAS,KAAM7tB,QAAS,MAGxC,QAAsB,IAAXpT,IAA2BA,EAAOyd,UAE3C,OADAnY,EAAO27B,QAAU,iBACV37B,EAGT,MAAM,UAACmY,GAAazd,EAEpB,GAAIyd,EAAU0/I,gBACZ73J,EAAO27B,QAAU,UACjB37B,EAAO8N,QAAUs7I,GAAejxI,EAAU8U,UACtC,mBAAoB,QACnB,GAAI9U,EAAUC,qBACW,IAA3B1d,EAAOo9J,iBAA6Bp9J,EAAOy2J,0BAC1Cz2J,EAAOq9J,eAKX/3J,EAAO27B,QAAU,SACjB37B,EAAO8N,QAAUs7I,GAAejxI,EAAU8U,UACtC,wBAAyB,OACxB,KAAIvyB,EAAOwd,oBACdC,EAAU8U,UAAU3qB,MAAM,wBAQ5B,OADAtC,EAAO27B,QAAU,2BACV37B,EAPPA,EAAO27B,QAAU,SACjB37B,EAAO8N,QAAUs7I,GAAejxI,EAAU8U,UACtC,uBAAwB,GAC5BjtB,EAAOo0F,oBAAsB15F,EAAOinB,mBAChC,qBAAsBjnB,EAAOinB,kBAAkBhkB,SAIpD,CAED,OAAOqC,CACR,CSrKwB+/D,CAAoBrlE,GAErCs9J,EAAU,CACd/M,iBACAgN,WAFc,EAGd7O,eAAgBrpF,GAChBkqF,WAAYlqF,GACZmqF,gBAAiBnqF,GAEjBh0D,IAAGA,IAIL,OAAQk/I,EAAetvH,SACrB,IAAK,SACH,IAAKu8H,IAAeA,KACfh2J,EAAQw1J,WAEX,OADAz8E,EAAQ,wDACD+8E,EAET,GAA+B,OAA3B/M,EAAen9I,QAEjB,OADAmtE,EAAQ,wDACD+8E,EAET/8E,EAAQ,+BAER+8E,EAAQG,YAAcD,EAGtBD,GAA0Cv9J,EAAQuwJ,GAClDgN,GAAgDv9J,GAEhDw9J,GAA4Bx9J,EAAQuwJ,GACpCiN,GAA2Bx9J,GAC3Bw9J,GAA8Bx9J,EAAQuwJ,GACtCiN,GAAuBx9J,GACvBw9J,GAAmCx9J,EAAQuwJ,GAC3CiN,GAAkCx9J,GAClCw9J,GAAwBx9J,GACxBw9J,GAAsCx9J,GACtCw9J,GAAgCx9J,EAAQuwJ,GAExCgN,GAA+Bv9J,GAC/Bu9J,GAA+Bv9J,GAC/Bu9J,GAA8Bv9J,EAAQuwJ,GACtCgN,GAAkCv9J,GAClCu9J,GAAkCv9J,EAAQuwJ,GAC1C,MACF,IAAK,UACH,IAAKmN,IAAgBA,KAChBl2J,EAAQy1J,YAEX,OADA18E,EAAQ,yDACD+8E,EAET/8E,EAAQ,gCAER+8E,EAAQG,YAAcC,EAGtBH,GAA0Cv9J,EAAQuwJ,GAClDgN,GAAgDv9J,GAEhD09J,GAA6B19J,EAAQuwJ,GACrCmN,GAA+B19J,EAAQuwJ,GACvCmN,GAAwB19J,GACxB09J,GAA6B19J,GAC7B09J,GAA+B19J,GAC/B09J,GAAiC19J,GACjC09J,GAA+B19J,GAC/B09J,GAA+B19J,GAC/B09J,GAA8B19J,GAC9B09J,GAA4B19J,GAC5B09J,GAA6B19J,GAE7Bu9J,GAA+Bv9J,GAC/Bu9J,GAA+Bv9J,GAC/Bu9J,GAA8Bv9J,EAAQuwJ,GACtCgN,GAAkCv9J,GAClC,MACF,IAAK,SACH,IAAK29J,IAAen2J,EAAQ01J,WAE1B,OADA38E,EAAQ,wDACD+8E,EAET/8E,EAAQ,+BAER+8E,EAAQG,YAAcE,EAGtBJ,GAA0Cv9J,EAAQuwJ,GAClDgN,GAAgDv9J,GAEhD29J,GAAgC39J,GAChC29J,GAAiC39J,GACjC29J,GAA4B39J,GAC5B29J,GAA+B39J,GAC/B29J,GAAgC39J,GAChC29J,GAAqC39J,GACrC29J,GAA4B39J,GAC5B29J,GAA4B39J,GAE5Bu9J,GAA+Bv9J,GAC/Bu9J,GAA8Bv9J,EAAQuwJ,GACtCgN,GAAkCv9J,GAClCu9J,GAAkCv9J,EAAQuwJ,GAC1C,MACF,QACEhwE,EAAQ,wBAKb,CC1HCq9E,CAAe,CAAC59J,OAA0B,oBAAXA,YAAyBuH,EAAYvH,mCCKtE,MAAMwL,IAASkC,EAAAA,EAAAA,sCAETq1F,GAAe,IAAI/9D,MASnB64H,GAAsB,CACxB/sE,MAAO,CACH77D,OAAQ,CACJy7H,MAAO,IACPjsJ,IAAK,IACLD,IAAK,KAETwwB,MAAO,CACH07H,MAAO,KACPjsJ,IAAK,KACLD,IAAK,OAOjB,IAAIs5J,GAAsB,UAEtBC,IAAqB,EAGrBC,IAAY,EAGZC,IAAa,EAGbC,IAAY,EAGZC,IAAa,EAGbp6B,GAAS,KAEb,MAAMq6B,GAA0Bn4J,SAASG,cAAc,SACjDi4J,QAC6C,IAAtCD,GAAwB13I,UAErC,IACI43I,GADAC,GAAmB,GAMvB,SAASC,KAER,CAwFD,SAASC,GAAyBC,EAAIjsJ,GAClC,MAAMksJ,EACA79I,QAAQrO,IAAWA,EAAO0/I,iBAAiBptJ,OAAS,EACpD65J,EACA99I,QAAQrO,IAAWA,EAAOmzH,iBAAiB7gI,OAAS,EACpD85J,EAAqB,CAAC,GAEC,IAAzBH,EAAGxzJ,QAAQ,WACX2zJ,EAAmB/tE,MAAQ8tE,IAEF,IAAzBF,EAAGxzJ,QAAQ,WACX2zJ,EAAmBz2D,MAAQu2D,GAG/B57D,GAAahgG,KAAKqkF,GAAAA,QAAAA,oBAA+By3E,EACpD,CA2CD,SAASC,GAA0BC,GAC/B,MAAMC,EACAD,EAAWvtJ,QAAOxL,GAAgB,eAAXA,EAAE8f,OAAuB/gB,OAChDk6J,EACAF,EAAWvtJ,QAAOxL,GAAgB,gBAAXA,EAAE8f,OAAwB/gB,OACjDm6J,EACAH,EAAWvtJ,QAAOxL,GAAgB,eAAXA,EAAE8f,OAAuB/gB,OAChDo6J,EACAJ,EAAWvtJ,QAAOxL,GAAgB,gBAAXA,EAAE8f,OAAwB/gB,OAEvDg6J,EAAWl7J,SAAQsxB,IACf,MAAMkZ,EAAa,CACf,yBAA4B2wH,EAC5B,0BAA6BC,EAC7B,yBAA4BC,EAC5B,0BAA6BC,EAC7B,UAAahqI,EAAOnO,SACpB,gBAAmBmO,EAAOiqI,QAC1B,YAAejqI,EAAOrP,KACtB,aAAgBqP,EAAOxZ,OAG3BkwF,GAAWgE,cAAc1d,GAAkB9jD,EAA3C,GAEP,CAaD,SAASgxH,GAAmBC,IAzE5B,SAAsCC,GAClC,OAAIA,EAAWx6J,SAAWw5J,GAAiBx5J,QAOvCw6J,EAAWrtJ,IAAIstJ,GAAuB3qI,OAAOnhB,KAAK,MAC1C6qJ,GACCrsJ,IAAIstJ,GAAuB3qI,OAAOnhB,KAAK,IAQpD,SAAS8rJ,EAAsB1nJ,GAC3B,OAAOpQ,KAAK8B,UAAU,CAClBsc,KAAMhO,EAAKgO,KACXkB,SAAUlP,EAAKkP,SACfo4I,QAAStnJ,EAAKsnJ,QACdzjJ,MAAO7D,EAAK6D,MACZ8jJ,OAAQ3nJ,EAAK2nJ,QAEpB,CACJ,EA+COC,CAA6BJ,KAYjCf,GAX8Be,EAWK3zJ,MAAM,GACzCH,GAAOsM,KAAK,qCAAsCymJ,IAElDO,GAA0BP,IAG1Bx7D,GAAahgG,KAAKqkF,GAAAA,QAAAA,wBAAmCm3E,IAErDx7D,GAAahgG,KAAKqkF,GAAAA,QAAAA,oBAA+Bm3E,IAjBpD,CA8kBD,MAAMoB,GAAW,IAvjBjB,cAAuB5lD,GAInB15G,cACIu4E,MAAMmqB,GACT,CAWD5oF,OAAmB,UAAd3S,EAAc,uDAAJ,CAAC,EA8iBpB,IAA+Bo4J,EA7iBW,kBAAvBp4J,EAAQy2J,aACfA,GAAaz2J,EAAQy2J,WACrBzyJ,GAAOsM,KAAM,gBAAemmJ,OAEC,kBAAtBz2J,EAAQ02J,YACfA,GAAY12J,EAAQ02J,UACpB1yJ,GAAOsM,KAAM,eAAcomJ,OAEE,kBAAtB12J,EAAQw2J,YACfA,GAAYx2J,EAAQw2J,UACpBxyJ,GAAOsM,KAAM,eAAckmJ,OAEG,kBAAvBx2J,EAAQ22J,aACfA,GAAa32J,EAAQ22J,WACrB3yJ,GAAOsM,KAAM,gBAAeqmJ,OAEY,kBAAxC,UAAO32J,EAAQs8H,oBAAf,aAAO,EAAsBC,UAC7BA,GAASv8H,EAAQs8H,aAAaC,OAC9Bv4H,GAAOsM,KAAM,WAAUisH,OAG3B/jI,OAAOgiB,cAAcs8I,IACrBA,QAA4B/2J,EAEvB05B,GAAQ+0D,kBACTv1F,KAAKo/J,mBAohBcD,EAnhBS,CAACjrF,EAASliE,KAC1BkiE,IACAA,EAAQmrF,UAAYrtJ,EACvB,EAihBV,SAASkiE,EAASliE,GAErB,MAAM2Q,EAAMw8I,EAAsBr8J,MAAMo8J,GAAUx2J,WA4BlD,OA1BIsJ,GACOktJ,GAASI,wBAAwB,WACjCttJ,EAAO0/I,gBACP1/I,EAAO0/I,iBAAiBptJ,QAGxBg5J,IACPppF,EAAQjuD,UAAUi5I,GAASK,wBACtB37I,OAAM,SAAS47I,GACZ,MAAM37I,EACA,IAAIosE,GAAgBuvE,EAAI,KAAM,CAAE,gBAEtCh8J,KAAAA,8BAAmD,CAC/C0vC,QAASlzC,KACTuD,OAAQsgB,IAGZ9Y,GAAOuY,KACH,sGAGA4wD,EACArwD,EACP,IAGFlB,CACV,IA5iBG3iB,KAAKy5J,cAAgB,CAAC,EAEtBgG,GAAAA,KAAoB14J,GAEhB/G,KAAK0/J,yBACL1/J,KAAKomB,kBAAiBu5I,IAClB7B,GAAmB6B,EAAGz0J,MAAM,GAE5BH,GAAOkT,MAAM,sBAAuB6/I,IACpCO,GAA0BP,IAE1Bx7D,GAAahgG,KACTqkF,GAAAA,QAAAA,sBACAm3E,IAEAt9H,GAAQs3D,4BACR96E,UAAUmJ,aAAajB,iBACnB,gBACA,IAAMllB,KAAKomB,iBAAiB23I,MAIhCF,GAA4Bt+J,OAAOsiB,aAC/B,IAAM7hB,KAAKomB,iBAAiB23I,KAnVP,IAqV5B,GAGZ,CAMD33I,iBAAiBwrD,GACb50D,UAAUmJ,aAAaC,mBAClBzL,MAAK0L,IACFu4I,GAAmBv4I,GACnBurD,EAASvrD,EAAT,IAEHzC,OAAMjgB,IACHoH,GAAOuY,KAAM,iCAAgC3f,KAC7Ci7J,GAAmB,IACnBhtF,EAAS,GAAT,GAEX,CAWDwnF,cAAcwG,GAA0C,IAA/Bl7I,EAA+B,uDAAjB,CAAC,EAAGgvD,EAAa,uDAAH,EACjD,OAAO,IAAIt5D,SAAQ,CAACC,EAASC,KACzB,IAAIulJ,EAAYC,GAAiB,EAEV,iBAAZpsF,IAAyBpvC,MAAMovC,IAAYA,EAAU,IAC5DmsF,EAAaj2J,YAAW,KACpBk2J,GAAiB,EACjBD,OAAa/4J,EACbwT,EAAO,IAAI21E,GAAgBb,IAA3B,GACD1b,IAGP12D,UAAUmJ,aAAasC,aAAa/D,GAC/B/J,MAAK3I,IACFjH,GAAOD,IAAI,sBACXkzJ,GAAyB4B,EAAW5tJ,GAC/B8tJ,SACyB,IAAfD,GACPl2J,aAAak2J,GAEjBxlJ,EAAQrI,GACX,IAEJ4R,OAAMjgB,IACHoH,GAAOuY,KAAM,wCAAuC3f,KAASsD,KAAK8B,UAAU2b,MAC5E,MAAMs+G,EAAa,IAAI/yC,GAAgBtsF,EAAO+gB,EAAak7I,GAEtDE,SACyB,IAAfD,GACPl2J,aAAak2J,GAEjBvlJ,EAAO0oH,IAGPA,EAAW11H,OAAS8hF,IACpB4uE,GAAyB4B,OAAW94J,EACvC,GAxBT,GA+BP,CAYDi5J,iBAAiBh5J,GACb,OAAK04J,GAAAA,cAIE,IAAIrlJ,SAAQ,CAACC,EAASC,KACzBmlJ,GAAAA,cACIztJ,IACIqI,EAAQrI,EAAR,IAEJrO,IACI2W,EAAO3W,EAAP,GAEJoD,EAPJ,IAJOqT,QAAQE,OAAO,IAAI/X,MAAM,qCAavC,CAaDy9J,oBAAiD,IAA/BC,EAA+B,uDAAZ,GAAIjuJ,EAAQ,uCAC7C,MAAMkuJ,EAAiB,GAEjBC,EAAuBF,EAAiBvyI,SAAS,SACjDwwI,EACAlsJ,GAAUA,EAAO0/I,iBAAiBptJ,OAAS,EAE7C67J,IAAyBjC,GACzBgC,EAAet+J,KAAK,SAGxB,MAAMw+J,EAAuBH,EAAiBvyI,SAAS,SACjDywI,EACAnsJ,GAAUA,EAAOmzH,iBAAiB7gI,OAAS,EAMjD,OAJI87J,IAAyBjC,GACzB+B,EAAet+J,KAAK,SAGjBs+J,CACV,CAsBDG,+BAA+Bt5J,GAC3B,MAAM,QACF2sE,KACG4sF,GACHv5J,EAEEw5J,EAAuB,GAYvBC,EAA4B,WAK9B,IAFwC,KAFtBF,EAAaj6I,SAAW,IAE1B5b,QAAQ,WAGpB,OAAO2P,QAAQC,UAGnB,MAAM,2BACFomJ,EADE,sBAEF18B,GACAu8B,EAIJ,GAAIG,EAA4B,CAC5B,MAAMC,EACA5C,IAAoBA,GAAiBrpJ,MAAKigB,GACxB,eAAhBA,EAAOrP,OACCqP,EAAOnO,WAAak6I,GACrB/rI,EAAOxZ,QAAUulJ,KAEhC,IAAKC,EACD,OAAOtmJ,QAAQE,OAAO,IAAI21E,GACtB,CAAE3iF,KAAM,+BACR,CAAC,EACD,CAAEmzJ,KAIV,MAAMR,EAAmB,CAAE,SACrBv7I,EAAc,CAChB2rE,MAAO,CACH9pE,SAAUm6I,EAAen6I,WAMjC,OAAOvmB,KAAKo5J,cAAc6G,EAAkBv7I,EAAagvD,GACpD/4D,MAAK3I,IACK,CACH4yH,WAAY,SACZ5yH,YAGf,CAED,OAAOhS,KAAK+/J,iBAAiB,CAAEh8B,yBAClC,EAAClhI,KAAK7C,MAqDD2gK,EAA6B,WAC/B,MACMC,GADYN,EAAaj6I,SAAW,CAAE,QAAS,UACXtV,QAAO2jB,GAAqB,UAAXA,GAAiC,UAAXA,IAEjF,IAAKksI,EAAwBt8J,OACzB,OAAO8V,QAAQC,UAGnB,MAAMqK,EA5iBlB,WAA+C,IAAvBu5I,EAAuB,uDAAlB,GAAIl3J,EAAc,uDAAJ,CAAC,EAGxC,MAAM2d,EAAc8lH,KAAUzjI,EAAQ2d,aAAe04I,IAErD,GAAIa,EAAGxzJ,QAAQ,UAAY,EAAG,CAE1B,GAAIo2J,KAAY95J,EAAQ69F,YAAa,CACjC,MAAM72F,EAAI8yJ,KAAY95J,EAAQ69F,YAE9BlgF,EAAY2rE,MAAM77D,OAAS,CAAEy7H,MAAOliJ,EAAEymB,QACtC9P,EAAY2rE,MAAM97D,MAAQ,CAAE07H,MAAOliJ,EAAEwmB,MACxC,CAsBD,GApBK7P,EAAY2rE,QACb3rE,EAAY2rE,MAAQ,CAAC,GAOrB7vD,GAAQq2D,kBACJnyE,EAAY2rE,MAAM77D,QAAU9P,EAAY2rE,MAAM77D,OAAOy7H,MACrDvrI,EAAY2rE,MAAM77D,OAAS,CAAEy7H,MAAOvrI,EAAY2rE,MAAM77D,OAAOy7H,OAE7DllJ,GAAOuY,KAAK,8DAEZoB,EAAY2rE,MAAM97D,OAAS7P,EAAY2rE,MAAM97D,MAAM07H,MACnDvrI,EAAY2rE,MAAM97D,MAAQ,CAAE07H,MAAOvrI,EAAY2rE,MAAM97D,MAAM07H,OAE3DllJ,GAAOuY,KAAK,8DAGhBvc,EAAQ+5J,eACRp8I,EAAY2rE,MAAM9pE,SAAWxf,EAAQ+5J,mBAClC,CACH,MAAMpQ,EAAa3pJ,EAAQ2pJ,YAAcqQ,KAAAA,KAEzCr8I,EAAY2rE,MAAMqgE,WAAaA,CAClC,CACJ,MACGhsI,EAAY2rE,OAAQ,EAsBxB,OAnBI4tE,EAAGxzJ,QAAQ,UAAY,GAClBia,EAAYijF,OAAsC,kBAAtBjjF,EAAYijF,QACzCjjF,EAAYijF,MAAQ,CAAC,GAGzBjjF,EAAYijF,MAAQ,CAChB47B,iBAAkBm6B,KAAeH,GACjCh3I,SAAUxf,EAAQi6J,YAClBv9B,kBAAmB+5B,KAAeD,GAClC75B,kBAAmB+5B,KAAcF,IAGjCj6B,IACA7jI,OAAOC,OAAOglB,EAAYijF,MAAO,CAAE67B,aAAc,KAGrD9+G,EAAYijF,OAAQ,EAGjBjjF,CACV,CA2e+Bu8I,CAAeL,EAAyBN,GAI5D,OAFAv1J,GAAOsM,KAAK,0BAA2BpQ,KAAK8B,UAAU2b,IAE/C1kB,KAAKo5J,cAAcwH,EAAyBl8I,EAAagvD,EACnE,EAAC7wE,KAAK7C,MA0CP,OAAOwgK,IACF7lJ,MAlGiC,SAASumJ,GAC3C,IAAKA,EACD,OAGJ,MAAM,OAAElvJ,EAAF,SAAU2yH,EAAV,WAAoBC,GAAes8B,EAEnCC,EAAqBnvJ,EAAO0/I,iBAElC,GAAIyP,EAAmB78J,OAAQ,CAC3B,MAAM88J,EAAqB,IAAIlP,YAAYiP,GAE3CZ,EAAqB3+J,KAAK,CACtBoQ,OAAQovJ,EACRz8B,WACAC,aACAt/G,MAAO87I,EAAmB1P,iBAAiB,IAElD,CAED,MAAM2P,EAAqBrvJ,EAAOmzH,iBAElC,GAAIk8B,EAAmB/8J,OAAQ,CAC3B,MAAMg9J,EAAqB,IAAIpP,YAAYmP,GAE3Cd,EAAqB3+J,KAAK,CACtBoQ,OAAQsvJ,EACR38B,WACAC,aACAt/G,MAAOg8I,EAAmBn8B,iBAAiB,GAC3CtxB,UAAWprB,GAAU,UAAVA,SAElB,CACJ,IAkEI9tE,KAAKgmJ,GACLhmJ,MAlC6B,SAAS4mJ,GACvC,IAAKA,EACD,OAGJ,MAAMhnB,EAAcgnB,EAAS7P,iBAE7B,GAAInX,EAAYj2I,OAAQ,CACpB,MAAMk9J,EAAc,IAAItP,YAAY3X,GAEpCgmB,EAAqB3+J,KAAK,CACtBoQ,OAAQwvJ,EACRl8I,MAAOk8I,EAAY9P,iBAAiB,GACpC+P,QAASnB,EAAamB,SAE7B,CAED,MAAMpoB,EAAckoB,EAASp8B,iBAE7B,GAAIkU,EAAY/0I,OAAQ,CACpB,MAAMo9J,EAAc,IAAIxP,YAAY7Y,GAEpCknB,EAAqB3+J,KAAK,CACtBoQ,OAAQ0vJ,EACRp8I,MAAOo8I,EAAYv8B,iBAAiB,GACpCtxB,UAAWprB,GAAU,UAAVA,OACXg5E,QAASnB,EAAamB,SAE7B,CACJ,IAMI9mJ,MAAK,IAAM4lJ,IACX38I,OAAMjgB,IACH48J,EAAqBn9J,SAAQ,IAAgB,IAAf,OAAE4O,GAAa,EACzChS,KAAK2hK,gBAAgB3vJ,EAArB,IAGGoI,QAAQE,OAAO3W,KAEjC,CAQD+7J,wBACI,OAAOr/I,QACHrD,UAAUmJ,cACHnJ,UAAUmJ,aAAaC,iBACrC,CASDk5I,wBAAwBsC,GACpB,MAAmB,WAAfA,GAA0C,gBAAfA,GACpBhE,EAId,CAOD+D,gBAAgBE,GACPA,IAILA,EAAYz8I,YAAYhiB,SAAQkiB,IACxBA,EAAMnb,MACNmb,EAAMnb,MACT,IAID03J,EAAY13J,MACZ03J,EAAY13J,OAMZ03J,EAAYC,SACZD,EAAYC,UAEnB,CAMDC,0BACI,OAAOtC,GAAAA,aACV,CAUDuC,qBAAqBz7I,GACjB,OAAKvmB,KAAKs/J,wBAAwB,UAK3B3B,GAAwB13I,UAAUM,GACpC5L,MAAK,KACF0iJ,GAAsB92I,EACtB+2I,IAAqB,EAErBvyJ,GAAOD,IAAK,8BAA6Byb,KAEzC+7E,GAAahgG,KAAKqkF,GAAAA,QAAAA,4BACdpgE,EADJ,IAXGnM,QAAQE,OACX,IAAI/X,MAAM,+CAarB,CAQD8iI,2BAA2BC,GACvBm6B,GAAAA,2BAA0Cn6B,EAC7C,CAODi6B,uBACI,OAAOlC,EACV,CAOD4E,oCACI,OAAOnE,EACV,CAMDoE,2CACI,OAAOpE,GAAiBrmJ,MAAKid,GAAUrU,QAAQqU,EAAOxZ,QACzD,CAMDinJ,4BAA4BztI,GACxB,MAAM4pI,EAAa,GACb8D,EAAa,CACf,SAAY1tI,EAAOnO,SACnB,KAAQmO,EAAOrP,KACf,MAASqP,EAAOxZ,MAChB,QAAWwZ,EAAOiqI,SAKtB,OAFAL,EAAW18J,KAAKwgK,GAET,CAAE9D,aACZ,GA8CL,MCz3BMvzJ,IAASkC,EAAAA,EAAAA,wCAKTo1J,GAAoB,CACtB,WAAc,SACd,aAAgB,WAChB,YAAe,WAMJ,MAAMC,WAAmB/9H,MAcpC3kC,YACQ0tG,EACAt7F,EACAsT,EACAi9I,EACAC,EACA3uD,GACJ17B,QAGAn4E,KAAKklB,iBAAmBllB,KAAKqC,YAC7BrC,KAAK6mC,oBAAsB7mC,KAAK4nC,IAAM5nC,KAAK2kC,eAM3C3kC,KAAKyiK,WAAa,GAClBziK,KAAKstG,WAAaA,EAClBttG,KAAKugG,YAAc,EACnBvgG,KAAKgR,KAAOwxJ,EACZxiK,KAAKslB,MAAQA,EACbtlB,KAAK6zG,UAAYA,EACjB7zG,KAAK+C,SAAW,IAAIqrD,IASpBpuD,KAAK+5F,UAAW,EAShB/5F,KAAK0iK,uBAAyBH,EAE9BviK,KAAK2iK,WAAW3wJ,EACnB,CAQD4wJ,+BAA+Bv/J,GACvBm9B,GAAQ5jB,YACR5c,KAAKslB,MAAME,QAAUniB,EAErBrD,KAAKgS,OAAO6wJ,WAAax/J,CAEhC,CAUDy/J,mBAAmBC,GAElB,CAQDC,wBAAwBD,GAChB/iK,KAAKstG,YAAcy1D,GACnB/iK,KAAKstG,WAAW21D,eAAejjK,KAAM+iK,EAE5C,CASDE,eAAeF,GAEd,CASDG,eAAeH,GAEd,CAQDI,YAAYnyJ,EAAM3N,GACd,GAAKg/J,GAAkB76J,eAAewJ,IAWtC,GANI3N,EACArD,KAAK+C,SAAS+jC,IAAI91B,EAAM3N,GAExBrD,KAAK+C,SAASy8F,OAAOxuF,GAGrBhR,KAAKgS,OACL,IAAK,MAAMsT,KAAStlB,KAAKgS,OAAOoT,YAC5BE,EAAM+8I,GAAkBrxJ,IAAS3N,OAZrC0H,GAAOpH,MAAO,wBAAuBqN,IAe5C,CASD2xJ,WAAW3wJ,GACP,GAAIhS,KAAKgS,SAAWA,IAIpBhS,KAAKgS,OAASA,EAMVhS,KAAKgS,QAAQ,CACb,IAAK,MAAMhB,KAAQhR,KAAK+C,SAASuF,OAC7BtI,KAAKmjK,YAAYnyJ,EAAMhR,KAAK+C,SAASohB,IAAInT,IAEzChR,KAAK0iK,wBACL1iK,KAAK4iK,+BAA+B5iK,KAAK0iK,uBAEhD,CACJ,CAMDU,sBACI,GAAKpjK,KAAKgS,OAAV,CAOA,IAAK,MAAMhB,KAAQhR,KAAK+C,SAASuF,OAE7B,IAAK,MAAM+6J,KAAcrjK,KAAKgS,OAAOmzH,iBACjCk+B,EAAWhB,GAAkBrxJ,SAASlK,EAG1C9G,KAAK0iK,wBACL1iK,KAAK4iK,oCAA+B97J,EATvC,MAJGiE,GAAOuY,KACF,GAAEtjB,yDAcd,CAYDsyE,OAAOywF,GACC/iK,KAAKgS,SACLhS,KAAKijK,eAAeF,GACpBO,GAAAA,kBAA2BP,EAAW/iK,KAAKgS,SAE/ChS,KAAKyiK,WAAW7gK,KAAKmhK,GACrB/iK,KAAKgjK,wBAAwBD,GAC7B/iK,KAAK8iK,mBAAmBC,EAC3B,CAUDzmH,OAAOymH,GACH,IAAK,IAAIpmE,EAAK38F,KAAKyiK,WAAY39J,EAAI63F,EAAGr4F,OAAS,EAAGQ,GAAK,IAAKA,EAAG,CAC3D,MAAMkJ,EAAI2uF,EAAG73F,GAERi+J,IACD/iK,KAAKkjK,eAAel1J,GACpBs1J,GAAAA,kBAA2Bt1J,EAAG,OAE7B+0J,GAAa/0J,IAAM+0J,GACpBpmE,EAAG/xF,OAAO9F,EAAG,EAEpB,CAEGi+J,IACA/iK,KAAKkjK,eAAeH,GACpBO,GAAAA,kBAA2BP,EAAW,MAE7C,CAOD3oE,UAKI,OAJAp6F,KAAK6nC,qBAEL7nC,KAAK+5F,UAAW,EAET3/E,QAAQC,SAClB,CAMD28F,QACI,OAAOh3G,KAAKujK,aACf,CAMDC,UACI,MAAMx/B,EAAWhkI,KAAKujK,cAChB3T,EAAU5vJ,KAAKyjK,aAErB,OAAOz/B,GAAY4rB,EAAW,GAAE5rB,KAAY4rB,IAAY,IAC3D,CAKDjjD,oBACI,OAAO3sG,KAAKgS,MACf,CAMD+pI,gBAEC,CAMDwnB,cACI,OAAOvjK,KAAKgS,OAAShS,KAAKgS,OAAO5F,GAAK,IACzC,CAMDs3J,WACI,OAAO1jK,KAAKslB,KACf,CAMDq+I,gBACI,OAAO3jK,KAAKslB,MAAMpK,KACrB,CAMDuoJ,aACI,OAAOzjK,KAAKslB,MAAQtlB,KAAKslB,MAAMlZ,GAAK,IACvC,CAKDsjG,UACI,OAAO1vG,KAAKgR,IACf,CAOD4yJ,gBACI,OAAI5jK,KAAKsnG,eACE,MAGJtnG,KAAK6zG,UAAY7zG,KAAK6zG,UAAY,SAC5C,CAKDgwD,eACI,OAAO7jK,KAAK6zG,SACf,CAQD85C,WACI,YAAkC,IAAvB3tJ,KAAKgS,OAAOu4F,QACZvqG,KAAKgS,OAAOu4F,MAI1B,CAKDjD,eACI,OAAOtnG,KAAK0vG,YAAchM,GAAU8M,KACvC,CAODtR,UACI,MAAM,IAAI38F,MAAM,8BACnB,CAODuhK,oBACI,OAAO9jK,KAAKsnG,gBAAkBtnG,KAAKk/F,SACtC,CAKD0I,eACI,OAAO5nG,KAAK0vG,YAAchM,GAAUgH,KACvC,CAQDq5D,qBACI,OAAO/jK,KAAKslB,OAAStlB,KAAKslB,MAAMC,KACnC,CAUDuvF,cAAcvU,EAAYhC,GACtB,IAAIylE,EAAgBzjE,EAMhB//D,GAAQ23D,8BAA0C,IAARoG,GAAuBv+F,KAAKyvG,YACtEu0D,EAAgB,GAGhBhkK,KAAKugG,aAAeyjE,GACpBhkK,KAAKugG,WAAayjE,EAClBhkK,KAAKsC,KACDssF,GACAo1E,EACAzlE,IAIuB,IAApBv+F,KAAKugG,YACS,IAAlByjE,GACAhkK,KAAKk/F,YACJl/F,KAAK+jK,sBACT/jK,KAAKsC,KACDssF,GACAo1E,EAEX,CAUDC,eAAe5G,GACX,OAAKiG,GAAAA,wBAAiC,UAOlCtjK,KAAK4nG,eACExtF,QAAQC,UAIfD,QAAQ0c,IACJ92B,KAAKyiK,WAAWhxJ,KACZyiE,GACIA,EAAQjuD,UAAUo3I,GACbz5I,OAAMjgB,IAOH,MANAoH,GAAOuY,KACH,+GAGA4wD,EACAvwE,GACEA,CAAN,OAGfgX,MAAK,KACF3a,KAAKsC,KACDssF,GACAyuE,EAFJ,IA1BDjjJ,QAAQE,OACX,IAAI/X,MAAM,+CA6BrB,CAODm7I,cAAcpwI,GAEb,ECveL,MAAMvC,IAASkC,EAAAA,EAAAA,6CAMA,MAAMi3J,WAAwB5B,GAkBzC1iK,YAAY,GAYT,IAZS,SACR2mB,EADQ,WAERmqI,EAFQ,UAGR59D,EAHQ,WAIR8R,EAJQ,MAKRu/D,EALQ,SAMRx/B,EANQ,WAORC,EAPQ,OAQR5yH,EARQ,MASRsT,EATQ,UAURuuF,EAVQ,QAWR4tD,EAAU,IACX,EACCtpF,MACqB,KACjBnmE,EACAsT,GAC4B,IAAMtlB,KAAKsC,KAAKusF,GAAqB7uF,OACjE8yF,EACA+gB,GAEJ7zG,KAAKokK,sBAAuB,EAC5B,MAAMC,EAAS5C,EAAQhtJ,MAAK7G,GAAKA,EAAEytG,UAAUr7G,QAEzCqkK,GACArkK,KAAKskK,mBAAmBD,GAG5B,MAAME,EAAiB1wD,IAAcprB,GAAU,UAAVA,QAC/BnjE,EAAM+wI,cAAckO,eACpB,KAKNvkK,KAAK+zH,SAAW,CACZ1qH,UAAWpI,KAAKC,SACbqjK,EAAiB,CAAEA,kBAAmB,CAAC,GAS9CvkK,KAAKmkK,MAAQA,EACbnkK,KAAK2kI,SAAWA,EAChB3kI,KAAK4kI,WAAaA,QAAAA,EAAc2/B,EAIhCvkK,KAAK4kG,WAAat/E,EAAM+wI,cAAc7hI,OACtCx0B,KAAKwkK,qBAAuB5/D,EAI5B5kG,KAAKykK,aAAen/I,EAAM27I,iBAGrBxhK,OAAO6I,KAAKtI,KAAKykK,cAAcngK,QAAUuvG,IAAcprB,GAAU,UAAVA,SACxDzoF,KAAKykK,aAAe,CAChBjwI,OAAQlP,EAAM+wI,cAAc7hI,OAC5BD,MAAOjP,EAAM+wI,cAAc9hI,QAInCv0B,KAAKumB,SAAWA,EAUhBvmB,KAAK0kK,cAAgBtqJ,QAAQC,UAS7Bra,KAAK2kK,YAAcjU,EAMnB1wJ,KAAK4kK,aAAc,EAKnB5kK,KAAK6kK,cAAe,EAOpB7kK,KAAK8kK,eAAgB,EAQrB9kK,KAAK+kK,cAAkC,KAAlB/kK,KAAKumB,cAAkBzf,EAAY9G,KAAKumB,SAG7DvmB,KAAKglK,YAAc,KAEnBhlK,KAAKilK,cAAgB,EAErBjlK,KAAKklK,wBAA0B7+I,IAC3B,MAAM8+I,EAAkBnlK,KAAK+kK,cAE7B/kK,KAAKolK,+BAA+B/+I,SAMO,IAA/BrmB,KAAK0jK,WAAW7kJ,iBACa,IAAvB7e,KAAK+kK,gBACX1+I,EAAQ5R,MAAKlP,GAAKA,EAAEghB,WAAavmB,KAAK+kK,sBAOf,IAApBI,QAAiE,IAAvBnlK,KAAK+kK,iBAE1D/kK,KAAK4kK,aAAc,EACtB,EAOD5kK,KAAKsnG,gBAAkBg8D,GAAAA,wBAAiC,YACxDtjK,KAAKqlK,4BAA8BrlK,KAAKikK,eAAephK,KAAK7C,MAC5DsjK,GAAAA,YACI38E,GAAAA,QAAAA,4BACA3mF,KAAKqlK,8BAGb/B,GAAAA,YAAqB38E,GAAAA,QAAAA,wBAAmC3mF,KAAKklK,yBAE7DllK,KAAKslK,+BACR,CAQDC,iCACI,OAAKvlK,KAAKstG,WAUH,IAAIlzF,SAAQ,CAACC,EAASC,KACzBta,KAAKstG,WAAWk4D,mBAAmBxlK,MAC9B2a,KAAKN,GAAS1W,GAAS2W,EAAO,IAAI/X,MAAMoB,KAD7C,IAVOyW,QAAQC,SAatB,CAQDorJ,6BACI,MAAM59J,GAAS7H,KAAK0lK,kBAEpB1lK,KAAKsC,KAAK0sF,GAAqBnnF,GAG/BujG,GAAWgE,c9FwIwB,EAAEtc,EAAuCjrF,KAAzC,CACvC+lC,WAAY,CACR,WAAcklD,EACdjrF,SAEJmM,OAAQ,4BACRhD,KAAM0/E,GAAgBC,mB8F9IOg1E,CAA4B3lK,KAAK0vG,UAAW7nG,IACrEujG,GAAWwD,QAAQ3nG,KAAK8B,UAAU,CAC9BuE,KAAM0hF,GACNlkF,IAAKjD,IAEZ,CAQDy9J,gCACStlK,KAAK4lK,qCAIV5lK,KAAKmjK,YAAY,cAAc,KAC3BnjK,KAAKilK,cAAgB1lK,OAAOqvB,YAAY1tB,MACxClB,KAAKylK,4BAAL,IAGJzlK,KAAKmjK,YAAY,gBAAgB,KAC7BnjK,KAAKylK,6BACLr6D,GAAW8D,oBACPjd,GACA,CACI,WAAcjyF,KAAK0vG,UACnB,WAAc,QACd7nG,MAAOtI,OAAOqvB,YAAY1tB,MAAQlB,KAAKilK,eAL/C,IASAjlK,KAAK4nG,gBAAkB5nG,KAAK6zG,YAAcprB,GAAU,UAAVA,QAC1CzoF,KAAKmjK,YAAY,eAAe,KACvBnjK,KAAK0lK,mBACN1lK,KAAKylK,4BACR,IAGZ,CAQDG,mCAEI,OAAQ5lK,KAAK4nG,gBAAkB5nG,KAAK6zG,YAAcprB,GAAU,UAAVA,OACrD,CAWDo9E,eAAetgJ,GACX,MAAMugJ,EAAW9lK,KAAK+lK,UAAUljK,KAAK7C,KAAMulB,GAI3C,OAFAvlB,KAAK0kK,cAAgB1kK,KAAK0kK,cAAc/pJ,KAAKmrJ,EAAUA,GAEhD9lK,KAAK0kK,aACf,CAUDsB,kCAAkC9M,EAAiB5zJ,GAC1CtF,KAAKstG,WAKVttG,KAAKstG,WAAW24D,wBAAwBjmK,MAAM2a,KAC1Cu+I,GACAv1J,GAAS2B,EAAc,IAAI/C,MAAMoB,MANjCu1J,GAOP,CASDgN,gBAAgB5nE,GACRt+F,KAAKstG,YACLttG,KAAKstG,WAAW64D,oBAAoBnmK,KAAK0vG,UAAW1vG,KAAMs+F,IAASt+F,KAAKstG,WAAWuC,KAAKr8B,cAE/F,CASDuyF,UAAUxgJ,GACN,GAAIvlB,KAAKyvG,YAAclqF,IACdvlB,KAAK6zG,YAAcprB,GAAU,UAAVA,UAAqBgf,GAAAA,mCAC7C,OAAOrtF,QAAQC,UAGnB,GAAIra,KAAK+5F,SACL,OAAO3/E,QAAQE,OAAO,IAAI21E,GAAgBJ,KAG9C,IAAI38C,EAAU94B,QAAQC,UAGtB,MAAM+rJ,EAAc,IAAMr7J,GAAOsM,KAAM,QAAOrX,SAASulB,KAIjDoxE,EACAn2D,GAAQ+0D,gBAAkBv1F,KAAK6zG,YAAcprB,GAAU,UAAVA,QAAoBjoD,GAAQm2D,8BAM/E,GAAI32F,KAAKsnG,gBACGtnG,KAAK6zG,YAAcprB,GAAU,UAAVA,UAAsBgf,GAAAA,oCACzC9Q,EACRyvE,IAKIpmK,KAAKqmK,eAAiBrmK,KAAKqmK,cAAcP,SACzC9lK,KAAKqmK,cAAcP,SAASvgJ,GACrBvlB,KAAKslB,QACZtlB,KAAKslB,MAAM6H,SAAW5H,QAEvB,GAAIA,EACP2tB,EAAU,IAAI94B,SAAQ,CAACC,EAASC,KAC5B8rJ,IACApmK,KAAKgmK,mCACD,KACQhmK,KAAKqmK,eACLrmK,KAAKsmK,oBAMTtmK,KAAKojK,sBACLpjK,KAAKumK,aACLvmK,KAAK2iK,WAAW,MAEhBtoJ,GAAS,GAEbC,EAfJ,QAiBD,CACH8rJ,IAGA,MAAMI,EAAgB,CAClB1F,eAAgB9gK,KAAKymK,cACrBpgJ,QAAS,CAAEq9E,GAAUgH,OACrB+2D,QAASzhK,KAAKqmK,cAAgB,CAAErmK,KAAKqmK,eAAkB,GACvD3V,WAAY1wJ,KAAK0mK,uBAGrBxzH,EACMowH,GAAAA,+BAAwC7jK,OAAOC,OAC7C,CAAC,EACD8mK,EACA,CAAE9hJ,YAAa,CAAE2rE,MAAOrwF,KAAKykK,iBAErCvxH,EAAUA,EAAQv4B,MAAKgsJ,IACnB,MAAMl/I,EAAak/I,EAAYlyJ,MAAK4C,GAAQA,EAAKiO,MAAMD,OAASrlB,KAAK0vG,YAErE,IAAIjoF,EAaA,MAAM,IAAIwoE,GAAgBH,IAS9B,OArBI9vF,KAAK2iK,WAAWl7I,EAAWzV,QAC3BhS,KAAKslB,MAAQmC,EAAWnC,MAIpBtlB,KAAK6zG,YAAcpsF,EAAWosF,YAC9B9oG,GAAOuY,KACF,GAAEtjB,6CACHA,KAAK6zG,UAAWpsF,EAAWosF,WAC/B7zG,KAAK6zG,UAAYpsF,EAAWosF,WAMhC7zG,KAAKqmK,eACLrmK,KAAKskK,mBAAmBtkK,KAAKqmK,eAGjCrmK,KAAKyiK,WAAWhxJ,KAAIm1J,GAAQtD,GAAAA,kBAA2BsD,EAAM5mK,KAAKgS,UAE3DhS,KAAKulK,gCAAZ,GAEP,CAED,OAAOryH,EACFv4B,MAAK,KACF3a,KAAKkmK,gBAAgB3gJ,GAGrBvlB,KAAK4nG,gBAAkB5nG,KAAKstG,YAActtG,KAAKstG,WAAWu5D,4BAA4B7mK,MACtFA,KAAKsC,KAAKirF,GAAoBvtF,KAA9B,GAEX,CAUDolK,+BAA+B/+I,GAC3B,MAAMf,EAAQtlB,KAAK0jK,WACbr+I,EAAQ,GAAEC,EAAMD,YAGtB,IAAIqP,EAASrO,EAAQ5R,MAAKlP,GAAKA,EAAE8f,OAASA,GAAQ9f,EAAE2V,QAAUoK,EAAMpK,OAAS3V,EAAEghB,WAAavmB,KAAKumB,WAEjG,IAAKmO,GAAiC,YAAvB10B,KAAK+kK,cAA6B,CAI7C,MAAM7pJ,GAASoK,EAAMpK,OAAS,IAAIjZ,QAAQ,aAAc,IAExDyyB,EAASrO,EAAQ5R,MAAKlP,GAAKA,EAAE8f,OAASA,GAAQ9f,EAAE2V,QAAUA,GAC7D,CAGGlb,KAAK+kK,cADLrwI,EACqBA,EAAOnO,cAEPzf,CAE5B,CASD67J,WAAW3wJ,GACPmmE,MAAMwqF,WAAW3wJ,GAEbA,GAEAhS,KAAK8mK,WAAa9mK,KAAKwjK,UACvBz4J,GAAOkT,MAAO,qBAAoBje,KAAK8mK,iBAAiB9mK,SAExD+K,GAAOkT,MAAO,4BAA2Bje,OAEhD,CASDskK,mBAAmBD,GACfrkK,KAAKqmK,cAAgBhC,EACrBrkK,KAAK+mK,gBAAkB/mK,KAAKgS,OAC5BhS,KAAK2iK,WAAW3iK,KAAKqmK,cAAcW,YAAYhnK,KAAK+mK,kBACpD/mK,KAAKslB,MAAQtlB,KAAKgS,OAAOoT,YAAY,EACxC,CAQDkhJ,oBACQtmK,KAAKqmK,gBACLrmK,KAAKqmK,cAAcY,aACnBjnK,KAAK2iK,WAAW3iK,KAAK+mK,iBACrB/mK,KAAK+mK,gBAAkB,KACvB/mK,KAAKslB,MAAQtlB,KAAKgS,OAAShS,KAAKgS,OAAOoT,YAAY,GAAK,KAE/D,CAaD8hJ,gBACQlnK,KAAK4nG,gBACE5nG,KAAK6zG,YAAcprB,GAAU,UAAVA,QACiB,mBAA7BzoF,KAAKslB,MAAM4hJ,gBACzBlnK,KAAKslB,MAAM4hJ,gBAEXlnK,KAAK2kK,YACC3kK,KAAK2kK,cAAgB5D,KAAAA,YACjBA,KAAAA,KACAA,KAAAA,YAEjB,CASDoG,oBAAoB9C,GACZrkK,KAAKqmK,gBACLrmK,KAAKsmK,oBACLtmK,KAAKqmK,mBAAgBv/J,GAErBu9J,GACArkK,KAAKskK,mBAAmBD,EAE/B,CAUY,gBAwBT,OApBIrkK,KAAKqmK,qBACCrmK,KAAKonK,YAGXpnK,KAAKstG,kBACCttG,KAAKstG,WAAW8lD,YAAYpzJ,MAGlCA,KAAKgS,SACLhS,KAAKumK,aACLvmK,KAAKs8C,UAGTgnH,GAAAA,eAAwB38E,GAAAA,QAAAA,wBAAmC3mF,KAAKklK,yBAE5DllK,KAAKqlK,6BACL/B,GAAAA,eAAwB38E,GAAAA,QAAAA,4BACpB3mF,KAAKqlK,6BAGNltF,MAAMiiB,SAChB,CAQDssE,sBACI,GAAI1mK,KAAK4nG,gBAAkB5nG,KAAK6zG,YAAcprB,GAAU,UAAVA,OAAkB,SAQ5D,MAAM4+E,EAAa,WAAG,EAAArnK,KAAKslB,OAAM+wI,mBAAd,aAAG,UAEtB,OAAIgR,GAAiB,eAAgBA,EAC1BA,EAAc3W,gBAGO,IAArB1wJ,KAAK2kK,YACL3kK,KAAK2kK,YAMT5D,KAAAA,IACV,CAGJ,CAOD0F,cACI,OAAOzmK,KAAK+kK,eAAiB/kK,KAAKumB,QACrC,CAOD+gJ,cACI,OAAQrmK,KAAKC,MAAQ,IAASlB,KAAK+zH,SAAS1qH,UAAY,GAC3D,CAQDm+F,mBACI,OAAOxnG,KAAKstG,YAActtG,KAAKstG,WAAWyF,UAC7C,CAODgpC,gBACI,OAAO/7I,KAAKglK,WACf,CAODuC,UACI,OAAIvnK,KAAK4nG,gBAAkB5nG,KAAKyvG,UAGrBzvG,KAAK4kK,YAGsB,UAA/B5kK,KAAK0jK,WAAW7kJ,YAA0B7e,KAAK4kK,WACzD,CAOD1lE,UACI,OAAO,CACV,CAODuQ,UAEI,OAAKzvG,KAAKgS,WAGNhS,KAAK4nG,gBAAmB5nG,KAAK2tJ,cAK7B3tJ,KAAKqmK,eAAiBrmK,KAAKqmK,cAAc52D,QAClCzvG,KAAKqmK,cAAc52D,WAGtBzvG,KAAKslB,QAAUtlB,KAAKslB,MAAM6H,QACrC,CAUDu4I,kBACI,SAAI1lK,KAAK4nG,iBACD5nG,KAAKyvG,YAAazvG,KAAKwnK,uBAAyBxnK,KAAK6zG,YAAcprB,GAAU,UAAVA,YAItEzoF,KAAKgS,SAUKhS,KAAKynK,eAAiBznK,KAAK+mK,gBAAkB/mK,KAAKgS,QAEnDoT,YAAY3N,MAAK6N,KACxB,eAAgBA,GAA+B,SAArBA,EAAMzG,YACzB,UAAWyG,IAA0B,IAAhBA,EAAMC,QAC5C,CAOD+4E,OACI,OAAOt+F,KAAK6lK,gBAAe,EAC9B,CASD5wD,wBAAwB1W,EAAKxyE,GACrBA,EAAY,IACZ/rB,KAAK6kK,cAAe,GAExB,MAAMl/I,EAAqB44E,EAAI2jD,qBAE3BliJ,KAAK8kK,eAAwC,cAAvBn/I,IACtB/b,YAAW,KACF5J,KAAK6kK,eACN95J,GAAOuY,KAAM,GAAEtjB,mDACT+rB,KAENq/E,GAAW/R,UAAUsB,UAAU3I,GAAe,CAAE,WAAchyF,KAAK0vG,YACtE,GACF,KACH1vG,KAAK8kK,eAAgB,EAE5B,CAQD4C,cAAcp6D,GACVttG,KAAKstG,WAAaA,EAMlB,IAAK,IAAIxoG,EAAI,EAAGA,EAAI9E,KAAKyiK,WAAWn+J,OAAQQ,IACxC9E,KAAKgjK,wBAAwBhjK,KAAKyiK,WAAW39J,GAEpD,CAQDsiK,UAAU/C,GACN,QAAkC,IAAvBrkK,KAAKqmK,oBAAmD,IAAXhC,EACpD,OAAOjqJ,QAAQC,UAGnB,QAAsB,IAAXgqJ,IAA2BA,EAAOhpD,UAAUr7G,MACnD,OAAOoa,QAAQE,OAAO,IAAI/X,MAAM,kCAGpC,IAAkC,IAA9BvC,KAAKokK,qBACL,OAAOhqJ,QAAQE,OAAO,IAAI/X,MAAM,mCAKpC,GAAIvC,KAAKyvG,YAAczvG,KAAKsnG,eAGxB,OAFAtnG,KAAKqmK,cAAgBhC,EAEdjqJ,QAAQC,UAGnB,MAAMizF,EAAattG,KAAKstG,WAExB,OAAKA,GASLttG,KAAKokK,sBAAuB,EAErB92D,EAAW24D,wBAAwBjmK,MACrC2a,MAAK,KACF3a,KAAKmnK,oBAAoB9C,GACrBrkK,KAAK4nG,gBACL5nG,KAAKyiK,WAAWr/J,SAAQwjK,GAAQtD,GAAAA,kBAA2BsD,EAAM5mK,KAAKgS,UAGnEs7F,EAAWk4D,mBAAmBxlK,SAExC2a,MAAK,KACF3a,KAAKokK,sBAAuB,CAA5B,IAEHxgJ,OAAMjgB,IAMH,MAHA3D,KAAKokK,sBAAuB,EAC5BpkK,KAAKmnK,sBACLp8J,GAAOpH,MAAM,sCAAuCA,GAC9CA,CAAN,MA5BJ3D,KAAKmnK,oBAAoB9C,GACrBrkK,KAAK4nG,gBACL5nG,KAAKyiK,WAAWr/J,SAAQwjK,GAAQtD,GAAAA,kBAA2BsD,EAAM5mK,KAAKgS,UAGnEoI,QAAQC,UAyBtB,CAODqjI,cAAcpwI,GACVtN,KAAKglK,YAAc13J,CACtB,CAODi5J,aASIvmK,KAAKwnK,uBAAwB,EAE7B,IACIlE,GAAAA,gBAAyBtjK,KAAKgS,OACjC,CAFD,QAGIhS,KAAKwnK,uBAAwB,CAChC,CACJ,CAODh2J,WACI,MAAQ,cAAaxR,KAAKmkK,SAASnkK,KAAK0vG,YAC3C,CAODi4D,SACI,OAAO3nK,KAAK6lK,gBAAe,EAC9B,iBC/4BL,MA+EA,GA/Ec,SAASh1J,EAAS6B,GAgC5B,YA/BuB,IAAZ7B,QAAoD,IAAlBA,EAAQC,OAAyB7F,MAAMgJ,QAAQpD,EAAQC,QAChGD,EAAQC,MAAM1N,SAAQwP,IACdA,EAAMiE,SAAWjE,EAAMiE,QAAQvS,SAC/BsO,EAAMc,MAAQ,GACdd,EAAMiE,QAAQzT,SAAQ2U,IAClBtY,OAAO6I,KAAKyP,GAAQ3U,SAAQ0L,IACN,OAAdA,GAGJ8D,EAAMc,MAAM9R,KAAK,CACbwK,GAAI2L,EAAO3L,GACX0C,YACAjH,MAAOkQ,EAAOjJ,IAHlB,GAJJ,WAWG8D,EAAMiE,SAIbjE,EAAM4B,YAAc5B,EAAM4B,WAAWlQ,QACrCsO,EAAM4B,WAAWpR,SAAQklI,SACU,IAApBA,EAAU50H,OAClBzI,MAAMgJ,QAAQq0H,EAAU50H,SACvB40H,EAAU50H,MAAQ40H,EAAU50H,MAAMT,KAAK,KAC1C,GAER,IAIFC,GAAAA,MAAgBrC,EAAS6B,EACnC,EA8CD,GArCc,SAAS9B,GACnB,MAAMC,EAAUqC,GAAAA,MAAgBtC,GAiChC,YA/BuB,IAAZC,QAAoD,IAAlBA,EAAQC,OAAyB7F,MAAMgJ,QAAQpD,EAAQC,QAChGD,EAAQC,MAAM1N,SAAQwP,SAES,IAAhBA,EAAMc,OAAyBzI,MAAMgJ,QAAQrB,EAAMc,SAC1Dd,EAAMiE,QAAU,GAChBjE,EAAMc,MAAMtQ,SAAQoQ,IAChB,MAAMo0J,EAAQh1J,EAAMiE,QAAQ8nI,WAAU5mI,GAAUA,EAAO3L,KAAOoH,EAAKpH,KAEnE,GAAIw7J,GAAS,EACTh1J,EAAMiE,QAAQ+wJ,GAAOp0J,EAAK1E,WAAa0E,EAAK3L,UACzC,CACH,MAAM1F,EAAM,CAAEiK,GAAIoH,EAAKpH,IAEvBjK,EAAIqR,EAAK1E,WAAa0E,EAAK3L,MAC3B+K,EAAMiE,QAAQjV,KAAKO,EACtB,YAEEyQ,EAAMc,YAIe,IAArBd,EAAM4B,YAA8BvJ,MAAMgJ,QAAQrB,EAAM4B,aAC/D5B,EAAM4B,WAAWpR,SAAQklI,IACU,iBAApBA,EAAU50H,QACjB40H,EAAU50H,MAAQ40H,EAAU50H,MAAMhI,MAAM,KAC3C,GAER,IAIFmF,CACV,EClFKg3J,GAAc,CAAE,QAAS,QAAS,QAClCC,GAAex/B,GAAaA,EAAU7zH,MAAKszJ,GAAyB,QAAlBA,EAAIpzJ,YACtDqzJ,GAAe1/B,GAAaA,EAAU7zH,MAAKszJ,GAAyB,QAAlBA,EAAIpzJ,YAW5D,SAASszJ,GAAmBr1J,EAAO2B,EAAU2zJ,EAAcC,GACvD,IAAKv1J,IAAU2B,EACX,OAEJ,MAAM6zJ,EAAiBjmK,GAAOgmK,EAAW1zJ,MAAKsD,GAAUA,EAAO3L,GAAGoF,aAAerP,IAEjFoS,EAASb,MAAMtQ,SAAQjB,IACnByQ,EAAMiE,QAAQjV,KAAKwmK,EAAejmK,IAGlC,MAAMkmK,EAAkBH,EAAarzJ,SAAS1S,EAAK,KAAKsS,MAAKszJ,GAAyB,QAAlBA,EAAIpzJ,YAExE,GAAI0zJ,EAAiB,CACjB,MAAMC,EAAcD,EAAgB30J,MAAMe,MAAK/G,GAAKA,IAAMvL,IAE1DyQ,EAAMiE,QAAQjV,KAAKwmK,EAAeE,IAClC11J,EAAM4B,WAAW5S,KAAKymK,EACzB,KAILz1J,EAAM4B,WAAW5S,KAAK2S,EACzB,CAeD,SAASg0J,GAAkB31J,EAAOY,EAAM00J,EAAcC,GAClD,IAAKv1J,IAAUY,EACX,OAMJ,GAJAZ,EAAMiE,QAAU,GAChBjE,EAAM4B,WAAa,IAGd0zJ,EAAa10J,EAAKpH,IAInB,OAHAwG,EAAMiE,QAAQjV,KAAK4R,QACnBZ,EAAMqD,KAAOzC,EAAKyC,MAItB,MAGM1B,EAAWuzJ,GAAaI,EAAa10J,EAAKpH,KAC1CqK,EAAWuxJ,GAAaE,EAAa10J,EAAKpH,KAGhD,GAAImI,EACA0zJ,GAAmBr1J,EAAO2B,EAAU2zJ,EAAcC,QAC/C,GAAI1xJ,EAAU,CAEjB,MAAM+xJ,EAAY/xJ,EAAS/C,MAAMe,MAAK/G,GAAKA,IAAM8F,IAC3Ci1J,EAAYX,GAAaI,EAAaM,IAExCC,EACAR,GAAmBr1J,EAAO61J,EAAWP,EAAcC,IAGnD1xJ,EAAS/C,MAAMtQ,SAAQjB,IACnByQ,EAAMiE,QAAQjV,KAnBHO,IAAOgmK,EAAW1zJ,MAAKsD,GAAUA,EAAO3L,GAAGoF,aAAerP,IAmBlDimK,CAAejmK,GAAlC,IAEJyQ,EAAM4B,WAAW5S,KAAK6U,GAE7B,CAGD7D,EAAMqD,KAAOrD,EAAMiE,QAAQ,GAAGZ,IACjC,CAqBD,SAASyyJ,GAA0Bl1J,EAAM00J,EAAcS,GASnD,IAAKA,EAAOl0J,MARcgqD,KAClBA,EAAM5nD,SACC4nD,EAAM5nD,QAAQY,MAAKM,GAAUA,EAAO3L,KAAOoH,EAAKpH,OAM1B,CAGjC,IAAK87J,EAAa10J,EAAKpH,IACnB,OAAO,EAEX,MAAMmI,EAAWuzJ,GAAaI,EAAa10J,EAAKpH,KAC1CqK,EAAWuxJ,GAAaE,EAAa10J,EAAKpH,KAEhD,OAAImI,EACOo0J,EAAOlxJ,MAAKgnD,GAASA,EAAM5nD,SAC3B4nD,EAAM5nD,QAAQY,MAAKtV,GAAOA,EAAIiK,GAAGoF,aAAe+C,EAASb,MAAM,UAC/D+C,GAAYjD,EAAKpH,GAAGoF,aAAeiF,EAAS/C,MAAM,KAGlDg1J,GAFW,CAAEt8J,GAAIqK,EAAS/C,MAAM,IAEKw0J,EAAcS,EAKjE,CAED,OAAO,CACV,CAiDM,MAAMC,GAMTC,QAAQhhJ,GACJ,IAAKA,GAA0C,iBAApBA,EAAYjX,IAGnC,OAFAvG,QAAQiZ,KAAK,mDAENuE,EAIX,MAAMhX,EAAUqC,GAAgB2U,EAAYjX,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAMxM,OAGjC,OAFA+F,QAAQiZ,KAAK,iCAENuE,EAIX,GAAIhX,EAAQC,MAAM66I,OAAMhgJ,IAAqC,IAAhCk8J,GAAYp9J,QAAQkB,EAAE8wD,OAG/C,OAFApyD,QAAQiZ,KAAK,uDAENuE,EAGX,MAAM/W,EAAQ,CAAC,EACTg4J,EAAej4J,EAAQC,MAE7BD,EAAQC,MAAQ,GAChBg4J,EAAa1lK,SAAQwP,IACjB,MAAM5B,EAAO4B,EAAM5B,KAEnB,GAAa,gBAATA,EAIA,OAHA4B,EAAM6pD,IAAM,YACZ3rD,EAAM8B,EAAM6pD,KAAO7pD,GAIvB,QAA2B,IAAhB9B,EAAME,GAAuB,CACpC,MAAM+3J,EAAQv+B,GAAU53H,GAGpBm2J,EAAMlyJ,SAAW5L,MAAMgJ,QAAQ80J,EAAMlyJ,UACrCkyJ,EAAMlyJ,QAAQzT,SAAQ2U,IAClBnF,EAAMqD,KAAO8B,EAAO9B,KAAOrD,EAAMqD,YAAc8B,EAAO9B,IAAtD,IAUH8yJ,EAAMv0J,YAAe5B,EAAMqD,OAC5B8yJ,EAAMv0J,WAAa,WAEhBu0J,EAAM9yJ,KACb8yJ,EAAMtsG,IAAMzrD,EACZF,EAAME,GAAQ+3J,CACjB,MAAM,GAAIn2J,EAAMqD,KAAM,CAEnB,MAAM8yJ,EAAQv+B,GAAU53H,GAEpBm2J,EAAMlyJ,SAAW5L,MAAMgJ,QAAQ80J,EAAMlyJ,WAErCkyJ,EAAMlyJ,QAAQzT,SAAQoQ,IAClBA,EAAKyC,KAAOrD,EAAMqD,IAAlB,IAEJnF,EAAME,GAAM6F,SAAW/F,EAAME,GAAM6F,SAAW,IAAI9K,OAAOg9J,EAAMlyJ,eAEnC,IAArBkyJ,EAAMv0J,YAA8BvJ,MAAMgJ,QAAQ80J,EAAMv0J,cAC/D1D,EAAME,GAAMwD,YAAc1D,EAAME,GAAMwD,YAAc,IAAIzI,OAAOg9J,EAAMv0J,YAE5E,KAEL3D,EAAQC,MAAQrR,OAAOiW,OAAO5E,GAG9B,MAAMk4J,EAAS,GAEfvpK,OAAOiW,OAAO5E,GAAO1N,SAAQq7D,IACD,aAApBA,EAAMlwD,WACNy6J,EAAOpnK,KAAK68D,EAAMhC,IACrB,IAIL5rD,EAAQ65H,OAAOtnI,SAAQsR,IACA,WAAfA,EAAM1D,OACN0D,EAAMi2H,KAAOq+B,EAAO/1J,KAAK,KAC5B,IAILpC,EAAQo4J,aAAe,CACnBC,SAAU,MACV7jB,MAAO,KAEX,MAAM8jB,EAASj2J,GAAgBrC,GAE/B,OAAO,IAAIgH,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKu4J,GAEZ,CAUDC,cAAcvhJ,GAA6B,IAAhB4C,EAAgB,uDAAN,KACjC,IAAK5C,GAA0C,iBAApBA,EAAYjX,IAGnC,OAFAvG,QAAQiZ,KAAK,mDAENuE,EAIX,MAAMhX,EAAUqC,GAAgB2U,EAAYjX,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAMxM,OAGjC,OAFA+F,QAAQiZ,KAAK,iCAENuE,EAIX,GAAIhX,EAAQC,MAAMxM,OAAS,GAAKuM,EAAQC,MAAM66I,OAAMhgJ,IAAqC,IAAhCk8J,GAAYp9J,QAAQkB,EAAE8wD,OAG3E,OAFApyD,QAAQiZ,KAAK,6CAENuE,EAEX,MAAMwhJ,EAAc5+I,EAAUvX,GAAgBuX,EAAQ7Z,KAAO,KACvD04J,EA/Jd,SAA4BC,EAASC,GACjC,IAAKD,IAAYC,GAAoC,IAAzBD,EAAQz4J,MAAMxM,QAAyC,IAAzBklK,EAAQ14J,MAAMxM,OACpE,OAAO,EAGX,MAAMmlK,EAAWF,EAAQz4J,MAAM,GACzB44J,EAAWF,EAAQ14J,MAAM,GAE/B,OAAO24J,EAASnmB,WAAaomB,EAASpmB,UAAYmmB,EAASlmB,SAAWmmB,EAASnmB,MAClF,CAsJ0BomB,CAAmB94J,EAASw4J,GACzCO,EAAc/4J,EAAQC,MAAM,GAAGwyI,SAC/BumB,EAAYh5J,EAAQC,MAAM,GAAGyyI,OAC7BvI,EAAiBnqI,EAAQC,MAAM,GAAG+1H,YAClC/1H,EAAQ,CAAC,EAEfD,EAAQC,MAAM1N,SAAQwP,IAClB,MAAM5B,EAAO4B,EAAM5B,KAEnB,GAAa,gBAATA,EAAwB,CACxB,IAAKq4J,IAAgBA,EAAYv4J,MAAO,CACpC,MAAMg5J,EAAWt/B,GAAU53H,GAK3B,OAHAk3J,EAASrtG,IAAMh9D,OAAO6I,KAAKwI,GAAOxM,OAAOkN,gBACzCV,EAAM8B,EAAM6pD,KAAOqtG,EAGtB,CACD,MAAMC,EAAeV,EAAYv4J,MAAM6tI,WAAUhzI,GAAKA,EAAEqF,OAASA,IAOjE,YALI+4J,IACAV,EAAYv4J,MAAMi5J,GAAgBn3J,EAClCy2J,EAAYv4J,MAAMi5J,GAActtG,IAAMstG,GAI7C,CAGD,MAAMC,EAtNlB,SAA8B9B,GAC1B,MAAM8B,EAAa,CAAC,EAEpB,OAAK9B,GAAiBj9J,MAAMgJ,QAAQi0J,IAGpCA,EAAa9kK,SAAQsR,IACbA,EAAMhB,OAASzI,MAAMgJ,QAAQS,EAAMhB,QACnCgB,EAAMhB,MAAMtQ,SAAQoQ,SACgB,IAArBw2J,EAAWx2J,KAClBw2J,EAAWx2J,GAAQ,IAEvBw2J,EAAWx2J,GAAM5R,KAAK8S,EAAtB,GAEP,IAGEs1J,GAbIA,CAcd,CAoM8BC,CAAqBr3J,EAAM4B,YAK9C,GAAK5B,EAAMiE,QAUXjE,EAAMiE,QAAQzT,SAAQ,CAACoQ,EAAMwyE,KAGzB,IAAKxyE,EAAKyC,KACN,OAIJ,IAAKozJ,IAAgBA,EAAYv4J,MAAO,CACpC,GAAI43J,GAA0Bl1J,EAAMw2J,EAAYvqK,OAAOiW,OAAO5E,IAC1D,OAEJ,MAAMg5J,EAAWt/B,GAAU53H,GAU3B,OARAk3J,EAASrtG,IAAMh9D,OAAO6I,KAAKwI,GAAOxM,OAAOkN,WACzCs4J,EAASv7J,UAAYy3E,GAEK,aAApBpzE,EAAMrE,UADN,WAC8C,WACpDu7J,EAASI,gBAAapjK,EACtByhK,GAAkBuB,EAAUt2J,EAAMw2J,EAAYp3J,EAAMiE,cACpD/F,EAAMg5J,EAASrtG,KAAOqtG,EAGzB,CAGD,GAAIpB,GAA0Bl1J,EAAMw2J,EAAYX,EAAYv4J,OACxD,OAEJ,MAAMg5J,EAAWt/B,GAAU53H,GAE3Bk3J,EAASrtG,IAAM4sG,EAAYv4J,MAAMxM,OAAOkN,WACxCs4J,EAASv7J,UAAY,WACrBg6J,GAAkBuB,EAAUt2J,EAAMw2J,EAAYp3J,EAAMiE,SACpDwyJ,EAAYv4J,MAAMlP,KAAKkoK,EAAvB,SA3CA,IAAKT,EAAa,CACd,MAAMS,EAAWt/B,GAAU53H,GAE3Bk3J,EAASrtG,IAAMh9D,OAAO6I,KAAKwI,GAAOxM,OAAOkN,WACzCV,EAAM8B,EAAM6pD,KAAOqtG,CACtB,CAIL,IAqCJj5J,EAAQC,MAAQu4J,EAAcA,EAAYv4J,MAAQrR,OAAOiW,OAAO5E,GAChE,MAAM65H,EAAO,GAEb95H,EAAQC,MAAM1N,SAAQwP,IAClB+3H,EAAK/oI,KAAKgR,EAAM6pD,KACZ6sG,IACA12J,EAAM0wI,SAAWsmB,EACjBh3J,EAAM2wI,OAASsmB,EACfj3J,EAAMi0H,YAAcmU,EACvB,IAILnqI,EAAQ65H,OAAOtnI,SAAQsR,IACA,WAAfA,EAAM1D,OACN0D,EAAMi2H,KAAOA,EAAK13H,KAAK,KAC1B,IAILpC,EAAQo4J,aAAe,CACnBC,SAAU,MACV7jB,MAAO,KAIXx0I,EAAQ+yB,OAAOi+B,iBACf,MAAMsoG,EAAYj3J,GAAgBrC,GAElC,OAAO,IAAIgH,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKu5J,GAEZ,ECtdE,IAAKC,aAAAA,GAAAA,EAAAA,mBAAAA,sBAAAA,EAAAA,wBAAAA,0BAAAA,EAAAA,qBAAAA,wBAAAA,EAAAA,eAAAA,0BAAAA,EAAAA,0BAAAA,6BAAAA,KAAAA,GAAAA,CAAAA,IA8CL,MAAMC,GAAqBD,GAAgBC,mBACrCC,GAA0BF,GAAgBE,wBAC1CC,GAAuBH,GAAgBG,qBACvCC,GAAiBJ,GAAgBI,eACjCC,GAA4BL,GAAgBK,0BCxBlD,SAASC,GAA2BjrC,EAAY3sC,EAAW63E,GAG9D,MAAQ,GAAElrC,KAFqB3sC,EAAU7sF,UAAU,EAAG,KAEL0kK,GACpD,CASM,SAASC,GAA2Br0D,GACvC,MAAMs0D,EAA4Bt0D,EAAWrwG,YAAY,KAAO,EAEhE,GAAI2kK,GAA6B,EAC7B,MAAM,IAAItoK,MAAO,wBAAuBg0G,KAG5C,MAAMu0D,EAAyBv0D,EAAW3qG,OAAOi/J,EAA2B,GAE5E,IAAK,MAAM75J,KAAQvR,OAAOiW,OAAOguF,IAC7B,GAAI1yF,EAAKpF,OAAO,EAAG,KAAOk/J,EACtB,OAAO95J,EAIf,MAAM,IAAIzO,MAAO,wBAAuBg0G,IAC3C,CASM,SAASw0D,GAA6Bx0D,GACzC,MAAMy0D,EAAYz0D,EAAW7qG,MAAM,KAC7Bi/J,EAAWz6J,OAAO86J,EAAUA,EAAU1mK,OAAS,GAAG2B,UAAU,IAElE,GAAIiK,OAAOo0B,MAAMqmI,GACb,MAAM,IAAIpoK,MAAO,8CAA6Cg0G,KAGlE,OAAOo0D,CACV,CAgBc,MAAMM,WAAuB3xD,GAexCwkC,iBAAiBxc,EAAOxuC,EAAWyjB,GAC/B,MAAM,IAAIh0G,MAAM,kBACnB,CAQD2oK,kBAAkB5pC,EAAO/qB,GACrB,MAAM,IAAIh0G,MAAM,kBACnB,CAOD4oK,aAAa33J,GACT,MAAM,IAAIjR,MAAM,kBACnB,CAOD6oK,mBAAmB53J,GACf,MAAM,IAAIjR,MAAM,kBACnB,CAODu8I,iBAAiBusB,GAChB,CAQDzyB,aAAaplI,EAAMisH,GAClB,CASD6rC,mBAAmB/0D,EAAYhxF,GAC9B,CAQDozH,mBAAmBnlI,EAAM+iG,GACxB,CAQDg1D,kBAAkBh1D,EAAY1C,GAC7B,CAQD23D,wBAAwBp/J,GACvB,ECrLE,SAASq/J,GAAiB/2J,GAC7B,OAAOG,SAASH,EAAMhB,MAAMhI,MAAM,KAAK,GAAI,GAC9C,CAOM,SAASggK,GAAmBh3J,GAC/B,OAAOG,SAASH,EAAMhB,MAAMhI,MAAM,KAAK,GAAI,GAC9C,CAOD,SAASigK,GAAc/4J,GACnB,OAAKA,EAAMc,MAIJd,EAAMc,MACRjC,KAAIkC,GAAYA,EAASvH,KACzB2E,QAAO,CAACyC,EAAM8C,EAAOC,IAAUA,EAAM9L,QAAQ+I,KAAU8C,IACvDhS,OANM,CAOd,CAMD,MAAMsnK,GAOFhsK,YAAYgT,GACR,IAAKA,EACD,MAAM,IAAIrQ,MAAM,sBAGpBvC,KAAK4S,MAAQA,CAChB,CASGc,YAKA,OAJK1T,KAAK4S,MAAMc,QACZ1T,KAAK4S,MAAMc,MAAQ,IAGhB1T,KAAK4S,MAAMc,KACrB,CAQGA,UAAMA,GACN1T,KAAK4S,MAAMc,MAAQA,CACtB,CAMGnF,gBACA,OAAOvO,KAAK4S,MAAMrE,SACrB,CAMGA,cAAUA,GACVvO,KAAK4S,MAAMrE,UAAYA,CAC1B,CAMGiG,iBAKA,OAJKxU,KAAK4S,MAAM4B,aACZxU,KAAK4S,MAAM4B,WAAa,IAGrBxU,KAAK4S,MAAM4B,UACrB,CAOGA,eAAWA,GACXxU,KAAK4S,MAAM4B,WAAaA,CAC3B,CAUDq3J,iBAAiBC,EAAYC,GACzB,MAAMj9J,EAAY9O,KAAK0T,MAAMe,MACzBu3J,GAAWA,EAAQ5/J,KAAO0/J,GACvBE,EAAQl9J,YAAci9J,IAG7B,OAAOj9J,GAAaA,EAAUjH,KACjC,CAODokK,WAAW59B,GACFruI,KAAK4S,MAAMc,OAAU1T,KAAK4S,MAAMc,MAAMpP,SAI3CtE,KAAK4S,MAAMc,MACL1T,KAAK4S,MAAMc,MAAM3C,QAAOi7J,GAAWA,EAAQ5/J,KAAOiiI,IAC3D,CAOD69B,iBAAiBF,GACbhsK,KAAK0T,MAAM9R,KAAKoqK,EACnB,CAUDG,UAAUx3J,EAAWjB,GACjB,OAAO1T,KAAKwU,WAAWC,MACnBC,GACIA,EAAMC,YAAcA,KACXjB,GAASA,IAAUgB,EAAMhB,QAC7C,CAQD04J,WAAWz3J,GACP,OAAO3U,KAAKwU,WAAWzD,QACnB2D,GAASA,EAAMC,YAAcA,GACpC,CAQD03J,uBAAuB13J,EAAW23J,GAC9B,OAAOtsK,KAAKwU,WAAWC,MACnBC,GAASA,EAAMC,YAAcA,GACtB82J,GAAiB/2J,KAAW43J,GAC1C,CAQDC,eAAet2J,GACX,OAAOjW,KAAK0T,MAAMe,MACdu3J,GAAiC,SAAtBA,EAAQl9J,YACF,OAATmH,GAAiB+1J,EAAQnkK,QAAUoO,IAClD,CAMDu2J,eACI,OAAOb,GAAc3rK,KAAK4S,MAC7B,CAOD65J,wBACI,YAAiC3lK,IAA1B9G,KAAK4S,MAAM4B,UACrB,CAODk4J,sBACI,MAAM55E,EAAY9yF,KAAK4S,MAAM5B,KAE7B,GAAkB,UAAd8hF,EACA,MAAM,IAAIvwF,MACL,qCAAoCuwF,MAK7C,GAAiB,IAFA64E,GAAc3rK,KAAK4S,OAIhC,OAAO5S,KAAK4S,MAAMc,MAAM,GAAGtH,GAI/B,GAAIpM,KAAK4S,MAAM4B,WAAY,CACvB,MAAMD,EAAWvU,KAAKmsK,UAAU,OAEhC,GAAI53J,EACA,OAAOk3J,GAAiBl3J,GAE5B,MAAMkC,EAAWzW,KAAKmsK,UAAU,OAEhC,GAAI11J,EACA,OAAOg1J,GAAiBh1J,GAE5B,MAAMk2J,EAAW3sK,KAAKmsK,UAAU,UAEhC,GAAIQ,EACA,OAAOlB,GAAiBkB,EAE/B,CAEJ,CAUDC,WAAWh3J,GACP,MAAMa,EAAWzW,KAAKqsK,uBAAuB,MAAOz2J,GAGpD,OAAOa,GAAYi1J,GAAmBj1J,EACzC,CAMDo2J,WACI,OAAO7sK,KAAK0T,MACPjC,KAAIkC,GAAYA,EAASvH,KACzB2E,QAAO,CAACyC,EAAM8C,EAAOC,IAAUA,EAAM9L,QAAQ+I,KAAU8C,GAC/D,CAODw2J,uBACI,MAAMh6E,EAAY9yF,KAAK4S,MAAM5B,KAE7B,GAAkB,UAAd8hF,EACA,MAAM,IAAIvwF,MACL,0CAAyCuwF,KAGlD,MAAMi6E,EAAa/sK,KAAK6sK,WAExB,IAAK,MAAMG,KAAiBhtK,KAAKwU,WAI7B,GAAgC,QAA5Bw4J,EAAcr4J,WACqB,WAA5Bq4J,EAAcr4J,UAAwB,CAE7C,MAAMyqD,EAAgBssG,GAAmBsB,GAEzCD,EAAWniK,OACPmiK,EAAWtiK,QAAQ20D,GAAgB,EAC1C,CAGL,OAAO2tG,CACV,CAKDE,iBACI,OAAOhmK,KAAK8B,UAAU/I,KAAK4S,MAAM4B,WACpC,CAOD04J,qBAAqB15J,GACZxT,KAAK4S,MAAM4B,aAIhBxU,KAAK4S,MAAM4B,WAAaxU,KAAK4S,MAAM4B,WAC9BzD,QAAO6nH,IAAqD,IAAxCA,EAAUllH,MAAMjJ,QAAS,GAAE+I,OACvD,CAMD25J,wBAAwBx4J,GACf3U,KAAK4S,MAAM4B,aAIhBxU,KAAK4S,MAAM4B,WACLxU,KAAK4S,MAAM4B,WACRzD,QAAO6nH,GAAaA,EAAUjkH,YAAcA,IACxD,CAODy4J,YAAYC,EAASC,GACbttK,KAAK4S,MAAMc,OACX1T,KAAK4S,MAAMc,MAAMtQ,SAAQuQ,IACjBA,EAASvH,KAAOihK,IAChB15J,EAASvH,GAAKkhK,EACjB,GAGZ,CAODC,aAAa74J,GACT1U,KAAKwU,WAAW5S,KAAK8S,EACxB,EAmBE,MAAM84J,GAOT5tK,YAAY6tK,GACRztK,KAAK0tK,UAAYx6J,GAAAA,MAAgBu6J,EACpC,CAUDE,YAAY76E,GACR,MAAM86E,EAAiB5tK,KAAK0tK,UAAU58J,MACjCC,QAAO6B,GAASA,EAAM5B,OAAS8hF,IAC/BrhF,KAAImB,GAAS,IAAIg5J,GAAUh5J,KAEhC,OAAOg7J,QAAAA,EAAkB,IAC5B,CAODC,WACI,OAAO36J,GAAAA,MAAgBlT,KAAK0tK,UAC/B,ECraL,MAAM3iK,IAASkC,EAAAA,EAAAA,4CAUA,MAAM6gK,GAQjBluK,YAAY2+F,EAAKwvE,GACb/tK,KAAKu+F,IAAMA,EACXv+F,KAAK+tK,gBAAkBA,EACvB/tK,KAAKguK,sBAAwB,IAAI5/G,IACjCpuD,KAAKiuK,sBAAwB,IAAI7/G,GACpC,CAiBD8/G,+BAA+BC,GAAa,MAExC,MAAMC,EAAcpuK,KAAKu+F,IAAIsM,eAAenH,GAAUgH,OAEtD,IAAK0jE,EAAY9pK,OACb,OAAO,EACuB,IAAvB8pK,EAAY9pK,QACnByG,GAAOpH,MACF,GAAE3D,KAAKu+F,qEAC6B6vE,GAG7C,MAAMlmC,EAAU,UAAGimC,EAAYR,YAAYjqE,GAAUgH,cAArC,aAAG,EAA2C,GAE9D,IAAKw9B,EAKD,OAJAn9H,GAAOkT,MACF,GAAEje,KAAKu+F,+DAGL,EAGX,IAAI6vC,GAAW,EAEf,IAAK,MAAMi1B,KAAc+K,EAAa,CAClC,MAAM7oJ,EAAQ89I,EAAW5zD,UACnBoyD,EAAcwB,EAAW12D,oBACzB0hE,EAAWhL,EAAWxvD,YAAcprB,GAAU,UAAVA,OAKpC6lF,EACAzM,GAAe7hK,KAAKu+F,IAAIgwE,kBAAkB1M,GAGhD,IAFsBwM,IAAa9oJ,GAAU+oJ,EAGzC,SAIJ,MAAME,EACAxuK,KAAKu+F,IAAIkwE,gBACLzuK,KAAKu+F,IAAImwE,UAAU56J,UACnB,CAAE9T,KAAKu+F,IAAIowE,eAAeC,mBAEpC,IAAKJ,EAAclqK,OAAQ,CACvByG,GAAOpH,MAAO,wBAAuB0/J,QAAiBrjK,KAAKu+F,OAE3D,QACH,CAED6vC,GAAW,EAMXlG,EAAW35H,UAAYo0H,GAAe2J,SAGtC,MAMMuiC,EAAgB,YANFL,EAAc,KAQlC,IAAK,MAAMngC,KAAWmgC,EAElBtmC,EAAW+jC,WAAW59B,GAGtBnG,EAAWgkC,iBAAiB,CACxB9/J,GAAIiiI,EACJv/H,UAAW,QACXjH,MAAOgnK,IAEX3mC,EAAWgkC,iBAAiB,CACxB9/J,GAAIiiI,EACJv/H,UAAW,OACXjH,MAAOw7J,EAAWyD,aAG1B,GAAI0H,EAAclqK,OAAS,EAAG,CAC1B,MAAMoQ,EAAQ,CACVhB,MAAO86J,EAAcv7J,KAAK,KAC1B0B,UAAW,OAGVuzH,EAAWikC,UAAUz3J,EAAMC,UAAWD,EAAMhB,QAE7Cw0H,EAAWqlC,aAAa74J,EAE/B,CAMI1U,KAAKu+F,IAAIx3F,QAAQyuI,YAClBx1I,KAAKu+F,IAAIuwE,YAAYC,gBAAgB7mC,EAE5C,CAED,OAAOkG,CACV,CAUD4gC,uBAAuBl8E,EAAW88D,EAAS5rB,GACvC,IAAMlxC,IAAa88D,EAGf,OAFA7kJ,GAAOpH,MAAO,yCAAwCisJ,mBAAyB98D,gBAExE,KAEX,MAAMn0E,EAAO3e,KAAKu+F,IAAInyF,GAEtB,MAAQ,GAAE43H,KAAYrlH,KAAQixI,KAAWjxI,GAC5C,CAYDswJ,2BAA2BzyG,GAAc,cACrC,MAAMs2B,EAAS,UAAGt2B,EAAa5pD,aAAhB,aAAG,EAAoB5B,KAChCk+J,EAAc,UAAG1yG,EAAa5pD,aAAhB,aAAG,EAAoBrE,UACrC83H,EAAQ,UAAG7pE,EAAa5pD,aAAhB,aAAG,EAAoBqD,KAC/BY,EAAU,IAAK,IAAIw3C,IAAJ,UAAQmO,EAAa5pD,aAArB,iBAAQ,EAAoBc,aAA5B,aAAQ,EAA2BjC,KAAI/D,GAAKA,EAAEtB,OAC7D43H,EAAY,GAAEhkI,KAAK+tK,mBAAmBj7E,IACtC88D,EAAUvpB,GAAYA,EAAS36H,MAAM,KAAK,GAGhD,IAAK,MAAMqM,KAAUlB,EAAS,CAC1B,MAAMZ,EAAOumD,EAAa9oD,MAAMe,MAAKjB,GAAQA,EAAKpH,KAAO2L,GAA6B,SAAnBvE,EAAK1E,YAGxE,GAAImH,EAAM,CACN,MACMk5J,EADoBl5J,EAAKpO,MAAM6D,MAAM,KACT,GAElC1L,KAAKovK,wBAAwBt8E,EAAWkxC,EAAUmrC,GAGlD,MAAME,EAAiBv8E,IAAc4Q,GAAUgH,MACzC1qG,KAAKiuK,sBAAsB9pJ,IAAIgrJ,GAC/BnvK,KAAKguK,sBAAsB7pJ,IAAIgrJ,GAErCl5J,EAAKpO,MAAQ7H,KAAKgvK,uBAAuBl8E,EAAWq8E,EAASE,EAIhE,MAAM,GAAIzf,EAAS,CAChB5vJ,KAAKovK,wBAAwBt8E,EAAWkxC,EAAU4rB,GAElD,MAAMyf,EAAiBv8E,IAAc4Q,GAAUgH,MACzC1qG,KAAKiuK,sBAAsB9pJ,IAAIyrI,GAC/B5vJ,KAAKguK,sBAAsB7pJ,IAAIyrI,GAC/B0f,EAAgBtvK,KAAKgvK,uBAAuBl8E,EAAW88D,EAASyf,GAEtE7yG,EAAa9oD,MAAM9R,KAAK,CACpBwK,GAAI2L,EACJjJ,UAAW,OACXjH,MAAOynK,GAEd,CACJ,CAGD9yG,EAAa9oD,MAAQ8oD,EAAa9oD,MAAM3C,QAAOyC,GAA2B,SAAnBA,EAAK1E,aAWxD0xB,GAAQ5jB,aACJsyJ,IAAmBvsC,GAAe8H,UAAYykC,IAAmBvsC,GAAe4G,WAE/Ez2C,IAAc4Q,GAAUgH,OAAU1qG,KAAKu+F,IAAIgxE,qBACxCz8E,IAAc4Q,GAAU8M,OAAUxwG,KAAKu+F,IAAIixE,qBAGnDhzG,EAAa9oD,WAAQ5M,EACrB01D,EAAahoD,gBAAa1N,EAEjC,CAUDsoK,wBAAwBt8E,EAAWkxC,EAAU4rB,GACzC,GAAI98D,IAAc4Q,GAAUgH,OACxB,IAAK1qG,KAAKiuK,sBAAsB/pJ,IAAI0rI,GAAU,CAC1C,MAAM6f,EAAqB,GAAEzrC,KAAYhkI,KAAKiuK,sBAAsBnhH,OAEpE9sD,KAAKiuK,sBAAsBnnI,IAAI8oH,EAAS6f,EAC3C,OACE,IAAKzvK,KAAKguK,sBAAsB9pJ,IAAI0rI,GAAU,CACjD,MAAM6f,EAAqB,GAAEzrC,KAAYhkI,KAAKguK,sBAAsBlhH,OAEpE9sD,KAAKguK,sBAAsBlnI,IAAI8oH,EAAS6f,EAC3C,CACJ,CAUDC,mCAAmCv7J,GAC/B,IAAKA,EACD,MAAM,IAAI5R,MAAM,mCAGpB,MAAM4rK,EAAc,IAAIX,GAAiBr5J,EAAKvD,KAE9C,OAAI5Q,KAAKkuK,+BAA+BC,GAC7B,IAAIt2J,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKu9J,EAAYN,aAIlB15J,CACV,CAiBDw7J,2BAA2BC,GAAa,MAEpC,IAAKA,IAAgBA,EAAYh/J,MAAQg/J,EAAY5+J,KACjD,OAAO4+J,EAGX,MAAMzB,EAAc,IAAIX,GAAiBoC,EAAYh/J,KAC/Ci/J,EAAU,UAAG1B,EAAYR,YAAYjqE,GAAU8M,cAArC,aAAG,EAA2C,GAE1Dq/D,IACA7vK,KAAKivK,2BAA2BY,GAChC7vK,KAAK8vK,mBAAmBD,IAG5B,MAAME,EAAc5B,EAAYR,YAAYjqE,GAAUgH,OAEjDjD,GAAAA,mCACDsoE,EAAYnlK,OAAO,GAGvB,IAAK,MAAMs9H,KAAc6nC,EACrB/vK,KAAKivK,2BAA2B/mC,GAChCloI,KAAK8vK,mBAAmB5nC,GAU5B,OALKloI,KAAKu+F,IAAIyxE,mBACVhwK,KAAKguK,sBAAsBz3I,QAC3Bv2B,KAAKiuK,sBAAsB13I,SAGxB,IAAI1e,sBAAsB,CAC7B7G,KAAM4+J,EAAY5+J,KAClBJ,IAAKu9J,EAAYN,YAExB,CAYDiC,mBAAmBtzG,GAAc,UAC7B,MAAM3lD,EAAU,IAAK,IAAIw3C,IAAJ,UAAQmO,EAAa5pD,aAArB,iBAAQ,EAAoBc,aAA5B,aAAQ,EAA2BjC,KAAI/D,GAAKA,EAAEtB,OAC7D0mF,EAAS,UAAGt2B,EAAa5pD,aAAhB,aAAG,EAAoB5B,KAEtC,IAAK8hF,EACD,MAAM,IAAIvwF,MAAM,8DAGpB,IAAK,MAAMwV,KAAUlB,EAAS,CAC1B,MAAMo5J,EAAazzG,EAAa9oD,MAAMe,MAAKjB,GAAQA,EAAKpH,KAAO2L,GAA6B,SAAnBvE,EAAK1E,YAMxEohK,EALO1zG,EAAa9oD,MAAMe,MAAKjB,GAAQA,EAAKpH,KAAO2L,GAA6B,SAAnBvE,EAAK1E,YAAsBjH,MACxE6D,MAAM,KAAK,GAIAA,MAAM,KACjCykK,EAAaD,EAAgBA,EAAgB5rK,OAAS,GACtDiyG,EAAam0D,GAA2B1qK,KAAK+tK,gBAAiBj7E,EAAWq9E,GAW/E,GATKF,GAEDzzG,EAAa9oD,MAAM9R,KAAK,CACpBwK,GAAI2L,EACJjJ,UAAW,OACXjH,MAAO0uG,IAIXzjB,IAAc4Q,GAAUgH,MAAO,OAC/B,MAAMmJ,EAAS,UAAG7zG,KAAKu+F,IAAIu9C,sBAAsBrnI,MAAK6Q,GAASA,EAAMy2H,kBAAoBxlC,WAA1E,aAAG,EACZstD,eAEFhwD,GAEAr3C,EAAa9oD,MAAM9R,KAAK,CACpBwK,GAAI2L,EACJjJ,UAAW,YACXjH,MAAOgsG,GAGlB,CACJ,CACJ,ECjZL,MAAM9oG,IAASkC,EAAAA,EAAAA,yCAef,SAASmjK,GAA0Bx9J,EAAOy9J,EAAiBC,GACvD,MAAM16J,EAAcy6J,EAAgBjkK,GAC9B2J,EAAkBs6J,EAAgBp6J,KAClCH,EAAmBu6J,EAAgBr5J,MAEnCu5J,EAAkB39J,EAAMg6J,WAAWh3J,GAErC26J,IAAoBD,IAGpBC,IAGA39J,EAAMq5J,WAAWsE,GACjB39J,EAAMs6J,qBAAqBqD,IAE/B39J,EAAMs5J,iBAAiB,CACnB9/J,GAAIkkK,EACJxhK,UAAW,QACXjH,MAAOiO,IAEXC,GAAmBnD,EAAMs5J,iBAAiB,CACtC9/J,GAAIkkK,EACJxhK,UAAW,OACXjH,MAAOkO,IAEXnD,EAAM26J,aAAa,CACf54J,UAAW,MACXjB,MAAQ,GAAEkC,KAAe06J,MAEhC,CAUc,MAAME,GAIjB5wK,cAKII,KAAKywK,sBAAwB,IAAIriH,GACpC,CAODh6C,iBACIpU,KAAKywK,sBAAsBl6I,OAC9B,CAQDliB,aAAaq8J,GACT3lK,GAAOkT,MAAM,yBAA0ByyJ,GACvC1wK,KAAKywK,sBAAwBC,CAChC,CASDC,eAAeC,GACX,IAAIxiC,GAAW,EACf,MAAMyiC,EAAiB,IAAIrD,GAAiBoD,GACtCE,EAAcD,EAAelD,YAAYjqE,GAAUgH,OAEzD,GAAKomE,UAAAA,EAAaxsK,OAGd,OAFAyG,GAAOkT,MAAO,sCAAqC2yJ,KAE5CA,EAGX,IAAK,MAAM1oC,KAAc4oC,EACjB9wK,KAAK+uK,gBAAgB7mC,KACrBkG,GAAW,GAInB,OAAOA,EAAWyiC,EAAehD,WAAa+C,CACjD,CASD7B,gBAAgB7mC,GACZ,GAAIA,EAAW35H,YAAco0H,GAAe8H,SACxC,OAAO,EAEX,GAAIvC,EAAWskC,eAAiB,EAC5B,OAAO,EAEX,MAAMuE,EAAoB7oC,EAAW4kC,uBAErC,IAAK,MAAMt5J,KAAQu9J,EAAmB,CAClC,MAAM96J,EAAOiyH,EAAW2jC,iBAAiBr4J,EAAM,QACzCwD,EAAQkxH,EAAW2jC,iBAAiBr4J,EAAM,SAChD,IAAIw9J,EAAuBhxK,KAAKywK,sBAAsBtsJ,IAAI3Q,GAE1D,IAAKw9J,EAAsB,CAMnBA,EAHgC9oC,EAAW0kC,WAAWp5J,IAK/B+xH,GAAAA,eAE3BvlI,KAAKywK,sBAAsB3pI,IAAItzB,EAAMw9J,EACxC,CACDZ,GACIloC,EACA,CACI97H,GAAIoH,EACJwD,QACAf,QAEJ+6J,EACP,CAID,OAAO,CACV,CAQDC,SAASL,GACL,MAAMC,EAAiB,IAAIrD,GAAiBoD,GACtCE,EAAcD,EAAelD,YAAYjqE,GAAUgH,OAEzD,GAAKomE,UAAAA,EAAaxsK,OAGd,OAFAyG,GAAOkT,MAAO,sCAAqC2yJ,KAE5CA,EAGX,IAAK,MAAM1oC,KAAc4oC,EACrB,GAAI5oC,EAAW35H,YAAco0H,GAAe8H,UACrCvC,EAAWskC,gBACXtkC,EAAWukC,wBAAyB,CACvC,MAAMyE,EAAYhpC,EAAWkkC,WAAW,OAGxClkC,EAAWilC,wBAAwB,OAGnC,IAAK,MAAM12J,KAAYy6J,EAAW,CAC9B,MAAMZ,EAAU5E,GAAmBj1J,GAEnCyxH,EAAW+jC,WAAWqE,EACzB,CACJ,CAGL,OAAOO,EAAehD,UACzB,ECnML,MAAM9iK,IAASkC,EAAAA,EAAAA,4CASA,MAAMkkK,GAOjBvxK,YAAYghB,GACR5gB,KAAKoxK,sBACLpxK,KAAK4gB,UAAYA,CACpB,CAODwwJ,sBACIpxK,KAAK4uK,kBAAoB,KACzB5uK,KAAKqxK,gBAAiB,CACzB,CASDC,eAAe17J,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAIrT,MAAM,kCAEpBvC,KAAK4uK,kBAAoBh5J,CAC5B,CAMD27J,uBACI,OAAOlxJ,QAAQrgB,KAAK4uK,kBACvB,CAaD4C,gCAAgCZ,GAAQ,MACpC,MAAMC,EAAiB,IAAIrD,GAAiBoD,GACtC1oC,EAAU,UAAG2oC,EAAelD,YAAYjqE,GAAUgH,cAAxC,aAAG,EAA8C,GAEjE,IAAKw9B,EAGD,OAFAn9H,GAAOkT,MAAO,GAAEje,KAAK4gB,gDAAgDgwJ,KAE9DA,EAGX,GAA6B,aAAzB1oC,EAAW35H,UAGPvO,KAAK4uK,mBAAqB5uK,KAAKqxK,eAC/BnpC,EAAWgkC,iBAAiB,CACxB9/J,GAAIpM,KAAK4uK,kBACT9/J,UAAW,QACXjH,MAAQ,YAAW7H,KAAK4uK,sBAG5B7jK,GAAOsM,KAAM,GAAErX,KAAK4gB,8DAErB,CACH,MAAM6wJ,EAAiBvpC,EAAWwkC,sBAElC,IAAK+E,EAGD,OAFA1mK,GAAOsM,KAAM,GAAErX,KAAK4gB,6DAEbgwJ,EAEX,GAAI5wK,KAAK4uK,kBAAmB,CACxB1mC,EAAWklC,YAAYqE,EAAgBzxK,KAAK4uK,mBAC5C,IAAK,MAAMl6J,KAASwzH,EAAW1zH,WAC3B,GAAwB,QAApBE,EAAMC,UAAqB,CAC3B,MAAMiB,EAAc61J,GAAiB/2J,GAC/B47J,EAAU5E,GAAmBh3J,GAG/BkB,IAAgB67J,IAChB/8J,EAAMhB,MACC,GAAE1T,KAAK4uK,qBAAqB0B,IAE1C,CAER,MACGtwK,KAAK4uK,kBAAoB6C,EAE7BzxK,KAAKqxK,gBAAiB,CACzB,CAED,OAAOR,EAAehD,UACzB,ECtGU,MAAM6D,GASjB9xK,YAAYmH,GACR/G,KAAKosH,SAAWrlH,EAChB/G,KAAK2xK,WAAa,IAAIvjH,IAEjBpuD,KAAKosH,SAASv4G,cACf7T,KAAKosH,SAASv4G,YAhCI,EAkCzB,CASA+9J,oBAAoBh/J,GACjB,MAAM6pD,EAAM7pD,EAAM6pD,IACZo1G,EAAc7xK,KAAK2xK,WAAWxtJ,IAAIs4C,GAClC4gF,EAAWr9I,KAAKsU,gBAAgB1B,GAChC0C,EAAUtV,KAAK8xK,kBAAkBl/J,EAAOyqI,EAAS,GAAI,QACrD9nI,EAAWvV,KAAK8xK,kBAAkBl/J,EAAOyqI,EAAS,GAAI,SAE5DzqI,EAAMc,MAAQ,GACdd,EAAM4B,WAAa,GAEnB,IAAK,MAAMhB,KAAQq+J,EACfj/J,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,OACXjH,MAAOyN,IAEX1C,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,QACXjH,MAAO0N,IASf,OALA3C,EAAM4B,WAAW5S,KAAK,CAClB+S,UAAW,MACXjB,MAAOm+J,EAAY5+J,KAAK,OAGrBL,CACV,CAUDm/J,8BAA8Bn/J,EAAmCgD,GAC7D,MAAMoB,EAAQhX,KAAK8xK,kBAAkBl/J,EAAOgD,EAAa,SACzD,IAAIK,EAAOjW,KAAK8xK,kBAAkBl/J,EAAOgD,EAAa,QACtD,MAAMo8J,EAA0B,CAACp/J,EAAmCY,KAChEZ,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,QACXjH,MAAOmP,IAEXpE,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EACJ1E,UAAW,OACXjH,MAAOoO,GAHX,EAUCA,IACDA,EAAOrD,EAAMqD,KACQrD,EAAMc,MAEdtQ,SAAQoQ,IACjBZ,EAAMc,MAAM9R,KAAK,CACbwK,GAAIoH,EAAKpH,GACT0C,UAAW,OACXjH,MAAOoO,GAHX,KASR,MAAMC,EAAW,GAEjB,IAAK,IAAIpR,EAAI,EAAGA,EAAI9E,KAAKosH,SAASv4G,YAAc,IAAK/O,EAAG,CACpD,MAAMqR,EAAUnW,KAAKiyK,gBAErBD,EAAwBp/J,EAAOuD,GAC/BD,EAAStU,KAAKuU,EACjB,CAQD,OANAvD,EAAM4B,WAAa5B,EAAM4B,YAAc,GACvC5B,EAAM4B,WAAW5S,KAAK,CAClB+S,UAAW,MACXjB,MAAOkC,EAAc,IAAMM,EAASjD,KAAK,OAGtCL,CACV,CAODq/J,gBAGI,OAAOhuK,KAAKC,MAFA,WAEMD,KAAKE,SAC1B,CAUD2tK,kBAAkBl/J,EAAmCY,EAAcC,GAA4C,QAC3G,iBAAOb,EAAMc,aAAb,iBAAO,EAAae,MAChBd,GAAYzD,OAAOyD,EAASvH,MAAQoH,GACjCG,EAAS7E,YAAc2E,WAF9B,aAAO,EAEuC5L,KACjD,CAQDyM,gBAAgB1B,GAA0D,QACtE,MAAM2B,EAAQ,UAAG3B,EAAM4B,kBAAT,aAAG,EAAkBC,MAAKC,GAA6B,QAApBA,EAAMC,YAEvD,OAAIJ,EACOA,EAASb,MAAMhI,MAAM,KAAK+F,KAAI+B,GAAQtD,OAAOsD,KAGxD,UAAIZ,EAAMc,aAAV,OAAI,EAAapP,OACN,CAAE4L,OAAO0C,EAAMc,MAAM,GAAGtH,KAG5B,IACV,CAWD0L,sBAAsB+P,GAClB,IAAKA,IAAgBA,EAAYjX,IAC7B,OAAOiX,EAEX,MAAMhX,EAAUqC,GAAAA,MAAgB2U,EAAYjX,KAE5C,IAAK,IAAIE,KAASD,EAAQC,MAAO,WAE7B,GAAIA,EAAMvC,YAAco0H,GAAe8H,UAAY35H,EAAMvC,YAAco0H,GAAe4G,SAClF,SAIJ,GAAIz4H,EAAME,OAAS0yF,GAAUgH,MACzB,SAEJ,MAAMjuC,EAAM3rD,EAAM2rD,IACZpmD,EAAW,IAAIg4C,IAAJ,UAAQv9C,EAAM4C,aAAd,aAAQ,EAAajC,KAAIkC,GAAYA,EAASvH,MACzDoK,EAAS,oBAAG1F,EAAM0D,kBAAT,aAAG,EAAkBlQ,cAArB,QAA+B,EAC9C,IAAIsR,EAGJ,KAAsB,IAAlBS,EAASy2C,MAAcz2C,EAASy2C,KAAO,GAAwB,IAAlBz2C,EAASy2C,MAA4B,IAAdt2C,GAAxE,CAGA,GAAsB,IAAlBH,EAASy2C,KAAY,OACrBl3C,EAAc1F,OAAM,UAACY,EAAM4C,MAAM,UAAb,aAAC,EAAgBtH,GACxC,KAAM,CACH,MAAMqK,EAAW3F,EAAM0D,WAAWC,MAAKC,GAA6B,QAApBA,EAAMC,YAElD8B,IACAb,EAAc1F,OAAOuG,EAAS/C,MAAMhI,MAAM,KAAK,IAEtD,CAED,GAAI1L,KAAK2xK,WAAWztJ,IAAIu4C,GACpB3rD,EAAQ9Q,KAAK4xK,oBAAoB9gK,OAC9B,CACHA,EAAQ9Q,KAAK+xK,8BAA8BjhK,EAAO8E,GAClD,MAAMmB,EAAiB/W,KAAKsU,gBAAgBxD,GAG5C9Q,KAAK2xK,WAAW7qI,IAAI21B,EAAK1lD,EAC5B,CAnBA,CAoBJ,CAED,OAAO,IAAIc,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgBrC,IAE5B,ECpOE,IAAKqhK,aAAAA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,SAAAA,WAAAA,EAAAA,YAAAA,cAAAA,EAAAA,UAAAA,aAAAA,KAAAA,GAAAA,CAAAA,IAkCZ,MAAMnnK,IAASkC,EAAAA,EAAAA,2DA2BR,MAAMklK,GA+EoB,8BACrBC,EACAC,EACA16D,EACA26D,GAGJ,OAAI36D,EAGOu6D,GAAqBjgC,OAI5BzxG,GAAQi3D,qCACH66E,EAGMF,EACAC,EAAsBH,GAAqBK,YAAcL,GAAqBM,UAGlFN,GAAqB3oC,SALjB2oC,GAAqBjgC,OAS7BmgC,EAAuBF,GAAqBjgC,OAASigC,GAAqB3oC,QACpF,CAa4B,8BAAC5xB,EAAuB26D,GACjD,OAAK9xI,GAAQi3D,qCAKNkgB,IAAiB26D,EAClBJ,GAAqBjgC,OAASigC,GAAqBK,YAJ9CL,GAAqBjgC,MAKnC,CAgBDryI,YAAYowG,EAAU1C,EAA6BhoF,EAAyBve,GAKxE/G,KAAKgwG,IAAMA,EACXhwG,KAAKstG,WAAaA,EAClBttG,KAAKslB,MAAQA,EAEbtlB,KAAKyyK,eAAiB,KACtBzyK,KAAK0yK,kBAAoB,KACzB1yK,KAAK2yK,mBAAqB,CAAC,EAC3B3yK,KAAK4yK,WAAa,KAElB5yK,KAAK6yK,6BAA+E,iBAAzC9rK,EAAQ8rK,6BAC7C9rK,EAAQ8rK,6BApL2B,IAsLzC7yK,KAAK8yK,kBAAyD,iBAA9B/rK,EAAQ+rK,kBAClC/rK,EAAQ+rK,kBAlLe,KAoL7B9yK,KAAK+yK,eAAmD,iBAA3BhsK,EAAQgsK,eAC/BhsK,EAAQgsK,eAhLW,IAiLzBhoK,GAAOsM,KAAM,0BAAyBrX,KAAK+yK,iBAC9C,CAQDC,yBACI,MAAMz8D,EAAav2G,KAAKslB,MAAMy2H,gBAE9B,OAAO/7I,KAAKgwG,IAAIoiE,qBAAqB77D,GAC/Bv2G,KAAK+yK,eACL/yK,KAAKstG,WAAW2lE,cAAgBjzK,KAAK8yK,kBAAoB9yK,KAAK6yK,4BACvE,CAKDn5J,OAEI1Z,KAAKkzK,aAAelzK,KAAKmzK,yBAAyBtwK,KAAK7C,MACvDA,KAAKstG,WAAWvoE,GAAGqlD,EAAsBsC,WAAY1sF,KAAKkzK,cAG1DlzK,KAAKozK,YAAcpzK,KAAKqzK,WAAWxwK,KAAK7C,MACxCA,KAAKstG,WAAWvoE,GAAGqlD,EAAsBwD,UAAW5tF,KAAKozK,aAIrD5yI,GAAQi3D,uCAERz3F,KAAKszK,iBAAmBtzK,KAAKuzK,gBAAgB1wK,KAAK7C,MAClDA,KAAKgwG,IAAI3tG,YAAYskF,GAAAA,QAAAA,kBAA6B3mF,KAAKszK,kBAEvDtzK,KAAKwzK,mBAAqBxzK,KAAKyzK,kBAAkB5wK,KAAK7C,MACtDA,KAAKgwG,IAAI3tG,YAAYskF,GAAAA,QAAAA,oBAA+B3mF,KAAKwzK,oBAGzDxzK,KAAK0zK,yBAA2B1zK,KAAK2zK,wBAAwB9wK,KAAK7C,MAClEA,KAAKslB,MAAMyf,GAAG6pD,GAAqC5uF,KAAK0zK,0BAGxD1zK,KAAK4zK,yBAA2B5zK,KAAK6zK,wBAAwBhxK,KAAK7C,MAClEA,KAAKslB,MAAMyf,GAAG6pD,GAA0C5uF,KAAK4zK,2BAGjE5zK,KAAK8zK,2BAA6B9zK,KAAK+zK,0BAA0BlxK,KAAK7C,MACtEA,KAAKstG,WAAWvoE,GAAGqlD,EAAsBlD,0BAA2BlnF,KAAK8zK,4BAEzE9zK,KAAKg0K,qBAAuBh0K,KAAKmzK,yBAAyBtwK,KAAK7C,MAC/DA,KAAKgwG,IAAIjrE,GAAG4hD,GAAAA,QAAAA,oBAA+B3mF,KAAKg0K,qBACnD,CAKD55E,UACQ55D,GAAQi3D,uCACRz3F,KAAKgwG,IAAIrrE,eAAegiD,GAAAA,QAAAA,kBAA6B3mF,KAAKszK,kBAC1DtzK,KAAKgwG,IAAIrrE,eAAegiD,GAAAA,QAAAA,oBAA+B3mF,KAAKwzK,oBAE5DxzK,KAAKslB,MAAMsiB,IAAIgnD,GAAqC5uF,KAAK0zK,0BACzD1zK,KAAKslB,MAAMsiB,IAAIgnD,GAA0C5uF,KAAK4zK,2BAGlE5zK,KAAKstG,WAAW1lE,IAAIwiD,EAAsBlD,0BAA2BlnF,KAAK8zK,4BAC1E9zK,KAAKstG,WAAW1lE,IAAIwiD,EAAsBsC,WAAY1sF,KAAKkzK,cAC3DlzK,KAAKstG,WAAW1lE,IAAIwiD,EAAsBwD,UAAW5tF,KAAKozK,aAC1DpzK,KAAKgwG,IAAIrrE,eAAegiD,GAAAA,QAAAA,oBAA+B3mF,KAAKg0K,sBAE5Dh0K,KAAK2J,eACL3J,KAAKi0K,yBACLj0K,KAAKk0K,mCAAmCjzK,KAAKC,OAC7ClB,KAAKmzK,0BACR,CAMDgB,uBAAuBC,GACnB,GAAIp0K,KAAKslB,MAAM+uJ,4BAA8BD,EAAW,CAEpD,MAAM79D,EAAav2G,KAAKslB,MAAMy2H,gBAE9B/7I,KAAKslB,MAAMgvJ,yBAAyBF,GAEpCrpK,GAAOkT,MAAO,+BAA8Bhd,KAAKC,UAAUq1G,MAAe69D,KAG1EhpE,GAAWwD,QACP3nG,KAAK8B,UAAU,CACXqD,GAAI,yBACJkZ,MAAOixF,EACPlhC,OAAQ++F,KAIhBp0K,KAAKslB,MAAMhjB,KAAKssF,GAAiD5uF,KAAKslB,MAAO8uJ,EAChF,CACJ,CAMDzqK,eACQ3J,KAAK4yK,aACLrzK,OAAOoK,aAAa3J,KAAK4yK,YACzB5yK,KAAK4yK,WAAa,KAEzB,CAKDqB,yBACIj0K,KAAK0yK,kBAAoB,IAC5B,CAUDJ,qBACI,IAAK9xI,GAAQi3D,qCACT,OAAO,EAGX,MAAM88E,EAAkBv0K,KAAKslB,MAAMy+I,qBAC7B2O,EAAoB1yK,KAAK0yK,kBACzBh/F,EAAU1zE,KAAKgzK,yBAErB,OAAOuB,GAAgD,iBAAtB7B,GAAmCzxK,KAAKC,MAAQwxK,GAAsBh/F,CAC1G,CAKDy/F,2BACI,MAAM58D,EAAav2G,KAAKslB,MAAMy2H,gBACxBy4B,EAAYx0K,KAAKstG,WAAW2lE,cAC5BwB,EAAsBz0K,KAAK00K,uBAC3BC,EAA+C,IAA/B30K,KAAKstG,WAAWsnE,WAIhCj9D,EAAe33G,KAAKslB,MAAMmqF,WAAaklE,EACvCrC,EAAqBtyK,KAAKsyK,qBAC1BF,EAAuBpyK,KAAKgwG,IAAIoiE,qBAAqB77D,GAErDs+D,EACAL,EACIrC,GAAyB2C,uBACvBn9D,EACA26D,GACFH,GAAyB4C,uBACvB3C,EACAqC,EACA98D,EACA26D,GAGRuC,IAAa3C,GAAqBM,WAClCxyK,KAAKg1K,uBAGTjqK,GAAOkT,MACF,8BAA6Bs4F,sBAC1BoB,yBACA26D,eACAkC,8BACApC,iCACApyK,KAAKslB,MAAM+uJ,gCAAgCQ,KAEnD,MAAMI,EAAqBj1K,KAAK2yK,oBAAsB,CAAC,EAIvD,KAAM,QAASsC,MACN,oBAAqBA,IACvBA,EAAmBvrE,MAAQ8qE,GAC3BS,EAAmBC,kBAAoBL,EAAU,CAEpD,MAAMM,EAAQl0K,KAAKC,MAEnBlB,KAAKk0K,mCAAmCiB,GAExCn1K,KAAK2yK,mBAAqB,IACnBsC,EACHC,gBAAiBL,EACjBnrE,IAAK8qE,EACLY,UAAWD,GAKT,cAAen1K,KAAK2yK,qBACtB3yK,KAAK2yK,mBAAmB9+D,UAAY7zG,KAAKslB,MAAMu+I,eAEtD,CACD7jK,KAAKm0K,uBAAuBU,EAC/B,CAODX,mCAAmCiB,GAC/B,MAAME,EAAuBr1K,KAAK2yK,mBAE9B0C,GACG,cAAeA,GACf,cAAeA,GACf,oBAAqBA,GACrB,QAASA,IACZA,EAAqBxtK,MAAQstK,EAAQE,EAAqBD,UAC1DhqE,GAAWgE,cxG5GwB,eAAExhE,EAAF,uDAAuB,CAAC,EAAxB,MAAiC,CAC5E58B,KAAM0/E,GAAgBC,iBACtB54E,OAAQ,yBACR/D,OAAQ,WACR45B,aAJ2C,CwG4GV0nI,CAAgCD,IAEhE,CAUDtB,4BAGiC,IAFzBwB,EAEyB,uDAFW,GACpCC,EACyB,uDADY,GACrCnsK,EAAyB,uCAE7B,MAAMktG,EAAav2G,KAAKslB,MAAMy2H,gBAKzBv7G,GAAQi3D,sCACTz3F,KAAKmzK,2BAGLoC,EAAwB7nJ,SAAS6oF,KACjCv2G,KAAKslB,MAAMmwJ,yCACXz1K,KAAKg1K,uBACLx0I,GAAQi3D,sCAAwCz3F,KAAKmzK,4BAGrDqC,EAAyB9nJ,SAAS6oF,KAElCv2G,KAAKslB,MAAMowJ,qCAAqCrsK,GAChDm3B,GAAQi3D,sCAAwCz3F,KAAKmzK,2BAE5D,CAKD6B,uBACI,MAAMW,EAAS31K,KAAKyyK,eAEhBkD,IACAhsK,aAAagsK,GACb31K,KAAKyyK,eAAiB,KAE7B,CAWDiC,uBACI,MAAMkB,EAAmC51K,KAAKslB,MAAMuwJ,uCAEpD,SAAID,GACI30K,KAAKC,MAAQ00K,GA1cK,OAgdX51K,KAAKyyK,iBAGhBzyK,KAAKyyK,eAAiB7oK,YAAW,IAAM5J,KAAKmzK,4BAndtB,OAsdnB,EACV,CAGD2C,gBAAgBxwJ,GACZ,OAAOA,EAAMy2H,kBAAoB/7I,KAAKslB,MAAMy2H,eAC/C,CAMDs3B,WAAWjnK,GACHpM,KAAKslB,MAAMkiF,qBAAuBp7F,IAClCpM,KAAKk0K,mCAAmCjzK,KAAKC,OAC7ClB,KAAK2yK,mBAAqB,CAAC,EAElC,CAODY,gBAAgBjuJ,GACZ,IAAKtlB,KAAK81K,gBAAgBxwJ,GACtB,OAGJ,MAAMixF,EAAajxF,EAAMy2H,gBAKzB,GAHAhxI,GAAOkT,MAAO,6BAA4Bs4F,IAAct1G,KAAKC,OAE7DlB,KAAK0yK,kBAAoBzxK,KAAKC,OACzBokB,EAAMmqF,UAAW,CAGlBzvG,KAAK2J,eAGL,MAAM+pE,EAAU1zE,KAAKgzK,yBAErBhzK,KAAK4yK,WAAarzK,OAAOqK,YAAW,KAChCmB,GAAOkT,MAAO,4BAA2Bs4F,0BAAmC7iC,QAC5E1zE,KAAK2J,eACL3J,KAAKmzK,0BAAL,GACDz/F,EACN,CACJ,CAOD+/F,kBAAkBnuJ,GACd,IAAKtlB,KAAK81K,gBAAgBxwJ,GACtB,OAGJ,MAAMixF,EAAav2G,KAAKslB,MAAMy2H,gBAE9BhxI,GAAOkT,MAAO,+BAA8Bs4F,IAAct1G,KAAKC,OAE/DlB,KAAK2J,eACL3J,KAAKi0K,yBAELj0K,KAAKmzK,0BACR,CAQDQ,wBAAwBruJ,GACpB,IAAKtlB,KAAK81K,gBAAgBxwJ,GACtB,OAGJ,MAAMixF,EAAav2G,KAAKslB,MAAMy2H,gBAE9BhxI,GAAOkT,MAAO,8CAA6Cs4F,IAAcjxF,EAAMmqF,WAE/EzvG,KAAKmzK,0BACR,CAODU,wBAAwB7iK,GACpB,MAAMmkK,EAAQl0K,KAAKC,MAEnBlB,KAAKk0K,mCAAmCiB,GAExCn1K,KAAK2yK,mBAAqB,IACnB3yK,KAAK2yK,oBAAsB,CAAC,EAC/B9+D,UAAW7iG,EACXokK,UAAWD,EAElB,EAGL,YC9nBMpqK,GAASzL,EAAAA,MAAAA,6CAETqnF,GAAYrnF,EAAQ,MAE1B,IAAIy2K,IAA2B,EAC3BC,IAA2B,EAM/B,MAAMC,GAAkB,CAAE,QAAS,iBAAkB,QAAS,SAO/C,MAAMC,WAAyB5T,GAoB1C1iK,YACQowG,EACA1C,EACA6oE,EACAnkK,EACAsT,EACAwtE,EACA+gB,EACArgG,EACA+R,EACAo5E,EACA4X,GAaJ,GAZAp+B,MACIm1B,EACAt7F,EACAsT,GACA,QAGAwtE,EACA+gB,GACJ7zG,KAAKgwG,IAAMA,EAGS,iBAATx8F,EACP,MAAM,IAAIkI,UAAW,QAAOlI,qBAEhCxT,KAAKwT,KAAOA,EACZxT,KAAKm2K,gBAAkBA,EACvBn2K,KAAKulB,MAAQA,EACbvlB,KAAK2+F,MAAQA,EACb3+F,KAAKglK,YAAczuD,EACnBv2G,KAAKo2K,sBAAwB,KAC7Bp2K,KAAKq2K,0BAA4B,KAQjCr2K,KAAKs2K,kCAAoC,KAEzCt2K,KAAKklB,iBAAmBllB,KAAK+kC,GAAK/kC,KAAKu2K,kBAAkB1zK,KAAK7C,MAC9DA,KAAK6mC,oBAAsB7mC,KAAK4nC,IAAM5nC,KAAKw2K,qBAAqB3zK,KAAK7C,MAErE+K,GAAOkT,MAAO,6BAA4Bje,QAK1CA,KAAKy2K,aAAelxJ,EAGhBvlB,KAAKgwG,KAAOhwG,KAAKslB,OACjBtlB,KAAK02K,qBAET12K,KAAK22K,mBAAqB,CAAC,EAC3BV,GAAgB7yK,SAAQE,IACpBtD,KAAK22K,mBAAmBrzK,GAAStD,KAAK42K,uBAAuB/zK,KAAK7C,KAAMsD,EAAxE,GAEP,CAQDozK,qBACI12K,KAAKslB,MAAMJ,iBAAiB,QAAQ,IAAMllB,KAAK62K,iBAC/C72K,KAAKslB,MAAMJ,iBAAiB,UAAU,IAAMllB,KAAK82K,mBACjD92K,KAAKslB,MAAMJ,iBAAiB,SAAS,KACjCna,GAAOkT,MAAO,mBAAkBhd,KAAKC,WAAWlB,OAAhD,GAEP,CASDu2K,kBAAkBjzK,EAAOD,GACrB80E,MAAM91E,YAAYiB,EAAOD,GAErBC,IAAUsrF,IACP5uF,KAAK0mC,cAAckoD,MAClB5uF,KAAKq2K,4BAETr2K,KAAK+2K,4BACLhsK,GAAOkT,MAAO,wCAAuCje,KAAKglK,eAEjE,CAQDwR,qBAAqBlzK,EAAOD,GACxB80E,MAAMxzC,eAAerhC,EAAOD,GAExBC,IAAUsrF,IACN5uF,KAAK0mC,cAAckoD,MAEvB5uF,KAAKg3K,+BACLjsK,GAAOkT,MAAO,qCAAoCje,KAAKglK,eAE9D,CASD6R,eACI9rK,GAAOkT,MAAO,kBAAiBhd,KAAKC,WAAWlB,QAK3CA,KAAK6zG,YAAcprB,GAAU,UAAVA,QAMvBzoF,KAAKgwG,IAAI1N,aAAahgG,KAAKqkF,GAAUe,kBAAmB1nF,MALpD+K,GAAOkT,MAAM,yCAMpB,CASD64J,iBACI/rK,GAAOkT,MAAO,oBAAmBhd,KAAKC,WAAWlB,QAEjDA,KAAKgwG,IAAI1N,aAAahgG,KAAKqkF,GAAUiB,oBAAqB5nF,KAC7D,CAODo6F,UAGI,OAFAp6F,KAAKg3K,+BAEE7+F,MAAMiiB,SAChB,CAMD68E,QAAQpvK,GACA7H,KAAKulB,QAAU1d,IAIfA,IACA7H,KAAKy2K,cAAe,GAIpBz2K,KAAKgS,SACLhS,KAAKgS,OAAOuT,MAAQ1d,GAGxB7H,KAAKulB,MAAQ1d,EACb7H,KAAKsC,KAAKssF,GAAqC5uF,MAClD,CAODyvG,UACI,OAAOzvG,KAAKulB,KACf,CAQDiiF,mBACI,OAAOxnG,KAAKm2K,eACf,CAKDj3E,UACI,OAAO,CACV,CAQDg4E,UACI,OAAOl3K,KAAKwT,IACf,CAQDuoI,gBACI,OAAO/7I,KAAKglK,WACf,CAODrnB,SAASrc,GACLthI,KAAKm2K,gBAAkB70C,EACvBthI,KAAKsC,KAAKssF,GAAsC0yC,EACnD,CAODoc,cAAcpwI,GACVtN,KAAKglK,YAAc13J,CACtB,CAODswI,cAAc5sI,GACNhR,KAAK6zG,YAAc7iG,IAGvBhR,KAAK6zG,UAAY7iG,EACjBhR,KAAKsC,KAAKssF,GAA0C59E,GACvD,CAKDmmK,gBACI,IAAKn3K,KAAKstG,WAAWuC,KACjB,OAGJ,MAAM7+F,EAAOhR,KAAK4nG,eAAiB,QAAU,QAEvC1mG,EAAM3B,OAAOqvB,YAAY1tB,MAE/B6J,GAAOsM,KAAM,iBAAgBrG,OAAW9P,GACxClB,KAAKstG,WAAW8pE,qBAAsB,GAAEpmK,YAAiB9P,EAKzD,MAAMm2K,EAAW93K,OAAO0xG,gBAAgB,2BAClCqmE,EAAS/3K,OAAO0xG,gBAAgB,yBAChCsmE,EACCjzI,MAAMgzI,IAAYhzI,MAAM+yI,GAAgC,EAApBC,EAASD,EAI9CG,EAAOt2K,GACNlB,KAAKstG,WAAW8pE,qBAAqB,oBAClCp3K,KAAKstG,WAAW8pE,qBAAqB,eACzCG,EzGwMmB3pI,MyGtMzB5tC,KAAKstG,WAAW8pE,qBAAsB,GAAEpmK,UAAewmK,EACvDzsK,GAAOsM,KAAM,eAAcrG,OAAWwmK,GAEtCpsE,GAAWgE,ezGmMcxhE,EyGlMrB,CACI,WAAc58B,EACduU,MAAOvlB,KAAKy2K,aACZ5uK,MAAO2vK,GzG+LkCjlF,GAAmC,OAAQ3kD,IyG5L/F,CASDk1H,mBAAmBC,GACVgT,IAA4B/1K,KAAKsnG,gBAC9B0uE,IAA4Bh2K,KAAK4nG,iBAIrC5nG,KAAKsnG,iBACLyuE,IAA2B,GAE3B/1K,KAAK4nG,iBACLouE,IAA2B,GAG/BjT,EAAU79I,iBAAiB,UAAWllB,KAAKm3K,cAAct0K,KAAK7C,OACjE,CAQDijK,eAAeF,GACXkT,GAAgB7yK,SAAQE,IACpBy/J,EAAU79I,iBAAiB5hB,EAAOtD,KAAK22K,mBAAmBrzK,GAA1D,GAEP,CAQD4/J,eAAeH,GACXkT,GAAgB7yK,SAAQE,IACpBy/J,EAAUl8H,oBAAoBvjC,EAAOtD,KAAK22K,mBAAmBrzK,GAA7D,GAEP,CAODszK,uBAAuB5lK,GACnBjG,GAAOkT,MAAO,GAAEjN,sDAAyDhR,OAC5E,CAODy3K,aACI,MAAM,QAAEtqJ,EAAF,MAAW5H,EAAX,WAAkB1G,GAAe7e,KAAKslB,MAE5C,MAAQ,eAAczG,aAAsB0G,eAAmB4H,GAClE,CAKD4pJ,4BACI,MAAMvoK,EAASxO,KAAKstG,WAAWvmG,QAAQyH,OAEvCxO,KAAKo2K,sBAAwBlE,GAAqBjgC,OAElDjyI,KAAKq2K,0BAA4B,IAAIlE,GACjCnyK,KAAKgwG,IACLhwG,KAAKstG,WACLttG,KACA,CAGI8yK,kBAAmBtkK,EAAOkpK,6BAC1B3E,eAAgBvkK,EAAOmpK,8BACvB9E,6BAA8BrkK,EAAOopK,mCAG7C53K,KAAKq2K,0BAA0B38J,QAO9B1Z,KAAKq2K,0BAA0B/D,sBACzBtyK,KAAKgwG,IAAI1N,aAAahgG,KACrBssF,GACA5uF,KACAA,KAAKo2K,sBAChB,CAKDY,+BACQh3K,KAAKq2K,4BACLr2K,KAAKq2K,0BAA0Bj8E,UAC/Bp6F,KAAKq2K,0BAA4B,KACjCr2K,KAAKo2K,sBAAwB,KAEpC,CAOD9B,yBAAyBj/F,GACrBr1E,KAAKo2K,sBAAwB/gG,CAChC,CAUDg/F,0BACI,OAAOr0K,KAAKo2K,qBACf,CAKDX,yCACIz1K,KAAKs2K,kCAAoC,IAC5C,CAODZ,qCAAqCrsK,GACjCrJ,KAAKs2K,kCAAoCjtK,CAC5C,CAODwsK,uCACI,OAAO71K,KAAKs2K,iCACf,CAMD9kK,WACI,MAAQ,uBAAsBxR,KAAKwnG,6BAA6BxnG,KAAK0vG,oBACjE1vG,KAAKk3K,mBAAmBl3K,KAAK2+F,sBAAsB3+F,KAAKglK,yBAAyBhlK,KAAKy3K,gBAC7F,ECtfL,MAAM1sK,IAASkC,EAAAA,EAAAA,sCAQF4qK,GAAa,KAIbC,GAAiB,CARN,IACA,IACA,KAYjB,MAAMC,GAMTn4K,YAAY6kB,GAAgB,UACxBzkB,KAAKmiB,GAAKsC,EACV,MAAMuzJ,EAAe,UAAGh4K,KAAKmiB,GAAGpb,eAAX,iBAAG,EAAiB+uI,oBAApB,aAAG,EAA+BmiC,iBACjDC,EAAmB,CACrBC,IA1BO,IA2BPC,SA1BO,IA2BPC,KAAMR,GACNS,OAAQT,IAMZ73K,KAAKu4K,cAAgBP,QAAAA,EAAmBE,EACxCl4K,KAAKw4K,iBAAL,UAAwBx4K,KAAKu4K,cAAc91C,WAA3C,QAAkDziI,KAAKu4K,aAC1D,CAODE,oBAAoBC,GAChB,OAAI14K,KAAKmiB,GAAGssJ,iBAAmBiK,EAAW9wE,eAC/B5nG,KAAK24K,yBAAyBD,EAAW7U,gBAG7C6U,EAAW9wE,eACZ,CAAE,CACA2C,OAAQvqG,KAAKmiB,GAAGs9H,oBAChB5/E,WAAY7/D,KAAKu4K,cAAcF,OAEjC,CAAE,CAAE9tE,OAAQvqG,KAAKmiB,GAAGq9H,qBAC7B,CAiBDm5B,yBAAyB9kE,GACrB,MAAM+kE,EAAkB/kE,IAAcprB,GAAU,UAAVA,SAAqBzoF,KAAKw4K,iBAAiBF,OAC3Et4K,KAAKw4K,iBAAiBF,OAASt4K,KAAKw4K,iBAAiBH,KAE3D,MAAO,CACH,CACI9tE,OAAQvqG,KAAKmiB,GAAGs9H,oBAChB5/E,WAAYr/B,GAAQ5jB,YAAcg8J,EAAkB54K,KAAKw4K,iBAAiBL,IAC1E3lG,IA9EQ,IA+ERulF,sBAAuBv3H,GAAQ5jB,YA1EhB,EACA,GA2EnB,CACI2tF,OAAQvqG,KAAKmiB,GAAGs9H,oBAChB5/E,WAAY7/D,KAAKw4K,iBAAiBJ,SAClC5lG,IAnFQ,IAoFRulF,sBA9Ee,GAgFnB,CACIxtD,OAAQvqG,KAAKmiB,GAAGs9H,oBAChB5/E,WAAYr/B,GAAQ5jB,YAAc5c,KAAKw4K,iBAAiBL,IAAMS,EAC9DpmG,IAxFQ,IAyFRulF,sBAAuBv3H,GAAQ5jB,YArFhB,EADA,GAyF1B,CASDi8J,uBAAuBrxJ,EAAQs5D,GAAQ,MACnC,MAAM/yD,EAAavG,EAAOywI,gBAE1B,GAAIlqI,SAAJ,UAAIA,EAAYmqI,iBAAhB,OAAI,EAAuB5zJ,OACvB,IAAK,MAAM6J,KAAY4f,EAAWmqI,UAC9B/pJ,EAASo8F,OAASzpB,EAI1B,OAAOt5D,EAAOR,cAAc+G,EAC/B,CAUD+qJ,0BAA0BjxJ,GACtB,MAAMkxJ,EAAY7lK,GAAAA,MAAgB2U,EAAYjX,KA4B9C,OA1BAmoK,EAAUjoK,MAAM1N,SAAQwP,IACpB,GAAIA,EAAM5B,OAAS0yF,GAAU8M,MACzB,OAEJ,IAAK59F,EAAM4B,aAAe5B,EAAM4B,WAAWlQ,OACvC,OAEJ,IAAI00K,EAAiB,GAErB,MAAMtlK,EAAQ,IAAI26C,IAElBz7C,EAAM4B,WAAW/C,KAAIiD,GACjBA,EAAMhB,MACDhI,MAAM,KACNqF,OAAOsP,SACPjd,SAAQoQ,GAAQE,EAAMqc,IAAIvc,OAGnCE,EAAMtQ,SAAQoQ,IACV,MAAMqD,EAAUjE,EAAMc,MAAM3C,QAAOgH,GAAUA,EAAO3L,GAAGoF,aAAegC,IAEtEwlK,EAAiBA,EAAejtK,OAAO8K,EAAvC,IAEJjE,EAAMc,MAAQslK,CAAd,IAGG,IAAInhK,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgB6lK,IAE5B,CASDE,gBAAgBnmF,GAA8B,IAAnB4lF,EAAmB,uDAAN,KAKpC,OAJoBA,SAAAA,EAAYpzJ,OAASozJ,EAAW/rE,oBAC9C3sG,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MAAKzI,IAAC,eAAI,UAAAA,EAAEwb,cAAF,mBAAUlC,aAAV,eAAiBlZ,MAAOssK,EAAWjV,YAAvC,IAC/CzjK,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MAAKzI,IAAC,eAAI,UAAAA,EAAEi4B,gBAAF,mBAAY3e,aAAZ,eAAmBD,QAASytE,CAAhC,GAGxD,CAYDomF,kCAAkC/kK,GAG9B,GAAIqsB,GAAQ+3D,6BACR,OAAOpkF,EAEX,MAAMvD,EAAMsC,GAAAA,MAAgBiB,EAAKvD,KAC3Bo1E,EAAMp1E,EAAIE,MAAM6tI,WAAUlgF,GAASA,EAAMztD,OAAS0yF,GAAUgH,QAElE,GAAI95F,EAAIE,MAAMk1E,GAAK+lD,OAASn7H,EAAIE,MAAMk1E,GAAKmzF,cAAgBvoK,EAAIE,MAAMk1E,GAAK0oF,WAatE,OAVA99J,EAAIE,MAAM1N,SAAQ,CAACq7D,EAAO35D,KAClB25D,EAAMztD,OAAS0yF,GAAUgH,OAAS5lG,IAAMkhF,IACxCp1E,EAAIE,MAAMhM,GAAGinI,UAAOjlI,EACpB8J,EAAIE,MAAMhM,GAAG4pK,eAAY5nK,EAGzB8J,EAAIE,MAAMhM,GAAGq0K,kBAAeryK,EAC/B,IAGE,IAAI+Q,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKsC,GAAAA,MAAgBtC,KAK7BA,EAAIE,MAAMk1E,GAAK+lD,KAAO,CAClB,CACI3/H,GAtNQ,IAuNRmC,UAAW,QAEf,CACInC,GAzNQ,IA0NRmC,UAAW,QAEf,CACInC,GA5NQ,IA6NRmC,UAAW,SAOnB,MAAM6qK,EAAgB54I,GAAQ5jB,aAAe4jB,GAAQm1D,qBAAqB,IACnE,QAAOmiF,GAAe7kK,KAAK,OAC3B,YAAW6kK,GAAe7kK,KAAK,OAOtC,OAJArC,EAAIE,MAAMk1E,GAAKmzF,aAAe,CAC1BtxK,MAAOuxK,GAGJ,IAAIvhK,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKsC,GAAAA,MAAgBtC,IAE5B,CAQD2oI,SAASm/B,EAAYl4D,GACjB,MAAMl7F,EAAQozJ,EAAWhV,WAEzB,GAAIljD,EAAa,CACb,MAAMv+F,EAAU,GAEZy2J,EAAW/rE,qBACX1qF,EAAQrgB,KAAK82K,EAAW/rE,qBAK5B,MAAM0sE,EAAkB,CACpB9qK,UAAWo0H,GAAe2J,SAC1BrqH,UACA41I,cAAe,IAGdr3H,GAAQ5jB,cACTy8J,EAAgBxhB,cAAgB73J,KAAKy4K,oBAAoBC,IAE7D14K,KAAKmiB,GAAGsC,eAAegzI,eAAenyI,EAAO+zJ,EAChD,MAIGr5K,KAAKmiB,GAAGsC,eAAe80H,SAASj0H,EAEvC,CAUDg0J,8BAA8BC,EAAiBC,GAC3C,MAAMd,EAAaa,EAAgB7V,YAC7B,OAAElvI,GAAWkkJ,EAAWriB,cACxBojB,EAAuBz5K,KAAK24K,yBAAyBY,EAAgB1V,gBAiC3E,OAhCuB4V,EACtBhoK,KAAItD,GAAYqmB,EAASrmB,EAAS4pJ,wBAClCtmJ,KAAI,CAAC0Z,EAAa66D,KAAQ,MACvB,IAAIukB,EAASgvE,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,QAM1C+wF,EAAY,GAxSC,KAwSI,UAAAC,EAAqBzzF,UAArB,eAA2B+xE,wBAExC5sI,GAAequJ,EAkBzB,OARID,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,SAChCzoF,KAAKmiB,GAAGu3J,wBACR15K,KAAKmiB,GAAGnM,oBACPwqB,GAAQq2D,iBAxTG,IAyTZ4iF,EAAqBzzF,GAAK+xE,wBAC7BxtD,GAAS,GAGNA,CAAP,GAIP,CASDovE,2BAA2BJ,GAAiB,QACxC,MAAM1lE,EAAY0lE,EAAgB1V,eAC5B+V,GAAsB,UAAA55K,KAAKmiB,GAAGpb,eAAR,mBAAiB+uI,oBAAjB,eAA+B+jC,iBApVxC,IAqVbC,EAAoBP,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,SACtDzoF,KAAKmiB,GAAGu3J,yBACPl5I,GAAQq2D,gBAgBhB,OAf0B72F,KAAK24K,yBAAyBY,EAAgB1V,gBACvEpyJ,KAAItD,GACe2rK,EACVF,EAKA/lE,IAAcprB,GAAU,UAAVA,SAAqBjoD,GAAQo2D,oBAAsB52F,KAAKmiB,GAAGnM,uBACrElP,EACAqH,EAAS0xD,YAM1B,CASDk6G,8BAA8BR,GAAiB,MAC3C,MAAMb,EAAaa,EAAgB7V,YAC7B,OAAElvI,GAAWkkJ,EAAWriB,cACxB2jB,EAAch6K,KAAKmiB,GAAG05F,mBAAmB09D,EAAgB7V,YAC/D,IAAIj/B,EAAY,EAEhB,IAAKu1C,EACD,OAAO,KAEX,MAAMjsJ,EAAaisJ,EAAY/hB,gBAE/B,GAAKlqI,SAAD,UAACA,EAAYmqI,iBAAb,QAAC,EAAuB5zJ,OACxB,OAAO,KAGX,MAAM21K,EAAqBj6K,KAAKmiB,GAAGu3J,uBAC7B3rJ,EAAWmqI,UAAUvM,OAAMx9I,GAAYA,EAASo8F,SAChDx8E,EAAWmqI,UAAUzgJ,MAAKtJ,IAAaA,EAASo8F,SAMtD,GAAIgvE,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,SAAqBwxF,EACxD,OAAO,KAGX,IAAK,MAAM9rK,KAAY4f,EAAWmqI,UAC9B,GAAInqI,EAAWmqI,UAAU/pJ,GAAUo8F,OAAQ,CACvC,MAAMwtD,EACA/3J,KAAKmiB,GAAGssJ,gBACJzuK,KAAK24K,yBAAyBY,EAAgB1V,gBAAgB11J,GAAU4pJ,sBACxEhqI,EAAWmqI,UAAU/pJ,GAAU4pJ,sBAEzCtzB,EAAYxgI,KAAKD,IAAIygI,EAAWjwG,EAASujI,EAC5C,CAGL,OAAOtzB,CACV,CASDv9G,aAAay4H,EAAUC,GAAU,QAC7B,MAAM9sD,EAAS,UAAG8sD,aAAH,EAAGA,EAAUlwC,iBAAb,QAA0BiwC,aAA1B,EAA0BA,EAAUjwC,UAC7CiM,EAAc37G,KAAKmiB,GAAG0oF,eAAe/X,GACrCxtE,EAAK,UAAGs6H,aAAH,EAAGA,EAAU8jB,kBAAb,QAA2B,KAChCwW,EAAmBzyE,GAAAA,oCAClBkU,aADkB,EAClBA,EAAar3G,UACZq7I,GACDC,IACCjkC,EAAYlnG,MAAKzI,GAAKA,IAAM4zI,IACpC,IAAIr4H,EAGJ,GAAIo4H,IAAaA,EAASlwC,UACtBloF,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MAAKzI,GAAKA,EAAEwb,OAAOlC,QAAUq6H,EAAS+jB,kBAK1F,GAAIwW,EACP3yJ,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MACnDzI,GAAKA,EAAEi4B,SAAS3e,MAAMD,OAASytE,GAC5B9mF,EAAEuC,YAAco0H,GAAe8H,WAG7BzqI,KAAKmiB,GAAGw8E,OAAS3yF,EAAEqzI,mBAAqB1c,GAAe8H,UACpDz+H,EAAEqzI,mBAAqB1c,GAAe4G,WAAav9H,EAAEmuK,eAI9D,OACH5yJ,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MAAKzI,GAAKA,EAAEi4B,SAAS3e,MAAMD,OAASytE,IAC3F,MAAMyjB,EAAU,UAAGqpC,aAAH,EAAGA,EAAU7D,uBAAb,QAAgC4D,aAAhC,EAAgCA,EAAU5D,gBAE1D,GAAIxlC,EAAY,CACZ,MAAM45D,EAAapF,GAA6Bx0D,GAEhD,GAAIv2G,KAAKmiB,GAAGw8E,MACRp3E,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAChC5W,QAAO/E,GAAKA,EAAEi4B,SAAS3e,MAAMD,OAASytE,IAAWq9E,QACnD,GAAIxwB,EAAU,CACjB,MAAMy6B,EAAiBp6K,KAAKmiB,GAAGk4J,2BAA2Bl2J,IAAIw7H,EAASwkB,OAEvE58I,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAAkBlT,MAAKzI,GAAKA,EAAEywD,MAAQ29G,GAC9E,MAAUjK,IACP5oJ,EAAcvnB,KAAKmiB,GAAGsC,eAAekD,kBAC5B5W,QAAO/E,GAAKA,EAAEi4B,SAAS3e,MAAMD,OAASytE,GAChC9mF,EAAEuC,YAAco0H,GAAe8H,WAAU0lC,GAE/D,CACJ,CACD,OAAK5oJ,GAILxc,GAAOkT,MAAO,GAAEje,KAAKmiB,gBAAgBw9H,UAAiBC,KAE/Cr4H,EAAYC,OAAON,aAAa5B,GAClC3K,MAAK,IAAMP,QAAQC,QAAQkN,MANrBnN,QAAQE,OACX,IAAI/X,MAAO,kDAAiDo9I,WAAkBC,KAMzF,CAQD06B,aAAah1J,GAAO,QAChB,MAAMwtE,EAAYxtE,EAAMoqF,UAClBnoF,EAAcvnB,KAAKi5K,gBAAgBnmF,EAAWxtE,GAC9CyI,EAAaxG,SAAH,UAAGA,EAAaC,cAAhB,aAAG,EAAqBywI,gBAKxC,OAAKlqI,SAAD,UAACA,EAAYmqI,iBAAb,OAAC,EAAuB5zJ,QAG5BypB,EAAWmqI,UAAYl4J,KAAKy4K,oBAAoBnzJ,GAE5CwtE,IAAc4Q,GAAUgH,MACjB1qG,KAAKmiB,GAAGo4J,8BAA6B,IAAMhzJ,EAAYC,OAAOR,cAAc+G,KAGhFxG,EAAYC,OAAOR,cAAc+G,IAR7B3T,QAAQC,SAStB,CAYDilI,uBAAuBx+D,EAAQgS,GAC3B/nF,GAAOsM,KAAM,GAAErX,KAAKmiB,MAAM2+D,EAAS,WAAa,gCAEhD,MAAMurD,EAAUrsI,KAAKmiB,GAAGsC,eAAeuuI,aAClCjiJ,QAAOrD,GAAK2S,QAAQ3S,EAAE4X,UAAYwtE,GAAaplF,EAAE4X,MAAMD,OAASytE,KAC/DmrB,EAAW,GAEjB,IAAK,MAAMz2F,KAAU6kH,EACb7kH,EAAOlC,MAAMD,OAASq+E,GAAUgH,MAChCuT,EAASr8G,KAAK5B,KAAKmiB,GAAGo4J,8BAA6B,IAAMv6K,KAAK64K,uBAAuBrxJ,EAAQs5D,MAE7Fm9B,EAASr8G,KAAK5B,KAAK64K,uBAAuBrxJ,EAAQs5D,IAI1D,OAAO1mE,QAAQikG,WAAWJ,GACrBtjG,MAAK6/J,IACF,MAAMrgG,EAASqgG,EACVzpK,QAAOlM,GAA4B,aAAlBA,EAAOwwE,SACxB5jE,KAAI5M,GAAUA,EAAOtB,SAE1B,OAAI42E,EAAO71E,OACA8V,QAAQE,OAAO,IAAI/X,MACnB,kDAAE43E,EAAOlnE,KAAK,SAGlBmH,QAAQC,SAAf,GAEX,CAWDogK,0BAA0BlB,EAAiBxrJ,GAKjCmqI,MAJN,GAAM13H,GAAQq2D,iBAAmB9oE,EAAWmqI,WAAajtJ,MAAMgJ,QAAQ8Z,EAAWmqI,aAI5EA,EAIgBnqI,EAAWmqI,WAJJvM,OAAMx9I,QAAsD,IAAnCA,EAAS4pJ,uBACpD5pJ,EAAS4pJ,wBAA0BG,EAAU,GAAGH,wBAGd,CACzC,MAAM0hB,EAAuBz5K,KAAK24K,yBAAyBY,EAAgB1V,gBAE3E91I,EAAWmqI,UAAU90J,SAAQ,CAAC+K,EAAU63E,KACpC73E,EAAS4pJ,sBAAwB0hB,EAAqBzzF,GAAK+xE,qBAA3D,GAEP,CACJ,ECjiBL,MAAMhtJ,IAASkC,EAAAA,EAAAA,qDAmCA,SAASytK,GAChB1qE,EACA5jG,EACAwmI,EACAN,EACA5tH,EACAi6E,EACA53F,GAUJ/G,KAAKw/I,uBAAgD,IAAxBz4I,EAAQguG,aAQrC/0G,KAAK26K,iBAAc7zK,EAkBnB9G,KAAK46K,gBAAkB,GAUvB56K,KAAKy/I,qBAAsB,EAO3Bz/I,KAAKgwG,IAAMA,EAMXhwG,KAAKoM,GAAKA,EAOVpM,KAAK2+F,MAAQA,EAOb3+F,KAAK66K,aAAe,IAAIzsH,IAMxBpuD,KAAK27G,YAAc,IAAIvtD,IAQvBpuD,KAAK86K,cAAgB,GAoBrB96K,KAAK+6K,WAAa,IAAI3sH,IAOtBpuD,KAAKg7K,YAAc,IAAI3sH,IAMvBruD,KAAKy9I,cAAgB,IAAIrvF,IAKzBpuD,KAAKi7K,WAAa,KAKlBj7K,KAAKk7K,YAAc,KAOnBl7K,KAAKm7K,eAAiB,KAMtBn7K,KAAK4yI,eAAiBA,EAGtB5yI,KAAKo7K,sBAAwBp7K,KAAKo7K,sBAAsBv4K,KAAK7C,MAC7DA,KAAK4yI,eAAe7tG,GAAGqlI,GAAyCpqK,KAAKo7K,uBAErEp7K,KAAKq7K,kBAAoBr7K,KAAKq7K,kBAAkBx4K,KAAK7C,MACrDA,KAAK4yI,eAAe7tG,GAAGqlI,GAAoCpqK,KAAKq7K,mBAChEr7K,KAAK+G,QAAUA,EAGf/G,KAAK4yI,eAAe7tG,GAAGqlI,IACnB,CAAC7zD,EAAY9G,IAAYzvG,KAAK+9I,oBAAoBxnC,EAAY9G,KAClEzvG,KAAK4yI,eAAe7tG,GAAGqlI,IACnB,CAAC7zD,EAAY1C,IAAc7zG,KAAKs7K,wBAAwB/kE,EAAY1C,KAIxE,MAAM0nE,EAAkB72J,GAAe,CAAC,EA+DxC,GA7DA62J,EAAgBn3C,SAAWm3C,EAAgBn3C,UAAY,GAInDn5H,MAAMgJ,QAAQsnK,EAAgBn3C,UAC9Bm3C,EAAgBn3C,SAASxiI,KAAK,CAAE45K,eAAgBx7K,KAAK2+F,QAErD5zF,GAAOuY,KAAK,iEAGhBtjB,KAAKykB,eAAiB,IAAI1H,kBAAkBu1H,EAAUipC,GAEtDv7K,KAAKu/I,SAAW,IAAIw4B,GAAS/3K,MAC7BA,KAAKqkJ,UAAY,GACjBrkJ,KAAK8hB,MAAQ,CAAC,EACd9hB,KAAKy7K,cAAgB,KAKrBz7K,KAAK05K,uBAAyB15K,KAAK+G,QAAQ4uI,sBAK3C31I,KAAKgwK,iBAAmBjpK,EAAQiP,gBAKhChW,KAAK41I,cAAgB51I,KAAK+G,QAAQ6uI,cAMlC51I,KAAK07K,iCAAmCl7I,GAAQm3D,4BAA8B33F,KAAKgwK,iBACnFhwK,KAAK07K,kCACE3wK,GAAOsM,KAAK,mEAGfrX,KAAKgwK,mBAILhwK,KAAKwvK,mBAAoB,EAKzBxvK,KAAKuvK,mBAAoB,GAO7BvvK,KAAK01I,SAAW3uI,EAAQ2uI,SAExB11I,KAAK27K,QAAU,IAAI/S,GAEf5oK,KAAKgwK,iBACLhwK,KAAK0uK,UAAY,IAAIgD,GAAa,CAAE79J,YAAaikK,GAAexzK,aAC7D,CACH,MAAMsP,EAAYtU,EAAQ,MAE1BU,KAAK0uK,UAAY,IAAI96J,EACjB,CACIC,YAAaikK,GAAexzK,OAC5BsS,wBAAwB,EACxBZ,iBAAiB,GAE5B,CAEDhW,KAAK2uK,eAAiB,IAAIwC,GAAenxK,KAAKwR,YAO9CxR,KAAK47K,eAAiB,IAAI9N,GAAe9tK,KAAMA,KAAKgwG,IAAI6rE,sBAMxD77K,KAAKsiG,aAAe0N,EAAI1N,aACxBtiG,KAAK8uK,YAAc,IAAI0B,GAMvBxwK,KAAK87K,sBAAwB,KAM7B97K,KAAK+7K,kBAAoB,IAAI3tH,IAO7BpuD,KAAKq6K,2BAA6B,IAAIjsH,IAGtCpuD,KAAKkc,MAAQ,CAAC8/J,EAAM3kK,KAChBtM,GAAOkT,MAAM+9J,EAAM3kK,GAEnBrX,KAAKqkJ,UAAUziJ,KAAK,CAChBkzD,KAAM,IAAI7zD,KACV+P,KAAMgrK,EACNn0K,MAAOwP,GAAQ,IAHnB,EAMJrX,KAAKm2I,eAAiB,KACtBn2I,KAAKykB,eAAe0xH,eAAiB7yI,IACjCtD,KAAKkc,MACD,iBACAjV,KAAK8B,UAAUzF,EAAM6hB,UAAW,KAAM,MAEd,OAAxBnlB,KAAKm2I,gBACLn2I,KAAKm2I,eAAe7yI,EACvB,EAIDtD,KAAKgwK,kBACLhwK,KAAKi8K,QAAUC,IACX,MAAMlqK,EAASkqK,EAAIj6J,QAAQ,GAE3BjiB,KAAKm8K,kBAAkBnqK,EAAQkqK,EAAI52J,MAAO42J,EAAI30J,aAC9CvV,EAAOkT,iBAAiB,eAAetX,IACnC5N,KAAKo8K,oBAAoBpqK,EAAQpE,EAAE0X,MAAnC,GADJ,EAIJtlB,KAAKykB,eAAeS,iBAAiB,QAASllB,KAAKi8K,WAEnDj8K,KAAKykB,eAAe43J,YAAc/4K,GAAStD,KAAKs8K,mBAAmBh5K,EAAM0O,QACzEhS,KAAKykB,eAAe83J,eAAiBj5K,GAAStD,KAAKw8K,qBAAqBl5K,EAAM0O,SAElFhS,KAAKu2I,uBAAyB,KAC9Bv2I,KAAKykB,eAAe8xH,uBAAyBjzI,IACzCtD,KAAKkc,MAAM,yBAA0Blc,KAAKoiB,gBACN,OAAhCpiB,KAAKu2I,wBACLv2I,KAAKu2I,uBAAuBjzI,EAC/B,EAELtD,KAAKw2I,2BAA6B,KAClCx2I,KAAKykB,eAAe+xH,2BAA6BlzI,IAC7CtD,KAAKkc,MAAM,6BAA8Blc,KAAK2lB,oBACN,OAApC3lB,KAAKw2I,4BACLx2I,KAAKw2I,2BAA2BlzI,EACnC,EAELtD,KAAKg3I,oBAAsB,KAC3Bh3I,KAAKykB,eAAeuyH,oBAAsB1zI,IACtCtD,KAAKkc,MAAM,uBACsB,OAA7Blc,KAAKg3I,qBACLh3I,KAAKg3I,oBAAoB1zI,EAC5B,EAELtD,KAAK82I,wBAA0B,KAC/B92I,KAAKykB,eAAeqyH,wBAA0BxzI,IAC1CtD,KAAKkc,MAAM,0BAA2Blc,KAAK6lB,iBACN,OAAjC7lB,KAAK82I,yBACL92I,KAAK82I,wBAAwBxzI,EAChC,EAELtD,KAAKy8K,cAAgB,KACrBz8K,KAAKykB,eAAeg4J,cAAgBn5K,IAChCtD,KAAKkc,MAAM,iBACgB,OAAvBlc,KAAKy8K,eACLz8K,KAAKy8K,cAAcn5K,EACtB,EAGDtD,KAAK01I,WACL11I,KAAKy7K,cAAgBl8K,OAAOsiB,aAAY,KACpC7hB,KAAKqiB,WAAW1H,MAAKmH,IACjB,GAA6B,mBAAlBA,aAAP,EAAOA,EAAOjd,QAAuB,CACrC,MAAM63K,EAAU56J,EAAMjd,SAEtB,IAAK,IAAIC,EAAI,EAAGA,EAAI43K,EAAQp4K,SAAUQ,EAAG,CACrC,MAAM6d,EAAM+5J,EAAQ53K,GAEpB6d,EAAIpc,QAAQnD,SAAQkK,IAChBtN,KAAK28K,aAAah6J,EAAKrV,EAAMqV,EAAIsK,KAAK3f,GAAtC,GAEP,CACJ,MACGwU,EAAM1e,SAAQ2K,GAAK/N,KAAK28K,aAAa5uK,EAAG,GAAIA,IAC/C,GAbL,GAeD,MAGP/N,KAAK48K,8BAAgCxiK,QAAQC,UAE7CtP,GAAOsM,KAAM,cAAarX,OAC7B,CAWD06K,GAAwBl4K,UAAUm6K,aAC5B,SAAS95J,EAAQvV,EAAMuvK,GACrB,MAAMzwK,EAAM,GAAEyW,EAAOzW,MAAMkB,IAC3B,IAAII,EAAI1N,KAAK8hB,MAAM1V,GACnB,MAAMlL,EAAM,IAAID,KAEXyM,IACD1N,KAAK8hB,MAAM1V,GAAMsB,EAAI,CACjB21F,UAAWniG,EACX47K,QAAS57K,EACTwU,OAAQ,GACRqnK,MAAO,KAGfrvK,EAAEgI,OAAO9T,KAAKi7K,GACdnvK,EAAEqvK,MAAMn7K,KAAKV,EAAI2rB,WACbnf,EAAEgI,OAAOpR,OAAStE,KAAK01I,WACvBhoI,EAAEgI,OAAO8Y,QACT9gB,EAAEqvK,MAAMvuJ,SAEZ9gB,EAAEovK,QAAU57K,CACf,EAKL,MAAM87K,GAAU,SAASn1J,GACrB,OAAI,MAAOA,EACA,GAGH,SAAQA,EAAY7W,WAAW6W,EAAYjX,KACtD,EAWD8pK,GAAwBl4K,UAAU0/I,mBAAqB,WACnD,MAAM/7G,EAAQnmC,KAAKykB,eAAekB,mBAElC,MAAc,cAAVwgB,EACO,YAGJA,CACV,EAaDu0I,GAAwBl4K,UAAUq8I,yBAA2B,SAAS/rD,GAAmC,IAAxBmqF,EAAwB,wDACrG,MAAMC,EAAiBl9K,KAAKm9K,mBAAmBrqF,GAE/C,OAAI9yF,KAAKgwK,iBACEiN,EACDC,EAAiBv6C,GAAe2J,SAAW3J,GAAeyJ,SAC1D8wC,EAAiBv6C,GAAe8H,SAAW9H,GAAe4G,UAGxCz2C,IAAc4Q,GAAU8M,MAAQxwG,KAAKw/I,oBAAsBx/I,KAAKy/I,qBAGjFy9B,EAAiBv6C,GAAe2J,SAAW3J,GAAe8H,SAG9D9H,GAAe4G,QACzB,EAODmxC,GAAwBl4K,UAAU46K,oBAAsB,WACpD,MAAMl4C,EAAellI,KAAK87I,sBAAsBrnI,MAAK6Q,GAASA,EAAMu+I,iBAAmBp7E,GAAU,UAAVA,UAEvF,OAAIy8C,EACOh1H,OAAOlQ,KAAKq6K,2BAA2Bl2J,IAAI+gH,EAAai/B,QAG5D,IACV,EASDuW,GAAwBl4K,UAAU66K,2BAA6B,SAASC,EAAWxqF,GAC/E,IAAI+nF,EAAe,GACfxmB,EAAY,GAEhB,IAAK,MAAMjR,KAAYk6B,EACnBzC,EAAeA,EAAa9uK,OAAO/L,KAAK08I,gBAAgB0G,EAAUtwD,IAItE,MAAMyqF,EAAiB1C,EAAappK,KAAI45I,IAAM,uBAAIA,EAAO/lI,aAAX,aAAI,EAAclZ,EAAlB,IAO9C,OALAioJ,EAAYr0J,KAAKykB,eAAe+tI,eAC3BzhJ,QAAOkzB,GAAYA,EAAS3e,OACtB2e,EAAS3e,MAAMD,OAASytE,GACxByqF,EAAe9oK,MAAKm7I,GAAWA,IAAY3rH,EAAS3e,MAAMlZ,OAE9DioJ,CACV,EAODqmB,GAAwBl4K,UAAUisK,cAAgB,WAC9C,OAAQzuK,KAAK+G,QAAQivI,gBACxB,EAQD0kC,GAAwBl4K,UAAU44K,sBAAwB,SAAS37C,EAAY5rB,GAE3E,IAAK4rB,EAGD,YAFA10H,GAAOpH,MAAO,GAAE3D,8CAIpB,MAAMqjK,EAAarjK,KAAK08I,gBAAgBjd,EAAY/7B,GAAUgH,OAE1D24D,EAAW/+J,QAEX++J,EAAW,GAAGzlB,cAAc/pC,EAEnC,EASD6mE,GAAwBl4K,UAAU64K,kBAAoB,SAAS57C,EAAY3sC,EAAW2c,GAElF,IAAKgwB,EAGD,YAFA10H,GAAOpH,MAAO,GAAE3D,4CAIpB,MAAMslB,EAAQtlB,KAAK08I,gBAAgBjd,EAAY3sC,GAE3CxtE,EAAMhhB,QAENghB,EAAM,GAAG2xJ,QAAQxnE,EAExB,EAQDirE,GAAwBl4K,UAAUu7I,oBAAsB,SAASxnC,EAAY9G,GACzE,MAAMnqF,EAAQtlB,KAAK08I,kBAAkBjoI,MAAKzI,GAAKA,EAAE+vI,kBAAoBxlC,IAEhEjxF,EAQLA,EAAM2xJ,QAAQxnE,GAPNhI,GAAAA,4BACA18F,GAAOkT,MAAO,qCAAoCs4F,yBAO7D,EAQDmkE,GAAwBl4K,UAAU84K,wBAA0B,SAAS/kE,EAAY1C,GAC7E,MAAMvuF,EAAQtlB,KAAK08I,kBAAkBjoI,MAAKzI,GAAKA,EAAE+vI,kBAAoBxlC,IAEhEjxF,GAILA,EAAMs4H,cAAc/pC,EACvB,EAQD6mE,GAAwBl4K,UAAU4jG,eAAiB,WAA2B,IAAlBb,EAAkB,uDAAJ,GACtE,MAAMY,EAAc,CAAC,EAkBrB,OAjBuBZ,EAAYjhG,OAC7BtE,KAAKq9K,2BAA2B93E,EAAa7B,GAAU8M,OACvDxwG,KAAKykB,eAAe+tI,eACjBzhJ,QAAOkzB,GAAYA,EAAS3e,OAAS2e,EAAS3e,MAAMD,OAASq+E,GAAU8M,OAASvsE,EAAS3e,MAAM6H,WAEzF/pB,SAAQioJ,IACnB,MAAM73I,EAAO63I,EAAOmyB,4BAEhBhqK,GAAQA,EAAKlP,SAKb6hG,EAAY3yF,EAAK,GAAGuE,QAAUvE,EAAK,GAAG+sF,WACzC,IAGE4F,CACV,EAODu0E,GAAwBl4K,UAAUslG,kBAAoB,WAClD,OAAO9nG,KAAKyuK,iBAAmBzuK,KAAKi5I,4BAA8B9P,GAAAA,GACrE,EAQDuxC,GAAwBl4K,UAAUwlG,mBAAqB,SAAS0wE,GAAY,UACxE,MAAMhlK,EAAQ,GAEd,IAAKglK,IAAeA,EAAW9wE,eAC3B,OAAOl0F,EAGX,MAAM40H,EAAYtoI,KAAKyuK,gBAAkB,MAAQ,MAEjD,OAAO,UAAAzuK,KAAK+6K,WAAW52J,IAAIu0J,EAAWvU,cAA/B,mBAAuCz5B,cAAvC,mBAA+Cj2H,MAAKC,GAASA,EAAMC,YAAc2zH,WAAjF,eAA6F50H,QAASA,CAChH,EAQDgnK,GAAwBl4K,UAAUqoG,eAAiB,SAAS/X,GACxD,IAAI5lE,EAASjiB,MAAM6Q,KAAK9b,KAAK27G,YAAYjmG,UAMzC,YAJkB5O,IAAdgsF,IACA5lE,EAASA,EAAOnc,QAAOuU,GAASA,EAAMoqF,YAAc5c,KAGjD5lE,CACV,EAODwtJ,GAAwBl4K,UAAUs5I,oBAAsB,WACpD,OAAO97I,KAAK6qG,eAAenH,GAAUgH,MACxC,EASDgwE,GAAwBl4K,UAAU26K,mBAAqB,SAASrqF,GAC5D,IAAKA,EACD,MAAM,IAAIvwF,MAAM,2BAGpB,OAAOvC,KAAK6qG,eAAe/X,GAAWxuF,OAAS,CAClD,EAUDo2K,GAAwBl4K,UAAUk6I,gBAAkB,SAASjd,EAAY3sC,GACrE,IAAI+nF,EAAe,GACnB,MAAMyC,EAAY79C,EAAa,CAAEA,GAAez/H,KAAK66K,aAAavyK,OAElE,IAAK,MAAM86I,KAAYk6B,EAAW,CAC9B,MAAMG,EAA4Bz9K,KAAK66K,aAAa12J,IAAIi/H,GAExD,GAAIq6B,EACA,IAAK,MAAMjb,KAAkBib,EAA0Bn1K,OAE9CwqF,GAAaA,IAAc0vE,IAC5BqY,EAAeA,EAAa9uK,OAAOd,MAAM6Q,KAAK2hK,EAA0Bt5J,IAAIq+I,KAI3F,CAED,OAAOqY,CACV,EAQDH,GAAwBl4K,UAAU27I,iCAAmC,SAAS/xI,GAC1E,MAAM8xI,EAAiB,GACjB28B,EAAe76K,KAAK08I,gBAAgBtwI,GAE1C,GAAKyuK,UAAAA,EAAcv2K,OACf,OAAO45I,EAEX,MAAMw/B,EAAe7C,EAAappK,KAAI6T,GAASA,EAAM4xJ,YAC/CtmK,EAAM,IAAI64H,GAAIzpI,KAAKi3I,kBAAkBrmI,KA2B3C,OAzBA8sK,EAAat6K,SAAQ,CAACoQ,EAAMwyE,KACxB,IAAK,MAAMl1E,KAASF,EAAIE,MAAO,CAC3B,IAAIkgB,EAAQ,GACRo1G,EAAYb,GAAAA,UAAkBz0H,EAAQ,UAAS0C,KAEnD,GAAI4yH,EAAU9hI,OAAQ,CACb45I,EAAel4D,KAChBk4D,EAAel4D,GAAO,IAI1B,MAAM23F,EAAWp4C,GAAAA,UAAkBz0H,EAAQ,oBAAmB0C,KAE9D,GAAImqK,EAASr5K,OAAQ,CACjB,MAAM86D,EAAgBu+G,EAAS,GAAGjyK,MAAM,KAAK,GAE7CslB,GAAU,GAAE2sJ,EAAS,SACrBv3C,EAAYA,EAAUr6H,OAAOw5H,GAAAA,UAAkBz0H,EAAQ,UAASsuD,KACnE,CACD8+E,EAAel4D,IAAS,GAAEogD,EAAUnzH,KAAK,cACzCirI,EAAel4D,IAAQh1D,CAC1B,CACJ,KAGEktH,CACV,EAODw8B,GAAwBl4K,UAAUo7K,uBAAyB,WACvD,MAAMC,EAAe79K,KAAKi5I,0BAE1B,OAAOj5I,KAAKu/I,SAASg5B,cAAcsF,EAAalpI,gBAAkB30C,KAAKu/I,SAASg5B,aACnF,EAQDmC,GAAwBl4K,UAAU2kG,eAAiB,SAAS3zF,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAIjR,MAAO,QAAOiR,qBAE5B,IAAK,MAAMklK,KAAc14K,KAAK27G,YAAYjmG,SACtC,GAAI1V,KAAKg1G,aAAa0jE,KAAgBllK,EAClC,OAAOklK,EAGf,IAAK,MAAMoF,KAAe99K,KAAK08I,kBAC3B,GAAIohC,EAAY5G,YAAc1jK,EAC1B,OAAOsqK,EAIf,OAAO,IACV,EAQDpD,GAAwBl4K,UAAUsoG,iBAAmB,SAAS1+F,GAE1D,MAAM2xK,EAAgBz4J,GAASA,EAAMo+I,WAAWt3J,KAAOA,EACjDssK,EAAa14K,KAAK6qG,iBAAiBp2F,KAAKspK,GAE9C,GAAIrF,EACA,OAAO14K,KAAKg1G,aAAa0jE,GAG7B,MAAMoF,EAAc99K,KAAK08I,kBAAkBjoI,KAAKspK,GAEhD,OAAID,EACOA,EAAY5G,UAGhB,IACV,EAMDwD,GAAwBl4K,UAAU85K,mBAAqB,SAAStqK,GAC5D,MAAMgyH,EAAWhyH,EAAO5F,GAGxB,IAAK4xK,GAAIC,iBAAiBj6C,GACtB,OAIAxjG,GAAQo2D,oBACR5kF,EAAOksK,WAAa56K,IAChBtD,KAAKm8K,kBAAkBnqK,EAAQ1O,EAAMgiB,MAArC,EAEJtT,EAAOmsK,cAAgB76K,IACnBtD,KAAKo8K,oBAAoBpqK,EAAQ1O,EAAMgiB,MAAvC,GAKR,MAAM84J,EAAoBpsK,EAAO0/I,iBAEjC,IAAK,MAAM2sB,KAAcD,EACrBp+K,KAAKm8K,kBAAkBnqK,EAAQqsK,GAEnC,MAAMC,EAAoBtsK,EAAOmzH,iBAEjC,IAAK,MAAMk+B,KAAcib,EACrBt+K,KAAKm8K,kBAAkBnqK,EAAQqxJ,EAEtC,EAcDqX,GAAwBl4K,UAAU25K,kBAAoB,SAASnqK,EAAQsT,GAA2B,IAApBiC,EAAoB,uDAAN,KACxF,MAAMy8G,EAAWhyH,EAAO5F,GAClB0mF,EAAYxtE,EAAMD,KAGxB,IAAKrlB,KAAK2+F,QAAUq/E,GAAIC,iBAAiBj6C,GACrC,OAKJ,GAHAj5H,GAAOsM,KAAM,GAAErX,kDAAkDgkI,UAAiBlxC,OAG7EA,EAID,YAHAtvF,GAAqBE,iBACjB,IAAInB,MAAO,oDAAmDyhI,8BAKtE,MAAMu6C,EAAYv+K,KAAKgwK,iBACjB,IAAIvmC,GAAIzpI,KAAKykB,eAAewyH,kBAAkBrmI,KAC9C,IAAI64H,GAAIzpI,KAAKi3I,kBAAkBrmI,KACrC,IAAI4tK,EAGJ,GAAIx+K,KAAKgwK,iBACL,GAAIzoJ,SAAAA,EAAak1C,IAAK,CAClB,MAAMA,EAAMl1C,EAAYk1C,IAExB+hH,EAAYD,EAAUztK,MAAM2D,MAAKgqK,GAAOl5C,GAAAA,SAAiBk5C,EAAM,SAAQhiH,MAC1E,MACG+hH,EAAYD,EAAUztK,MAAM2D,MAAKgqK,IAC7B,MAAMxoK,EAAOsvH,GAAAA,SAAiBk5C,EAAK,WAEnC,MAAuB,iBAATxoK,GAAqB+tH,IAAa/tH,EAAKhQ,UAAU,GAAGyF,MAAM,KAAK,EAA7E,SAIR8yK,EAAYD,EAAUztK,MAAM2D,MAAKgqK,GAAOA,EAAInyD,WAAY,KAAIx5B,OAGhE,IAAK0rF,EAKD,YAJAh7K,GAAqBE,iBACjB,IAAInB,MAAO,oEAAmEyhI,UAAiBlxC,8BAMvG,IAAIszC,EAAYb,GAAAA,UAAkBi5C,EAAW,WAG7C,GADAp4C,EAAYA,EAAUr1H,QAAOxF,IAA8C,IAAtCA,EAAKd,QAAS,QAAOu5H,QACrDoC,EAAU9hI,OAKX,YAJAd,GAAqBE,iBACjB,IAAInB,MAAO,4DAA2DyhI,UAAiBlxC,6BAQ/F,MAAMl+E,EAAUwxH,EAAU,GAAGngI,UAAU,GAAGyF,MAAM,KAAK,GAC/CgzK,EAAYxuK,OAAO0E,GACnBuhK,EAAkBn2K,KAAK4yI,eAAeu4B,aAAauT,GAEzD,GAAIp6I,MAAMo6I,IAAcA,EAAY,EAKhC,YAJAl7K,GAAqBE,iBACjB,IAAInB,MAAO,uCAAsCm8K,QAAgB16C,UAAiBlxC,6BAM1F,IAAKqjF,EAKD,YAJA3yK,GAAqBE,iBACjB,IAAInB,MAAO,8CAA6Cm8K,QAAgB16C,UAAiBlxC,6BAMjG,MAAMyjB,EAAav2G,KAAK4yI,eAAew4B,mBAAmBsT,GACpD7gC,EAAgB79I,KAAK4yI,eAAekL,iBAAiBq4B,EAAiBrjF,EAAWyjB,GAIvF,IAAIhxF,GAAQ,EACRsuF,EAAY/gB,IAAc4Q,GAAUgH,MAAQjiB,GAAU,UAAVA,YAAmB3hF,EAE/D+2I,GACAt4H,EAAQs4H,EAAct4H,MACtBsuF,EAAYgqC,EAAchqC,WAE1B9oG,GAAOsM,KAAM,GAAErX,sCAAsCm2K,KAAmB5/D,6BAG5Ev2G,KAAK2+K,mBAAmBxI,EAAiBnkK,EAAQsT,EAAOwtE,EAAW+gB,EAAW6qE,EAAWn5J,EAAOgxF,EACnG,EAkBDmkE,GAAwBl4K,UAAUm8K,mBAAqB,SAC/CxI,EACAnkK,EACAsT,EACAwtE,EACA+gB,EACArgG,EACA+R,EACAgxF,GACJxrG,GAAOsM,KAAM,GAAErX,uCAAuCm2K,UAAwB3iK,UAChEs/E,gBAAwByjB,MACtC,IAAIqoE,EAAkB5+K,KAAK66K,aAAa12J,IAAIgyJ,GAEvCyI,IACDA,EAAkB,IAAIxwH,IACtBwwH,EAAgB93I,IAAI48D,GAAU8M,MAAO,IAAIniD,KACzCuwH,EAAgB93I,IAAI48D,GAAUgH,MAAO,IAAIr8C,KACzCruD,KAAK66K,aAAa/zI,IAAIqvI,EAAiByI,IAG3C,MAAMC,EAAwBD,EAAgBz6J,IAAI2uE,GAElD,GAAI+rF,SAAAA,EAAuB/xH,MACpB7hD,MAAM6Q,KAAK+iK,GAAuBpqK,MAAKqqK,GAAcA,EAAWpb,aAAep+I,IAIlF,YAFAva,GAAOsM,KAAM,GAAErX,0DAA0Dm2K,UAAwBrjF,MAKrG,MAAMgrF,EACA,IAAI5H,GACEl2K,KAAKgwG,IACLhwG,KAAKgwG,IAAI1C,WACT6oE,EACAnkK,EACAsT,EACAwtE,EACA+gB,EACArgG,EACA+R,EACAvlB,KAAK2+F,MACL4X,GAEZsoE,EAAsB9uJ,IAAI+tJ,GAC1B99K,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,mBAA8Bm3F,EAAa99K,KACrE,EAOD06K,GAAwBl4K,UAAUg6K,qBAAuB,SAASxqK,GAC9D,IAAKgsK,GAAIe,aAAa/sK,GAGlB,YAFAjH,GAAOsM,KAAM,uDAAsDrF,EAAO5F,OAM9E,MAAMkyK,EAAoBtsK,EAAOmzH,iBAEjC,IAAK,MAAMk+B,KAAcib,EACrBt+K,KAAKo8K,oBAAoBpqK,EAAQqxJ,GAErC,MAAM+a,EAAoBpsK,EAAO0/I,iBAEjC,IAAK,MAAM2sB,KAAcD,EACrBp+K,KAAKo8K,oBAAoBpqK,EAAQqsK,EAExC,EASD3D,GAAwBl4K,UAAU45K,oBAAsB,SAASpqK,EAAQsT,GACrE,MAAM0+G,EAAWhyH,EAAO5F,GAClBwjJ,EAAUtqI,aAAH,EAAGA,EAAOlZ,GAGvB,IAAK4xK,GAAIC,iBAAiBj6C,GACtB,OAGJ,IAAKA,EAGD,YAFAxgI,GAAqBE,iBAAiB,IAAInB,MAAO,GAAEvC,oDAKvD,IAAK4vJ,EAGD,YAFApsJ,GAAqBE,iBAAiB,IAAInB,MAAO,GAAEvC,mDAKvD,MAAMg/K,EAAch/K,KAAK08I,kBAAkBjoI,MACvCqpK,GAAeA,EAAYva,gBAAkBv/B,GAAY85C,EAAYra,eAAiB7T,IAErFovB,EAMLh/K,KAAKi/K,mBAAmBD,GALpBx7K,GAAqBE,iBAAiB,IAAInB,MAAO,GAAEvC,sDAM1D,EAQD06K,GAAwBl4K,UAAU08K,mBAAqB,SAAS59C,GAC5D,IAAI69C,EAAgB,GACpB,MAAMC,EAAsBp/K,KAAK66K,aAAa12J,IAAIm9G,GASlD,OAPI89C,IACAD,EAAgBA,EAAcpzK,OAAOd,MAAM6Q,KAAKsjK,EAAoBj7J,IAAIu/E,GAAU8M,SAClF2uE,EAAgBA,EAAcpzK,OAAOd,MAAM6Q,KAAKsjK,EAAoBj7J,IAAIu/E,GAAUgH,SAClF1qG,KAAK66K,aAAar7E,OAAO8hC,IAE7Bv2H,GAAOkT,MAAO,GAAEje,uCAAuCshI,WAAe69C,EAAc76K,UAE7E66K,CACV,EAQDzE,GAAwBl4K,UAAUy8K,mBAAqB,SAASD,GAAa,MACzEj0K,GAAOsM,KAAM,GAAErX,wCAAwCg/K,EAAYzb,yBAClDyb,EAAYvb,iBAE7Bub,EAAY5kF,UACZ,MAAMmN,EAAgBy3E,EAAYx3E,mBAElC,IAAKD,GAAiBE,GAAAA,2BAClB,OAEJ,MAAMo3E,EAAwB7+K,KAAK66K,aAAa12J,IAAIojF,GAE/Cs3E,EAEM,UAACA,EAAsB16J,IAAI66J,EAAYtvE,kBAAvC,OAAC,EAAkDlQ,OAAOw/E,IACjEj0K,GAAOpH,MAAO,GAAE3D,yBAAyBg/K,gCAFzCj0K,GAAOpH,MAAO,GAAE3D,6DAA6DunG,KAIjFvnG,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,qBAAgCq4F,EAC1D,EAODtE,GAAwBl4K,UAAU68K,gBAAkB,SAASlrK,GAKzD,MAAMc,EAAU,IAAIm5C,IAMdkxH,EAAY,IAAIlxH,IAEtB,GAAoB,iBAATj6C,GAA8B,OAATA,GACL,iBAAbA,EAAKvD,IAGf,OAFA7F,GAAOuY,KAAK,kDAELrO,EAGX,MAAMpE,EAAUqC,GAAAA,MAAgBiB,EAAKvD,KAErC,IAAK3F,MAAMgJ,QAAQpD,EAAQC,OACvB,OAAOmE,EAGX,IAAInE,EAAQD,EAAQC,MAEhB9Q,KAAKgwK,iBACLl/J,EAAQA,EAAMC,QAAO0tD,GAASA,EAAMlwD,YAAco0H,GAAeyJ,UAC1D3tE,EAAMlwD,YAAco0H,GAAe2J,YAE1Cx7H,EAAQ,GACR,CAAE4yF,GAAU8M,MAAO9M,GAAUgH,OAAQtnG,SAAQ0vF,IACzC,MAAMlgF,EAAQ/B,EAAQC,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAAS8hF,IAEjDlgF,GAAS9B,EAAMlP,KAAKgR,EAApB,KAIR,IAAI0D,EAAQ,EAEZ,IAAK,MAAM1D,KAAS9B,EAAO,CACvB,IAAK7F,MAAMgJ,QAAQrB,EAAMc,OACrB,SAGJ,GAAIzI,MAAMgJ,QAAQrB,EAAM4B,YAAa,CACjC,IAAK,MAAME,KAAS9B,EAAM4B,WACtB,QAA+B,IAApBE,EAAMC,gBAAoD,IAAhBD,EAAMhB,MAAuB,CAE9E,MAAM6rK,EAAa7qK,EAAMhB,MAAMhI,MAAM,KAAK+F,KAAImD,GAAWC,SAASD,EAAS,MACrE03J,EAAciT,EAAW,GAG/B7qK,EAAMhB,MAAQ6rK,EAGTD,EAAUp7J,IAAIooJ,IACfgT,EAAUx4I,IAAIwlI,EAAa,IAE/BgT,EAAUn7J,IAAImoJ,GAAa1qK,KAAK8S,EACnC,CAML,IAHiB9B,EAAM4B,WAAWC,MAAKC,GAA6B,QAApBA,EAAMC,YAGvC,CACX,MAAM6qK,EAAa5sK,EAAM4B,WAAW/C,KAAIiD,GAASA,EAAMhB,MAAM,KAE7D4rK,EAAUn7J,IAAIq7J,EAAW,IAAI59K,KAAK,CAC9B+S,UAAW,MACXjB,MAAO8rK,GAEd,CACJ,CAED,IAAI9rK,EAAQd,EAAMc,MAGlBA,EAAQ1T,KAAKgwK,iBACPt8J,EAAM3C,QAAOrD,GAAqB,UAAhBA,EAAEoB,YACpB4E,EAAM3C,QAAOrD,GAAqB,SAAhBA,EAAEoB,YAE1B,IAAK,MAAM0E,KAAQE,EAAO,CAKtB,MAAM9L,EAAM5H,KAAKgwK,iBAAoB,GAAEp9J,EAAM5B,QAAQsF,IAAU9C,EAAK3L,MAC9DikK,EAAat4J,EAAKpH,GACxB,IAAIuH,EAAWsB,EAAQkP,IAAIvc,GAY3B,GAVK+L,IACDA,EAAW,CACPD,MAAO,GACPg3H,OAAQ,GACRz0H,KAAMrO,GAEVqN,EAAQ6xB,IAAIl/B,EAAK+L,IAErBA,EAASD,MAAM9R,KAAKkqK,GAEhBwT,EAAUp7J,IAAI4nJ,GAAa,CAC3B,MAAMt3J,EAAa8qK,EAAUn7J,IAAI2nJ,GAEjC,IAAK,MAAMp3J,KAASF,EAChBb,EAAS+2H,OAAO9oI,KAAK8S,EAE5B,CACJ,CAGD9B,EAAM5B,OAAS0yF,GAAUgH,OAASp0F,GACrC,CAED,OAAOrB,CACV,EAqKDylK,GAAwBl4K,UAAUwyG,aAAe,SAAS0jE,GACtD,MAAM/kK,EAAW3T,KAAKy/K,SAAS/G,EAAWvU,OAE1C,OAAOxwJ,GAAYA,EAASD,MAAM,EACrC,EAUDgnK,GAAwBl4K,UAAUk9K,oCAAsC,SAASvrK,GAC7E,MAAMvD,EAAMsC,GAAAA,MAAgBiB,EAAKvD,KAC3By/E,EAAQz/E,EAAIE,MAAM2D,MAAKgqD,GAAwB,UAAfA,EAAMztD,OAG5Cq/E,EAAM77E,WAAa67E,EAAM77E,YAAc,GACvC,MAAM08J,EAAY7gF,EAAM77E,WAAWzD,QAAO2D,GAA6B,QAApBA,EAAMC,YAEzD,GAAI07E,EAAMq+E,WAAar+E,EAAM8oF,aAAc,CACvC,MAAMzlK,EAAQ,GAad,GAXIw9J,GAAaA,EAAU5sK,OACvB4sK,EAAU9tK,SAAQsR,IACdhB,EAAM9R,KAAK8S,EAAMhB,MAAMhI,MAAM,KAAK,GAAlC,IAGJ2kF,EAAM38E,MAAMtQ,SAAQoQ,IACO,SAAnBA,EAAK1E,WACL4E,EAAM9R,KAAK4R,EAAKpH,GACnB,IAGLikF,EAAM77E,WAAWC,MAAKC,GAA6B,QAApBA,EAAMC,YAErC,OAAOR,EAIX,IAAK,IAAIrP,EAAI,EAAGA,EAAI4O,EAAMpP,OAAQQ,GAAK,EAAG,CACtC,MAAMoR,EAAWxC,EAAMxI,MAAMpG,EAAGA,EAAI,GAEpCurF,EAAM77E,WAAW5S,KAAK,CAClB+S,UAAW,MACXjB,MAAOwC,EAASjD,KAAK,MAE5B,CACJ,CAED,OAAO,IAAI4E,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKsC,GAAAA,MAAgBtC,IAE5B,EAGD,MAAM+uK,GAAU,CACZv9J,iBACI,OAAOpiB,KAAKykB,eAAerC,cAC9B,EACDuD,qBACI,OAAO3lB,KAAKykB,eAAekB,kBAC9B,EACDE,kBACI,OAAO7lB,KAAKykB,eAAeoB,eAC9B,EACDoC,mBACI,IAAI9T,EAAOnU,KAAKykB,eAAewD,iBAE/B,OAAK9T,GAMLnU,KAAKkc,MAAM,oCAAqC8gK,GAAQ7oK,IAIpDnU,KAAKgwK,mBAAqBhwK,KAAK2+F,OAC/BxqF,EAAOnU,KAAK27K,QAAQ9S,QAAQ10J,GAC5BnU,KAAKkc,MAAM,8CACP8gK,GAAQ7oK,IAEZA,EAAOnU,KAAK0/K,oCAAoCvrK,GAChDnU,KAAKkc,MAAM,yDACP8gK,GAAQ7oK,KACJnU,KAAKgwK,mBACTxvI,GAAQm2D,gCACRxiF,EAAOnU,KAAK47K,eAAelM,mCAAmCv7J,GAC9DpJ,GAAOkT,MACH,uDAAwD9J,IAWhEA,EAjJY,SAAS8T,EAAkBlhB,GAAS,QACxD,IAAKkhB,EACD,MAAM,IAAI1lB,MAAM,mCAGpB,MAAM4rK,EAAc,IAAIX,GAAiBvlJ,EAAiBrX,KACpDgvK,EAAU,UAAGzR,EAAYR,YAAYjqE,GAAU8M,cAArC,aAAG,EAA2C,GAC9D,IAAI5iF,GAAU,EAEVgyJ,GAAcA,EAAWrxK,YAAco0H,GAAe2J,WAClDvlI,EAAQguG,YACR6qE,EAAWrxK,UAAYo0H,GAAe4G,SAEtCq2C,EAAWrxK,UAAYo0H,GAAe2J,SAG1C1+G,GAAU,GAGd,MAAMiyJ,EAAU,UAAG1R,EAAYR,YAAYjqE,GAAUgH,cAArC,aAAG,EAA2C,GAO9D,OALIm1E,GAAcA,EAAWtxK,YAAco0H,GAAe2J,WACtDuzC,EAAWtxK,UAAYo0H,GAAe2J,SACtC1+G,GAAU,GAGVA,EACO,IAAI/V,sBAAsB,CAC7B7G,KAAMiX,EAAiBjX,KACvBJ,IAAKu9J,EAAYN,aAIlB5lJ,CACV,CA+GkB63J,CAAgB3rK,EAAMnU,KAAK+G,UAItCoN,EAAOnU,KAAK47K,eAAejM,2BAA2Bx7J,GAE/CA,IAtCHpJ,GAAOkT,MAAO,GAAEje,sDAET,CAAC,EAqCf,EACDi3I,oBACI,IAAI9iI,EAAOnU,KAAKykB,eAAewyH,kBAE/B,OAAK9iI,GAKLnU,KAAKkc,MAAM,qCAAsC8gK,GAAQ7oK,IAErDnU,KAAKgwK,mBACDhwK,KAAK2+F,MAELxqF,EAAOnU,KAAK+/K,4BAA4B5rK,IAGxCA,EAAOnU,KAAK27K,QAAQ9S,QAAQ10J,GAC5BnU,KAAKkc,MAAM,+CAAgD8gK,GAAQ7oK,MAIpEA,IAjBHpJ,GAAOkT,MAAO,GAAEje,wDAET,CAAC,EAgBf,GAGLP,OAAO6I,KAAKq3K,IAASv8K,SAAQk1B,IACzB74B,OAAOwc,eACHy+J,GAAwBl4K,UACxB81B,EAAM,CACFnU,IAAKw7J,GAAQrnJ,IAHrB,IAQJoiJ,GAAwBl4K,UAAUi9K,SAAW,SAAStb,GAClD,OAAOnkK,KAAK+6K,WAAW52J,IAAIggJ,EAC9B,EAQDuW,GAAwBl4K,UAAUw9K,sBAAwB,WACtD,OAAOhgL,KAAKigL,oBAAsBjgL,KAAK05K,sBAC1C,EAODgB,GAAwBl4K,UAAUy9K,iBAAmB,WACjD,MAAM/yJ,EAASltB,KAAK87I,sBAEpB,OAAOz7H,QAAQ6M,EAAOzY,MAAK6Q,GAASA,EAAMuuF,YAAcprB,GAAU,UAAVA,UAC3D,EAWDiyF,GAAwBl4K,UAAU09K,iBAAmB,SAASr4J,GAC1D,IAAK7nB,KAAK41I,cACN,OAAO/tH,EAGX,MAAMkxJ,EAAY7lK,GAAAA,MAAgB2U,EAAYjX,KACxCuvK,EAASpH,EAAUjoK,MAAMC,QAAOpF,GAAKA,EAAEqF,OAAShR,KAAK41I,cAAc9iD,YAEzE,IAAKqtF,EAAO77K,OACR,OAAOujB,EAGX,IAAK,MAAMjV,KAASutK,EAAQ,CACxB,MAAMC,EAAgBpgL,KAAKirJ,yBAAyBpjI,GAEpD,IAAK,MAAMuzC,KAASglH,EAIZhlH,IAAU+tE,GAAAA,MAAsB3oG,GAAQw2D,kBAAoBh3F,KAAK2+F,OACjE4mC,GAAAA,WAAmB3yH,EAAOwoD,GAAO,GAMjCp7D,KAAK2+F,OAASvjC,IAAU+tE,GAAAA,KACxB5D,GAAAA,WAAmB3yH,EAAOwoD,GAAO,GAKzC,IAAK,MAAMA,KAASp7D,KAAK41I,cAAc8E,UAAUxvI,QAAQqvB,UACrDgrG,GAAAA,YAAoB3yH,EAAOwoD,EAElC,CAED,OAAO,IAAIvjD,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgB6lK,IAE5B,EAQD2B,GAAwBl4K,UAAU+2I,SAAW,SAASj0H,GAA4B,IAArBk7F,EAAqB,wDAC9E,MAAM2jD,EAAQ7+I,EAAM6+I,MAIpB,GAFAp5J,GAAOsM,KAAM,GAAErX,eAAeslB,KAE1BtlB,KAAK27G,YAAYz3F,IAAIigJ,GAErB,OAAO/pJ,QAAQE,OAAO,IAAI/X,MAAO,GAAE+iB,mBAAuBtlB,SAG9DA,KAAK27G,YAAY70E,IAAIq9H,EAAO7+I,GAC5B,MAAM+6J,EAAe/6J,EAAMqnF,oBAE3B,GAAI3sG,KAAKgwK,iBAAkB,CACvBjlK,GAAOkT,MAAO,GAAEje,wCAChB,IACIA,KAAKu/I,SAAShG,SAASj0H,EAAOk7F,GAC1Bl7F,IACIA,EAAMgiF,eACNtnG,KAAKwvK,mBAAoB,EAEzBxvK,KAAKuvK,mBAAoB,EAGpC,CAAC,MAAO5rK,GAGL,OAFAoH,GAAOpH,MAAO,GAAE3D,qBAAqBslB,aAAiB3hB,aAAzC,EAAyCA,EAAOmgB,WAEtD1J,QAAQE,OAAO3W,EACzB,CACJ,KAAM,CAEH,GAAI08K,EACArgL,KAAKsgL,WAAWD,QAGb,IAAK7/I,GAAQm2D,+BACLrxE,EAAMgiF,gBACLhiF,EAAMsiF,iBAAmBtiF,EAAMmqF,UAC3C,OAAOr1F,QAAQE,OAAO,IAAI/X,MAAO,GAAEvC,mCAAmCslB,MAI1E,GAAIkb,GAAQm2D,+BAAiCrxE,EAAMsiF,gBAAkBtiF,EAAMmqF,UAAW,CAClF,MAAM97F,EAAW3T,KAAKugL,0BAA0Bj7J,GAEhDtlB,KAAK2uK,eAAe2C,eAAe39J,EAASD,MAAM,IAClD,MAAMa,EACAZ,EAAS+2H,OAAOj2H,MAAKmkH,GAAqC,QAAxBA,EAAUjkH,YAE9CJ,GACAvU,KAAK0uK,UAAUr6J,aAAaE,EAASb,OAEzC,MAAMw9J,EACAv9J,EAAS+2H,OAAO35H,QACd6nH,GAAqC,QAAxBA,EAAUjkH,YAE/B,GAAIu8J,EAAW,CACX,MAAMsP,EAAiB,IAAIpyH,IAE3B8iH,EAAU9tK,SAAQqT,IACd,MAAMb,EAAca,EAAS/C,MAAM,GAC7B48J,EAAU75J,EAAS/C,MAAM,GAE/B8sK,EAAe15I,IAAIlxB,EAAa06J,EAAhC,IAEJtwK,KAAK8uK,YAAYz6J,aAAamsK,EACjC,CACJ,CACJ,CACD,IAAIC,EAAermK,QAAQC,UAO3B,OAJImmB,GAAQ5jB,cACR6jK,EAAeA,EAAa9lK,MAAK,IAAM0lK,GAAgBrgL,KAAKu/I,SAAS+6B,aAAah1J,MAG/Em7J,CACV,EASD/F,GAAwBl4K,UAAU+9I,aAAe,SAASj7H,GAGtD,GAFAva,GAAOsM,KAAM,GAAErX,qBAAqBslB,YAE/BtlB,KAAK0gL,oBAAoB,eAAgBp7J,GAG1C,OAAOlL,QAAQE,OAAO,yCAG1B,MAAMqmK,EAAer7J,EAAMqnF,oBAE3B,OAAKg0E,EAMD3gL,KAAKgwK,iBACEhwK,KAAKu/I,SAASr4H,aAAa,KAAM5B,GAAO3K,MAAK,KAC5C2K,IACIA,EAAMgiF,eACNtnG,KAAKwvK,mBAAoB,EAEzBxvK,KAAKuvK,mBAAoB,IAI1B,MAIfvvK,KAAKsgL,WAAWK,GAETvmK,QAAQC,SAAQ,KArBnBtP,GAAOpH,MAAO,GAAE3D,4BAA4BslB,8BAErClL,QAAQE,OAAO,oBAoB7B,EAODogK,GAAwBl4K,UAAU89K,WAAa,SAASze,GACpD7hK,KAAKykB,eAAe6uI,UAAUuO,GAC9B7hK,KAAK86K,cAAcl5K,KAAKigK,EAC3B,EAMD6Y,GAAwBl4K,UAAUo+K,cAAgB,SAAS/e,GACvD7hK,KAAKykB,eAAe+uI,aAAaqO,GACjC7hK,KAAK86K,cACC96K,KAAK86K,cAAc/pK,QAAOiB,GAAUA,IAAW6vJ,GACxD,EAaD6Y,GAAwBl4K,UAAUk+K,oBAAsB,SAChDr1K,EACAqtK,GACJ,MAAMmI,EAAa7gL,KAAK27G,YAAYz3F,IAAIw0J,aAArB,EAAqBA,EAAYvU,OAMpD,OAJK0c,GACD91K,GAAOpH,MAAO,GAAE3D,QAAQqL,YAAqBqtK,2BAG1CmI,CACV,EASDnG,GAAwBl4K,UAAUy2I,wBAA0B,WAAW,MACnE,MAAMroI,EAAG,UAAG5Q,KAAKykB,eAAewD,wBAAvB,aAAG,EAAsCrX,IAC5CkwK,EAAe33C,GAAAA,IAErB,IAAKv4H,EACD,OAAOkwK,EAEX,MAEM1lH,EAFYloD,GAAAA,MAAgBtC,GACVE,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAAS0yF,GAAUgH,QACzCz5F,IAAI,GAAGmqD,MAE3B,OAAIA,EACO37D,OAAOiW,OAAOyzH,IAAe10H,MAAK5M,GAASA,IAAUuzD,EAAMvpC,gBAG/DivJ,CACV,EAQDpG,GAAwBl4K,UAAUyoJ,yBAA2B,SAASpjI,GAAa,QAC/E,MAAMk5J,EAAU,UAAGl5J,aAAH,EAAGA,EAAajX,WAAhB,kBAAuB5Q,KAAKykB,eAAewD,wBAA3C,aAAuB,EAAsCrX,IAE7E,IAAKmwK,EACD,MAAO,GAEX,MACMnuK,EADYM,GAAAA,MAAgB6tK,GACVjwK,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAAS0yF,GAAUgH,QACvDrsC,EAAS,IAAIhQ,IAAIz7C,EAAM3B,IACxBF,QAAO8yC,GAAiC,QAA3BA,EAAGuX,MAAMvpC,gBACtBpgB,KAAIoyC,GAAMA,EAAGuX,MAAMvpC,iBAExB,OAAO5mB,MAAM6Q,KAAKuiD,EACrB,EAMDq8G,GAAwBl4K,UAAUw+K,qBAAuB,SAAS5lH,GAAO,MACrE,MAAMxqD,EAAG,UAAG5Q,KAAKykB,eAAewD,wBAAvB,aAAG,EAAsCrX,IAElD,QAAKA,IAGasC,GAAAA,MAAgBtC,GACVE,MAAM2D,MAAK9I,GAAKA,EAAEqF,OAAS0yF,GAAUgH,QAE/Cz5F,IAAIwD,MAAK1G,GAAKA,EAAEqtD,QAAUA,GAC3C,EAODs/G,GAAwBl4K,UAAU6iI,2BAA6B,SAASC,GACpE,MAAM27C,EAAS37C,GnDj6DkB,EmDm6DjCtlI,KAAK05K,uBAAyB15K,KAAKyuK,iBAAmBwS,CACzD,EAUDvG,GAAwBl4K,UAAUi4I,eAAiB,SAASC,GACnD16I,KAAK41I,eAAkB8E,SAAAA,EAAWp2I,SAIvCtE,KAAK41I,cAAc8E,UAAYA,EAClC,EAQDggC,GAAwBl4K,UAAU+rK,kBAAoB,SAAS1M,GAC3D,OAAO7hK,KAAK86K,cAAcrwK,QAAQo3J,IAAgB,CACrD,EASD6Y,GAAwBl4K,UAAU4wJ,YAAc,SAASslB,GACrD,MAAMiI,EAAejI,EAAW/rE,oBAEhC3sG,KAAKkc,MACD,eACAw8J,EAAWvU,MAAOwc,EAAeA,EAAav0K,QAAKtF,GAElD9G,KAAK0gL,oBAAoB,eAAgBhI,KAI9C14K,KAAK27G,YAAYnc,OAAOk5E,EAAWvU,OACnCnkK,KAAK+6K,WAAWv7E,OAAOk5E,EAAWvU,OAE9Bwc,GACA3gL,KAAKykB,eAAe+uI,aAAamtB,GAExC,EAQDjG,GAAwBl4K,UAAU0+K,iBAAmB,SAASpuF,GAC1D,GAAI9yF,KAAKykB,eAAeuuI,WACpB,OAAOhzJ,KAAKykB,eAAeuuI,aAAav+I,MAAK/G,GAAKA,EAAE4X,OAAS5X,EAAE4X,MAAMD,OAASytE,GAErF,EASD4nF,GAAwBl4K,UAAUo5G,qBAAuB,SAASt2F,GAC9D,OAAOtlB,KAAKykB,eAAe+tI,eAAe/9I,MAAK1G,GAAKA,EAAEuX,QAAUA,GACnE,EASDo1J,GAAwBl4K,UAAUq5G,mBAAqB,SAASv2F,GAC5D,GAAItlB,KAAKykB,eAAeuuI,WACpB,OAAOhzJ,KAAKykB,eAAeuuI,aAAav+I,MAAK/G,GAAKA,EAAE4X,QAAUA,GAErE,EAQDo1J,GAAwBl4K,UAAUm3I,kCAAoC,SAASh+B,GAAa,MACxF,MAAMwlE,EAAQ,UAAGnhL,KAAKykB,eAAewD,wBAAvB,aAAG,EAAsCrX,IAElDuwK,GAIL,CAAEz9E,GAAU8M,MAAO9M,GAAUgH,OAAQtnG,SAAQ0vF,IACzC,MAAM5lE,EAASyuF,EAAY5qG,QAAO/E,GAAKA,EAAE0jG,YAAc5c,IAEjDqtF,EADYjtK,GAAAA,MAAgBiuK,GACTrwK,MAAMC,QAAO0tD,GAASA,EAAMztD,OAAS8hF,IAE9D5lE,EAAO9pB,SAAQ,CAACkiB,EAAO0gE,KACdhmF,KAAKq6K,2BAA2Bn2J,IAAIoB,EAAM6+I,QAC3CnkK,KAAKq6K,2BAA2BvzI,IAAIxhB,EAAM6+I,MAAOgc,EAAOn6F,GAAKvpB,IAAIjrD,WACpE,GAHL,GAMP,EAcDkpK,GAAwBl4K,UAAU0kB,aAAe,SAASy4H,EAAUC,GAChE,IAAMD,IAAYC,EAGd,OAFA70I,GAAOsM,KAAM,GAAErX,+DAERoa,QAAQC,UAGnB,GAAIra,KAAKgwK,iBAGL,OAFAjlK,GAAOkT,MAAO,GAAEje,4CAETA,KAAKu/I,SAASr4H,aAAay4H,EAAUC,GACvCjlI,MAAK4M,IAMY,MAYd,GAjBIo4H,IACA3/I,KAAK27G,YAAYnc,OAAOmgD,EAASwkB,OACjCnkK,KAAKq6K,2BAA2B76E,OAAOmgD,EAASwkB,QAGhDvkB,IACIA,EAASt4C,eACTtnG,KAAKwvK,mBAAoB,EAEzBxvK,KAAKuvK,mBAAoB,EAE7BvvK,KAAKq6K,2BAA2BvzI,IAAI84G,EAASukB,MAAO58I,SAApD,UAAoDA,EAAak1C,WAAjE,aAAoD,EAAkBjrD,YACtExR,KAAK27G,YAAY70E,IAAI84G,EAASukB,MAAOvkB,IAKrCD,GAAYC,EAAU,CACtB,MAAMwhC,EAAephL,KAAK+6K,WAAW52J,IAAIw7H,EAASwkB,OAE9Cid,IACAphL,KAAK+6K,WAAWv7E,OAAOmgD,EAASwkB,OAChCnkK,KAAK+6K,WAAWj0I,IAAI84G,EAASukB,MAAOid,GAE3C,CA0BD,OAxBI75J,IAcAA,EAAYhZ,UACNqxI,GAAYp/G,GAAQ5jB,YAAc+lH,GAAe2J,SAAW3J,GAAe8H,WAKnDjqG,GAAQ+3D,+BAAiCqnD,EACrExlI,QAAQC,UACRra,KAAKu/I,SAAS+6B,aAAa16B,IAEAjlI,MAAK,IAAM3a,KAAK2+F,OAAjD,IAIZ5zF,GAAOkT,MAAO,GAAEje,sCAEhB,IAAIygL,EAAermK,QAAQC,UAS3B,OAPIslI,GACA3/I,KAAKozJ,YAAYzT,GAEjBC,IACA6gC,EAAezgL,KAAKu5I,SAASqG,IAG1B6gC,EAAa9lK,MAAK,KAAM,GAClC,EASD+/J,GAAwBl4K,UAAUi+I,kBAAoB,SAASi4B,GAC3D,MAAMiI,EAAejI,EAAW/rE,oBAIhC,OAFA3sG,KAAKkc,MAAM,cAAew8J,EAAWvU,MAAOwc,EAAeA,EAAav0K,GAAK,MAExEpM,KAAK0gL,oBAAoB,cAAehI,GAKzC14K,KAAKgwK,iBACEhwK,KAAKu/I,SAASr4H,aAAawxJ,EAAY,MAAM/9J,MAAK,KAAM,IAG/DgmK,GACA51K,GAAOsM,KAAM,GAAErX,uBAAuB04K,aACtC14K,KAAK4gL,cAAcD,GAEZvmK,QAAQC,SAAQ,KAG3BtP,GAAOpH,MAAO,GAAE3D,iDAAiD04K,KAE1Dt+J,QAAQE,OAAO,qBAhBXF,QAAQE,OAAO,wCAiB7B,EAEDogK,GAAwBl4K,UAAU6pJ,kBAAoB,SAASnxI,EAAOxI,GAGlE,OAFA1S,KAAKkc,MAAM,oBAAqBhB,EAAOxI,GAEhC1S,KAAKykB,eAAe4nI,kBAAkBnxI,EAAOxI,EACvD,EAUDgoK,GAAwBl4K,UAAU6+K,4BAA8B,SAASF,GACrE,IAAIvQ,EAASuQ,EAASvwK,IAEtB,MAAM0wK,EAAkB1Q,EAAOnmK,QAAQ,WACjC82K,EAAgB3Q,EAAOnmK,QAAQ,mBAAoB62K,GACzD,IAAIE,EAAkB5Q,EAAO1qK,YAAY,gBAEzC,IAAuB,IAAnBq7K,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOJ,EAGX,MAAMM,EAAc7Q,EAAOnmK,QAAQ,OAAQ82K,GACrCG,EAAS9Q,EAAO3qK,UAAUs7K,EAAeE,EAAc,GAE7D7Q,EAASA,EAAO3uK,QAAQy/K,EAAQ,IAChCF,EAAkB5Q,EAAO1qK,YAAY,gBACrC,MAAMy7K,EAAgB/Q,EAAOnmK,QAAQ,OAAQ+2K,GACvCI,EAAUhR,EAAO1lK,MAAM,EAAGy2K,GAC1BE,EAAgBH,EAAOv7H,OACvB27H,EAAUlR,EAAO1lK,MAAMy2K,GAI7B,OAFA/Q,EAAU,GAAEgR,QAAcC,IAAgBC,IAEnC,IAAIjqK,sBAAsB,CAC7B7G,KAAMmwK,EAASnwK,KACfJ,IAAKggK,GAEZ,EAUD8J,GAAwBl4K,UAAUu/K,2BAA6B,SAAS95J,GAAkB,QACtF,MAAMkmJ,EAAc,IAAIX,GAAiBvlJ,EAAiBrX,KAC1D,IAAIoxK,GAAoB,EACxB,MAAMpC,EAAU,UAAGzR,EAAYR,YAAYjqE,GAAU8M,cAArC,aAAG,EAA2C,GAE9D,GAAIovE,EAAY,CACZ,MAAMqC,EAAwBjiL,KAAK6+I,yBAAyBn7C,GAAU8M,OAElEovE,EAAWrxK,YAAc0zK,IACzBrC,EAAWrxK,UAAY0zK,EACvBl3K,GAAOsM,KAAM,GAAErX,0CAA0CiiL,KACzDD,GAAoB,EAE3B,MACGj3K,GAAOuY,KAAM,GAAEtjB,wDAGnB,MAAM6/K,EAAU,UAAG1R,EAAYR,YAAYjqE,GAAUgH,cAArC,aAAG,EAA2C,GAE9D,GAAIm1E,EAAY,CACZ,MAAMqC,EAAwBliL,KAAK6+I,yBAAyBn7C,GAAUgH,OAElEm1E,EAAWtxK,YAAc2zK,IACzBrC,EAAWtxK,UAAY2zK,EACvBn3K,GAAOsM,KAAM,GAAErX,0CAA0CkiL,KACzDF,GAAoB,EAE3B,MACGj3K,GAAOuY,KAAM,GAAEtjB,wDAGnB,OAAIgiL,EACO,IAAInqK,sBAAsB,CAC7B7G,KAAMiX,EAAiBjX,KACvBJ,IAAKu9J,EAAYN,aAIlB5lJ,CACV,EAUDyyJ,GAAwBl4K,UAAUu9K,4BAA8B,SAAS9oC,GACrE,MAAMk3B,EAAc,IAAIX,GAAiBv2B,EAAkBrmI,KA8B3D,MA5BA,CAAE8yF,GAAU8M,MAAO9M,GAAUgH,OAAQtnG,SAAQ0vF,IACzC,MAAMhiF,EAAQq9J,EAAYR,YAAY76E,GAChCqvF,EAAeniL,KAAK6qG,eAAe/X,GAAWxuF,OAC9Cm5I,EAAgBz9I,KAAK08I,gBAAgB,KAAM5pD,GAAWxuF,OAE5DwM,EAAM1N,SAAQ,CAACwP,EAAOozE,KAEdpzE,EAAMrE,UADN4zK,GAAgBA,IAAiB1kC,EACf9a,GAAe2J,SACzB61C,GAAiB1kC,EAEjB0kC,EAEA1kC,EAKD0kC,EAAe1kC,EACJz3D,EAAM28C,GAAe8H,SAAW9H,GAAe2J,SAK/CtmD,EAAM28C,GAAeyJ,SAAWzJ,GAAe2J,SAV/C3J,GAAe8H,SAFf9H,GAAeyJ,SAFfzJ,GAAe4G,QAepC,GAnBL,IAuBG,IAAI1xH,sBAAsB,CAC7B7G,KAAMimI,EAAkBjmI,KACxBJ,IAAKu9J,EAAYN,YAExB,EASD6M,GAAwBl4K,UAAU4/K,WAAa,SAASv6J,GACpD,MAAM,aAAEw7G,GAAiBrjI,KAAK+G,QAE9B,KAAKs8H,SAAAA,EAAcg/C,eAAkBh/C,SAAAA,EAAcC,QAAWD,SAAAA,EAAci/C,uBACxE,OAAOz6J,EAGX,MAAMkxJ,EAAY7lK,GAAAA,MAAgB2U,EAAYjX,KACxCuvK,EAASpH,EAAUjoK,MAEzB,IAAK,MAAM8B,KAASutK,EAChB,GAAmB,UAAfvtK,EAAM5B,KAAkB,CACxB,MAAM,QAAE6hG,GAAYjgG,EAAM3B,IAAIwD,MAAK2lD,GAAYA,EAASgB,QAAU+tE,GAAAA,OAElE,IAAKt2B,EAED,SAGJ,IAAI0vE,EAAW3vK,EAAM1B,KAAKuD,MAAK2lD,GAAYA,EAASy4C,UAAYA,IAE3D0vE,IACDA,EAAW,CACP1vE,UACArkG,OAAQ,KAIhB,MAAMg0K,EAAatvK,GAAAA,YAAsBqvK,EAAS/zK,QAClD,IAAIi0K,GAAa,EAkBjB,GAhBIp/C,SAAAA,EAAcC,SACdk/C,EAAWl/C,OAAS,EACpBm/C,GAAa,GAGbp/C,SAAAA,EAAci/C,wBACdE,EAAWE,kBAAoBr/C,EAAai/C,sBAC5CG,GAAa,IAIZjiJ,GAAQ5jB,aAAT,MAAwBymH,GAAAA,EAAcg/C,gBACtCG,EAAWG,OAAS,EACpBF,GAAa,IAGZA,EAED,SAGJ,IAAIG,EAAe,GAEnB,IAAK,MAAMh7K,KAAOnI,OAAO6I,KAAKk6K,GAC1BI,GAAiB,GAAEh7K,KAAO46K,EAAW56K,OAGzC26K,EAAS/zK,OAASo0K,EAAaz8H,MAClC,CAGL,OAAO,IAAItuC,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgB6lK,IAE5B,EAQD2B,GAAwBl4K,UAAUqgL,eAAiB,SAASh7J,GACxD,MAAMkxJ,EAAY7lK,GAAAA,MAAgB2U,EAAYjX,KACxCuvK,EAASpH,EAAUjoK,MAEzB,IAAK,MAAM8B,KAASutK,EAChBvtK,EAAMrE,UAAYo0H,GAAe4G,SACjC32H,EAAMc,WAAQ5M,EACd8L,EAAM4B,gBAAa1N,EAGvB,OAAO,IAAI+Q,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgB6lK,IAE5B,EAKD2B,GAAwBl4K,UAAUsgL,yBAA2B,WAEzD,IAAK9iL,KAAKykB,eAAeuuI,YAAchzJ,KAAKm7K,eACxC,OAGJ,MAAM9uC,EAAUrsI,KAAKykB,eAAeuuI,aAEb,IAAnB3mB,EAAQ/nI,QAAgB+nI,EAAQ,GAAG7hI,YACnCxK,KAAKm7K,eAAiB9uC,EAAQ,GAAG7hI,UAEjCxK,KAAKm7K,eAAel4K,QAAUU,IAC1BoH,GAAOpH,MAAO,GAAE3D,6BAA6B2D,IAA7C,EAGJ3D,KAAKm7K,eAAe4H,cAAgB,KAChC/iL,KAAKkc,MAAM,8BAA+Blc,KAAKm7K,eAAeh1I,MAA9D,EAGX,EASDu0I,GAAwBl4K,UAAUwgL,mBAAqB,SAASn7J,GAAiC,IAApBo7J,EAAoB,wDAC7F,IAAKjjL,KAAK41I,cACN,OAAO/tH,EAEX,MAAMkxJ,EAAY7lK,GAAAA,MAAgB2U,EAAYjX,KAGxCrC,EAAY00K,EAAatgD,GAAe8H,SAAW9H,GAAeyJ,SAClE+zC,EAASpH,EAAUjoK,MAAMC,QAAOpF,GAAKA,EAAEqF,OAAS0yF,GAAUgH,OAAS/+F,EAAE4C,YAAcA,IAEzF,IAAK,MAAMqE,KAASutK,EAChB,GAAIngL,KAAK41I,cAAc8E,UAAU,KAAOvR,GAAAA,IAAmB,CACvD,MAAM+5C,EAAWljL,KAAKu/I,SAASg5B,cAAc71C,KAAO1iI,KAAKu/I,SAASg5B,cAC5D4K,EAAYD,EAAS7K,KAAO6K,EAAS7K,KAAOR,GAC5CuL,EAAcF,EAAS5K,OAAS4K,EAAS5K,OAAST,GAClDp7G,EAAM7pD,EAAM6pD,IACZ4mH,EAAkB57E,GAAAA,kCAClBhrC,IAAQz8D,KAAKo9K,sBACbp9K,KAAKigL,mBACLqD,EAAQr/K,KAAKC,OAAOm/K,EAAkBD,EAAcD,GAAa,KAIvEvwK,EAAMgtD,UAAY,CAAE,CAChB5uD,KAAM,KACNsyK,SAEP,MAKG1wK,EAAMgtD,eAAY94D,EAI1B,OAAO,IAAI+Q,sBAAsB,CAC7B7G,KAAM6W,EAAY7W,KAClBJ,IAAKsC,GAAAA,MAAgB6lK,IAE5B,EAQD2B,GAAwBl4K,UAAUk9I,8BAAgC,WAAiC,IAAxB65B,EAAwB,uDAAN,KAIzF,KAAKv5K,KAAK2+F,OAAW3+F,KAAKy/I,qBAAuBz/I,KAAKw/I,qBAClD,OAAOx/I,KAAKu/I,SAASD,wBAAuB,GAGhD,GAAIi6B,EACA,OAAOv5K,KAAKi8I,0BACRj8I,KAAK+7K,kBAAkB53J,IAAIo1J,EAAgBx9B,iBAC3Cw9B,GAER,MAAMt7D,EAAW,GAEjB,IAAK,MAAM34F,KAAStlB,KAAK87I,sBACrB79B,EAASr8G,KAAK5B,KAAKi8I,0BAA0Bj8I,KAAK+7K,kBAAkB53J,IAAImB,EAAMy2H,iBAAkBz2H,IAGpG,OAAOlL,QAAQikG,WAAWJ,EAC7B,EAEDy8D,GAAwBl4K,UAAUk3I,oBAAsB,SAAS7xH,GAC7D,IAAII,EAAmBJ,EAkBvB,OAhBA7nB,KAAKkc,MAAM,oCAAqC8gK,GAAQ/0J,IAGxDA,EAAmBjoB,KAAKoiL,WAAWn6J,GAE9BjoB,KAAKgwK,mBACN/nJ,EAAmBjoB,KAAK+hL,2BAA2B95J,GACnDA,EAAmBjoB,KAAKqhL,4BAA4Bp5J,IAIxDA,EAAmBjoB,KAAKkgL,iBAAiBj4J,GACzCA,EAAmBjoB,KAAKgjL,mBAAmB/6J,GAAkB,GAE7DjoB,KAAKkc,MAAM,qCAAsC8gK,GAAQ/0J,IAElD,IAAI7N,SAAQ,CAACC,EAASC,KACzBta,KAAKykB,eAAei1H,oBAAoBzxH,GACnCtN,MAAK,KACF3a,KAAKkc,MAAM,gCACX,MAAM++J,EAAa11C,GAAAA,SAAiBt9G,EAAiBrX,KAEjDqqK,IAAej7K,KAAKi7K,aACpBj7K,KAAKi7K,WAAaA,EAClBj7K,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,oBAA+B3mF,KAAMi7K,IAGhEj7K,KAAK8iL,2BAELzoK,GAAS,IACVwJ,IACC7jB,KAAKkc,MAAM,+BAAgC2H,GAC3C7jB,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,6BAAwC9iE,EAAK7jB,MACpEsa,EAAOuJ,EAAP,GAhBR,GAmBP,EAED62J,GAAwBl4K,UAAU03I,qBAAuB,SAASryH,GAC9D,IAAIovH,EAAoBpvH,EAOxB,GALA7nB,KAAKkc,MAAM,qCAAsC8gK,GAAQn1J,IAGzDovH,EAAoBj3I,KAAKoiL,WAAWnrC,GAEhCj3I,KAAKgwK,iBAAkB,CAEvB,IAAKhwK,KAAK2+F,MAAO,CACb,MAAM4kF,EAAqBvjL,KAAKykB,eAAewyH,kBAE/CA,EAAoBj3I,KAAK27K,QAAQvS,cAAcnyB,EAAmBssC,GAClEvjL,KAAKkc,MAAM,gDAAiD8gK,GAAQ/lC,GACvE,CACGj3I,KAAKyuK,kBACLx3B,EAAoBj3I,KAAKu/I,SAAS25B,kCAAkCjiC,GACpEj3I,KAAKkc,MAAM,oDAAqD8gK,GAAQ/lC,KAE5EA,EAAoBj3I,KAAKu/I,SAASu5B,0BAA0B7hC,GAC5Dj3I,KAAKkc,MAAM,2DAA4D8gK,GAAQ/lC,GAClF,MACOj3I,KAAKyuK,kBAELx3B,EAAoBj3I,KAAK0uK,UAAUh4J,uBAC/BugI,GACA,GACJj3I,KAAKkc,MAAM,kDAAmD8gK,GAAQ/lC,KAE1EA,EAzvCe,SAAS9iI,GAC5B,GAAoB,iBAATA,GAA8B,OAATA,GACL,iBAAbA,EAAKvD,IAGf,OAFA7F,GAAOuY,KAAK,kDAELnP,EAIX,MAAMjB,EAAY5T,EAAQ,MACpBuR,EAAUqC,EAAUxM,MAAMyN,EAAKvD,UAEd,IAAZC,QACyB,IAAlBA,EAAQC,OACf7F,MAAMgJ,QAAQpD,EAAQC,QAC7BD,EAAQC,MAAM1N,SAAQwP,IASlB,MAAM4wK,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArB7wK,EAAM4B,YACVvJ,MAAMgJ,QAAQrB,EAAM4B,aACvB5B,EAAM4B,WAAWpR,SAAQsR,SACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMhB,OACb8vK,EAAW5hL,KAAKsO,OAAOwE,EAAMhB,MAAMhI,MAAM,KAAK,IAErD,IAILT,MAAMgJ,QAAQrB,EAAMc,OAAQ,CAC5B,IAAI5O,EAEJ,IAAKA,EAAI,EAAGA,EAAI8N,EAAMc,MAAMpP,OAAQQ,IACF,iBAAnB8N,EAAMc,MAAM5O,SACa,IAAtB8N,EAAMc,MAAM5O,GAAGsH,IACtBo3K,EAAW/4K,QAAQmI,EAAMc,MAAM5O,GAAGsH,KAAO,IAC5Cq3K,EAAa7hL,KAAKgR,EAAMc,MAAM5O,WACvB8N,EAAMc,MAAM5O,IAI3B,IAAKA,EAAI,EAAGA,EAAI8N,EAAMc,MAAMpP,OAAQQ,SACF,IAAnB8N,EAAMc,MAAM5O,IACnB2+K,EAAa7hL,KAAKgR,EAAMc,MAAM5O,IAItC8N,EAAMc,MA0BtB,WAAuD,IAAhB0yH,EAAgB,uDAAJ,GAC/C,IAAK5lG,GAAQy0D,aAAez0D,GAAQm1D,qBAAqB,IACrD,OAAOywC,EAGX,IAAIs9C,EAAgB,IAAKt9C,GAsBzB,OApB2BA,EAAUr1H,QAAOq3H,GACjB,YAAvBA,EAASt5H,WAA8C,MAAnBs5H,EAASvgI,QAC5C4J,KAAI22H,GAAYA,EAASh8H,KAEXhJ,SAAQugL,IAEvB,MAAMC,EAAYF,EAAcjvK,MAAKlJ,GACjCA,EAAKa,KAAOu3K,GAA6B,UAAnBp4K,EAAKuD,YAE/B80K,EAAU/7K,MAAS,GAAE86H,GAAe8H,YAAYk5C,IAGhDD,EACMA,EAAc3yK,QAAOxF,GAAQA,EAAKa,KAAOu3K,IAI/CD,EAAc9hL,KAAKgiL,EAAnB,IAGGF,CACV,CAtD6BG,CAA8BJ,EAC/C,KAIT,MAAMta,EAASj2J,EAAUzD,MAAMoB,GAG/B,OAAO,IAAIgH,sBAAsB,CAC7B7G,KAAMmD,EAAKnD,KACXJ,IAAKu4J,GAEZ,CAorC2B2a,CAAe7sC,GAQvC,OAJAA,EAAoBj3I,KAAKkgL,iBAAiBjpC,GAC1CA,EAAoBj3I,KAAKgjL,mBAAmB/rC,GAC5Cj3I,KAAKkc,MAAM,0DAA2D8gK,GAAQ/lC,IAEvE,IAAI78H,SAAQ,CAACC,EAASC,KACzBta,KAAKykB,eAAey1H,qBAAqBjD,GACpCt8H,MAAK,KACF3a,KAAKkc,MAAM,iCACX,MAAMg/J,EAAc31C,GAAAA,SAAiB0R,EAAkBrmI,KAEnDsqK,IAAgBl7K,KAAKk7K,cACrBl7K,KAAKk7K,YAAcA,EACnBl7K,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,qBAAgC3mF,KAAMk7K,IAGjEl7K,KAAK8iL,2BAELzoK,GAAS,IACVwJ,IACC7jB,KAAKkc,MAAM,gCAAiC2H,GAC5C7jB,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,8BAAyC9iE,EAAK7jB,MACrEsa,EAAOuJ,EAAP,GAhBR,GAmBP,EAWD62J,GAAwBl4K,UAAUy5I,0BAA4B,SAAS9wH,EAAaouJ,GAAiB,QACjG,GAAIpuJ,EAAc,EACd,MAAM,IAAI5oB,MAAO,wBAAuB4oB,KAE5C,IAAKouJ,EACD,MAAM,IAAIh3K,MAAM,gCAEpB,MAAMg0G,EAAagjE,EAAgBx9B,gBAInC,IAAM/7I,KAAK2+F,QAAU3+F,KAAKy/I,qBAAwB85B,EAAgB9pE,UAG9D,OAFAzvG,KAAK+7K,kBAAkBj1I,IAAIyvE,EAAYprF,GAEhC/Q,QAAQC,UAGnB,MAAM0pK,EAAuB/jL,KAAKu/I,SAASw6B,8BAA8BR,GAKzE,OAAKA,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,QAAoBs7F,IAAyB54J,GAC7EouJ,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,SAChCt9D,EAAc,GACd44J,KAAoB,UAAKxK,EAAgB7V,kBAArB,iBAAK,EAA4BrN,qBAAjC,aAAK,EAA2C7hI,QACpEpa,QAAQC,WAGnBra,KAAK+7K,kBAAkBj1I,IAAIyvE,EAAYprF,GAEhCnrB,KAAKu6K,8BACR,IAAMv6K,KAAKgkL,4BAA4B74J,EAAaouJ,KAC3D,EAUDmB,GAAwBl4K,UAAU+3K,6BAA+B,SAAS0J,GACtE,MAAMC,EAAclkL,KAAK48K,8BACpB9yB,QAAQm6B,GAIb,OAFAjkL,KAAK48K,8BAAgCsH,EAE9BA,CACV,EASDxJ,GAAwBl4K,UAAUwhL,4BAA8B,SAAS74J,EAAaouJ,GAAiB,MACnG,MAAMS,EAAch6K,KAAK67G,mBAAmB09D,EAAgB7V,YAE5D,IAAKsW,EACD,OAAO5/J,QAAQC,UAEnB,MAAM0T,EAAaisJ,EAAY/hB,gBAE/B,GAAKlqI,SAAD,UAACA,EAAYmqI,iBAAb,QAAC,EAAuB5zJ,OACxB,OAAO8V,QAAQC,UAGnB,MAAM2lK,EAAwBzG,EAAgB1V,iBAAmBp7E,GAAU,UAAVA,SAAqBzoF,KAAK05K,uBAGrFyK,EAAanE,EApoFgB,sBADD,qBAyoFlCjyJ,EAAWq2J,sBAAwBD,EACnCp5K,GAAOsM,KAAM,GAAErX,mDAAmDmkL,WAAoB5K,KAGtFv5K,KAAKqkL,sBAAwBrkL,KAAKu/I,SAAS+5B,8BAA8BC,EAAiBpuJ,GAC1F,MAAMm5J,EAActkL,KAAKu/I,SAASo6B,2BAA2BJ,GACvD1lE,EAAY0lE,EAAgB1V,eAElC,GAAI7jK,KAAKyuK,gBAAiB,CACtB,IAAK,MAAMtgK,KAAY4f,EAAWmqI,UAAW,CACU,QAA/CnqI,EAAWmqI,UAAU1wJ,eAAe2G,KACpC4f,EAAWmqI,UAAU/pJ,GAAUo8F,OAASvqG,KAAKqkL,sBAAsBl2K,GAInEqyB,GAAQ5jB,cAAgBmR,EAAWmqI,UAAU/pJ,GAAUi2K,sBAAwBD,GAE3EnkL,KAAKi5I,4BAA8B9P,GAAAA,MAC/B,UAAAnpI,KAAK+G,eAAL,mBAAc+uI,oBAAd,SAA4BmiC,kBACzB+H,GACAhgL,KAAKgwK,oBACZjiJ,EAAWmqI,UAAU/pJ,GAAU0xD,WAAaykH,EAAYn2K,IAGnE,CACDnO,KAAKu/I,SAASk7B,0BAA0BlB,EAAiBxrJ,EAG5D,MAAM,GAAI5C,EAAc,EAAG,SACxB,IAAIo5J,EDtrFmB,ECosFvB,GAXI1wE,IAAcprB,GAAU,UAAVA,QAAoB8wF,EAAgB30E,WAAaz5E,IAC/Do5J,EAActgL,KAAKC,MAAMq1K,EAAgB30E,WAAaz5E,IAG1D4C,EAAWmqI,UAAU,GAAG3tD,QAAS,EACjCx8E,EAAWmqI,UAAU,GAAGH,sBAAwBwsB,EAGhD/jJ,GAAQ5jB,cAAgBmR,EAAWmqI,UAAU,GAAGksB,sBAAwBD,GAGpEnkL,KAAKi5I,4BAA8B9P,GAAAA,KAAnC,UAAwDnpI,KAAK+G,eAA7D,iBAAwD,EAAc+uI,oBAAtE,OAAwD,EAA4BmiC,iBAAkB,OACtG,IAAIpsJ,EAAO,UAAG7rB,KAAK49K,gCAAR,aAAG,EAA+BvF,KAET,QAAhCxkE,IAAcprB,GAAU,UAAVA,SACd58D,EAAO,oBAAG7rB,KAAKu/I,SAASo5B,yBAAyBY,EAAgB1V,gBAC5DpvJ,MAAK+vK,GAASA,EAAMzsB,wBAA0BwsB,WAD5C,aAAG,EACuD1kH,kBAD1D,QACwEh0C,GAEnFkC,EAAWmqI,UAAU,GAAGr4F,WAAah0C,CACxC,MACGkC,EAAWmqI,UAAU,GAAGr4F,gBAAa/4D,CAE5C,MACGinB,EAAWmqI,UAAU,GAAG3tD,QAAS,EAKrC,OAFAx/F,GAAOsM,KAAM,GAAErX,2BAA2BmrB,eAAyBlkB,KAAK8B,UAAUglB,EAAWmqI,cAEtF8hB,EAAYhzJ,cAAc+G,GAAYpT,MAAK,KAC9C4+J,EAAgB/U,qBAAuBr5I,EACvCnrB,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,2CAAsD4yF,EAA7E,GAEP,EAUDmB,GAAwBl4K,UAAUq+I,uBAAyB,SAASt2C,GAChEx/F,GAAOkT,MAAO,GAAEje,+BAA+BuqG,KAC/C,MAAM38E,EAAU5tB,KAAKy/I,sBAAwBl1C,EAI7C,OAFAvqG,KAAKy/I,oBAAsBl1C,EAEvB38E,EACO5tB,KAAKu/I,SAASD,uBAAuB/0C,EAAQ7G,GAAUgH,OAG3DtwF,QAAQC,SAClB,EAWDqgK,GAAwBl4K,UAAUiiL,UAAY,SAASC,GAA2C,IAApCzhF,EAAoC,uDAAzB,IAAK0hF,EAAoB,uDAAL,IACzF,IAAK3kL,KAAK26K,YAAa,CACnB,GAAI36K,KAAKykB,eAAeuuI,WAAY,CAChC,MAAM4xB,EAAY5kL,KAAKykB,eAAeuuI,aAAav+I,MAAK/G,GAAKA,EAAEklJ,OAE/D5yJ,KAAK26K,YAAciK,GAAaA,EAAUhyB,KAC1C5yJ,KAAK26K,aAAe5vK,GAAOsM,KAAM,GAAErX,+CACtC,CAED,IAAKA,KAAK26K,YAAa,CACnB,MAAMkK,EAAkB55K,MAAM6Q,KAAK9b,KAAK27G,YAAYjmG,UAAUjB,MAAKzI,GAAKA,EAAEs7F,iBAEtEtnG,KAAKykB,eAAequI,kBAAoB+xB,IACxC7kL,KAAK26K,YAAc36K,KAAKykB,eAAequI,iBAAiB+xB,EAAgBnhB,aAE5E1jK,KAAK26K,aAAe5vK,GAAOsM,KAAM,GAAErX,gEACtC,CAEGA,KAAK26K,cACL36K,KAAK26K,YAAYmK,aAAe9kL,KAAK+kL,cAAcliL,KAAK7C,MAE/D,CAED,GAAIA,KAAK26K,YAAa,CAClB,GAAI36K,KAAK26K,YAAYqK,WAOjB,YANAhlL,KAAK46K,gBAAgBh5K,KAAK,CACtB8iL,QACAzhF,WACA0hF,iBAMR3kL,KAAK26K,YAAYsK,WAAWP,EAAOzhF,EAAU0hF,EAChD,MACG55K,GAAOuY,KAAM,GAAEtjB,+CAEtB,EAWD06K,GAAwBl4K,UAAUuiL,cAAgB,SAASzhL,GAGvD,GAAItD,KAAK26K,aAA8B,KAAfr3K,EAAM4hL,MAAellL,KAAK46K,gBAAgBt2K,OAAQ,CACtE,MAAM,MAAEogL,EAAF,SAASzhF,EAAT,aAAmB0hF,GAAiB3kL,KAAK46K,gBAAgBpsJ,QAE/DxuB,KAAK26K,YAAYsK,WAAWP,EAAOzhF,EAAU0hF,EAChD,CACJ,EAMDjK,GAAwBl4K,UAAUw2I,qBAAuB,WACrD,MAAMs0B,EAAU/nC,GAAAA,eAEhBx6H,GAAOsM,KAAM,GAAErX,oCAAoCstK,KACnDttK,KAAK2uK,eAAe2C,eAAehE,EACtC,EAMDoN,GAAwBl4K,UAAUq9I,kBAAoB,WAClD90I,GAAOsM,KAAM,GAAErX,qCACfA,KAAK2uK,eAAeyC,qBACvB,EAODsJ,GAAwBl4K,UAAUyc,MAAQ,WACtCjf,KAAKkc,MAAM,QAGXlc,KAAK4yI,eAAehrG,IAAIwiI,GAAoCpqK,KAAKq7K,mBACjEr7K,KAAK4yI,eAAehrG,IAAIwiI,GAAyCpqK,KAAKo7K,uBACtEp7K,KAAKgwK,kBAAoBhwK,KAAKykB,eAAeoiB,oBAAoB,QAAS7mC,KAAKi8K,SAE/E,IAAK,MAAMkJ,KAAcnlL,KAAK66K,aAAanlK,SACvC,IAAK,MAAMmlK,KAAgBsK,EAAWzvK,SAClC,IAAK,MAAMooK,KAAejD,EACtB76K,KAAKi/K,mBAAmBnB,GAIpC99K,KAAK66K,aAAatkJ,QAElBv2B,KAAK86K,cAAgB,GAErB96K,KAAK26K,YAAc,KACnB36K,KAAK46K,gBAAkB,GAElB56K,KAAKgwG,IAAIo1E,sBAAsBplL,OAChC+K,GAAOpH,MAAO,GAAE3D,iDAEO,OAAvBA,KAAKy7K,gBACLl8K,OAAOgiB,cAAcvhB,KAAKy7K,eAC1Bz7K,KAAKy7K,cAAgB,MAEzB1wK,GAAOsM,KAAM,GAAErX,+BACfA,KAAKykB,eAAexF,OACvB,EAEDy7J,GAAwBl4K,UAAUy8I,aAAe,SAASv6H,GACtD,OAAO1kB,KAAKqlL,sBAAqB,EAAoB3gK,EACxD,EAEDg2J,GAAwBl4K,UAAUg3I,YAAc,SAAS90H,GACrD,OAAO1kB,KAAKqlL,sBAAqB,EAAkB3gK,EACtD,EAEDg2J,GAAwBl4K,UAAU6iL,qBAAuB,SACjDC,EACA5gK,GACJ,MAAM6gK,EAAUD,EAAU,QAAU,SAEpCtlL,KAAKkc,MAAO,SAAQqpK,IAAWt+K,KAAK8B,UAAU2b,EAAa,KAAM,MAEjE,MAAM8gK,EAAgB,CAACrb,EAAWsb,EAAWC,KACzC,IACI1lL,KAAKkc,MACA,SAAQqpK,2BAAkCvI,GAAQ7S,IAElDnqK,KAAKgwK,mBAGDhwK,KAAKm9K,mBAAmBz5E,GAAUgH,QAC/B1qG,KAAK2uK,eAAe4C,wBACxBvxK,KAAKg5I,uBAITmxB,EAAY,IAAItyJ,sBAAsB,CAClC7G,KAAMm5J,EAAUn5J,KAChBJ,IAAK5Q,KAAK2uK,eAAe6C,gCACrBrH,EAAUv5J,OAGlB5Q,KAAKkc,MACA,SAAQqpK,wEAETvI,GAAQ7S,KAGhB,MAAMoP,EAAkBv5K,KAAK87I,sBAAsB,GAG/C97I,KAAKyuK,iBAAmBjuI,GAAQ+3D,gCAC5BghF,aAAA,EAAAA,EAAiB1V,kBAAmBp7E,GAAU,UAAVA,QACrCzoF,KAAKgwK,oBAER7F,EAAYnqK,KAAK0uK,UAAU52J,sBAAsBqyJ,GACjDnqK,KAAKkc,MAAO,SAAQqpK,yCAAgDvI,GAAQ7S,MAG3EnqK,KAAK+G,QAAQyuI,YAAch1G,GAAQ+3D,+BAEpC4xE,EAAY,IAAItyJ,sBAAsB,CAClC7G,KAAMm5J,EAAUn5J,KAChBJ,IAAK5Q,KAAK8uK,YAAY6B,eAAexG,EAAUv5J,OAGnD5Q,KAAKkc,MACA,SAAQqpK,2CAETvI,GAAQ7S,KAGhB,MAAMl1J,EAAUjV,KAAKq/K,gBAAgBlV,GAErCnqK,KAAK2lL,sBAAsB1wK,GAE3BwwK,EAAUtb,EACb,CAAC,MAAOv8J,GACL5N,KAAKkc,MAAO,SAAQqpK,WAAkB33K,GACtC5N,KAAKkc,MAAO,SAAQqpK,WAAkBvI,GAAQ7S,IAC9Cp/J,GAAOpH,MAAO,GAAE3D,cAAculL,WAAkB33K,EAAGovK,GAAQ7S,IAE3Dub,EAAS93K,EACZ,GAGCg4K,EAAgB,CAAC/hK,EAAK6hK,KACxB1lL,KAAKkc,MAAO,SAAQqpK,aAAoB1hK,GACxC,MAAMgiK,EACAP,EACI3+F,GAAAA,QAAAA,oBACAA,GAAAA,QAAAA,qBAEV3mF,KAAKsiG,aAAahgG,KAAKujL,EAAWhiK,EAAK7jB,MAEvC0lL,EAAS7hK,EAAT,EAKJ,GAAI7jB,KAAK07K,kCAAoC17K,KAAK41I,cAAe,OAC7D,MAAM,UAAE8E,EAAF,UAAa5nD,GAAc9yF,KAAK41I,cAChCluH,EAAe1nB,KAAKykB,eAAekD,kBACpC5W,QAAO/E,IAAC,eAAIA,EAAEi4B,WAAY,UAAAj4B,EAAEi4B,gBAAF,mBAAY3e,aAAZ,eAAmBD,QAASytE,CAA9C,IACb,IAAIgzF,EAAY,UAAGluF,eAAeC,gBAAgB/E,UAAlC,aAAG,EAA2Cz0B,OAE9D,GAAI32C,EAAapjB,QAAUwhL,EAAc,CAErC,IAAK,MAAM1qH,KAASs/E,EAAUxvI,QAAQqvB,UAGlCurJ,EAAa1xJ,MAAKyqC,GACPA,EAAKm6B,SAASnnE,gBAAmB,GAAEihE,KAAa13B,KAAW,EAAI,IAM1E56B,GAAQo2D,mBAAqB9D,IAAc4Q,GAAUgH,QACrDo7E,EAAeA,EACV/0K,QAAO8tD,GAAQA,EAAKm6B,SAASnnE,gBAAmB,GAAE6xE,GAAUgH,SAASy+B,GAAAA,YAI9E,IAAK,MAAM5hH,KAAeG,EACtBH,EAAYZ,oBAAoBm/J,EAEvC,CACJ,CAED,OAAO,IAAI1rK,SAAQ,CAACC,EAASC,KACzB,IAAIyrK,EAGAA,EADAT,EACYtlL,KAAKykB,eAAe+0H,YAAY90H,GAEhC1kB,KAAKykB,eAAew6H,aAAav6H,GAGjDqhK,EACKprK,MACG/J,GAAO40K,EAAc50K,EAAKyJ,EAASC,KACnC3W,GAASiiL,EAAcjiL,EAAO2W,IAHtC,GAKP,EAODogK,GAAwBl4K,UAAUwjL,oBAAsB,SAASha,GAC7D,OAAIA,GAAWA,EAAQthC,QAAUshC,EAAQthC,OAAOpmI,OACrC0nK,EAAQthC,OAAO,GAAGh3H,MAAM,GACxBs4J,GAAWA,EAAQt4J,OAASs4J,EAAQt4J,MAAMpP,OAC1C0nK,EAAQt4J,MAAM,GAGlB,IACV,EASDgnK,GAAwBl4K,UAAUmjL,sBAAwB,SAAS1wK,GAC/D,IAAK,MAAMqQ,KAAStlB,KAAK27G,YAAYjmG,SAAU,CAC3C,MACMo3B,EAAci+H,GADDzlJ,EAAMy2H,iBAEnBkqC,EAAmBjmL,KAAKgwK,iBACvB,GAAE1qJ,EAAMoqF,aAAa5iE,IACtBxnB,EAAMwhJ,WAEZ,GAAI7xJ,EAAQiP,IAAI+hK,GAAmB,CAC/B,MAAM3Y,EAAUr4J,EAAQkP,IAAI8hK,GAE5B,IAAK3Y,EAGD,YAFAviK,GAAOpH,MAAO,GAAE3D,iCAAiCimL,KAIrD,MAAM5Y,EAAUrtK,KAAK+6K,WAAW52J,IAAImB,EAAM6+I,OACpC+hB,EAAalmL,KAAKgmL,oBAAoB1Y,GACtC6Y,EAAanmL,KAAKgmL,oBAAoB3Y,GAGxC6Y,IAAeC,IACfA,GAAcp7K,GAAOpH,MAAO,GAAE3D,mCAAmCslB,gBAAoBgoJ,KACrFttK,KAAK+6K,WAAWj0I,IAAIxhB,EAAM6+I,MAAOmJ,GACjCttK,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,yBAAoCrhE,EAAO4gK,GAEzE,MAAW5gK,EAAMsiF,gBAAmBtiF,EAAMmqF,WAIvC1kG,GAAOuY,KAAM,GAAEtjB,kDAAkDslB,aAAiB2gK,IAEzF,CACJ,EAODvL,GAAwBl4K,UAAUg7I,cAAgB,SAAShqI,GACvD,MAAMkyB,EAAW1lC,KAAKg7K,YAAY92J,IAAI1Q,GAMtC,OAJKkyB,GACD1lC,KAAKg7K,YAAYjrJ,IAAIvc,IAGjBkyB,CACX,EAEDg1I,GAAwBl4K,UAAU+1I,gBAAkB,SAASpzH,GAQzD,OAPAnlB,KAAKkc,MAAM,kBAAmBjV,KAAK8B,UAAU,CACzCoc,UAAWA,EAAUA,UACrB0yH,OAAQ1yH,EAAU0yH,OAClBL,cAAeryH,EAAUqyH,cACzB98E,iBAAkBv1C,EAAUu1C,kBAC7B,KAAM,MAEF16D,KAAKykB,eAAe8zH,gBAAgBpzH,EAC9C,EAODu1J,GAAwBl4K,UAAU4jL,0BAA4B,WAC1D,IAAIC,EAAgB,EAEoC,MAMxD,OANIrmL,KAAKyuK,iBAAmBzuK,KAAKqkL,sBAC7BgC,EAAa,UAAGrmL,KAAKqkL,sBAAsBtzK,QAAOiB,GAAUqO,QAAQrO,YAAvD,aAAG,EAA8D1N,OACvEtE,KAAKyuK,kBACZ4X,EAAgBvO,GAAexzK,QAG5B+hL,CACV,EAQD3L,GAAwBl4K,UAAU6f,SAAW,WACzC,OAAOriB,KAAKykB,eAAepC,UAC9B,EASDq4J,GAAwBl4K,UAAU+9K,0BAA4B,SAASj7J,GACnE,MAAM6+I,EAAQ7+I,EAAM6+I,MACpB,IAAIxwJ,EAAW3T,KAAKy/K,SAAStb,GAO7B,GALIxwJ,GACA5I,GAAOpH,MAAO,GAAE3D,6CAA6CmkK,MAI7DnkK,KAAKyuK,iBACDnpJ,EAAMu+I,iBAAmBp7E,GAAU,UAAVA,QAAqBzoF,KAAKggL,wBAavDrsK,EAAW,CACPD,MAAO,CAAE6xH,GAAAA,gBACTmF,OAAQ,QAfqE,CACjF/2H,EAAW,CACPD,MAAO,GACPg3H,OAAQ,IAEZ,IAAK,IAAI5lI,EAAI,EAAGA,EAAIgzK,GAAexzK,OAAQQ,IACvC6O,EAASD,MAAM9R,KAAK2jI,GAAAA,gBAExB5xH,EAAS+2H,OAAO9oI,KAAK,CACjB8R,MAAOC,EAASD,MAAMxI,QACtByJ,UAAW,OAElB,CAMD,IAAK3U,KAAK+G,QAAQyuI,WAAY,CAK1B,MAAM8wC,EAAe3yK,EAASD,MAAMpP,OAEpC,IAAK,IAAIQ,EAAI,EAAGA,EAAIwhL,IAAgBxhL,EAAG,CACnC,MAAM8Q,EAAcjC,EAASD,MAAM5O,GAC7BwrK,EAAU/qC,GAAAA,eAEhB5xH,EAASD,MAAM9R,KAAK0uK,GACpB38J,EAAS+2H,OAAO9oI,KAAK,CACjB8R,MAAO,CAAEkC,EAAa06J,GACtB37J,UAAW,OAElB,CACJ,CAID,OAHAhB,EAASsC,KAAOqP,EAAMwhJ,WACtB9mK,KAAK+6K,WAAWj0I,IAAIq9H,EAAOxwJ,GAEpBA,CACV,EAOD+mK,GAAwBl4K,UAAUwT,gBAAkB,WAChD,OAAOhW,KAAKgwK,gBACf,EAOD0K,GAAwBl4K,UAAUgP,SAAW,WACzC,MAAQ,UAASxR,KAAKoM,WAAWpM,KAAK2+F,MAAQ,MAAQ,QACzD,ECprGD,MAAM5zF,IAASkC,EAAAA,EAAAA,iCAMf,ICvBYs5K,GDuBRC,GAA0B,EAO1BC,GAAoB,EAiBxB,SAASC,KACL,OADkD,uDAAJ,IACnBj1K,KAAIk1K,IAC3B,MAAM,SACFhiD,EADE,WAEFC,EAFE,OAGF5yH,EAHE,MAIFsT,EAJE,UAKFuuF,EALE,QAMF4tD,GACAklB,GAEE,SAAEpgK,EAAF,WAAYmqI,GAAeprI,EAAM+wI,cAOvC,OAFAowB,GAAoBhmF,GAAqBgmF,IAElC,IAAIviB,GAAgB,CACvB39I,WACAmqI,aACA59D,UAAWxtE,EAAMD,KACjB8+I,MAAOsiB,GACP9hD,WACAC,aACA5yH,SACAsT,QACAuuF,UAAWA,GAAa,KACxB4tD,WAVJ,GAaP,CAKc,MAAMuc,WAAY1kE,GAM7B15G,YAAY0tG,GAA0B,IAAdvmG,EAAc,uDAAJ,CAAC,EAC/BoxE,QACAn4E,KAAKstG,WAAaA,EAMlBttG,KAAK4mL,gBAAkB,IAAIx4H,IAE3BpuD,KAAK27G,YAAc,GAEnB37G,KAAK+G,QAAUA,EAKf/G,KAAK8rJ,SAAW,KAUhB9rJ,KAAK6mL,YAAS//K,EASd9G,KAAK8mL,kBAAoB,KAGzB9mL,KAAK+mL,gCAAkC/mL,KAAK8zK,2BAA2BjxK,KAAK7C,MAE5EA,KAAKgnL,qBAAuBhnL,KAAKgnL,qBAAqBnkL,KAAK7C,MAC3DA,KAAKinL,iCAAmCjnL,KAAKinL,iCAAiCpkL,KAAK7C,MAI/EsjK,GAAAA,wBAAiC,YACjCA,GAAAA,YACI38E,GAAAA,QAAAA,4BACA3mF,KAAKinL,kCAGT3jB,GAAAA,YACI38E,GAAAA,QAAAA,oBACA3mF,KAAKgnL,sBAGhB,CAODE,UACI5jB,GAAAA,eAAwB38E,GAAAA,QAAAA,4BAAuC3mF,KAAKinL,kCACpE3jB,GAAAA,eAAwB38E,GAAAA,QAAAA,oBAA+B3mF,KAAKgnL,sBAExDhnL,KAAKmnL,sBACLnnL,KAAK2kC,eAAegiD,GAAAA,QAAAA,kBAA6B3mF,KAAKmnL,qBAE7D,CASuB,yBAACC,GACrB,OAAOV,GAAmBU,EAC7B,CAWoC,sCAACrgL,GAClC,OAAOu8J,GAAAA,+BAAwCv8J,GAC1C4T,MAAKysK,GAAcV,GAAmBU,IAC9C,CAUDC,wBAAwB5iK,EAAgBH,GACpCtkB,KAAK8rJ,SAAW,IAAID,GAAcpnI,EAAgBH,EAAOtkB,KAAKsiG,aAActiG,KAAKstG,YAEjFttG,KAAKmnL,qBAAuB,KACxB,MAAMG,EAAW,CAAC3jL,EAAO4jL,EAAS1/K,KAC9BrE,KAAAA,iBAAsCG,GACtCoH,GAAOpH,MAAO,eAAc4jL,KAAWtgL,KAAK8B,UAAUlB,uBAA4BlE,EAAlF,EAKJ,GAAI3D,KAAKwnL,0BACL,IACIxnL,KAAK8rJ,SAASyB,oCAAoCvtJ,KAAKwnL,0BAC1D,CAAC,MAAO7jL,GACL2jL,EAAS3jL,EAAO,2BAA4B3D,KAAKwnL,0BACpD,CAEL,QAA2B,IAAhBxnL,KAAK6mL,SAA2C,IAAjB7mL,KAAK6mL,OAC3C,IACI7mL,KAAK8rJ,SAASuB,oBAAoBrtJ,KAAK6mL,OAC1C,CAAC,MAAOljL,GACL2jL,EAAS3jL,EAAO,oBAAqB3D,KAAK6mL,OAC7C,CACJ,EAEL7mL,KAAKqC,YAAYskF,GAAAA,QAAAA,kBAA6B3mF,KAAKmnL,sBAGnDnnL,KAAKqC,YAAYskF,GAAAA,QAAAA,0BAAqC3mF,KAAK+mL,gCAC9D,CAUDC,uBACIhnL,KAAKinL,iCAAiC3jB,GAAAA,uBACzC,CAQDwQ,6BAAkD,IAAvBlmB,EAAuB,uDAAJ,GAC1C,MAAM65B,EAAsBznL,KAAK8mL,mBAAqB,GACtD,IAAIvR,EAA0B,GAC1BC,EAA2B,GAC/B,MAAMnsK,EAAYpI,KAAKC,MAEvBlB,KAAK8mL,kBAAoBl5B,EAEzB2nB,EAA0BkS,EAAoB12K,QAAOwlG,IAAev2G,KAAKoyK,qBAAqB77D,KAE9Fi/D,EAA2B5nB,EAAiB78I,QACxCwlG,IAA2D,IAA7CkxE,EAAoBh9K,QAAQ8rG,KAE9CxrG,GAAOkT,MAAO,oCAAmCs3J,eACxCC,QAA+BnsK,KACxCrJ,KAAKstG,WAAWhL,aAAahgG,KACzB8nF,GACAmrF,EACAC,EACAnsK,EACP,CAMD+qG,cACQp0G,KAAK8rJ,WAOD9rJ,KAAK8rJ,UAAmC,cAAvB9rJ,KAAK8rJ,SAASv7H,MAC/BvwB,KAAK8rJ,SAAS7sI,QAGlBjf,KAAK8rJ,SAAW,KAEvB,CAODzmB,2BAA2BC,GACvBg+B,GAAAA,2BAAoCh+B,EACvC,CAQDoiD,4BAA4BhjK,GACxB1kB,KAAKwnL,0BAA4B9iK,EAE7B1kB,KAAK8rJ,UAAY9rJ,KAAK8rJ,SAASe,UAC/B7sJ,KAAK8rJ,SAASyB,oCAAoC7oI,EAEzD,CAODijK,oBAAoBpxE,EAAY1C,GACxB7zG,KAAK8rJ,UAAY9rJ,KAAK8rJ,SAASe,UAC/B7sJ,KAAK8rJ,SAAS0B,2BAA2Bj3C,EAAY1C,EAE5D,CAOiB,mBAACgyE,EAAW5sK,GAC1BqqJ,GAAAA,YAAqBuiB,EAAW5sK,EACnC,CAOoB,sBAAC4sK,EAAW5sK,GAC7BqqJ,GAAAA,eAAwBuiB,EAAW5sK,EACtC,CAMU,cAAe,IAAdlS,EAAc,uDAAJ,CAAC,EAGnB,OAFA/G,KAAK+G,QAAUA,EAERu8J,GAAAA,KAActjK,KAAK+G,QAC7B,CAwBDmvI,qBAAqB0xC,EAAWt1C,EAAU3zC,EAAO53F,GAC7C,MAAM0yJ,EAAgBjvB,KAAU84B,GAAAA,eAE5Bv8J,EAAQ8uI,0BACR9qI,GAAOkT,MAAM,iDACbq0H,EAASu1C,0BAA2B,GAIXrnJ,GAAQo2D,oBAAsB7vF,EAAQiP,kBAG/DjL,GAAOkT,MAAM,gDACbq0H,EAAS6jB,aAAe,UAGxBpvJ,EAAQgvI,iBACRzD,EAAS2W,mBAAqB,SAMlC3W,EAASw1C,aAAe,aAExBtB,GAA0B/lF,GAAqB+lF,IAE/C,MAAMuB,EACA,IAAIrN,GACF16K,KACAwmL,GACAoB,EACAt1C,EAAUmnB,EACV96D,EAAO53F,GAIf,OAFA/G,KAAK4mL,gBAAgB9/I,IAAIihJ,EAAc37K,GAAI27K,GAEpCA,CACV,CAWD3C,sBAAsB4C,GAClB,MAAM57K,EAAK47K,EAAwB57K,GAEnC,QAAIpM,KAAK4mL,gBAAgB1iK,IAAI9X,KAEzBpM,KAAK4mL,gBAAgBpnF,OAAOpzF,IAErB,EAKd,CAMD67K,cAAc3iK,GACV,IAAKA,EACD,MAAM,IAAI/iB,MAAM,wCAGpBvC,KAAK27G,YAAY/5G,KAAK0jB,GAEtBA,EAAMgoF,WAAattG,KAAKstG,UAC3B,CAMD46E,sBACI,OAAOloL,KAAK8mL,iBACf,CAMD9qC,qBACI,MAAMmsC,EAAanoL,KAAK6qG,eAAenH,GAAUgH,OAEjD,OAAOy9E,EAAW7jL,OAAS6jL,EAAW,QAAKrhL,CAC9C,CAMDg1I,sBACI,OAAO97I,KAAK6qG,eAAenH,GAAUgH,MACxC,CAMD09E,qBACI,MAAMC,EAAaroL,KAAK6qG,eAAenH,GAAU8M,OAEjD,OAAO63E,EAAW/jL,OAAS+jL,EAAW,QAAKvhL,CAC9C,CAMD+0K,qBACI,OAAO77K,KAAKstG,WAAWyF,UAC1B,CAQDlI,eAAe/X,GACX,IAAI5lE,EAASltB,KAAK27G,YAAYzwG,QAO9B,YALkBpE,IAAdgsF,IACA5lE,EAASA,EAAOnc,QACZuU,GAASA,EAAMoqF,YAAc5c,KAG9B5lE,CACV,CAQDwvH,gBAAgB5pD,GACZ,IAAI+nF,EAAe,GAEnB,IAAK,MAAMt8E,KAAOv+F,KAAK4mL,gBAAgBlxK,SAAU,CAC7C,MAAM4yK,EAAiB/pF,EAAIm+C,qBAAgB51I,EAAWgsF,GAElDw1F,IACAzN,EAAeA,EAAa9uK,OAAOu8K,GAE1C,CAED,OAAOzN,CACV,CAODnqE,aAAa7oG,GACT,MAAM0gL,EAAe,GASrB,OAPAvoL,KAAK6qG,eAAenH,GAAU8M,OAAOptG,SAAQi7K,IAEzCkK,EAAa3mL,KAAKiG,EAAQw2K,EAAW//E,OAAS+/E,EAAW1W,SAAzD,IAKGvtJ,QAAQ0c,IAAIyxJ,EACtB,CAOD13E,aAAahpG,GACT,MAAM0gL,EAAe,GAUrB,OARAvoL,KAAK6qG,eAAenH,GAAUgH,OACzBtnG,SAAQigK,IAELklB,EAAa3mL,KAAKiG,EAAQw7J,EAAW/kE,OAAS+kE,EAAWsE,SAAzD,IAKDvtJ,QAAQ0c,IAAIyxJ,EACtB,CAMDC,iBAAiBljK,GACb,MAAM6oI,EAAMnuJ,KAAK27G,YAAYlxG,QAAQ6a,IAExB,IAAT6oI,GAIJnuJ,KAAK27G,YAAY/wG,OAAOujJ,EAAK,EAChC,CAOuB,yBAACs6B,EAAYz2K,GACjC,OAAOsxJ,GAAAA,kBAA2BmlB,EAAYz2K,EACjD,CAM2B,+BACxB,OAAOsxJ,GAAAA,uBACV,CAS6B,+BAAC1B,GAC3B,OAAO0B,GAAAA,wBAAiC1B,EAC3C,CAUuB,2BACpB,OAAOphI,GAAQ0gD,aAClB,CAO0B,8BACvB,OAAOoiF,GAAAA,sBACV,CAOuC,2CACpC,OAAOA,GAAAA,mCACV,CAM8C,kDAC3C,OAAOA,GAAAA,0CACV,CAMiC,mCAAC5uI,GAC/B,OAAO4uI,GAAAA,4BAAqC5uI,EAC/C,CAS0B,4BAACnO,GACxB,OAAO+8I,GAAAA,qBAA8B/8I,EACxC,CAckB,oBAACvU,GAChB,OAAOgsK,GAAIC,iBAAiBjsK,EAAO5F,GACtC,CAcsB,wBAAC43H,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,CACV,CAOsB,wBAACpyD,GACpB0xF,GAAAA,iBAA0B1xF,EAC7B,CAOqB,uBAACiwF,GACnByB,GAAAA,gBAAyBzB,EAC5B,CAM6B,iCAC1B,OAAOyB,GAAAA,yBACV,CAKDrzD,qBACQjwG,KAAK8rJ,WACL9rJ,KAAK8rJ,SAAS7sI,QACdjf,KAAK8rJ,SAAW,KAEvB,CAUDh3C,cAAcvW,EAAK/qF,EAAM+sF,EAAYrB,GACjC,MAAM55E,EAAQi5E,EAAI4I,eAAe3zF,GAE5B8R,IAEOA,EAAMgiF,gBAIPhiF,EAAM45E,YAAcA,GAC3Bn0F,GAAOpH,MACF,GAAE2hB,qBAAyB45E,EAAU,KAAO,kBAGrD55E,EAAMwvF,cAAcvU,EAAYhC,IAR5BxzF,GAAOuY,KAAM,6CAA4C9P,KAShE,CAUDk1K,mBAAmB7sK,EAAIg3F,GACnB,IAAI7yG,KAAK8rJ,SAGL,MAAM,IAAIvpJ,MAAM,gCAFhBvC,KAAK8rJ,SAAS1oC,YAAYvnG,EAAIg3F,EAIrC,CAODq6C,yBAAyBr6C,GACjB7yG,KAAK8rJ,UAAY9rJ,KAAK8rJ,SAASe,UAC/B7sJ,KAAK8rJ,SAASoB,yBAAyBr6C,EAE9C,CAQD81E,SAAS9gL,GACD7H,KAAK6mL,SAAWh/K,IAChB7H,KAAK6mL,OAASh/K,EACV7H,KAAK8rJ,UAAY9rJ,KAAK8rJ,SAASe,UAC/B7sJ,KAAK8rJ,SAASuB,oBAAoBxlJ,GAEtC7H,KAAKsiG,aAAahgG,KAAKqkF,GAAAA,QAAAA,oBAA+B9+E,GAE7D,CASDuqK,qBAAqB77D,GACjB,OAAQv2G,KAAK8mL,mBACN9mL,KAAK8mL,kBAAkBr8K,QAAQ8rG,IAAe,CACxD,CAUD0wE,iCAAiC1gK,GAC7B,MAAMqiK,EAAoB5oL,KAAK08I,gBAAgBh5C,GAAU8M,OAEzD,IAAK,MAAMlrF,KAASsjK,EAChBtjK,EAAM2+I,eAAe19I,EAE5B,YC5zBOggK,GAAAA,EAAAA,oBAAAA,yBAAAA,EAAAA,qBAAAA,2BAAAA,KAAAA,GAAAA,CAAAA,IAcL,MAAMsC,GAAsBtC,GAAwBsC,oBAC9CC,GAAuBvC,GAAwBuC,qBCRtDjoB,GAAcvhK,EAAQ,OACpBmpF,UAASA,IAAKnpF,EAAQ,OACtBspF,WAAUA,IAAKtpF,EAAQ,KAEzByL,IAASkC,EAAAA,EAAAA,wDAQT87K,GAAoB,CACtB,CAAEx0J,MAAO,KACLC,OAAQ,KACRw0J,OAAQ,EACRhlJ,OAAQ,QACZ,CAAEzP,MAAO,KACLC,OAAQ,IACRw0J,OAAQ,EACRhlJ,OAAQ,QACZ,CAAEzP,MAAO,IACLC,OAAQ,IACRw0J,OAAQ,EACRhlJ,OAAQ,YACZ,CAAEzP,MAAO,IACLC,OAAQ,IACRw0J,OAAQ,EACRhlJ,OAAQ,YACZ,CAAEzP,MAAO,IACLC,OAAQ,IACRw0J,OAAQ,EACRhlJ,OAAQ,OACZ,CAAEzP,MAAO,IACLC,OAAQ,IACRw0J,OAAQ,EACRhlJ,OAAQ,QAahB,IAAIilJ,GAAe,IA+DJ,MAAMC,GAOjBtpL,YAAY0tG,EAAYhL,EAAcv7F,GAAS,MAC3C/G,KAAKsiG,aAAeA,EAKpBtiG,KAAKy1G,YAAcnI,EAKnBttG,KAAKmpL,YAAc,CACfC,kBAAmB,IACnBC,YAAQviL,GAMZ9G,KAAKspL,8BAAgC,EAKrCtpL,KAAKosH,SAAWrlH,EAMhB/G,KAAKupL,aAAe,CAAC,EAMrBvpL,KAAKwpL,mBAAqB,EAM1BxpL,KAAKypL,mBAAqB,GAGtB,UAAAzpL,KAAKosH,SAAS59G,cAAd,eAAsBy6K,cAAe,IACrCA,GAAejpL,KAAKosH,SAAS59G,OAAOy6K,cAKxC37E,EAAWvoE,GACP2kJ,IACA,KACI1pL,KAAK2pL,8BAA8B,GACnC3pL,KAAKsiG,aAAahgG,KACdikL,GACAvmL,KAAKmpL,aACTnpL,KAAK4pL,sBAAL,IAGRt8E,EAAWuC,KAAKxtG,YACZumF,GAAWihG,8BACX,CAAC95E,EAAe8kE,KACP9kE,EAAcpR,OAAsB,cAAbk2E,IACxB70K,KAAKwpL,kBAAoBjqL,OAAOqvB,YAAY1tB,MAC/C,IAOTosG,EAAWvoE,GACP2kJ,IACA,CAACx5E,EAAa2C,KAxLC,UAyLPA,EAAQ7hG,MACRhR,KAAK8pL,mBACD55E,EAAY8G,QAASnE,EAAQn9F,OACpC,IAGT43F,EAAWvoE,GACP2kJ,IACA,CAACx5E,EAAa2C,KACV7yG,KAAK8pL,mBAAmB55E,EAAY8G,QAASnE,EAA7C,IAGH7yG,KAAKosH,SAAS59G,OAAOu7K,mBAEtBz8E,EAAWY,WAAWlB,2BAA2BhtG,KAAKgqL,kBAAkBnnL,KAAK7C,OAIjFstG,EAAWvoE,GACP2kJ,IACApkK,IACQA,EAAMsiF,iBACFtiF,EAAMmqF,UACNzvG,KAAKypL,mBAAqB,EAE1BzpL,KAAKiqL,yBAEZ,IAET38E,EAAWvoE,GACP2kJ,IACApkK,IACQA,EAAMsiF,iBAAmBtiF,EAAMmqF,WAC/BzvG,KAAKiqL,wBACR,IAET38E,EAAW0C,IAAIjrE,GACX4hD,GAAUY,4CACVjiE,IACItlB,KAAKmpL,YAAY3kB,qBAAuBl/I,EAAMk/I,oBAA9C,IAGRl3D,EAAWvoE,GACP2kJ,IACAQ,IACIlqL,KAAKmpL,YAAYe,aAAeA,CAAhC,IAGR58E,EAAWvoE,GACP2kJ,IACAjvF,IACIz6F,KAAKmpL,YAAYgB,YACXj6K,QAAQuqF,GAAc,CAAC,GAAG,gBADhC,GAIX,CAMDwvF,yBACQjqL,KAAKypL,kBAAoB,IACzBzpL,KAAKypL,kBAAoBlqL,OAAOqvB,YAAY1tB,MAEnD,CASDkpL,4BAA4Bv2E,EAAWpE,EAAS46E,GAI5C,MAAMzlF,EAAai8D,GAAYwpB,GAE/B,IACIvlF,EADAwlF,EAAU,IA2Bd,GAtBItqL,KAAKmpL,YAAYrkF,aACjBA,EAAa9kG,KAAKmpL,YAAYrkF,WAAWH,OAgBrC8K,IACA3K,GAAc,KAIlB2K,IAAY7K,GAAciP,IAAcprB,GAAUnC,SAC/CtmF,KAAKwpL,kBAAoB,GACzBxpL,KAAKypL,kBAAoB,OAGT3iL,IAAfg+F,GACA/5F,GAAOpH,MAAM,6DAEb2mL,EAAU,KAEVA,EADOxlF,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAEH,MAAMylF,EAAYvqL,KAAKy1G,YAAY+0E,0BAEnC,GAAID,EAAW,SACX,MAAM9b,EAAgB8b,EAAU9b,gBAC1Bgc,EAAuBF,EAAU3M,yBAGvC6M,EAAqBrvH,MAAQmvH,EAAUtxC,0BAGvC,MAAMyxC,EAAmBnrL,OAAOqvB,YAAY1tB,MACtC+C,KAAKD,IAAIhE,KAAKypL,kBAAmBzpL,KAAKwpL,mBACtCnnF,EAAa,oBAAGriG,KAAKosH,SAAS59G,cAAjB,aAAG,EAAsBw9F,uBAAzB,QAA4C,IAG/D,IAAIhoE,EA3RpB,SAAmB0qI,EAAW9pE,EAAY8lF,EAAkBD,GACxD,IAAIzmJ,EAAS,EACTxP,EAASvwB,KAAKF,IAAI6gG,EAAWpwE,OAAQowE,EAAWrwE,OAGhDo2J,EAAkB5B,GAAkBt0K,MAAKqG,GAAKA,EAAE0Z,QAAUA,IAE9D,GAAIm2J,GAAmBjc,GAAa+b,EAAqBrvH,QAAU+tE,GAAAA,IAG/D,IAAK30G,EAASm2J,EAAgBn2J,OAAQA,GAAU,IAAKA,GAAU,EAAG,CAC9D,MAAMo2J,EAAep2J,EAGrB,GADAm2J,EAAkB5B,GAAkBt0K,MAAKqG,GAAKA,EAAE0Z,SAAWo2J,KACvDD,EAGA,MAFA3mJ,GAAUymJ,EAAqBE,EAAgB3mJ,OAItD,MACM2mJ,IAGP3mJ,EAASymJ,EAAqBE,EAAgB3mJ,SAKlD,OAAO//B,KAAKF,IAAIigC,EAAS,IAS7B,SAAgB0mJ,GACZ,OAAIA,EAAmB,IACZx6K,OAAOg6C,iBAMX++H,GAAehlL,KAAK+zB,IAAI,KAAM0yJ,EAAmB,IAC3D,CAlBkCG,CAAO5mL,KAAKD,IAAI,EAAG0mL,EAAmB,MACxE,CA8P4BI,CAAUrc,EAAe7pE,EAAY8lF,EAAkBD,GAEpEzmJ,EAAS//B,KAAKF,IAAIigC,EA3SP,MA8SP0mJ,EAAmBroF,IACnBioF,EAAU,IAAMtqL,KAAKmpL,YAAYt9J,QAAQ84E,OAAS3gE,EAEzD,CAGG8gE,GAAcA,GAAc,KAC5BwlF,EAAUrmL,KAAKF,IAAIumL,EAAS,IAEnC,CAGD,GAAItqL,KAAKspL,6BAA+B,EAAG,CACvC,MAAMyB,EAAuB,EACvBC,EAAwBhrL,KAAKmpL,YAAYC,kBACzC6B,GAAe1rL,OAAOqvB,YAAY1tB,MAAQlB,KAAKspL,8BAAgC,IAErFgB,EAAUrmL,KAAKF,IAAIumL,EAASU,EAAyBC,EAAcF,EACtE,CAED,OAAO9mL,KAAKF,IAAI,IAAKumL,EACxB,CAMDX,8BAA8B9hL,GAC1B7H,KAAKmpL,YAAYC,kBAAoBvhL,EACrC7H,KAAKspL,6BAA+B/pL,OAAOqvB,YAAY1tB,KAC1D,CAMD0oL,uBAEI,MAAM3pK,EAAO,CACT4L,QAAS7rB,KAAKmpL,YAAYt9J,QAC1Bi5E,WAAY9kG,KAAKmpL,YAAYrkF,WAC7BskF,kBAAmBppL,KAAKmpL,YAAYC,kBACpCC,OAAQrpL,KAAKmpL,YAAYE,OACzBa,aAAclqL,KAAKmpL,YAAYe,aAC/B1lB,qBAAsBxkK,KAAKmpL,YAAY3kB,qBACvCp8D,eAAgBpoG,KAAKmpL,YAAY9gF,qBAGrC,IACIroG,KAAKy1G,YAAYy3C,yBAAyBjtI,EAC7C,CAAC,MAAO4D,GAGR,CACJ,CAQDmmK,kBAAkBzrF,EAAKt+E,GAEnB,IAAKs+E,EAAII,MAAO,CACZ,MAAM0qF,EACAppK,EAAKzV,WACAyV,EAAKzV,UAAUlG,QAAU2b,EAAKzV,UAAU,GAAGs/F,IAEtD9pG,KAAKmpL,YAAYE,OAASA,QAAkBviL,CAC/C,CAID,GAAIy3F,IAAQv+F,KAAKy1G,YAAY+0E,0BACzB,OAGJ,IAAI5iL,EACJ,MAAMsjL,GACClrL,KAAKy1G,YAAY01E,0BAClB5R,EACAv5K,KAAKy1G,YAAYumC,qBACjBnoC,EACA0lE,EAAkBA,EAAgB1lE,eAAY/sG,EAC9C2oG,GAAU8pE,GAAkBA,EAAgB9pE,UAC5C7K,EAAa20E,EACbt1K,KAAKF,IAAIw1K,EAAgB30E,WAAY20E,EAAgB/U,sBAAwB,KAOnF,IAAK58J,KALA6nG,GACDzvG,KAAKiqL,yBAIGhqK,EACJA,EAAKzY,eAAeI,KACpB5H,KAAKmpL,YAAYvhL,GAAOqY,EAAKrY,IAKjCsjL,GACAlrL,KAAK2pL,8BACD3pL,KAAKoqL,4BACDv2E,EACApE,EACA7K,IAGZ5kG,KAAKsiG,aAAahgG,KACdikL,GACAvmL,KAAKmpL,aACTnpL,KAAK4pL,sBACR,CAODE,mBAAmB19K,EAAI6T,GAEnBjgB,KAAKupL,aAAan9K,GAAM,CACpByf,QAAS5L,EAAK4L,QACdi5E,WAAY7kF,EAAK6kF,WACjBskF,kBAAmBnpK,EAAKmpK,kBACxBC,OAAQppK,EAAKopK,OACba,aAAcjqK,EAAKiqK,aACnB1lB,qBAAsBvkJ,EAAKukJ,qBAC3Bp8D,eAAgBnoF,EAAKmoF,gBAGzBpoG,KAAKsiG,aAAahgG,KACdikL,GACAn6K,EACApM,KAAKupL,aAAan9K,GACzB,CAMDiW,WACI,OAAOriB,KAAKmpL,WACf,EC5eL,MAAMp+K,IAASkC,EAAAA,EAAAA,wDAaA,MAAMm+K,GAKjBxrL,YAAY0tG,GACRttG,KAAKy1G,YAAcnI,CACtB,CAQD+9E,kBACI,IAAKrrL,KAAKy1G,YAAY5F,KAClB,OAGJ,MAAM,mBAAEgrC,EAAF,iBAAsBjE,GAAqB52I,KAAKy1G,YAAY1uG,QAAQyH,OACpE88K,OAAiD,IAArB10C,IAAqCA,EACjEna,EAA6Bz8H,KAAKy1G,YAAY5F,KAAK4sB,6BACnD8uD,EAAyB9uD,IAA+Bma,EAO9D,GALA7rI,GAAOsM,KACA,mCAAuBwjI,wBACFjE,qCACana,KAErC6uD,IAAwB10C,IAAqBna,GAA+Boe,EAAoB,CAChG9vI,GAAOsM,KAAK,6CACZ,MAAM9T,EAASs3I,EACThyD,EACAA,EAIN,YAFA7oF,KAAKy1G,YAAYnT,aAAahgG,KAAK8nF,EAAyC7mF,EAG/E,CAED,MAAMioL,EAAgBxrL,KAAKy1G,YAAYjG,iBACjCi8E,EAAkBD,GAAiBA,EAAcvpC,wBAElDupC,EAE0B,cAApBC,EACP1gL,GAAOsM,KAAK,qDAEZtM,GAAOsM,KACA,mEAAao0K,+BACcF,KAC9BA,EACAvrL,KAAKy1G,YAAYjG,iBAAiB0jC,WAC9B,KACInoI,GAAOsM,KAAK,2CAAZ,IAEJ1T,IACIoH,GAAOpH,MAAO,oDAAmDA,EAAMJ,kBAC1DI,EAAMuF,OAGnBlJ,KAAKy1G,YAAYnT,aAAahgG,KAC1B8nF,EACAvB,EAFJ,GAGD,CACCtlF,OAAQ,qBACR64I,kBAAmB,aACnBE,gBAAgB,EAChBJ,sBAAsB,IAG9Bl8I,KAAKy1G,YAAYjG,iBAAiByoC,6BA3BtCltI,GAAOuY,KAAK,6CA8BnB,CAKD7Z,QAUIzJ,KAAKy1G,YAAYpK,KAAKyf,KAAK,MAAOnwG,MAC9B,KACS3a,KAAK0rL,YACN1rL,KAAK2rL,kBAAoBpsL,OAAOqK,YAAW,KACvC5J,KAAK2rL,uBAAoB7kL,EACzB9G,KAAKqrL,iBAAL,GACD,KACN,IAEL1nL,IACIoH,GAAOpH,MAAM,8CAA+CA,EAA5D,GAEX,CAKD4xD,SACIv1D,KAAK0rL,WAAY,EACjBnsL,OAAOoK,aAAa3J,KAAK2rL,kBAC5B,EChIE,IAAKC,aAAAA,GAAAA,EAAAA,sBAAAA,wBAAAA,EAAAA,yBAAAA,4BAAAA,EAAAA,eAAAA,0BAAAA,EAAAA,iBAAAA,6BAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,oBAAAA,gCAAAA,EAAAA,qBAAAA,kCAAAA,KAAAA,GAAAA,CAAAA,IAgEL,MAAMC,GAAwBD,GAAgBC,sBACxCxhG,GAA2BuhG,GAAgBvhG,yBAC3C+B,GAAiBw/F,GAAgBx/F,eACjC0/F,GAAmBF,GAAgBE,iBACnCC,GAAuBH,GAAgBG,qBACvCC,GAAsBJ,GAAgBI,oBACtCC,GAAuBL,GAAgBK,qBCnDrC,MAAMC,WAA+B3nJ,MAOhD3kC,YAAY0tG,GACRn1B,QAEAn4E,KAAKy1G,YAAcnI,EACnBttG,KAAKmsL,gBAAkB,KACvBnsL,KAAKosL,eAAiB,KAEtB9+E,EAAWvoE,GAAGqlD,GAAmCpqF,KAAKqsL,YAAYxpL,KAAK7C,MAC1E,CAKDssL,uBACI3iL,aAAa3J,KAAKmsL,iBAClBnsL,KAAKmsL,gBAAkB,IAC1B,CASDI,6BAA6BhsF,GAGzB,MAAMlrB,EAAwB,IAAfkrB,EAIa,OAAxBvgG,KAAKosL,gBAA2BpsL,KAAKosL,iBAAmB/2G,IACxDr1E,KAAKosL,eAAiB/2G,EACtBr1E,KAAKsC,KAAKspL,GAA0C5rL,KAAKosL,gBAEhE,CAQDI,6BAA6BjsF,GACrBvgG,KAAKysL,cAIU,IAAflsF,GAAqBvgG,KAAKmsL,gBAMJ,IAAf5rF,GAAoBvgG,KAAKmsL,iBAChCnsL,KAAKssL,uBANLtsL,KAAKmsL,gBAAkBviL,YAAW,KAC9B5J,KAAKysL,aAAc,EAEnBzsL,KAAKsC,KAAKspL,GAAV,GApEU,KAyErB,CAWDc,YAAYnuF,EAAK/qF,EAAM+sF,EAAYrB,GAE/B,IAAKA,IAAYl/F,KAAK2sL,YAClB,OAIJ,MAAM5R,EAAax8E,EAAIw8E,WAAW52J,IAAInkB,KAAK2sL,YAAYxoB,OAIlD4W,GAAeA,EAAWrnK,MAAMga,SAASla,KAM9CxT,KAAKusL,6BAA6BhsF,GAClCvgG,KAAKwsL,6BAA6BjsF,GACrC,CAQD8rF,YAAY/mK,GACJA,EAAMw+I,sBAEN9jK,KAAK2sL,YAAcrnK,EACnBtlB,KAAKysL,aAAc,EACnBzsL,KAAKssL,uBAGLhnK,EAAMyf,GACF6pD,IACA2R,IACIvgG,KAAKwsL,6BAA6BjsF,EAAlC,IAGRj7E,EAAMyf,GACF6pD,IACA2R,IACIvgG,KAAKwsL,6BAA6BjsF,GAClCvgG,KAAKusL,6BAA6BhsF,EAAlC,IAIf,EC9HU,MAAMqsF,GAMjBhtL,YAAY0tG,GACRttG,KAAKstG,WAAaA,EAElBA,EAAWpoF,iBACPklE,GACApqF,KAAK0sL,YAAY7pL,KAAK7C,OAE1BA,KAAK6sL,SAAW7sL,KAAKstG,WAAWyF,UACnC,CAQD25E,YAAYtgL,EAAIm0F,IAKPvgG,KAAKstG,WAAW2lE,eACd1yE,GAtCiB,IAuChBn0F,IAAOpM,KAAK6sL,UACL7sL,KAAKstG,WAAW86E,qBAAqB34E,WAIpDzvG,KAAKstG,WAAW0C,IAAI1N,aAAahgG,KAC7BqkF,GAAAA,QAAAA,yBACAv6E,EACP,EClDE,SAAS0gL,GAAmB/lL,GAC/B,MAAMgmL,EAAmBxtL,OAAO2gG,cAAgB3gG,OAAO4gG,mBAEvD,GAAK4sF,EAIL,OAAO,IAAIA,EAAiBhmL,EAC/B,CCGc,MAAMimL,WAAwBzoJ,MASzC3kC,YAAYqtL,EAAoBC,EAAcrxC,GAC1C1jE,QAKAn4E,KAAKmtL,oBAAsBF,EAK3BjtL,KAAKotL,cAAgBF,EAKrBltL,KAAKqtL,YAAcxxC,EAKnB77I,KAAKstL,eAAiB,IAAIp3J,aAAa,IAKvCl2B,KAAKutL,cAAgBT,GAAmB,CAAEU,WAAYN,EAAaO,4BAMnEztL,KAAK0tL,eAAiBR,EAAaS,kBAMnC3tL,KAAK4tL,gBAAkB5tL,KAAK4tL,gBAAgB/qL,KAAK7C,MAEjDA,KAAK6tL,yBACR,CAcY,cAAC7sB,EAAaisB,EAAoBC,GAC3C,OAAOlP,GAAI3d,+BAA+B,CACtCh6I,QAAS,CAAE,SACX26I,gBACDrmJ,MAAK+9J,IAEJ,IAAKA,EAAW,GACZ,MAAM,IAAIn2K,MAAO,qDAAoDy+J,KAGzE,OAAO,IAAIgsB,GAAgBC,EAAoBC,EAAcxU,EAAW,GAAxE,GAKP,CAODmV,0BACI7tL,KAAK8tL,aAAe9tL,KAAKutL,cAAcpsF,wBAAwBnhG,KAAKqtL,YAAYr7K,QAQhFhS,KAAK+tL,qBAAuB/tL,KAAKutL,cAAcS,sBAAsBhuL,KAAKmtL,oBAAqB,EAAG,EACrG,CAaDS,gBAAgBK,GAEZ,MAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAiB,IAAKruL,KAAKstL,kBAAmBY,GAC9CI,EAAkBrtL,KAAKC,MAE7B,IAAI4D,EAAI,EAER,KAAOA,EAAI9E,KAAK0tL,eAAiBW,EAAe/pL,OAAQQ,GAAK9E,KAAK0tL,eAAgB,CAC9E,MAAMa,EAAYF,EAAenjL,MAAMpG,EAAGA,EAAI9E,KAAK0tL,gBAG7Cc,EAAWxuL,KAAKotL,cAAcqB,uBAAuBF,EAAUrjL,SAErElL,KAAKsC,KAAK0pL,GAAqB,CAC3B3iL,UAAWilL,EACXI,MAAOF,EACPG,QAASJ,EACThoK,SAAUvmB,KAAKqtL,YAAY5mB,eAElC,CAEDzmK,KAAKstL,eAAiBe,EAAenjL,MAAMpG,EAAGupL,EAAe/pL,OAChE,CAODsqL,qBACI5uL,KAAK+tL,qBAAqBc,eAAiB7uL,KAAK4tL,gBAChD5tL,KAAK8tL,aAAa/0K,QAAQ/Y,KAAK+tL,sBAC/B/tL,KAAK+tL,qBAAqBh1K,QAAQ/Y,KAAKutL,cAAcuB,YACxD,CAODC,wBAII/uL,KAAK+tL,qBAAqBc,eAAiB,OAC3C7uL,KAAK+tL,qBAAqB/0K,aAC1BhZ,KAAK8tL,aAAa90K,YACrB,CAODg2K,oBACIhvL,KAAK+uL,wBACL/uL,KAAKqtL,YAAY9mB,YACpB,CAODE,cACI,OAAOzmK,KAAKqtL,YAAY5mB,aAC3B,CAQD9C,gBACI,OAAO3jK,KAAKqtL,YAAY4B,gBAC3B,CAODxlL,QACIzJ,KAAK4uL,oBACR,CAODzkL,OACInK,KAAK+uL,wBACL/uL,KAAKstL,eAAiB,EACzB,CAODpG,UACQlnL,KAAKkvL,aAITlvL,KAAKgvL,oBACLhvL,KAAKkvL,YAAa,EACrB,ECnOL,MAAMnkL,IAASkC,EAAAA,EAAAA,oDAYA,MAAMkiL,WAAyB5qJ,GAAAA,aAW1C3kC,YAAY0tG,EAAY8hF,GACpBj3G,QAKAn4E,KAAKqvL,oBAAsBD,EAM3BpvL,KAAKsvL,YAAc,KAKnBtvL,KAAKuvL,sBAAuB,EAK5BvvL,KAAKwvL,mBAAqB,GAS1BxvL,KAAKyvL,gBAAkBr1K,QAAQC,UAK/Bra,KAAK0vL,iBAAmB1vL,KAAK0vL,iBAAiB7sL,KAAK7C,MAEnDstG,EAAWvoE,GAAGqlD,GAAmCpqF,KAAKqsL,YAAYxpL,KAAK7C,OACvEstG,EAAWvoE,GAAGqlD,GAAqCpqF,KAAK2vL,cAAc9sL,KAAK7C,OAC3EstG,EAAWvoE,GAAGqlD,GAA0CpqF,KAAKo7G,kBAAkBv4G,KAAK7C,MACvF,CAOD4vL,uBAAuBC,GACnB7vL,KAAKwvL,mBAAmB5tL,KAAKiuL,GAC7BA,EAAW9qJ,GAAG8mJ,IAAuB,MAGV7rL,KAAKwvL,mBAAmBz+K,QAAO++K,IAAoC,IAAxBA,EAASniC,aAKvDrpJ,QAAUtE,KAAKuvL,qBAC/BvvL,KAAK+vL,kBACG/vL,KAAKuvL,sBACbvvL,KAAKgwL,kBACR,GAER,CAMDA,mBACQhwL,KAAKsvL,cACLtvL,KAAKsvL,YAAYvqJ,GAAGinJ,GAAqBhsL,KAAK0vL,kBAC9C1vL,KAAKsvL,YAAY7lL,QACjBzJ,KAAKuvL,sBAAuB,EAEnC,CAMDQ,kBACQ/vL,KAAKsvL,cACLtvL,KAAKsvL,YAAY3qJ,eAAeqnJ,GAAqBhsL,KAAK0vL,kBAC1D1vL,KAAKsvL,YAAYnlL,QAErBnK,KAAKuvL,sBAAuB,CAC/B,CAYDG,iBAAiBlB,GACb,IAAK,MAAMsB,KAAY9vL,KAAKwvL,mBACxBM,EAASG,gBAAgBzB,EAEhC,CAOD0B,0BAA0BzgF,GACtB,IAAK,MAAMqgF,KAAY9vL,KAAKwvL,mBACxBM,EAASK,gBAAgB1gF,EAEhC,CASD48E,YAAY/mK,GACJA,EAAMw+I,sBAGN9jK,KAAKyvL,gBAAkBzvL,KAAKyvL,gBAAgB90K,MAAK,IAAM3a,KAAKqvL,wBACvD10K,MAAKuyK,GACFF,GAAgBz6J,OAAOjN,EAAMmhJ,cAnJjB,KAmJyDymB,KAExEvyK,MAAKy1K,IACFrlL,GAAOkT,MAAM,kCAAmCqH,EAAMq+I,iBAEtD3jK,KAAKsvL,YAAcc,EAInBpwL,KAAKkwL,0BAA0B5qK,EAAMmqF,UAArC,IAEH7rF,OAAMjgB,IACHoH,GAAOuY,KAAK,mCAAoC3f,EAAhD,IAGf,CASDy3G,kBAAkB91F,GACVA,EAAMw+I,sBAEN9jK,KAAKyvL,gBAAkBzvL,KAAKyvL,gBAAgB90K,MAAK,KAE7C3a,KAAKkwL,0BAA0B5qK,EAAMmqF,UAArC,IAGX,CAUDkgF,cAAcrqK,GACNA,EAAMw+I,sBAEN9jK,KAAKyvL,gBAAkBzvL,KAAKyvL,gBAAgB90K,MAAK,KAC7C5P,GAAOkT,MAAM,uCAAwCqH,EAAMq+I,iBAGvD3jK,KAAKsvL,cACLtvL,KAAK+vL,kBACL/vL,KAAKsvL,YAAYpI,UACjBlnL,KAAKsvL,YAAc,MAIvB,IAAK,MAAMQ,KAAY9vL,KAAKwvL,mBACxBM,EAASz+I,OACZ,IAGZ,ECvLU,MAAMg/I,WAA0B9rJ,GAAAA,aAM3C3kC,cACIu4E,QAMAn4E,KAAKswL,aAAc,EAKnBtwL,KAAKuwL,YAAc,GAKnBvwL,KAAKwwL,eAAiB,GAKtBxwL,KAAKywL,SAAU,EAEfzwL,KAAK0wL,qBAAuB1wL,KAAK0wL,qBAAqB7tL,KAAK7C,KAC9D,CAQD0wL,uBACI,MAAMC,EAAW/vF,GAAiB5gG,KAAKuwL,aACjCK,EAAgBhwF,GAAiB5gG,KAAKwwL,gBAExCG,EAxEoB,IAwEkBC,EAlEd,MAmExB5wL,KAAKsC,KAAKwpL,IAEV9rL,KAAK6wL,iBAAgB,IAIzB7wL,KAAKqxC,OACR,CAQDy/I,cAActC,EAAUuC,GACpB/wL,KAAKuwL,YAAY3uL,KAAK4sL,GACtBxuL,KAAKwwL,eAAe5uL,KAAKmvL,EAC5B,CAQDF,gBAAgBtmF,GACZvqG,KAAKywL,QAAUlmF,EACfvqG,KAAKsC,KAAKupL,GAAuB7rL,KAAKywL,QACzC,CAODN,gBAAgB1gF,GAEZzvG,KAAK6wL,iBAAiBphF,GACtBzvG,KAAKqxC,OACR,CAODs8G,WACI,OAAO3tJ,KAAKywL,OACf,CAODp/I,QACIrxC,KAAKswL,aAAc,EACnBtwL,KAAKuwL,YAAc,GACnBvwL,KAAKwwL,eAAiB,GACtB7mL,aAAa3J,KAAKgxL,gBACrB,CAYDf,gBAAgBzB,GACZ,GAAKxuL,KAAKywL,QAKV,GAAIzwL,KAAKswL,YAAT,CAEI,MAAMW,EAAiBnwF,GAAqB0tF,EAASG,SAErD3uL,KAAK8wL,cAActC,EAASE,MAAO9tF,GAAiBqwF,GAGvD,MAID,GAAIzC,EAASE,MAvJK,GAuJsB,CACpC,MACMqC,EAAcnwF,GADGE,GAAqB0tF,EAASG,UAGjDoC,EArJkB,MAsJlB/wL,KAAKswL,aAAc,EACnBtwL,KAAK8wL,cAActC,EAASE,MAAOqC,GAGnC/wL,KAAKgxL,gBAAkBpnL,WAAW5J,KAAK0wL,qBApJpB,MAsJ1B,CACJ,ECvJU,MAAMQ,WAA8B3sJ,GAAAA,aAK/C3kC,cACIu4E,QAMAn4E,KAAKswL,aAAc,EAKnBtwL,KAAKuwL,YAAc,GAKnBvwL,KAAKywL,SAAU,EAEfzwL,KAAKmxL,mBAAqBnxL,KAAKmxL,mBAAmBtuL,KAAK7C,KAC1D,CAODmxL,qBACkBvwF,GAAiB5gG,KAAKuwL,aAxDlB,KA2DdvwL,KAAKsC,KAAK2pL,IAIVjsL,KAAK6wL,iBAAgB,IAIzB7wL,KAAKqxC,OACR,CAQDw/I,gBAAgBtmF,GACZvqG,KAAKywL,QAAUlmF,EACfvqG,KAAKsC,KAAKupL,GAAuB7rL,KAAKywL,QACzC,CAODN,gBAAgB1gF,GAEZzvG,KAAK6wL,gBAAgBphF,GACrBzvG,KAAKqxC,OACR,CAODs8G,WACI,OAAO3tJ,KAAKywL,OACf,CAWDR,gBAAgBzB,GACPxuL,KAAKywL,UAKNzwL,KAAKswL,YACLtwL,KAAKuwL,YAAY3uL,KAAK4sL,EAASE,OAO/BF,EAASE,MArHG,KAsHZ1uL,KAAKswL,aAAc,EACnBtwL,KAAKuwL,YAAY3uL,KAAK4sL,EAASE,OAG/B1uL,KAAKgxL,gBAAkBpnL,WAAW5J,KAAKmxL,mBA/GhB,MAiH9B,CAOD9/I,QACIrxC,KAAKswL,aAAc,EACnBtwL,KAAKuwL,YAAc,GACnB5mL,aAAa3J,KAAKgxL,gBACrB,ECzJE,IAAKI,aAAAA,GAAAA,EAAAA,gBAAAA,2BAAAA,KAAAA,GAAAA,CAAAA,IAQL,MAAMC,GAAkBD,GAAcC,gBCHvCtmL,IAASkC,EAAAA,EAAAA,yCAMTqkL,GAAmB,mBAMnBC,GAAoB,oBAqB1B,MAAMC,GAOF5xL,YAAYswG,EAAauhF,GAErBzxL,KAAKkwG,YAAcA,EAGnBlwG,KAAKyxL,QAAUA,EAGfzxL,KAAKoM,GAAK8jG,EAAY8G,QAGtBh3G,KAAK0xL,SAAW,CAAC,EAIjB1xL,KAAK2xL,cAAgB,EAErB3xL,KAAK4xL,YAAc5xL,KAAK4xL,YAAY/uL,KAAK7C,MACzCA,KAAK6xL,eAAiB7xL,KAAK6xL,eAAehvL,KAAK7C,MAC/CA,KAAK8xL,mBAAqB9xL,KAAK8xL,mBAAmBjvL,KAAK7C,MACvDA,KAAK+xL,aAAe/xL,KAAK+xL,aAAalvL,KAAK7C,MAC3CA,KAAKmK,KAAOnK,KAAKmK,KAAKtH,KAAK7C,MAC3BA,KAAKgyL,SAAWhyL,KAAKgyL,SAASnvL,KAAK7C,MACnCA,KAAK0zE,QAAU1zE,KAAK+xL,cACvB,CAKDA,eACI,OAAOxyL,OAAOqK,WAAW5J,KAAK4xL,YAAa5xL,KAAKgyL,WACnD,CAKD7nL,OACQnK,KAAK0zE,SACLn0E,OAAOoK,aAAa3J,KAAK0zE,SAE7B1zE,KAAKyxL,QAAQQ,kBAAkBjyL,KAAKoM,GACvC,CAKD4lL,WACI,MAAME,EAAiBlyL,KAAKyxL,QAAQnkF,WAAWqH,kBAAkBrwG,OAG3D6tL,EAFgBD,GAAkBA,EAAiB,GAAK,EACxBlyL,KAAKyxL,QAAQW,YACdpyL,KAAKyxL,QAAQY,qBAMlD,OAHU,IAAMpuL,KAAKE,UACYF,KAAKD,IAAYmuL,EAAenyL,KAAKyxL,QAAQW,YAApC,IAAkD,IAG/F,CAMDR,cACI,MAAMU,EAAYtyL,KAAK2xL,gBACjBY,EAAiB,CACnBvhL,KAAMsgL,GACNllL,GAAIkmL,GAGRtyL,KAAKyxL,QAAQruE,YAAYmvE,EAAgBvyL,KAAKoM,IAC9CpM,KAAK0xL,SAASY,GAAa,CACvBlmL,GAAIkmL,EACJE,SAAUjzL,OAAOqvB,YAAY1tB,MAEpC,CAMD2wL,eAAe/kK,GACX,MAAM80H,EAAU5hJ,KAAK0xL,SAAS5kK,EAAS1gB,IAEnCw1I,IACAA,EAAQ93C,IAAMvqG,OAAOqvB,YAAY1tB,MAAQ0gJ,EAAQ4wC,UAErDxyL,KAAK8xL,oBACR,CAODA,qBAEI,IACIlwC,EAAS0wC,EADTxoF,EAAMlnE,IAEN6vJ,EAA2B,EAC3BC,EAAmB,EAEvB,IAAKJ,KAAatyL,KAAK0xL,SACf1xL,KAAK0xL,SAASlqL,eAAe8qL,KAC7B1wC,EAAU5hJ,KAAK0xL,SAASY,GAExBI,IACI9wC,EAAQ93C,MACR2oF,IACA3oF,EAAM7lG,KAAKF,IAAI+lG,EAAK83C,EAAQ93C,OAKxC,OAAI2oF,GAA4BzyL,KAAKyxL,QAAQW,aACzCrnL,GAAOsM,KAAM,gBAAeyyF,WAAa9pG,KAAKoM,UAAUpM,KAAKkwG,YAAY+G,YAAY,cACrFj3G,KAAKmK,YAELnK,KAAKyxL,QAAQnkF,WAAWhL,aAAahgG,KACjCqwL,GAAoC3yL,KAAKkwG,YAAapG,IAGnD4oF,EAAmB,EAAI1yL,KAAKyxL,QAAQW,aAC3CrnL,GAAOsM,KAAM,wBAAuBrX,KAAKoM,sBAAsBsmL,eACtDD,qBACTzyL,KAAKmK,aAKTnK,KAAK0zE,QAAU1zE,KAAK+xL,eACvB,EAkBU,MAAMa,GAMjBhzL,YAAY0tG,EAAYvmG,EAASq8G,GAC7BpjH,KAAKstG,WAAaA,EAClBttG,KAAKsiG,aAAegL,EAAWhL,aAC/BtiG,KAAKojH,YAAcA,EAGnBpjH,KAAKmxH,aAAe,CAAC,EAErBnxH,KAAKoyL,YA1LgB,EA2LrBpyL,KAAK6yL,kBAhLuB,IAiL5B7yL,KAAKqyL,qBAtL2B,IAwL5BtrL,GAAWA,EAAQ0qL,UACwB,iBAAhC1qL,EAAQ0qL,QAAQW,cACvBpyL,KAAKoyL,YAAcrrL,EAAQ0qL,QAAQW,aAEU,iBAAtCrrL,EAAQ0qL,QAAQoB,oBACvB7yL,KAAK6yL,kBAAoB9rL,EAAQ0qL,QAAQoB,mBAEO,iBAAzC9rL,EAAQ0qL,QAAQY,uBACvBryL,KAAKqyL,qBAAuBtrL,EAAQ0qL,QAAQY,uBAGpDtnL,GAAOsM,KACF,0CAAyCrX,KAAKoyL,kCAAkCpyL,KAAK6yL,2CAC5D7yL,KAAKqyL,yBAEnCryL,KAAK8yL,kBAAoB9yL,KAAK8yL,kBAAkBjwL,KAAK7C,MAErDA,KAAK+yL,gBAAkB/yL,KAAK+yL,gBAAgBlwL,KAAK7C,MACjDstG,EAAWvoE,GAAGqlD,GAAiCpqF,KAAK+yL,iBAEpD/yL,KAAKgzL,gBAAkBhzL,KAAKgzL,gBAAgBnwL,KAAK7C,MACjDstG,EAAWvoE,GAAGqlD,GAAiDpqF,KAAKgzL,iBAEpEhzL,KAAKizL,iBAAmBjzL,KAAKizL,iBAAiBpwL,KAAK7C,MACnDstG,EAAWvoE,GAAGqlD,EAAyCpqF,KAAKizL,iBAC/D,CAMDA,mBACIjzL,KAAKstG,WAAWqH,kBAAkBvxG,SAAQyK,GAAK7N,KAAK8yL,kBAAkBjlL,EAAEmpG,QAASnpG,KACjF7N,KAAKstG,WAAWvoE,GAAGqlD,GAAmCpqF,KAAK8yL,kBAC9D,CAQDE,gBAAgB9iF,EAAa2C,GAGrBA,EAAQ7hG,OAASsgL,GACjBtxL,KAAKkzL,cAAchjF,EAAY8G,QAASnE,GACjCA,EAAQ7hG,OAASugL,IACxBvxL,KAAK6xL,eAAe3hF,EAAY8G,QAASnE,EAEhD,CASDigF,kBAAkB1mL,EAAI8jG,GACdlwG,KAAKmxH,aAAa/kH,KAClBrB,GAAOsM,KAAM,0CAAyCjL,gBACtDpM,KAAKmxH,aAAa/kH,GAAIjC,QAGtBnK,KAAKstG,WAAWqH,kBAAkBrwG,OAAStE,KAAK6yL,mBAOhD7yL,KAAKstG,WAAWyF,WAAa3mG,IAC7BrB,GAAOsM,KAAM,oCAAmCjL,KAChDpM,KAAKmxH,aAAa/kH,GAAM,IAAIolL,GAAmBthF,EAAalwG,MAEnE,CAKDiyL,kBAAkB7lL,GACVpM,KAAKmxH,aAAa/kH,WACXpM,KAAKmxH,aAAa/kH,EAEhC,CAOD2mL,gBAAgB3mL,GACRpM,KAAKmxH,aAAa/kH,KAClBpM,KAAKmxH,aAAa/kH,GAAIjC,cACfnK,KAAKmxH,aAAa/kH,GAEhC,CASD8mL,cAAc3rF,EAAeq6C,GAEzB,GAAIA,GAAWA,EAAQx1I,GAAI,CACvB,MAAM0gB,EAAW,CACb9b,KAAMugL,GACNnlL,GAAIw1I,EAAQx1I,IAGhBpM,KAAKojH,YAAYt2F,EAAUy6E,EAC9B,MACGx8F,GAAOsM,KAAM,6CAA4CkwF,KAEhE,CAQDsqF,eAAetqF,EAAez6E,GAC1B,MAAMqmK,EAAqBnzL,KAAKmxH,aAAa5pB,GAEzC4rF,GACAA,EAAmBtB,eAAe/kK,EAEzC,CAKD3iB,OACIY,GAAOsM,KAAK,oBAEZrX,KAAKstG,WAAW1lE,IAAIwiD,GAAmCpqF,KAAK8yL,mBAC5D9yL,KAAKstG,WAAW1lE,IAAIwiD,GAAiCpqF,KAAK+yL,iBAC1D/yL,KAAKstG,WAAW1lE,IAAIwiD,GAAiDpqF,KAAKgzL,iBAE1E,IAAK,MAAM5mL,KAAMpM,KAAKmxH,aACdnxH,KAAKmxH,aAAa3pH,eAAe4E,IACjCpM,KAAKmxH,aAAa/kH,GAAIjC,OAI9BnK,KAAKmxH,aAAe,CAAC,CACxB,ECvWL,MAAMpmH,IAASkC,EAAAA,EAAAA,oDAOA,MAAMmmL,GAKjBxzL,YAAY0tG,GACRttG,KAAKy1G,YAAcnI,EASnBttG,KAAKqzL,SAAU,EAEfrzL,KAAKy1G,YAAYvwF,iBACbklE,IAAmC,IAAMpqF,KAAKszL,mBAClDtzL,KAAKy1G,YAAYvwF,iBACbklE,IAAiC,IAAMpqF,KAAKszL,mBAChDtzL,KAAKy1G,YAAYvwF,iBACbklE,IAAkC,IAAMpqF,KAAKszL,kBACpD,CAMDA,iBACI,MAAMC,EAAYvzL,KAAKqzL,QACjBjf,GACCp0K,KAAKy1G,YAAYw9D,eACbjzK,KAAKy1G,YAAYo4C,uBAAyB,EAEjD0lC,IAAcnf,IACdp0K,KAAKqzL,QAAUjf,EACfrpK,GAAOkT,MAAO,iBAAgBs1K,QAAgBnf,KAC9Cp0K,KAAKy1G,YAAYnT,aAAahgG,KAC1B8nF,GAAqCmpG,EAAWnf,GAE3D,EC5CL,MAAMof,GAAiBj4K,OAAO,kBAExBxQ,IAASkC,EAAAA,EAAAA,kDAKR,MAAMwmL,GAKT7zL,YAAY0tG,GACRttG,KAAKmtB,QAAUs6E,GAAAA,yBACVznG,KAAKmtB,SAIVmgF,EAAW0C,IAAIjrE,GACX4hD,GAAAA,QAAAA,oBACA,CAACrhE,EAAOi5E,IAAQv+F,KAAK0zL,uBAAuBn1F,EAAKj5E,IACxD,CAODouK,uBAAuBn1F,EAAKj5E,GACxB,IAAKtlB,KAAKmtB,QACN,OAGJ,MAAM8W,EAAWs6D,EAAIqd,qBAAqBt2F,EAAMA,OAEhD,IAAK2e,EAGD,YAFAl5B,GAAOuY,KAAM,kCAAiCgC,6BAAiCi5E,KAKnF,GAAIt6D,EAASuvJ,IACT,OAEJvvJ,EAASuvJ,KAAkB,EAE3B,MAAMn5E,EAAkBp2E,EAAS40D,uBAE3B86F,EAAkB,IAAIC,gBAAgB,CACxC1gL,UAAW,SAKfmnG,EAAgBE,SAASs5E,YAAYF,GAAiBG,OAAOz5E,EAAgBp6E,SAChF,ECzDL,MAAMl1B,IAASkC,EAAAA,EAAAA,+DACT8mL,GAAa,KAQnB,MAAMC,GAOFp0L,YAAYmH,GACR,MAAM,MAAEumJ,EAAF,oBAAS2mC,GAAwBltL,EAGvC/G,KAAK6mL,OAASv5B,QAAAA,GAlBE,EAqBhBttJ,KAAKk0L,gBAAkBH,GAGvB/zL,KAAKm0L,qBAAuBF,QAAAA,GAvBN,EAyBtBj0L,KAAKwnL,0BAA4B,CAC7ByM,oBAAqBj0L,KAAKm0L,qBAC1BzvK,YAAa,CAAC,EACd0vK,mBAAoB,CAAE,UAAap0L,KAAKk0L,iBACxC5mC,MAAOttJ,KAAK6mL,OAEnB,CAKGniK,kBACA1kB,KAAKwnL,0BAA0ByM,oBAAsBj0L,KAAKm0L,qBAC1Dn0L,KAAKwnL,0BAA0Bl6B,MAAQttJ,KAAK6mL,OAC5C,MAAMwN,EAAwBr0L,KAAKwnL,0BAA0B9iK,YAE7D,GAAI2vK,GAAyB50L,OAAO6I,KAAK+rL,GAAuB/vL,OAE5D,IAAK,MAAQsD,EAAKC,KAAWpI,OAAO0gB,QAAQk0K,GACxCxsL,EAAM48H,UAAYzkI,KAAKk0L,qBAG3Bl0L,KAAKwnL,0BAA0B4M,mBAAqB,CAAE,UAAap0L,KAAKk0L,iBAG5E,OAAOl0L,KAAKwnL,yBACf,CASD8M,0BAA0BL,GACtB,MAAMrmK,EAAU5tB,KAAKm0L,uBAAyBF,EAO9C,OALIrmK,IACA5tB,KAAKm0L,qBAAuBF,EAC5BlpL,GAAOkT,MAAO,yCAAwCg2K,MAGnDrmK,CACV,CAQD2mK,YAAY1sL,GACR,MAAM+lB,EAAU5tB,KAAK6mL,SAAWh/K,EAOhC,OALI+lB,IACA5tB,KAAK6mL,OAASh/K,EACdkD,GAAOkT,MAAO,2CAA0CpW,OAGrD+lB,CACV,CASD4mK,wBAAwB54C,GACpB,MAAMhuH,EAAU5tB,KAAKk0L,kBAAoBt4C,EAOzC,OALIhuH,IACA5tB,KAAKk0L,gBAAkBt4C,EACvB7wI,GAAOkT,MAAO,oCAAmC29H,MAG9ChuH,CACV,CAQD6mK,+BAA+BC,GAC3B,MAAM9mK,GAAW8zF,KAAQ1hH,KAAKwnL,0BAA2BkN,GAE5C,MASb,OATI9mK,IACA5tB,KAAKwnL,0BAA4BkN,EAEjC,UAAIA,EAAiBN,0BAArB,OAAI,EAAqC3vD,WACrCzkI,KAAKw0L,wBAAwBE,EAAiBN,mBAAmB3vD,WAErE15H,GAAOkT,MAAO,qCAAoChX,KAAK8B,UAAU2rL,OAG9D9mK,CACV,EAQU,MAAM+mK,GAQjB/0L,YAAY0tG,EAAY0C,GAAK,MACzBhwG,KAAKy1G,YAAcnI,EACnBttG,KAAK40L,KAAO5kF,EACZ,MAAM,OAAExhG,GAAW8+F,EAAWvmG,QAG9B/G,KAAK6mL,OAAL,UAAcr4K,aAAd,EAAcA,EAAQqmL,kBAAtB,SAAqCrmL,aAAA,EAAAA,EAAQysI,gBApJ7B,EAuJhBj7I,KAAKk0L,gBAAkBH,GAOvB/zL,KAAKm0I,2BAA6B,IAAI/lF,IAKtCpuD,KAAKm0L,sBAlKiB,EAqKtBn0L,KAAKwnL,0BAA4B,IAAIwM,GAAyB,CAC1D1mC,MAAOttJ,KAAK6mL,OACZoN,oBAAqBj0L,KAAKm0L,uBAG9Bn0L,KAAKy1G,YAAY1wE,GACbqlD,IACAv5E,GAAW7Q,KAAKi7G,uBAAuBpqG,IAC9C,CASDikL,qCAAqC/pC,EAAcnP,GAAgB,MAC/D,MAAMpnH,EAASonH,QAAAA,EAAkBm4C,GAC3BgB,GAAoB,UAAAhqC,EAAatmI,sBAAb,eAA6Bi4H,gBAAgB,KAAMh5C,GAAUgH,SAAU,GAC3FkpC,EAAsB,IAAIxlF,IAEhC,IAAK,MAAM9oC,KAASyvK,EAChBnhD,EAAoB9sG,IAAIxhB,EAAMy2H,gBAAiBvnH,GAGnD,OAAOo/G,CACV,CAUD34B,uBAAuB8vC,GACfA,EAAapsD,MACbosD,EAAa1P,2BAA2Br7I,KAAK80L,qCAAqC/pC,IAElF/qJ,KAAK40L,KAAKlN,4BAA4B1nL,KAAKwnL,0BAA0B9iK,YAE5E,CAODkwJ,WACI,OAAO50K,KAAK6mL,MACf,CAQDmO,uBAAuBf,GACfj0L,KAAKwnL,0BAA0B8M,0BAA0BL,IACzDj0L,KAAK40L,KAAKlN,4BAA4B1nL,KAAKwnL,0BAA0B9iK,YAE5E,CASDikK,SAAS9gL,GACD7H,KAAK6mL,SAAWh/K,IAChB7H,KAAK6mL,OAASh/K,EACV7H,KAAKwnL,0BAA0B+M,YAAY1sL,IAC3C7H,KAAK40L,KAAKlN,4BAA4B1nL,KAAKwnL,0BAA0B9iK,aAGhF,CAQDuwK,kCAAkCr5C,GAC9B57I,KAAKk0L,gBAAkBt4C,EAEvB,IAAK,MAAM/qI,KAAW7Q,KAAKy1G,YAAY9B,mBAC/B9iG,EAAQ8tF,MACR9tF,EAAQwqI,2BAA2Br7I,KAAK80L,qCAAqCjkL,EAAS+qI,IAC/E57I,KAAKwnL,0BAA0BgN,wBAAwB54C,IAC9D57I,KAAK40L,KAAKlN,4BAA4B1nL,KAAKwnL,0BAA0B9iK,YAGhF,CAODwwK,uBAAuBxwK,GACnB,GAAKA,EAAL,CAKA,GAF0BjlB,OAAO6I,KAAKoc,GAAagJ,SAAS,mBAAoB,qBAG5E,MAAM,IAAInrB,MACN,qGAKR,GAF2BvC,KAAKwnL,0BAA0BiN,+BAA+B/vK,GAEjE,SACpB1kB,KAAKm0L,qBAAL,UAA4BzvK,EAAYuvK,2BAAxC,QAA+Dj0L,KAAKm0L,qBACpEn0L,KAAK6mL,OAAL,UAAcniK,EAAY4oI,aAA1B,QAAmCttJ,KAAK6mL,OAGxC7mL,KAAK40L,KAAKlN,4BAA4BhjK,GAEtC,MAAMywK,EAAan1L,KAAKy1G,YAAY9B,mBAAmBl/F,MAAK5D,GAAWA,EAAQ8tF,QAE/E,IAAKw2F,IAAezwK,EAAYA,YAC5B,OAGJ,MAAM0wK,EAAoBnqL,MAAM6Q,KAAKrc,OAAO0gB,QAAQuE,EAAYA,cAC3DjT,KAAI2+E,IACDA,EAAW,GAAKA,EAAW,GAAGq0C,UAEvBr0C,KAGfpwF,KAAKm0I,2BAA6B,IAAI/lF,IAAIgnI,GAG1CD,EAAW95C,2BAA2Br7I,KAAKm0I,2BAC9C,CAlCA,CAmCJ,ECvTL,MAAMppI,IAASkC,EAAAA,EAAAA,4DAUA,MAAMooL,GAQjBz1L,YAAY0tG,EAAY0C,GACpBhwG,KAAKy1G,YAAcnI,EACnBttG,KAAKs1L,6BAnBgB,KAoBrBt1L,KAAK40L,KAAO5kF,EAOZhwG,KAAKu1L,yBAA2B,IAAInnI,IACpCpuD,KAAKy1G,YAAY1wE,GACbqlD,IACAv5E,GAAW7Q,KAAKi7G,uBAAuBpqG,KAC3C7Q,KAAKy1G,YAAY1wE,GACbqlD,IACA,IAAMpqF,KAAKw1L,yCACfx1L,KAAK40L,KAAK7vJ,GACN4hD,GAAAA,QAAAA,kCACA+tG,GAAoB10L,KAAKy1L,6BAA6Bf,IAC7D,CAQDc,uCACI,IAAK,MAAMlwK,KAAStlB,KAAK40L,KAAK94C,sBAAuB,CACjD,MAAMvlC,EAAajxF,EAAMy2H,gBAEzBxlC,GAAcv2G,KAAK01L,6BAA6Bn/E,EACnD,CACJ,CAUD0E,uBAAuB8vC,GACnBA,EAAa1oJ,YACTgxI,GAAAA,mCACA,CAACxiI,EAAS8kL,KACN9kL,IAAY7Q,KAAKy1G,YAAYmgF,yBACtBD,EAAkBvyL,SAAQgtF,GAAcpwF,KAAKy1L,6BAA6BrlG,IADjF,GAGX,CASDqlG,6BAA6Bf,GAAkB,MAC3C,MAAM,UAAEjwD,EAAF,WAAaluB,GAAem+E,EAC5B9pF,EAAgB,UAAG5qG,KAAKy1G,YAAYqmC,6BAApB,QAA6C,GAEnE,IAAK,MAAMx2H,KAASslF,EAEZtlF,EAAMy2H,kBAAoBxlC,GACvBv2G,KAAKu1L,yBAAyBpxK,IAAIoyF,KAAgBkuB,IACrDzkI,KAAKu1L,yBAAyBzuJ,IAC1ByvE,GACe,IAAfkuB,EACMxgI,KAAKF,IAxFF,KAwF4B/D,KAAKs1L,8BACpC7wD,GACV15H,GAAOkT,MAAO,iCAAgCs4F,0BAAmCkuB,KACjFzkI,KAAK01L,6BAA6Bn/E,GAG7C,CAUDm/E,6BAA6Bn/E,GACzB,IAAKA,EACD,MAAM,IAAIh0G,MAAM,yEAEpB,MAAMszL,EAAqB71L,KAAK81L,0BAA0Bv/E,GACpD0H,EAAW,GAEjB,GAAI43E,GAAsB,EACtB,IAAK,MAAMhlL,KAAW7Q,KAAKy1G,YAAY9B,mBACnCsK,EAASr8G,KAAKiP,EAAQ8qI,yBAAyBk6C,EAAoBt/E,IAI3E,OAAOn8F,QAAQ0c,IAAImnF,EACtB,CAUD63E,0BAA0Bv/E,GACtB,IAAKA,EACD,MAAM,IAAIh0G,MAAM,yEAEpB,MACMkyI,EADqBz0I,KAAKy1G,YAAYmgF,wBAEtC51L,KAAKu1L,yBAAyBpxK,IAAIoyF,QAClCzvG,EAEN,OAAI9G,KAAKs1L,8BAAgC,GAAK7gD,GAA4B,EAC/DxwI,KAAKF,IAAI/D,KAAKs1L,6BAA8B7gD,GAC5CA,GAA4B,EAC5BA,EAGJz0I,KAAKs1L,4BACf,CAQDS,+BAA+Bn6C,GAC3B57I,KAAKs1L,6BAA+B15C,EACpC,MAAM39B,EAAW,GAEjB,IAAK,MAAM1H,KAAcv2G,KAAKu1L,yBAAyBjtL,OACnD21G,EAASr8G,KAAK5B,KAAK01L,6BAA6Bn/E,IAGpD,OAAOn8F,QAAQikG,WAAWJ,EAC7B,ECpKL,UAQI+3E,wBAAwB95D,GACpB,MAAM+5D,EAAc/5D,GACbA,EAASr2H,qBAAqB,0BAA0B,GAE/D,GAAKowL,EAIL,MAAO,CACHtyL,MAAOsyL,EAAY7tJ,aAAa,kBAChCiuG,UAAW4/C,EAAY7tJ,aAAa,aACpC8tJ,cAAeD,EAAY7tJ,aAAa,kBACxC+tJ,UAAWF,EAAY7tJ,aAAa,cACpCitC,OAAQ4gH,EAAY7tJ,aAAa,UAExC,EASDguJ,sBAAsBl6D,GAClB,MAAMm6D,EACAn6D,EAASr2H,qBAAqB,wBAAwB,GACtDywL,EAAoBD,GACnBA,EAA2BlnJ,YAC5BonJ,EACAr6D,EAASr2H,qBAAqB,QAAQ,GACtC0qB,EAAOgmK,GACNA,EAAcpnJ,aACdonJ,EAAcpnJ,YAAYtd,cAC3B2kK,EACAt6D,EAASr2H,qBAAqB,cAAc,GAIlD,MAAO,CACHywL,oBACA/lK,OACA4lK,UALEK,GAAsBA,EAAmBrnJ,YAOlD,EAQDsnJ,mBAAmB3pK,GACf,MAAM4pK,EAAQ5pK,GAAYA,EAASjnB,qBAAqB,SAAS,GAEjE,OAAO6wL,GAASA,EAAMtuJ,aAAa,aACtC,EAQDuuJ,aAAaz6D,GACT,MAAM06D,EACA16D,EAASr2H,qBAAqB,cAAc,GAGlD,OAFkB+wL,GAAsBA,EAAmBznJ,WAG9D,EAQD0nJ,YAAY36D,GACDA,EAAS9zF,aAAa,QAAQ1a,SAAS,UCpFvC,MAAMopK,GAMjBl3L,cAA0B,IAAdmH,EAAc,uDAAJ,CAAC,EACnB/G,KAAKskE,YAAcv9D,EAAQ6X,WAC3B5e,KAAKisJ,MAAQllJ,EAAQwpB,KACrBvwB,KAAK+2L,UAAY,KACjB/2L,KAAKg3L,kBAAoB,GAEzBh3L,KAAKi3L,cAAclwL,EAAQovL,WAC3Bn2L,KAAKk3L,UAAUnwL,EAAQsuE,OAC1B,CAOD68B,WACI,OAAOlyG,KAAK48F,MACf,CAODu6F,QACI,OAAOn3L,KAAKo3L,UACf,CAODC,eACI,OAAOr3L,KAAKs3L,UACf,CAODC,uBACI,OAAOv3L,KAAKw3L,kBACf,CAODpmF,YAEI,OAAIpxG,KAAK4yG,QACE5yG,KAAK4yG,QAGT5yG,KAAKg3L,iBACf,CAKDS,cACI,OAAOz3L,KAAK+2L,SACf,CAODW,gBACI,OAAO13L,KAAK23L,WACf,CAODC,UACI,OAAO53L,KAAKisJ,KACf,CASD4rC,SAASl0L,GACL3D,KAAK48F,OAASj5F,CACjB,CASDm0L,qBAAqB/3K,GACjB/f,KAAKw3L,mBAAqBz3K,CAC7B,CAQDm3K,UAAU7hH,GACNr1E,KAAK4yG,QAAUv9B,CAClB,CAQD0iH,oBAAoB1iH,GAChBr1E,KAAKg3L,kBAAoB3hH,CAC5B,CAOD2iH,YAAYC,GACRj4L,KAAK+2L,UAAYkB,CACpB,CAOD3mF,aAAapB,GACTlwG,KAAKs3L,WAAapnF,CACrB,CAODmB,cAAcnB,GACVlwG,KAAK23L,YAAcznF,CACtB,CAmBDzmG,MAAM,GAAiD,IAAjD,QAAEyuL,EAAF,YAAWC,EAAX,YAAwBh/D,EAAxB,SAAqC6K,GAAY,EACnD,OAAO,IAAI5pH,SAAQ,CAACC,EAASC,KACzBta,KAAKskE,YAAY0P,OACbh0E,KAAKo4L,UAAU,CACXpkL,OAAQ,QACRkkL,UACA/+D,cACAg/D,cACAn0D,cAEJn/H,IAKI7E,KAAKk3L,UAAU,WACfl3L,KAAKi3L,cACDoB,GAAkB5B,mBAAmB5xL,IAEzCwV,GAAS,IAEb1W,IACI3D,KAAKs4L,gBAAgB30L,GAErB2W,EAAO3W,EAAP,GAtBR,GAyBP,CAWDwG,KAAK,GAAiB,IAAjB,YAAEgvH,GAAe,EAClB,OAAO,IAAI/+G,SAAQ,CAACC,EAASC,KACzBta,KAAKskE,YAAY0P,OACbh0E,KAAKo4L,UAAU,CACXpkL,OAAQ,OACRmlH,gBAEJ9+G,EACAC,EANJ,GAQP,CAmBD89K,UAAU,GAAyD,IAAzD,OAAEpkL,EAAF,QAAUkkL,EAAV,YAAmBC,EAAnB,YAAgCh/D,EAAhC,SAA6C6K,GAAY,EAC/D,OAAOt8D,EAAAA,GAAAA,KAAI,CACP7rD,GAAIs9G,EACJnoH,KAAM,QAEThD,EAAE,QAAS,CACR,MAAS,kCACT,OAAUgG,EACV,SAAYkkL,EACZ,eAAkBl4L,KAAKisJ,MACvB,SAAYjoB,EACZ,sBAAyBm0D,IAE5B5qH,IACJ,CASD+qH,gBAAgB9gE,GACZ,MAAM7zH,EAAQ6zH,EAAQ3xH,qBAAqB,SAAS,GAEpD7F,KAAK63L,SAASl0L,EAAM2uC,SAAS,GAAG7sC,QACnC,CASDwxL,cAAcd,GACVn2L,KAAKo3L,WAAajB,CACrB,EC1RL,MAAMprL,IAASkC,EAAAA,EAAAA,oDA6Sf,GAvSA,MAQIrN,YAAYgwG,GAIR5vG,KAAKu4L,UAAY,CAAC,EAElBv4L,KAAKw4L,UAAY5oF,EAEjB5vG,KAAKu7H,WAAav7H,KAAKu7H,WAAW14H,KAAK7C,MAEvCA,KAAK4xG,aAAe5xG,KAAK4xG,aAAa/uG,KAAK7C,MAE3CA,KAAKw4L,UAAUl2F,aAAajgG,YACxBumF,GAAW,WAAXA,kBAA8B5oF,KAAKu7H,YACvCv7H,KAAKw4L,UAAUl2F,aAAajgG,YACxBumF,GAAW,WAAXA,gBAA4B5oF,KAAK4xG,aACxC,CAQD6mF,WAAWtC,GACP,OAAOn2L,KAAKu4L,UAAUpC,EACzB,CAQDuC,qBAAqBT,GACjB,IAAIvqL,EAQJ,OANAjO,OAAOiW,OAAO1V,KAAKu4L,WAAWn1L,SAAQyN,IAC9BA,EAAQ4mL,gBAAkBQ,IAC1BvqL,EAAImD,EACP,IAGEnD,CACV,CAcD6tH,WAAW,GAAgC,IAAhC,iBAAEU,EAAF,SAAoBC,GAAY,EACnCm8D,GAAkBxB,YAAY36D,GAC9Bl8H,KAAK24L,qBAAqBz8D,GACnBD,GACPj8H,KAAK44L,qBAAqB18D,EAEjC,CAMDtqB,aAAaxlC,GACT,MAAMv7D,EAAU7Q,KAAK04L,qBAAqBtsH,GAE1C,GAAIv7D,EAAS,CAET,MAAMgoL,EAAahoL,EAAQugG,YAG3BvgG,EAAQqmL,UAAU,IAClBrmL,EAAQmnL,YAAY,MAEhBnnL,EAAQugG,cAAgBynF,GACxB74L,KAAK84L,mBAAmBjoL,EAE/B,CACJ,CAkBDkoL,eAAehyL,GACX,MAAM8J,EAAU,IAAIimL,GAAa,IAC1B/vL,EACH6X,WAAY5e,KAAKw4L,UAAU55K,aAG/B,OAAO/N,EAAQpH,MAAM,CACjByuL,QAASnxL,EAAQmxL,QACjBC,YAAapxL,EAAQoxL,YACrBh/D,YAAan5H,KAAKw4L,UAAUr/D,YAC5B6K,SAAUj9H,EAAQi9H,WAEjBrpH,MAAK,KAKG3a,KAAKy4L,WAAW5nL,EAAQsmL,WACzBn3L,KAAKg5L,YAAYnoL,GACjB7Q,KAAK84L,mBAAmBjoL,IAGrBA,KAEV+S,OAAMjgB,IACH3D,KAAK84L,mBAAmBjoL,GAEjBuJ,QAAQE,OAAO3W,KAEjC,CAUDs1L,cAAc9C,GACV,MAAMtlL,EAAU7Q,KAAKy4L,WAAWtC,GAEhC,OAAItlL,EACOA,EAAQ1G,KAAK,CAAEgvH,YAAan5H,KAAKw4L,UAAUr/D,cAG/C/+G,QAAQE,OAAO,IAAI/X,MAAM,0BACnC,CAQDy2L,YAAYnoL,GACR7Q,KAAKu4L,UAAU1nL,EAAQsmL,SAAWtmL,CACrC,CAWDqoL,eAAe/C,EAAW9gH,EAAQ9kD,GAC9B,MAAM1f,EAAU,IAAIimL,GAAa,CAC7Bl4K,WAAY5e,KAAKw4L,UAAU55K,WAC3Bu6G,YAAan5H,KAAKw4L,UAAUr/D,YAC5B5oG,OACA4lK,YACA9gH,WAKJ,OAFAr1E,KAAKg5L,YAAYnoL,GAEVA,CACV,CAQDioL,mBAAmBjoL,EAASwlI,GACxBr2I,KAAKw4L,UAAUl2F,aAAahgG,KACxBsmF,GAAW,WAAXA,uBAAmC/3E,EAASwlI,EACnD,CASDsiD,qBAAqBz8D,GACjB,MAAM+5D,EAAcoC,GAAkBrC,wBAAwB95D,GAE9D,IAAK+5D,EACD,OAGJ,MAAM,MAAEtyL,EAAF,UAAS0yI,EAAT,cAAoB6/C,EAApB,UAAmCC,EAAnC,OAA8C9gH,GAAW4gH,EAI/D,IAAIplL,EAAU7Q,KAAKy4L,WAAWtC,GAKzBtlL,GAAsB,QAAXwkE,EAaZxkE,GACGA,EAAQugG,cAAgB/7B,GACxBxkE,EAAQqhG,aAAevuG,EAC1BoH,GAAOuY,KAAK,uCACRrc,KAAK8B,UAAUktL,KAKlBplL,IACDA,EAAU7Q,KAAKk5L,eAAe/C,EAAW9gH,EAAQ6gH,IAGrDrlL,EAAQknL,oBAAoB1iH,GAExB1xE,GACAkN,EAAQgnL,SAASl0L,GAGrB3D,KAAK84L,mBAAmBjoL,EAASwlI,IA/B7BtrI,GAAOuY,KACH,qCACA,0CA8BX,CASDs1K,qBAAqB18D,GACjB,MAAM,kBAAEo6D,EAAF,KAAqB/lK,EAArB,UAA2B4lK,GAC3BkC,GAAkBjC,sBAAsBl6D,GAE9C,IAAKi6D,EAID,YAHAprL,GAAOuY,KACH,2DAKR,IAAIzS,EAAU7Q,KAAKy4L,WAAWtC,GAEzBtlL,IACDA,EAAU7Q,KAAKk5L,eAAe/C,EAAW,KAAM5lK,IAInD1f,EAAQqmL,UAAU,MAClBrmL,EAAQmnL,YAAY97D,EAAS9zF,aAAa,SAC1Cv3B,EAAQinL,qBAAqBxB,GAE7Bt2L,KAAK84L,mBAAmBjoL,EAC3B,GCxSC9F,IAASkC,EAAAA,EAAAA,+DAWA,MAAMksL,GAOjBv5L,YAAY0tG,GACRttG,KAAKy1G,YAAcnI,EACnBttG,KAAKo5L,sBAAwB,CAAC,EAC9Bp5L,KAAKq5L,sBAAwB,GAC7Br5L,KAAKs5L,wBAA0B,CAAC,EAChCt5L,KAAKu5L,mCAAqC,CAAC,EAC3Cv5L,KAAKw5L,0BAA4Bx5L,KAAKw5L,0BAA0B32L,KAAK7C,MACrEA,KAAKy5L,4BAA8Bz5L,KAAKy5L,4BAA4B52L,KAAK7C,MACzEA,KAAK05L,eAAiB15L,KAAK05L,eAAe72L,KAAK7C,MAC/CA,KAAKy1G,YAAY1wE,GAAGwhJ,GAA8CvmL,KAAKy5L,6BACvEz5L,KAAKy1G,YAAYvH,WAAWlB,2BAA2BhtG,KAAKw5L,2BAC5Dx5L,KAAKy1G,YAAY1wE,GAAG2kJ,GAA4B1pL,KAAK05L,eACxD,CASDD,4BAA4Bl8F,EAAD,GAA6B,IAApB,eAAE6K,GAAkB,EACpD,MAAMuxF,EAAmB35L,KAAKu5L,mCAAmCh8F,GAAU,GAAM,EAIjF,GAFAv9F,KAAKu5L,mCAAmCh8F,GAAUo8F,GAEE,IAAhD35L,KAAKq5L,sBAAsB5uL,QAAQ8yF,IAAmBA,KAAUv9F,KAAKs5L,yBAC9DlxF,GAAkB,GAAKuxF,EAAkB,EAChD,OAGJ,MAAMzpF,EAAclwG,KAAKy1G,YAAYtF,mBAAmB5S,GAExD,GAAI2S,GACeA,EAAYmH,qBAAqB3T,GAAU8M,OAE/ClsG,OAAS,GAAK4rG,EAAYsH,eAIjC,OAIR,MAAMoiF,EAAmB55L,KAAKo5L,sBAAsB77F,GAE/CtyF,MAAMgJ,QAAQ2lL,KAAqBA,EAAiBjuC,OAAMprD,GAA6B,IAAfA,MACzEvgG,KAAKs5L,wBAAwB/7F,GAAU,CACnCs8F,kBAAmBzxF,EACnBwxF,iBAAkB,IAG7B,CASDJ,0BAA0Bj7F,EAAD,GAA0B,IAApB,eAAE6J,GAAkB,EAC3C7J,IAAQv+F,KAAKy1G,YAAY+0E,4BAI7B/qL,OAAO6I,KAAK8/F,GAAgBhlG,SAAQm6F,IAChC,IAAoD,IAAhDv9F,KAAKq5L,sBAAsB5uL,QAAQ8yF,GACnC,OAGJ,MAAMq8F,EAAmB55L,KAAKo5L,sBAAsB77F,GAE/CtyF,MAAMgJ,QAAQ2lL,GAERA,EAAiBt1L,QAxFR,GAyFhBs1L,EAAiBprK,QAFjBxuB,KAAKo5L,sBAAsB77F,GAAU,GAKzCv9F,KAAKo5L,sBAAsB77F,GAAQ37F,KAAKwmG,EAAe7K,GAAvD,IAIJ99F,OAAO6I,KAAKtI,KAAKs5L,yBAAyBl2L,SAAQm6F,IAC9C,MAAM,iBAAEq8F,EAAF,kBAAoBC,GAAsB75L,KAAKs5L,wBAAwB/7F,GAI7E,GAFAq8F,EAAiBh4L,KAAKwmG,EAAe7K,IAnGjB,IAqGhBq8F,EAAiBt1L,OAAoC,CACrD,GAAIs1L,EAAiBjuC,OAAMprD,QAAoC,IAAfA,GAA6C,IAAfA,IAAmB,CAC7F,MAAMu5F,EAAyB7yL,KAAK8B,UAAU6wL,GAE9CxuF,GAAWgE,cjIsXc,EAAE7R,EAAgBq8F,EAA2BC,KAA7C,CACzC7oL,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,uBACR45B,WAAY,CACR2vD,SACAq8F,mBACAC,uBiI3XgBE,CAA8Bx8F,EAAQu8F,EAAwBD,IAClE9uL,GAAOuY,KAAM,yEACTi6E,0BAA+Bu8F,2BAC/BD,KACJ75L,KAAKq5L,sBAAsBz3L,KAAK27F,GAChCv9F,KAAK05L,eAAen8F,EACvB,QAEMv9F,KAAKs5L,wBAAwB/7F,EACvC,KAER,CAQDm8F,eAAen8F,UACJv9F,KAAKo5L,sBAAsB77F,EACrC,CAODnD,UACIp6F,KAAKy1G,YAAY7tE,IAAI2+I,GAA8CvmL,KAAKy5L,6BACxEz5L,KAAKy1G,YAAY7tE,IAAI8hJ,GAA4B1pL,KAAK05L,gBACtD15L,KAAKy1G,YAAYvH,WAAWjB,8BAA8BjtG,KAAKw5L,2BAC/Dx5L,KAAKo5L,2BAAwBtyL,EAC7B9G,KAAKs5L,6BAA0BxyL,EAC/B9G,KAAKq5L,2BAAwBvyL,EAC7B9G,KAAKu5L,wCAAqCzyL,EAC1C9G,KAAKy1G,iBAAc3uG,CACtB,EC5IL,MAAMiE,IAASkC,EAAAA,EAAAA,wDAMf,MAAM+sL,GAMFp6L,YAAY0N,GACRtN,KAAKsN,KAAOA,EACZtN,KAAKuJ,MAAQ,EACbvJ,KAAKuoG,IAAM,EACXvoG,KAAKshG,QAAU,EAClB,CAODY,QAAQvB,QACqB,IAAdA,IAIc,iBAAdA,EACP51F,GAAOpH,MAAO,GAAE3D,KAAKsN,iCAAiCtN,KAAKuJ,QAASo3F,GAC5Dr8D,MAAMq8D,KACd3gG,KAAKuoG,KAAO5H,EACZ3gG,KAAKshG,QAAQ1/F,KAAK++F,GAClB3gG,KAAKuJ,OAAS,GAErB,CAOD0wL,YACI,OAAOj6L,KAAKuoG,IAAMvoG,KAAKuJ,KAC1B,CAOD2wL,aAAar3K,GACTA,EAAQ,GAAE7iB,KAAKsN,YAActN,KAAKi6L,YAClCp3K,EAAQ,GAAE7iB,KAAKsN,gBAAkBrG,KAAK8B,UAAU/I,KAAKshG,QACxD,CAMDjwD,QACIrxC,KAAKshG,QAAU,GACfthG,KAAKuoG,IAAM,EACXvoG,KAAKuJ,MAAQ,CAChB,EAQL,MAAM4wL,GAQFv6L,YAAYw6L,EAAqBz7F,EAAOpsF,GAKpCvS,KAAK2+F,MAAQA,EAOb3+F,KAAKq6L,GAAK9nL,EAQVvS,KAAKs6L,WAAa,EAMlBt6L,KAAKu6L,QAAU,IAAIP,GAAkB,OAYrCh6L,KAAKw6L,iBAAmB,IAAIpsI,IAO5BpuD,KAAKy6L,qBAAuBL,EAU5Bp6L,KAAK06L,oBAAiB5zL,EAEtB9G,KAAK26L,mBAAqB,CAACp8F,EAAKz8E,KACxB9hB,KAAK2+F,QAAUJ,EAAII,OACnB3+F,KAAK46L,mBAAmB94K,EAC3B,EAGL,MAAMwrF,EAAa8sF,EAAoB3kF,YAEvCnI,EAAWY,WAAWlB,2BAClBhtG,KAAK26L,oBAEJ36L,KAAK2+F,QACN3+F,KAAKozK,YAAchnK,GAAMpM,KAAKw6L,iBAAiBh7F,OAAOpzF,GACtDkhG,EAAWvoE,GAAG2kJ,GAA4B1pL,KAAKozK,aAE/CpzK,KAAK66L,sBACC,CAACzuL,EAAI6T,IAASjgB,KAAK86L,oBAAoB1uL,EAAI6T,GACjDqtF,EAAWvoE,GACPwhJ,GACAvmL,KAAK66L,uBAEhB,CAODD,mBAAmB36K,GACf,GAAKA,GAcL,GARIugB,GAAQ43D,yBACJn4E,EAAKzV,WAAayV,EAAKzV,UAAUlG,QACjCtE,KAAKu6L,QAAQr4F,QAAQjiF,EAAKzV,UAAU,GAAGs/F,KAI/C9pG,KAAKs6L,YAAc,EAEft6L,KAAKs6L,YAAct6L,KAAKq6L,GAAI,CAC5B,GAAI75J,GAAQ43D,wBAAyB,CACjC,MAAMkV,EAAattG,KAAKy6L,qBAAqBhlF,YAEvCslF,EAAc,CAChBrxF,IAAK1pG,KAAK2+F,MACV,gBAAmB2O,EAAWugD,uBAelC,GAZI5tI,EAAKzV,WAAayV,EAAKzV,UAAUlG,QACjC7E,OAAOC,OAAOq7L,EAAa,CACvB,qBACI96K,EAAKzV,UAAU,GAAGm/F,mBACtB,sBACI1pF,EAAKzV,UAAU,GAAGo/F,oBACtB,eAAkB3pF,EAAKzV,UAAU,GAAGwG,OAI5ChR,KAAKu6L,QAAQL,aAAaa,GAEtB/6L,KAAK2+F,MAAO,CAEZ,MAAMq8F,EAAgBh7L,KACjBy6L,qBAAqBQ,gBAAgBP,eAErCp2J,MAAM02J,KAEPD,EAAW,SACL/6L,KAAKu6L,QAAQN,YAAce,EAExC,KAAM,CAEH,MAAME,EAAel7L,KAAKm7L,yBACpBC,EAAcp7L,KAAKu6L,QAAQN,YAEjCj6L,KAAK06L,eAAiBU,EAAcF,EAE/B52J,MAAM82J,IAAiB92J,MAAM42J,KAE9BH,EAAW,gBAAsB/6L,KAAK06L,eAE7C,CAEDtvF,GAAWgE,cAAcrc,GAAoBgoG,GAChD,CAED/6L,KAAKq7L,gBACR,OA7DGtwL,GAAOpH,MAAM,WA8DpB,CAQDw3L,yBACI,IAAI5xL,EAAQ,EAAGg/F,EAAM,EAIrB,IAAK,MAAM+yF,KAAat7L,KAAKw6L,iBAAiB9kL,SAAU,CACpD,MAAM6lL,EAAMD,EAAUrB,YAEjB31J,MAAMi3J,KACPhzF,GAAOgzF,EACPhyL,GAAS,EACT+xL,EAAUjqJ,QAEjB,CAED,OAAOk3D,EAAMh/F,CAChB,CASDuxL,oBAAoB1uL,EAAI6T,GACpB,MAAMu7K,EAAmC,iBAAhBv7K,EAAKopK,OAC9B,IAAIoS,EAASz7L,KAAKw6L,iBAAiBr2K,IAAI/X,IAElCqvL,GAAUD,IACXC,EAAS,IAAIzB,GAAmB,GAAE5tL,cAClCpM,KAAKw6L,iBAAiB1zJ,IAAI16B,EAAIqvL,IAG9BD,EACAC,EAAOv5F,QAAQjiF,EAAKopK,QACboS,GACPz7L,KAAKw6L,iBAAiBh7F,OAAOpzF,EAEpC,CAMDivL,iBACIr7L,KAAKu6L,QAAQlpJ,QACTrxC,KAAKw6L,kBACLx6L,KAAKw6L,iBAAiBjkK,QAE1Bv2B,KAAKs6L,WAAa,CACrB,CAKDlgG,UAEI,MAAMkT,EAAattG,KAAKy6L,qBAAqBhlF,YAE7CnI,EAAWY,WAAWjB,8BAClBjtG,KAAK26L,oBACJ36L,KAAK2+F,QACN2O,EAAW1lE,IACP2+I,GACAvmL,KAAK66L,uBACTvtF,EAAW1lE,IACP8hJ,GACA1pL,KAAKozK,aAEhB,EAWU,MAAMsoB,GAOjB97L,YAAY0tG,EAAY/6F,GAOpBvS,KAAKq6L,GAAK9nL,EAENA,EAAI,GACJxH,GAAOsM,KAAM,0CAAyC9E,aAc1DvS,KAAKs6L,WAAa,EAOlBt6L,KAAKy1G,YAAcnI,EAQnBttG,KAAK27L,mBACC,IAAI3B,GAAkB,wBAQ5Bh6L,KAAK47L,qBACC,IAAI5B,GAAkB,0BAQ5Bh6L,KAAK67L,mBACC,IAAI7B,GAAkB,wBAQ5Bh6L,KAAK87L,qBACC,IAAI9B,GAAkB,0BAQ5Bh6L,KAAK+7L,gBACC,IAAI/B,GAAkB,oBAQ5Bh6L,KAAKg8L,kBACC,IAAIhC,GAAkB,sBAQ5Bh6L,KAAKi8L,oBACC,IAAIjC,GAAkB,qBAQ5Bh6L,KAAKk8L,iBACC,IAAIlC,GAAkB,sBAQ5Bh6L,KAAKm8L,mBACC,IAAInC,GAAkB,wBAO5Bh6L,KAAKo8L,cAAgB,IAAIpC,GAAkB,oBAQ3Ch6L,KAAKq8L,oBACC,IAAIrC,GAAkB,2BAO5Bh6L,KAAKs8L,aAAe,IAAItC,GAAkB,mBAQ1Ch6L,KAAKu8L,mBACC,IAAIvC,GAAkB,0BAQ5Bh6L,KAAKw8L,uBACC,IAAIxC,GAAkB,iBAQ5Bh6L,KAAKy8L,uBACC,IAAIzC,GAAkB,wBAO5Bh6L,KAAK08L,sBACC,IAAI1C,GAAkB,gBAQ5Bh6L,KAAK28L,sBACC,IAAI3C,GAAkB,uBAQ5Bh6L,KAAK48L,OAAS,IAAI5C,GAAkB,sBAEpCh6L,KAAK68L,2BAAwB/1L,EAE7B9G,KAAK88L,qBAAuB78K,IACxBjgB,KAAK46L,mBAAmB36K,GACxBjgB,KAAK+8L,kCAAkC98K,EAAvC,EAEJqtF,EAAWvoE,GACPwhJ,GACAvmL,KAAK88L,sBAET98L,KAAKg9L,oBAAsB,KACvBjyL,GAAOkT,MAAM,uCACbje,KAAKq7L,iBACLr7L,KAAKi7L,gBAAgBI,iBACrBr7L,KAAKi9L,gBAAgB5B,gBAArB,EAEJ/tF,EAAWvoE,GACP2kJ,GACA1pL,KAAKg9L,qBAETh9L,KAAKk9L,uBAAyB,CAAC3J,EAAWnf,MAIpB,IAAdA,IACArpK,GAAOsM,KAAK,+BACZrX,KAAKm9L,oBACR,EAEL7vF,EAAWvoE,GACP2kJ,GACA1pL,KAAKk9L,wBAETl9L,KAAKi7L,gBACC,IAAId,GAAmBn6L,MAAM,EAAiBuS,GAEpDvS,KAAKi9L,gBACC,IAAI9C,GAAmBn6L,MAAM,EAAgBuS,IAtN/CxH,GAAOsM,KAAK,sCAuNnB,CAQDujL,mBAAmB36K,GAEf,IAAKA,EAGD,YAFAlV,GAAOpH,MAAM,YAKjB,MAAMg7F,EAAQ3+F,KAAKy1G,YAAYw9D,cACzBmqB,EAAWp9L,KAAKy1G,YAAYo4C,sBAElC,IAAKlvD,GAASy+F,EAAW,EAKrB,OAUJ,MAAMvxK,EAAU5L,EAAK4L,QACf+zC,EAAY3/C,EAAK2/C,UACjBklC,EAAa7kF,EAAK6kF,WAClBoE,EAAYjpF,EAAKmL,UACjBw5E,EAAa3kF,EAAK2kF,WAExB,GAAK/4E,EAIE,GAAK+zC,EAIL,GAAKklC,EAIL,GAAKoE,EAIL,GAAKtE,GA2DZ,GArDA5kG,KAAK27L,mBAAmBz5F,QAAQr2E,EAAQ87E,MAAMhD,QAC9C3kG,KAAK47L,qBAAqB15F,QAAQr2E,EAAQ87E,MAAMjD,UAEhD1kG,KAAK67L,mBAAmB35F,QAAQr2E,EAAQwkE,MAAMsU,QAC9C3kG,KAAK87L,qBAAqB55F,QAAQr2E,EAAQwkE,MAAMqU,UAE5ClkE,GAAQk3D,gCACR13F,KAAK+7L,gBAAgB75F,QAAQtiC,EAAU+kC,QACvC3kG,KAAKg8L,kBAAkB95F,QAAQtiC,EAAU8kC,WAG7C1kG,KAAKk8L,iBAAiBh6F,QAAQ4C,EAAWH,QACzC3kG,KAAKm8L,mBAAmBj6F,QAAQ4C,EAAWJ,UAC3C1kG,KAAKi8L,oBAAoB/5F,QAAQ4C,EAAWzjG,OAE5CrB,KAAK48L,OAAO16F,QAAQjiF,EAAKmpK,mBAErBlgF,IACAlpG,KAAKo8L,cAAcl6F,QACfliG,KAAKq9L,sBACDn0F,GAAW,EAAoBzgB,GAAU,UAAVA,SACvCzoF,KAAKq8L,oBAAoBn6F,QACrBliG,KAAKq9L,sBACDn0F,GAAW,EAAoBzgB,GAAU,UAAVA,UAEvCzoF,KAAKs8L,aAAap6F,QACdliG,KAAKq9L,sBACDn0F,GAAW,EAAkBzgB,GAAU,UAAVA,SACrCzoF,KAAKu8L,mBAAmBr6F,QACpBliG,KAAKq9L,sBACDn0F,GAAW,EAAkBzgB,GAAU,UAAVA,WAGrCmc,IACA5kG,KAAKw8L,uBAAuBt6F,QACxBliG,KAAKs9L,yBACD14F,GAAY,EAAoBnc,GAAU,UAAVA,SAExCzoF,KAAKy8L,uBAAuBv6F,QACxBliG,KAAKs9L,yBACD14F,GAAY,EAAoBnc,GAAU,UAAVA,UAExCzoF,KAAK08L,sBAAsBx6F,QACvBliG,KAAKs9L,yBACD14F,GAAY,EAAkBnc,GAAU,UAAVA,SAEtCzoF,KAAK28L,sBAAsBz6F,QACvBliG,KAAKs9L,yBACD14F,GAAY,EAAkBnc,GAAU,UAAVA,WAG1CzoF,KAAKs6L,YAAc,EAEft6L,KAAKs6L,YAAct6L,KAAKq6L,GAAI,CAE5B,MAAMU,EAAc,CAChBrxF,IAAK/K,EACL,gBAAmBy+F,GAGnBn9K,EAAKzV,WAAayV,EAAKzV,UAAUlG,QACjC7E,OAAOC,OAAOq7L,EAAa,CACvB,qBACI96K,EAAKzV,UAAU,GAAGm/F,mBACtB,sBACI1pF,EAAKzV,UAAU,GAAGo/F,oBACtB,eAAkB3pF,EAAKzV,UAAU,GAAGwG,OAI5ChR,KAAK27L,mBAAmBzB,aAAaa,GACrC/6L,KAAK47L,qBAAqB1B,aAAaa,GAEvC/6L,KAAK67L,mBAAmB3B,aAAaa,GACrC/6L,KAAK87L,qBAAqB5B,aAAaa,GAEnCv6J,GAAQk3D,gCACR13F,KAAK+7L,gBAAgB7B,aAAaa,GAClC/6L,KAAKg8L,kBAAkB9B,aAAaa,IAExC/6L,KAAKk8L,iBAAiBhC,aAAaa,GACnC/6L,KAAKm8L,mBAAmBjC,aAAaa,GACrC/6L,KAAKi8L,oBAAoB/B,aAAaa,GAEtC/6L,KAAKo8L,cAAclC,aAAaa,GAC3Bz2J,MAAMtkC,KAAKq8L,oBAAoBpC,cAChCj6L,KAAKq8L,oBAAoBnC,aAAaa,GAE1C/6L,KAAKs8L,aAAapC,aAAaa,GAC1Bz2J,MAAMtkC,KAAKu8L,mBAAmBtC,cAC/Bj6L,KAAKu8L,mBAAmBrC,aAAaa,GAGzC/6L,KAAKw8L,uBAAuBtC,aAAaa,GACpCz2J,MAAMtkC,KAAKy8L,uBAAuBxC,cACnCj6L,KAAKy8L,uBAAuBvC,aAAaa,GAE7C/6L,KAAK08L,sBAAsBxC,aAAaa,GACnCz2J,MAAMtkC,KAAK28L,sBAAsB1C,cAClCj6L,KAAK28L,sBAAsBzC,aAAaa,GAG5C/6L,KAAK48L,OAAO1C,aAAaa,GAEzB3vF,GAAWgE,cAAcrc,GAAoBgoG,IAE7C/6L,KAAKq7L,gBACR,OAhHGtwL,GAAOpH,MAAM,sBAJboH,GAAOpH,MAAM,uBAJboH,GAAOpH,MAAM,wBAJboH,GAAOpH,MAAM,uBAJboH,GAAOpH,MAAM,eAiIpB,CAaD25L,yBAAyBC,EAAiBr+F,EAAS2U,GAC/C,IAAI2pF,EAAgB,EAChBC,EAAY,EAChB,MAAMC,EAAO19L,KAAKy1G,YAAY1C,WAE9B,IAAK,MAAM4qF,KAAUl+L,OAAO6I,KAAKi1L,GAC7B,GAAIr+F,EAAUy+F,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMxtF,EACAhR,EACI,KACAl/F,KAAKy1G,YAAYtF,mBAAmBwtF,GACxCC,EAAmBL,EAAgBI,GAGzC,IAAKz+F,GAAWgR,IAAgB0tF,EAAkB,CAC9C,MAAMC,EAAgB79L,KAAK89L,6BACvBF,EAAkB1tF,EAAa2D,GAE9BvvE,MAAMu5J,KACPL,GAAiBK,EACjBJ,GAAa,EAEpB,CACJ,CAGL,OAAOD,EAAgBC,CAC1B,CAaDK,6BAA6BC,EAAQ7tF,EAAa2D,GAC9C,IAAIngG,EAAQjU,OAAO6I,KAAKy1L,GAAQtsL,KAAI+B,GAAQtD,OAAOsD,KAC/C6lI,EAAc,KAIlB,MAAM96C,EAAMv+F,KAAKy1G,YAAY+0E,0BAEzBt6E,GACAmpC,EAAcnpC,EAAYmH,qBAAqB3T,GAAUgH,OACrD2uC,IACA3lI,EACMA,EAAM3C,QACJyC,GAAQ6lI,EAAY5kI,MAChB6Q,IACKA,EAAMmqF,WACAnqF,EAAM4xJ,YAAc1jK,GACpB8R,EAAMuuF,YAAcA,SAG/CwlC,EAAcr5I,KAAKy1G,YAAY5K,eAAenH,GAAUgH,OACxDh3F,EACMA,EAAM3C,QACJyC,GAAQ6lI,EAAY5kI,MAChB6Q,IACKA,EAAMmqF,WACAlR,EAAIyW,aAAa1vF,KAAW9R,GAC5B8R,EAAMuuF,YAAcA,OAG/C,IAAI2pF,EAAgB,EAChBQ,EAAgB,EAEpB,IAAK,MAAMxqL,KAAQE,EAAO,CACtB,MAAMuqL,EACA/tL,OAAO6tL,EAAOvqL,GAAMghB,QAAUtkB,OAAO6tL,EAAOvqL,GAAM+gB,QAGnD+P,MAAM25J,IAAmBA,EAAiB,IAC3CT,GAAiBS,EACjBD,GAAiB,EAExB,CAED,OAAOR,EAAgBQ,CAC1B,CAYDX,sBAAsBn0F,EAAWhK,EAAS2U,GACtC,IAAIqqF,EAAa,EACbT,EAAY,EAChB,MAAMC,EAAO19L,KAAKy1G,YAAY1C,WAE9B,IAAK,MAAM4qF,KAAUl+L,OAAO6I,KAAK4gG,GAC7B,GAAIhK,EAAUy+F,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMxtF,EACAhR,EACI,KAAOl/F,KAAKy1G,YAAYtF,mBAAmBwtF,GAC/CQ,EAAYj1F,EAAUy0F,GAG5B,IAAKz+F,GAAWgR,IAAgBiuF,EAAW,CACvC,MAAMC,EACAp+L,KAAKq+L,0BACHF,EAAWjuF,EAAa2D,GAE3BvvE,MAAM85J,KACPF,GAAcE,EACdX,GAAa,EAEpB,CACJ,CAGL,OAAOS,EAAaT,CACvB,CAaDY,0BAA0BN,EAAQ7tF,EAAa2D,GAC3C,IAAIngG,EAAQjU,OAAO6I,KAAKy1L,GAAQtsL,KAAI+B,GAAQtD,OAAOsD,KAC/C6lI,EAAc,KAIlB,MAAM96C,EAAMv+F,KAAKy1G,YAAY+0E,0BAEzBt6E,GACAmpC,EAAcnpC,EAAYmH,qBAAqB3T,GAAUgH,OACrD2uC,IACA3lI,EACMA,EAAM3C,QACJyC,GAAQ6lI,EAAY5kI,MAChB6Q,IAAUA,EAAMmqF,WACTnqF,EAAM4xJ,YAAc1jK,GACpB8R,EAAMuuF,YAAcA,SAG3CwlC,EAAcr5I,KAAKy1G,YAAY5K,eAAenH,GAAUgH,OACxDh3F,EACMA,EAAM3C,QACJyC,GAAQ6lI,EAAY5kI,MAChB6Q,IAAUA,EAAMmqF,WACTlR,EAAIyW,aAAa1vF,KAAW9R,GAC5B8R,EAAMuuF,YAAcA,OAG3C,IAAIqqF,EAAa,EACbF,EAAgB,EAEpB,IAAK,MAAMxqL,KAAQE,EAAO,CACtB,MAAM4qL,EAAcpuL,OAAO6tL,EAAOvqL,KAG7B8wB,MAAMg6J,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,EAExB,CAED,OAAOE,EAAaF,CACvB,CASDjB,kCAAkC98K,GAC9B,IAAKA,IAASA,EAAKzV,YAAcyV,EAAKzV,UAAUlG,OAC5C,OAEJ,MAAMi6L,EAAiB,CACnB70F,IAAKzpF,EAAKzV,UAAU,GAAGk/F,IACvB,qBAAwBzpF,EAAKzV,UAAU,GAAGm/F,mBAC1C,sBAAyB1pF,EAAKzV,UAAU,GAAGo/F,oBAC3C,eAAkB3pF,EAAKzV,UAAU,GAAGwG,MlItdL48B,MkIyd9B5tC,KAAK68L,uBAA0Bn7E,KAAQ68E,EAAgBv+L,KAAK68L,yBAC7D78L,KAAK68L,sBAAwB0B,EAC7BnzF,GAAWgE,elI3doBxhE,EkI2doB2wJ,ElI3dtB,CACrCvtL,KAAM0/E,GAAgBC,iBACtB38E,OAAQ,kBACR45B,gBkI0dC,CASDuvJ,oBACIn9L,KAAKq7L,iBACLr7L,KAAKi7L,gBAAgBI,gBACxB,CAMDA,iBACIr7L,KAAK27L,mBAAmBtqJ,QACxBrxC,KAAK47L,qBAAqBvqJ,QAE1BrxC,KAAK67L,mBAAmBxqJ,QACxBrxC,KAAK87L,qBAAqBzqJ,QAE1BrxC,KAAK+7L,gBAAgB1qJ,QACrBrxC,KAAKg8L,kBAAkB3qJ,QAEvBrxC,KAAKk8L,iBAAiB7qJ,QACtBrxC,KAAKm8L,mBAAmB9qJ,QACxBrxC,KAAKi8L,oBAAoB5qJ,QAEzBrxC,KAAKo8L,cAAc/qJ,QACnBrxC,KAAKq8L,oBAAoBhrJ,QACzBrxC,KAAKs8L,aAAajrJ,QAClBrxC,KAAKu8L,mBAAmBlrJ,QAExBrxC,KAAKw8L,uBAAuBnrJ,QAC5BrxC,KAAKy8L,uBAAuBprJ,QAC5BrxC,KAAK08L,sBAAsBrrJ,QAC3BrxC,KAAK28L,sBAAsBtrJ,QAE3BrxC,KAAK48L,OAAOvrJ,QAEZrxC,KAAKs6L,WAAa,CACrB,CAKDlgG,UACIp6F,KAAKy1G,YAAY7tE,IACb8hJ,GACA1pL,KAAKg9L,qBACTh9L,KAAKy1G,YAAY7tE,IACb2+I,GACAvmL,KAAK88L,sBACT98L,KAAKy1G,YAAY7tE,IACb8hJ,GACA1pL,KAAKk9L,wBACTl9L,KAAKi7L,gBAAgB7gG,UACrBp6F,KAAKi9L,gBAAgB7iG,SACxB,4BCz+BU,MAAMokG,GAQjB5+L,YAAY0tG,GACRttG,KAAK8hB,MAAQ,CACTwnI,MAAO,GAIPm1C,kBAAmB,MAGvB,MAAM5+L,EAASytG,EAAWyF,WAE1B/yG,KAAK8hB,MAAMwnI,MAAMzpJ,GAAU,IAAI6+L,KAAJ,CAAiB7+L,EAAQ,MAAM,GAC1DG,KAAKstG,WAAaA,EAElBA,EAAWpoF,iBACPklE,GACApqF,KAAK2+L,mBAAmB97L,KAAK7C,OACjCstG,EAAWpoF,iBACPklE,GACApqF,KAAK4+L,YAAY/7L,KAAK7C,OAC1BstG,EAAWpoF,iBACPklE,GACApqF,KAAK6+L,aAAah8L,KAAK7C,OAC3BstG,EAAWpoF,iBACPklE,GACApqF,KAAK8+L,qBAAqBj8L,KAAK7C,OAEnCstG,EAAWvoE,GACPqlD,IACI,CAAC8lB,EAAD,KAA0C,IAA5B,KAAEl/F,EAAF,cAAQtP,GAAoB,EA3CvB,mBA4CXsP,GACAhR,KAAK++L,mBAAmB7uF,EAAY8G,QAASt1G,EAChD,IAET4rG,EAAWjC,MACXiC,EAAWjC,KAAKhpG,YACZumF,GAAW,WAAXA,uBACA5oF,KAAKg/L,aAAan8L,KAAK7C,MAElC,CAYD2+L,mBAAmBF,EAAmBj0K,EAAUxpB,GAC5C,MAAMi+L,EACAj/L,KAAK8hB,MAAMwnI,MAAMtpJ,KAAK8hB,MAAM28K,mBAC5BS,EAAqBl/L,KAAK8hB,MAAMwnI,MAAMm1C,GAE5CQ,GAAsBA,EAAmB7+L,oBAAmB,GAC5D8+L,GAAsBA,EAAmB9+L,oBAAmB,EAAMY,GAClEhB,KAAK8hB,MAAM28K,kBAAoBA,CAClC,CAUDG,YAAY/+L,EAAQqwG,GACZA,EAAYuH,YAIXz3G,KAAK8hB,MAAMwnI,MAAMzpJ,KAClBG,KAAK8hB,MAAMwnI,MAAMzpJ,GAAU,IAAI6+L,KAAJ,CAAiB7+L,EAAQqwG,EAAYtvG,kBAEvE,CAUDi+L,aAAah/L,GACT,MAAMs/L,EAAYn/L,KAAK8hB,MAAMwnI,MAAMzpJ,GAE/Bs/L,GACAA,EAAU59L,eAEjB,CAUDu9L,qBAAqBj/L,EAAQgB,GACzB,MAAMs+L,EAAYn/L,KAAK8hB,MAAMwnI,MAAMzpJ,GAE/Bs/L,GACAA,EAAUj/L,eAAeW,EAEhC,CAUDk+L,mBAAmBl/L,EAAQogB,GACvB,MAAMk/K,EAAYn/L,KAAK8hB,MAAMwnI,MAAMzpJ,GAE/Bs/L,GAAal/K,GACbk/K,EAAUx9L,iBAAiBse,EAElC,CAQDoC,WACI,OAAOriB,KAAK8hB,MAAMwnI,KACrB,CAQD01C,aAAapyK,GACT,IAAK,MAAM/sB,KAAU+sB,EAAU,CAC3B,IAAIwyK,EACJ,MAAMC,EAAiBr/L,KAAKstG,WAAW6C,mBAAmBtwG,GAGrDw/L,GAAmBA,EAAe5nF,aAC/Bz3G,KAAK8hB,MAAMwnI,MAAMzpJ,IACjBu/L,EAAuBp/L,KAAK8hB,MAAMwnI,MAAMzpJ,GAEnCu/L,EAAqBx+L,kBACtBw+L,EACKl/L,eAAe0sB,EAAS/sB,GAAQC,eAGzCs/L,EAAuB,IAAIV,KAAJ,CACnB7+L,EAAQ+sB,EAAS/sB,GAAQC,aAC7BE,KAAK8hB,MAAMwnI,MAAMzpJ,GAAUu/L,EAC3BA,EAAqB79L,iBAGzB69L,EAAqB/+L,yBACfusB,EAAS/sB,GAAQQ,yBAEnB4K,MAAMgJ,QAAQ2Y,EAAS/sB,GAAQ6B,gBAC/B09L,EAAqB39L,iBAAiBmrB,EAAS/sB,GAAQ6B,eAGlE,CACJ,EC9LU,MAAM49L,GAOjB1/L,YAAY+5D,EAAMrsD,EAAM+1F,EAAWk8F,GAC/Bv/L,KAAK25D,KAAOA,EACZ35D,KAAKsN,KAAOA,EACZtN,KAAKqjG,UAAYA,EACjBrjG,KAAKu/L,UAAYA,CACpB,ECdU,MAAMC,GAIjB5/L,YAAY0lB,GAERtlB,KAAKslB,MAAQA,EAGbtlB,KAAKy/L,SAAW,KAIhBz/L,KAAKigB,KAAO,KAIZjgB,KAAKsN,KAAO,KAGZtN,KAAKqjG,UAAY,IACpB,ECpBL,MAAMq8F,GAAa,aACbC,GAAY,YAOlB,SAASC,GAAcC,GACnB,QAA+B/4L,IAA3B+4L,EAAcJ,SACd,MAAM,IAAIl9L,MAAM,yEAGpBs9L,EAAcJ,SAASh2L,QACvBo2L,EAAcx8F,UAAY,IAAIpiG,IACjC,CAOD,SAAS6+L,GAAaD,GAClB,QAA+B/4L,IAA3B+4L,EAAcJ,SACd,MAAM,IAAIl9L,MAAM,wEAGpBs9L,EAAcJ,SAASt1L,MAC1B,CAMD,SAAS41L,KACL,GAAIC,cAAcC,gBAAgBP,IAC9B,OAAOA,GACJ,GAAIM,cAAcC,gBAAgBN,IACrC,OAAOA,GAEX,MAAM,IAAIp9L,MACN,4DACP,CAQD,SAAS29L,GAAcC,GAGnBngM,KAAKogM,UAAY,GAGjBpgM,KAAKqgM,SAAWN,KAGhB//L,KAAKsgM,aAAc,EAGnBtgM,KAAKmgM,gBAAkBA,CAC1B,CAKDD,GAAcH,yBAA2BA,GAOzCG,GAAc19L,UAAU+2I,SAAW,SAASj0H,GACxC,GAAIA,EAAMgiF,eAAgB,CAEtB,MAAMu4F,EAAgB7/L,KAAKugM,yBAAyBj7K,GAIpDtlB,KAAKogM,UAAUx+L,KAAKi+L,GAGpB7/L,KAAKwgM,cAIDxgM,KAAKsgM,aACLV,GAAcC,EAErB,CACJ,EAODK,GAAc19L,UAAU+9L,yBAA2B,SAASj7K,GACxD,MAAMu6K,EAAgB,IAAIL,GAAcl6K,GAGlCm7K,EAAiBZ,EAAcv6K,MAAMqnF,oBACrC36F,EAAS,IAAIkgJ,YAmBnB,OAjBAuuC,EAAe/uC,iBAAiBtuJ,SAAQ4I,GAAKgG,EAAOunI,SAASvtI,KAG7D6zL,EAAcJ,SAAW,IAAIO,cAAchuL,EACvC,CAAEgnF,SAAUh5F,KAAKqgM,WAIrBR,EAAc5/K,KAAO,GAGrB4/K,EAAcJ,SAASiB,gBAAkB,SAASC,GAC1CA,EAAU1gL,KAAK6sC,KAAO,GACtB+yI,EAAc5/K,KAAKre,KAAK++L,EAAU1gL,KAEzC,EAEM4/K,CACV,EAYDK,GAAc19L,UAAU4wJ,YAAc,SAAS9tI,GAC3C,GAAIA,EAAMsiF,eACN,OAGJ,MAAMrxF,EAAQvW,KAAKogM,UACnB,IAAIt7L,EAEJ,IAAKA,EAAI,EAAGA,EAAIyR,EAAMjS,OAAQQ,IAC1B,GAAIyR,EAAMzR,GAAGwgB,MAAMkiF,qBAAuBliF,EAAMkiF,mBAAoB,CAChE,MAAMo5F,EAAmBrqL,EAAMzR,GAE3B9E,KAAKsgM,YACLR,GAAac,GAGbrqL,EAAM3L,OAAO9F,EAAG,EAEvB,CAIL9E,KAAKwgM,aACR,EAODN,GAAc19L,UAAUg+L,YAAc,WAClC,MAAMlzF,EAAattG,KAAKmgM,gBAExBngM,KAAKogM,UAAUh9L,SAAQy8L,IACnB,GAAIA,EAAcv6K,MAAM45E,UACpB2gG,EAAcvyL,KAAO,sBAClB,CACH,MAAMlB,EAAKyzL,EAAcv6K,MAAMkiF,mBAEzB3mG,EADcysG,EAAW6C,mBAAmB/jG,GACtBxL,iBAEZ,cAAZC,IACAg/L,EAAcvyL,KAAOzM,EAE5B,IAER,EAKDq/L,GAAc19L,UAAUiH,MAAQ,WAC5B,GAAIzJ,KAAKsgM,YACL,MAAM,IAAI/9L,MAAM,sCAKpBvC,KAAKsgM,aAAc,EAGnBtgM,KAAKogM,UAAUh9L,SAAQy8L,GAAiBD,GAAcC,KAGtDx1L,QAAQS,IACH,2DACG9K,KAAKogM,UAAU97L,2BAC1B,EAKD47L,GAAc19L,UAAU2H,KAAO,WAE3BnK,KAAKsgM,aAAc,EAGnBtgM,KAAKogM,UAAUh9L,SAAQy8L,GAAiBC,GAAaD,KACrDx1L,QAAQS,IAAI,oBACf,EAKDo1L,GAAc19L,UAAUkiG,SAAW,WAC/B1kG,KAAKogM,UAAUh9L,SAAQy8L,IACnB,MAAMlmI,EAAO,IAAIkgD,KAAKgmF,EAAc5/K,KAAM,CAAEjP,KAAMhR,KAAKqgM,WACjDtgL,EAAMmmE,IAAI4zB,gBAAgBngD,GAC1BzrD,EAAI1I,SAASG,cAAc,KAEjCH,SAASqV,KAAKvU,YAAY4H,GAC1BA,EAAEqnC,MAAQ,gBACVrnC,EAAEm0B,KAAOtiB,EACT7R,EAAEw2F,SAAY,QAAO1kG,KAAKqgM,SAAS30L,MAAM,KAAK,KAC9CwC,EAAE8qC,QACFz5C,OAAO2mF,IAAI26G,gBAAgB9gL,EAA3B,GAEP,EAODmgL,GAAc19L,UAAUs+L,oBAAsB,WAC1C,GAAI9gM,KAAKsgM,YACL,MAAM,IAAI/9L,MACN,kEAIRvC,KAAKwgM,cAEL,MAAMjqL,EAAQ,GAUd,OARAvW,KAAKogM,UAAUh9L,SACXq8L,GACIlpL,EAAM3U,KACF,IAAI09L,GACA,IAAIzlF,KAAK4lF,EAASx/K,KAAM,CAAEjP,KAAMhR,KAAKqgM,WACrCZ,EAASnyL,KACTmyL,EAASp8F,cAElB9sF,CACV,EAMD2pL,GAAc19L,UAAUu+L,YAAc,WAClC,OAAO/gM,KAAKqgM,QACf,EAKD,YClRe,MAAMW,GAMjBphM,YAAYqhM,EAAMC,EAAOxnK,GACrB15B,KAAKihM,KAAOA,EACZjhM,KAAKkhM,MAAQA,EACblhM,KAAK05B,IAAMA,CACd,CAMDynK,UACI,OAAOnhM,KAAKihM,IACf,CAMDG,eACI,OAAOphM,KAAKkhM,KACf,CAMDG,aACI,OAAOrhM,KAAK05B,GACf,ECpCU,MAAM4nK,GAKjB1hM,cACI,MAAM,IAAI2C,MAAM,yDACnB,CAWD8uB,KAAKkwK,EAAiB3vH,GAClB5xE,KAAK4xL,YAAY2P,EAAgB5nI,MAAM7sC,IAC/B9sB,KAAKwhM,OAAO10K,GACZy0K,EAAgBhC,UAAYv/L,KAAKyhM,eAAe30K,IAEhDziB,QAAQS,IAAI,wDACZy2L,EAAgBhC,UAAY,IAEhC3tH,EAAS2vH,EAAT,GAEP,CAWD3P,YAAY8P,EAAW9vH,GACnB,MAAM,IAAIrvE,MAAM,+CACnB,CAiBDk/L,eAAe30K,GACX,MAAM,IAAIvqB,MAAM,0CACnB,CAQDi/L,OAAO10K,GACH,MAAM,IAAIvqB,MAAM,0CACnB,EC9DU,MAAMo/L,WAAsBC,GAIvChiM,cACIu4E,QAGAn4E,KAAK+f,IAqGb,WACI,MAAM+D,EAAU,2DAEhB,QAAyBhd,IAArB0H,OAAOqzL,UACPx3L,QAAQS,IAAIgZ,OACT,CACH,MAAMg+K,EAAWtzL,OAAOqzL,UAExB,QAA0B/6L,IAAtBg7L,EAASp0K,UAA0Bo0K,EAASp0K,SAAS,YACrD,OAAOo0K,EAEXz3L,QAAQS,IAAIgZ,EAEf,CACJ,CAnHkBi+K,EACd,CASDnQ,YAAYoQ,EAAepwH,GACvBvnE,QAAQS,IAAK,6BAA4B9K,KAAK+f,OAC9C1V,QAAQS,IAAK,8BAA6Bk3L,KAC1C,MAAMpgD,EAAU,IAAI7nE,eAEpB6nE,EAAQ3nE,mBAAqB,WACzB,GAAI2nE,EAAQ/iI,aAAek7D,eAAekoH,MAChB,MAAnBrgD,EAAQvsE,OACXzD,EAASgwE,EAAQnpE,mBACd,GAAImpE,EAAQ/iI,aAAek7D,eAAekoH,KAC7C,MAAM,IAAI1/L,MACL,yDAAwDq/I,EAAQvsE,SAI5E,EACDusE,EAAQzlE,KAAK,OAAQn8E,KAAK+f,KAC1B6hI,EAAQvlE,iBAAiB,eACrB6lH,GAAcnC,4BAClBn+C,EAAQvwH,KAAK2wK,GACb33L,QAAQS,IAAK,QAAOk3L,IACvB,CAQDP,eAAe30K,GACX,MAAMjoB,EAAS+zG,GAAc9rF,GAAUq1K,QAIvCt9L,EAAO2pB,QACP,MAAMjY,EAAQ,GAMd,OAJA1R,EAAOzB,SACH69L,GAAQA,EAAKmB,QACN7rL,EAAM3U,KAAK,IAAIo/L,GAAKC,EAAKA,KAAMA,EAAKx3L,MAAOw3L,EAAKvnK,QAEpDnjB,CACV,CAODirL,OAAO10K,GAIH,GAHAziB,QAAQS,IAAK,wBAAuBgiB,EAAStb,cAGrB,iBAAbsb,EACP,OAAO,EAIX,IAAIoH,EAEJ,IACIA,EAAO0kF,GAAc9rF,EACxB,CAAC,MAAOnpB,GAGL,OAFA0G,QAAQS,IAAInH,IAEL,CACV,CAGD,QAAqBmD,IAAjBotB,EAAKiuK,QACL,OAAO,EAIX,MAAM5rL,EAAQ2d,EAAKiuK,QAEnB,SAAM5rL,EAAM,KAAMA,EAAM,GAAG,cAM9B,EC7GL,MAAM8rL,GAAe,SACfC,GAAkB,YAClBC,GAAqB,eACrBC,GAAiB,WAYvB,SAASC,KAELziM,KAAKkiM,cAAgB,IAAIhC,GAGzBlgM,KAAK0iM,qBAAuB,IAAIf,GAGhC3hM,KAAK2iM,QAAU,KAIf3iM,KAAKqjG,UAAY,KAGjBrjG,KAAK4iM,cAAgB,KAIrB5iM,KAAK4xE,SAAW,KAIhB5xE,KAAK08K,QAAU,GAGf18K,KAAKmmC,MAAQk8J,GAIbriM,KAAK6iM,WAAa,CACrB,CA8DD,SAASC,GAAaC,EAAa7jD,GAO/B,GANA70I,QAAQS,IAEG,0FAAoBo0I,EAAOqgD,UAAUj7L,UAI5C46I,EAAOqgD,UAAUj7L,OAAS,EAAG,CAC7B,IAAIsgD,EAASs6F,EAAO77C,UAAU2/F,qBACxBD,EAAY1/F,UAAU2/F,qBAIxBp+I,EAAS,IACTA,EAAS,GAGb,IAAIruC,EAAQ,IAEZ2oI,EAAOqgD,UAAUn8L,SAAQ6/L,IACrBA,EAAW/B,OAASt8I,EACpBq+I,EAAWvpK,KAAOkrB,EAClBruC,GAAU,GAAE0sL,EAAWhC,OAAvB,IAEJ1qL,GAAS,IACTlM,QAAQS,IAAIyL,GAKZ2oI,EAAOqgD,UAAUjyL,KAAO4xI,EAAO5xI,IAClC,CAGDy1L,EAAYrmB,QAAQ96K,KAAKs9I,EAAOqgD,WAChCwD,EAAYJ,UACZt4L,QAAQS,IAAK,oBAAmBi4L,EAAYJ,WAG5CI,EAAYG,YACf,CAiHD,SAASC,GAAmBC,GACxB,IAAK,IAAIt+L,EAAI,EAAGA,EAAIs+L,EAAoB9+L,OAAQQ,IACN,IAAlCs+L,EAAoBt+L,GAAGR,QACvB8+L,EAAoBx4L,OAAO9F,EAAG,GAItC,OAAOs+L,EAAoB9+L,OAAS,CACvC,CAxNDm+L,GAAYjgM,UAAUiH,MAAQ,WAC1B,GAAIzJ,KAAKmmC,QAAUk8J,GACf,MAAM,IAAI9/L,MACL,sDACG8/L,qCACAriM,KAAKmmC,gBAEjBnmC,KAAKmmC,MAAQm8J,GACbtiM,KAAKkiM,cAAcz4L,QACnBzJ,KAAKqjG,UAAY,IAAIpiG,IACxB,EAQDwhM,GAAYjgM,UAAU2H,KAAO,SAAcynE,GACvC,GAAI5xE,KAAKmmC,QAAUm8J,GACf,MAAM,IAAI//L,MACL,qDACG+/L,qCACAtiM,KAAKmmC,gBAIjB97B,QAAQS,IAAI,8CACZ9K,KAAKkiM,cAAc/3L,OAGnB,MAAMk5L,EAAWP,GAAajgM,KAAK,KAAM7C,MAEzCA,KAAKkiM,cAAcpB,sBAAsB19L,SAAQm+L,IAC7CvhM,KAAK0iM,qBAAqBrxK,KAAKkwK,EAAiB8B,GAChDrjM,KAAK2iM,SAAL,IAIJ3iM,KAAKmmC,MAAQo8J,GAGbviM,KAAK4xE,SAAWA,CACnB,EA0DD6wH,GAAYjgM,UAAU0gM,WAAa,WAC3BljM,KAAKmmC,QAAUo8J,IAAuC,IAAjBviM,KAAK2iM,SAG1C3iM,KAAK4oC,OAEZ,EAMD65J,GAAYjgM,UAAUomC,MAAQ,WAC1Bv+B,QAAQS,IACH,sDACG9K,KAAK08K,QAAQp4K,UACrBtE,KAAK4iM,cAAgB,GAOrB,MAAMU,EAAStjM,KAAK08K,QAGd6mB,EAAiB,GASvB,IANAJ,GAAmBG,GAGnBA,EAAOlgM,SAAQmT,GA6FnB,SAA+BA,EAAO0qL,GAClC,GAAqB,IAAjB1qL,EAAMjS,OACNiS,EAAM3U,KAAKq/L,OACR,CACH,GAAI1qL,EAAMA,EAAMjS,OAAS,GAAG48L,OAASD,EAAKC,MAGtC,YAFA3qL,EAAM3U,KAAKq/L,GAKf,IAAK,IAAIn8L,EAAI,EAAGA,EAAIyR,EAAMjS,OAAQQ,IAC9B,GAAIm8L,EAAKC,MAAQ3qL,EAAMzR,GAAGo8L,MAGtB,YAFA3qL,EAAM3L,OAAO9F,EAAG,EAAGm8L,GAK3B1qL,EAAM3U,KAAKq/L,EACd,CACJ,CAhH2BuC,CAAsBD,EAAgBhtL,KAGvD4sL,GAAmBG,IAAS,CAE/B,IAAIG,EAAkBH,EAAO,GAE7BA,EAAOlgM,SAAQm8L,IACPA,EAAU,GAAG2B,MAAQuC,EAAgB,GAAGvC,QACxCuC,EAAkBlE,EACrB,IAIL,IAAImE,EAAYD,EAAgBj1K,QAMhC,IAJAxuB,KAAK2jM,oBAAoBD,EAAWD,EAAgBn2L,MAI7Cm2L,EAAgBn/L,OAAS,GAAG,CAC/B,IAAIs/L,GAAe,EACnB,MAAMC,EAAgBJ,EAAgB,GAAGvC,MASzC,GAPAoC,EAAOlgM,SAAQm8L,IACPA,EAAU,GAAG2B,MAAQ2C,IACrBD,GAAe,EAClB,IAIDA,EACA,MAGJF,EAAYD,EAAgBj1K,QAC5BxuB,KAAK2jM,oBAAoBD,EAAW,KACvC,CAEJ,CAGD1jM,KAAKmmC,MAAQq8J,GACTxiM,KAAK4xE,UACL5xE,KAAK4xE,SAAS5xE,KAAK4iM,cAE1B,EAQDH,GAAYjgM,UAAUmhM,oBAAsB,SAAS1C,EAAM3zL,GACnDA,UACAtN,KAAK4iM,eAAkB,KAAIt1L,KAC3BtN,KAAK6iM,WAAav1L,EAAKhJ,OAAS,GAEhCtE,KAAK6iM,WAAa5B,EAAKA,KAAK38L,OA/OJ,KAgPxBtE,KAAK4iM,eAAiB,SACtB5iM,KAAK6iM,WAAa,GAEtB7iM,KAAK4iM,eAAkB,IAAG3B,EAAKA,OAC/BjhM,KAAK6iM,YAAc5B,EAAKA,KAAK38L,OAAS,CACzC,EAuDDm+L,GAAYjgM,UAAU+2I,SAAW,SAASj0H,GACtCtlB,KAAKkiM,cAAc3oD,SAASj0H,EAC/B,EAMDm9K,GAAYjgM,UAAU4wJ,YAAc,SAAS9tI,GACzCtlB,KAAKkiM,cAAc9uC,YAAY9tI,EAClC,EAODm9K,GAAYjgM,UAAUshM,iBAAmB,WACrC,GAAI9jM,KAAKmmC,QAAUq8J,GACf,MAAM,IAAIjgM,MACL,6DACGigM,qCACAxiM,KAAKmmC,gBAGjB,OAAOnmC,KAAK4iM,aACf,EAKDH,GAAYjgM,UAAUuwI,SAAW,WAC7B,OAAO/yI,KAAKmmC,KACf,EAMDs8J,GAAYjgM,UAAU6uC,MAAQ,WAC1BrxC,KAAKmmC,MAAQk8J,GACbriM,KAAK2iM,QAAU,KACf3iM,KAAK4iM,cAAgB,KACrB5iM,KAAKqjG,UAAY,KACjBrjG,KAAK4xE,SAAW,KAChB5xE,KAAK08K,QAAU,GACf18K,KAAK6iM,WAAa,CACrB,EAED,YCpWM93L,GAASzL,EAAAA,MAAAA,mDAUA,SAASykM,GAAmBz2F,GAEvCttG,KAAK8mD,SAAW,CAAC,EAEjB9mD,KAAKstG,WAAaA,EAClBttG,KAAKstG,WAAW02F,mBACZ,WAAYhkM,KAAKikM,gBAAgBphM,KAAK7C,MAC7C,CCnBM,IAAKkkM,GAkBAC,GA4BAC,GDzBZL,GAAmBvhM,UAAUyhM,gBACvB,SAASn9I,EAAUu9I,EAAahlE,GAC9B,IAAKr/H,KAAKstG,WAAW0uB,QAAQqD,GAKzB,YAJAt0H,GAAOuY,KACF,8CAA6CwjC,IAC9Cu4E,GAKR,MAAMv0H,EAAM,GAEZg8C,EAASxU,SAASlvC,SAAQwO,IAEtB,MAAMtE,EAAOsE,EAAUg8B,WAAWtgC,KAC5BqF,EAAUf,EAAU/J,MAEtB7H,KAAK8mD,SAASx5C,KAAUqF,IACxB3S,KAAK8mD,SAASx5C,GAAQqF,EACtB5H,GAAOsM,KAAM,OAAM/J,cAAiBqF,KAEpC7H,EAAIlJ,KAAK,CACLwK,GAAI,oBACJwF,UAAWtE,EACXqF,YAEP,IAID7H,EAAIxG,OAAS,GACb8mG,GAAWwD,QAAQ3nG,KAAK8B,UAAU+B,GAEzC,EASLi5L,GAAmBvhM,UAAU8hM,oBAAsB,SAASC,GACxD,OAAOvkM,KAAK8mD,SAASy9I,EACxB,WCjEWL,GAAAA,EAAAA,iBAAAA,YAAAA,EAAAA,iBAAAA,YAAAA,EAAAA,YAAAA,QAAAA,KAAAA,GAAAA,CAAAA,aAkBAC,GAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,MAAAA,EAAAA,cAAAA,UAAAA,EAAAA,eAAAA,WAAAA,EAAAA,aAAAA,UAAAA,KAAAA,GAAAA,CAAAA,aA4BAC,GAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,qBAAAA,gCAAAA,KAAAA,GAAAA,CAAAA,IAeL,MAAMI,GAAmBN,GAA0BM,iBAC7CC,GAAmBP,GAA0BO,iBAC7CC,GAAcR,GAA0BQ,YAExCC,GAAWR,GAAyBQ,SACpCC,GAAYT,GAAyBS,UACrCC,GAAgBV,GAAyBU,cACzCC,GAAiBX,GAAyBW,eAC1CC,GAAeZ,GAAyBY,aAExCC,GAAsBZ,GAAyBY,oBAC/CC,GAAuBb,GAAyBa,qBCjEvDl6L,IAASkC,EAAAA,EAAAA,2DAMTi4L,GAAgB,gBAMP,MAAMC,WAA+B7rF,GAWhD15G,YAAYwlM,EAAYtlM,EAAa8vG,GACjCz3B,QAEAn4E,KAAKolM,WAAaA,EAClBplM,KAAKF,YAAcA,EACnBE,KAAK4vG,SAAWA,EAShB5vG,KAAKmmC,WAAQr/B,CAChB,CAKDqD,OACQnK,KAAKmmC,QAAUk/J,IACZrlM,KAAKmmC,QAAUk/J,GAMtBrlM,KAAKslM,aAAa,QALdv6L,GAAOuY,KAAK,kDAMnB,CAKD7Z,QAGQzJ,KAAKmmC,QAAUk/J,IACZrlM,KAAKmmC,QAAUk/J,IACfrlM,KAAKmmC,QAAUk/J,IACfrlM,KAAKmmC,QAAUk/J,GAMtBrlM,KAAKslM,aAAa,SALdv6L,GAAOuY,KAAK,wCAMnB,CAUDiiL,SAAS1wB,EAAU2wB,GACf,GAAI3wB,IAAa70K,KAAKmmC,MAClB,OAGJ,MAAMs/J,EAAWzlM,KAAKmmC,MAEtBnmC,KAAKmmC,MAAQ0uI,EACb70K,KAAKsiG,aAAahgG,KAAK4iM,GACnB,CACI72L,QAASrO,KAAKolM,WACdI,gBACAC,WACA5wB,SAAU70K,KAAKmmC,MACfrmC,YAAaE,KAAKF,aAG7B,CAQD+Z,iBAAiBZ,GACbjZ,KAAKqC,YAAY6iM,GAAejsL,EACnC,CAODysL,oBAAoBzsL,GAChBjZ,KAAK2kC,eAAeugK,GAAejsL,EACtC,CAQDqsL,aAAatxL,GACT,MAAM45B,EAAa,CACf,MAAS,kCACT,OAAU55B,EACV2xL,WAAY3lM,KAAKolM,YAGrBx3J,EAAWg4J,YAAc5lM,KAAKF,YAE9B,MAAM+wE,GAAKnJ,EAAAA,GAAAA,KAAI,CACX7rD,GAAI7b,KAAK4vG,SAASupB,YAClBnoH,KAAM,QACLhD,EAAE,QAAS4/B,GACX2/B,KAELxiE,GAAOkT,MAAO,GAAEjK,yBAA+B68D,EAAGvD,UAClDttE,KAAK4vG,SAAShxF,WAAWo1D,OACrBnD,GACA,SACAltE,IACIoH,GAAOpH,MACF,aAAYqQ,kCAAwCrQ,GACzD3D,KAAKulM,SAASF,GAAd,GAEX,EC1JL,MAAMt6L,IAASkC,EAAAA,EAAAA,+CAUA,MAAM44L,GAOjBjmM,YAAYgwG,GACR5vG,KAAK4vG,SAAWA,EAChB5vG,KAAKsiG,aAAesN,EAAStN,aAC7Bv3F,GAAOkT,MAAM,uBACbje,KAAKwiJ,SAAW,CAAC,EAEjBxiJ,KAAK8lM,2BAA6B9lM,KAAK+lM,oBAAoBljM,KAAK7C,MAKhE4vG,EAASkD,oBAAoB,uBACzB9yG,KAAKgmM,oBAAoBnjM,KAAK7C,MACrC,CAQDgmM,oBAAoBz+L,GAChB,MAAMqmC,EAAarmC,EAAKqmC,WAExB,IAAKA,EACD,OAGJ7iC,GAAOkT,MAAM,+BAAgC2vB,GAE7C,MAAMinI,EAAWjnI,EAAWzH,MAE5B,GAAI0uI,IAAa70K,KAAKmmC,MAItB,OAAQ0uI,GACR,KAAKoxB,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GAAwB,CACzB,MAAM53L,EAAUu/B,EAAW+3J,WAE3B,IAAKt3L,EACD,OAIJ,MAAMwC,EAAU7Q,KAAKwiJ,SAASn0I,GAE1BwC,EACAA,EAAQ00L,SAAS1wB,EAAUjnI,EAAWs4J,gBAEtCn7L,GAAOuY,KAAK,kCAAmCjV,EAEtD,EAEJ,CAUD83L,wBAAwBf,EAAYtlM,GAChC,GAAIE,KAAKwiJ,SAAS4iD,GAId,OAHAr6L,GAAOuY,KAAK,uDACR8hL,GAEG,IAAI7iM,MAAM0jM,IAGrB,MAAMp1L,EAAU,IAAIs0L,GAChBC,EAAYtlM,EAAaE,KAAK4vG,UAMlC,OAJA/+F,EAAQgJ,iBAAiB7Z,KAAK8lM,4BAE9B9lM,KAAKwiJ,SAAS4iD,GAAcv0L,EAErBA,CACV,CAQDk1L,oBAAoBziM,GAChB,MAAM+K,EAAU/K,EAAM+K,QAEtB,GAAI/K,EAAMuxK,WAAaoxB,IAChB3iM,EAAMuxK,WAAaoxB,GAAwB,CAC9C,MAAMp1L,EAAU7Q,KAAKwiJ,SAASn0I,GAE9B,IAAKwC,EAID,YAHA9F,GAAOpH,MAAM,6CACT0K,GAKRwC,EAAQ60L,oBAAoB1lM,KAAK8lM,mCAC1B9lM,KAAKwiJ,SAASn0I,EACxB,CAEDrO,KAAKsiG,aAAahgG,KACdsmF,GAAW,WAAXA,mCACAtlF,EACP,ECtHL,MAAMyH,IAASkC,EAAAA,EAAAA,iDAEFm5L,GAA+B,aAM7B,MAAMC,WAA2Bp7B,GAI5CrrK,cACIu4E,QAUAn4E,KAAKsmM,WAAa,IAAIl4I,IAMtBpuD,KAAK4vG,SAAW,KAMhB5vG,KAAKumM,kBAAoB,CAAC,EAM1BvmM,KAAKwmM,mBAAqB,CAAC,EAU3BxmM,KAAKymM,aAAe,IAAIr4I,GAC3B,CAQDs4I,gCACI,QAAI1mM,KAAK4vG,UACE5vG,KAAK4vG,SAASuX,uBACjBi/E,GACA,CAAEv+L,MAAOZ,KAAK8B,UAAU/I,KAAKumM,oBAIxC,CAQDI,2BAA2B92F,GAGvB,MAAM+2F,EAAsB,CAACnnE,EAAYl6G,KACrCvlB,KAAKsiG,aAAahgG,KACd8nK,GACA3qC,EACA/7B,GAAU8M,MACVjrF,EAJJ,EAOJvlB,KAAK6mM,kBAAoB,CAACt/L,EAAMuU,KACvB9b,KAAK8mM,+BAA+BhrL,IACrC8qL,EAAoB9qL,EAAqB,SAAfvU,EAAKM,MAClC,EAELgoG,EAAKiD,oBAAoB,aAAc9yG,KAAK6mM,mBAE5C,MAAME,EAAsB,CAACtnE,EAAYl6G,KACrCvlB,KAAKsiG,aAAahgG,KACd8nK,GACA3qC,EACA/7B,GAAUgH,MACVnlF,EAJJ,EAOJvlB,KAAKgnM,kBAAoB,CAACz/L,EAAMuU,KACvB9b,KAAK8mM,+BAA+BhrL,IACrCirL,EAAoBjrL,EAAqB,SAAfvU,EAAKM,MAClC,EAELgoG,EAAKiD,oBAAoB,aAAc9yG,KAAKgnM,mBAE5C,MAAMC,EAAqB,CAACxnE,EAAY5rB,KACpC7zG,KAAKsiG,aAAahgG,KACd8nK,GACA3qC,EAAY5rB,EAFhB,EAKJ7zG,KAAKknM,kBAAoB,CAAC3/L,EAAMuU,KACvB9b,KAAK8mM,+BAA+BhrL,IACrCmrL,EAAmBnrL,EAAMvU,EAAKM,MACjC,EAELgoG,EAAKiD,oBAAoB,YAAa9yG,KAAKknM,mBAG3ClnM,KAAKmnM,mBAAqB,CAAC5/L,EAAM04H,KAC7B,MAAMR,EAAaQ,GACb,MAAEp4H,GAAUN,EACZ6/L,EAAiBxuF,GAAc/wG,GAC/Bw/L,EAAqBrnM,KAAK8mM,+BAA+BrnE,GACzD6nE,EACAtnM,KAAKwmM,mBAAmB/mE,KAAgBz/H,KAAKwmM,mBAAmB/mE,GAAc,CAAC,GAErF,IAAK,MAAMlpB,KAAc92G,OAAO6I,KAAK8+L,GAAiB,OAClD,IAAIG,GAAgB,EACpB,MAAMz0G,EAAY83E,GAA2Br0D,GACvCixF,EAAgBnnL,QAAQ+mL,EAAe7wF,GAAYhxF,OACnDkiL,EAAiBH,EAAoB/wF,KACnC+wF,EAAoB/wF,GAAc,CAAEA,eAExCkxF,EAAeliL,QAAUiiL,IACzBD,GAAgB,EAChBE,EAAeliL,MAAQiiL,EACnBH,IAAuBrnM,KAAKumM,kBAAkBhwF,IAC9Cv2G,KAAKsiG,aAAahgG,KAAK8nK,GAAsC7zD,EAAYixF,IAKjF,MAAME,EAAe50G,IAAc4Q,GAAUgH,MAAxB,UACf08F,EAAe7wF,GAAY1C,iBADZ,QACyBprB,GAAU,UAAVA,YACxC3hF,EAEF2gM,EAAe5zF,YAAc6zF,IAC7BD,EAAe5zF,UAAY6zF,EAC3BH,GAAgB,EAIZF,IAAuBrnM,KAAKumM,kBAAkBhwF,IAC9Cv2G,KAAKsiG,aAAahgG,KAAK8nK,GAA2C7zD,EAAYmxF,IAIlFH,GAAiB9/F,GAAAA,4BACjBznG,KAAKsiG,aAAahgG,KACd8nK,GACA7zD,EACA0pB,EACAunE,EACAE,EAEX,CAGD,MAAMC,EAAiBloM,OAAO6I,KAAK8+L,GAEnC,IAAK,MAAM7wF,KAAc92G,OAAO6I,KAAKg/L,IACW,IAAxCK,EAAel9L,QAAQ8rG,WAChB+wF,EAAoB/wF,EAElC,EAEL1G,EAAKiD,oBAAoB,aAAc9yG,KAAKmnM,oBAG5CnnM,KAAK4nM,mBAAqBx7H,IACtB,MAAMqzD,EAAal4D,GAAAA,QAAAA,mBAA2B6E,UAEvCpsE,KAAKwmM,mBAAmB/mE,GAE/B,IAAK,MAAQ73H,EAAKC,KAAW7H,KAAKsmM,WAAWnmL,UACrCtY,IAAU43H,UACHz/H,KAAKymM,aAAa7+L,EAEhC,EAELioG,EAAK3qF,iBAAiB0jE,GAAW,WAAXA,gBAA4B5oF,KAAK4nM,mBAC1D,CASDd,+BAA+BrnE,GAAY,MACvC,MAAMvD,EAAQ,UAAGl8H,KAAK4vG,gBAAR,aAAG,EAAeowB,gBAAgBP,GAEhD,OAAOp/G,QAAQ67G,GAAYA,EAASznH,MAAKlN,GAAQA,EAAK9B,UAAY2gM,KACrE,CASDyB,wBAAwB/jL,GAChB2jF,GAAAA,2BACA18F,GAAOkT,MAAM6F,GAEb/Y,GAAOpH,MAAMmgB,EAEpB,CAKDg6H,iBAAiBxc,EAAOxuC,EAAWyjB,GAAY,MAC3C,MAOMuxF,EAAY,UAAG9nM,KAAK4vG,gBAAR,aAAG,EAAeowB,gBAAgBsB,GAEpD,IAAKwmE,EAGD,YAFA/8L,GAAOuY,KAAM,8CAA6Cg+G,KAI9D,IAAKthI,KAAK8mM,+BAA+BxlE,GACrC,MAf2B,MAC3B,GAAIthI,KAAK4vG,SACL,OAAO5vG,KAAK4vG,SAAS4vB,qBAAqB8B,EAAOxuC,GAErD/nF,GAAOuY,KAAK,iDAAZ,EAWOykL,GAGX,GAAIxxF,EACA,OAAOv2G,KAAKkrK,kBAAkB5pC,EAAO/qB,GAGzC,MAAMyxF,EAAY,CACdziL,OAAO,GAGX,GAAIutE,IAAc4Q,GAAUgH,MAAO,CAC/Bs9F,EAAUn0F,eAAY/sG,EACtB,MAAMmhM,EAAgB1vE,GAA2BuvE,EAAc,+BACzDnoE,EAAgBpH,GAA2BuvE,EAAc,+BAErC,QAAtBG,EAAc3jM,OACd0jM,EAAUttD,UAAV,oBAAsButD,EAAc,GAAGpgM,aAAvC,aAAsB,EAAwB6D,MAAM,YAApD,QAA4D,GACrDi0H,EAAcr7H,OAAS,IAC9B0jM,EAAUnoE,UAAYF,EAAc,GAAG93H,MAE9C,CAED,OAAOmgM,CACV,CAKD98B,kBAAkB5pC,EAAO/qB,GAAY,MACjC,MACMyxF,EAAY,CACdziL,OAAO,EACPsuF,UAHc+2D,GAA2Br0D,KAGhB7S,GAAUgH,MAAQjiB,GAAU,UAAVA,YAAmB3hF,GAGlE,OAAO9G,KAAKwmM,mBAAmBllE,GAAxB,UACDthI,KAAKwmM,mBAAmBllE,GAAO/qB,UAD9B,QAC6CyxF,OAC9ClhM,CACT,CAKDqkK,aAAa33J,GACT,OAAOxT,KAAKsmM,WAAWniL,IAAI3Q,EAC9B,CAKD43J,mBAAmB53J,GACf,OAAOxT,KAAKymM,aAAatiL,IAAI3Q,EAChC,CAKDsrI,iBAAiBusB,GACb,GAAKA,SAAAA,EAAU/mK,OAIf,IAAK,MAAMkP,KAAQ63J,EACfrrK,KAAKsmM,WAAW9mG,OAAOhsF,EAE9B,CAMD00L,YAAYr4F,GACR,MAAMs4F,EAAcnoM,KAAK4vG,SAEzB5vG,KAAK4vG,SAAWC,EACZs4F,IACAA,EAAYhpE,uBACR,aAAcn/H,KAAK6mM,mBACvBsB,EAAYhpE,uBACR,aAAcn/H,KAAKgnM,mBACvBmB,EAAYhpE,uBACR,YAAan/H,KAAKknM,mBACtBlnM,KAAKmnM,oBACEgB,EAAYhpE,uBAAuBinE,GAA8BpmM,KAAKmnM,oBAC7EnnM,KAAK4nM,oBACEO,EAAYthK,oBAAoB+hD,GAAW,WAAXA,gBAA4B5oF,KAAK4nM,qBAExE/3F,IACA7vG,KAAK2mM,2BAA2B92F,GAChC7vG,KAAK0mM,gCAEZ,CAKD9tD,aAAaplI,EAAMisH,GACf,GAAoB,iBAATjsH,EACP,MAAM,IAAIkI,UAAW,QAAOlI,uBAKhC,MAAM40L,EAAgBpoM,KAAKsmM,WAAWniL,IAAI3Q,GAEtC40L,GAAiBA,IAAkB3oE,GACnCz/H,KAAK6nM,wBAAyB,+BAA8BO,QAAoB3oE,KAEpFz/H,KAAKsmM,WAAWx/J,IAAItzB,EAAMisH,EAC7B,CAKD6rC,mBAAmB/0D,EAAYhxF,GAQ3B,OAPKvlB,KAAKumM,kBAAkBhwF,KACxBv2G,KAAKumM,kBAAkBhwF,GAAc,CAAC,GAG1Cv2G,KAAKumM,kBAAkBhwF,GAAYhxF,MAAQA,EAC3Cxa,GAAOkT,MAAO,iBAAgBs4F,sBAA+BhxF,OAEzDvlB,KAAK4vG,UACE5vG,KAAK0mM,+BAInB,CAKD/tD,mBAAmBnlI,EAAM+iG,GACrB,GAAoB,iBAAT/iG,EACP,MAAM,IAAIkI,UAAW,QAAOlI,uBAKhC,MAAM60L,EAAeroM,KAAKymM,aAAatiL,IAAI3Q,GAEvC60L,GAAgBA,IAAiB9xF,GACjCv2G,KAAK6nM,wBAAyB,QAAOr0L,kCAAqC60L,QAAmB9xF,KAGjGv2G,KAAKymM,aAAa3/J,IAAItzB,EAAM+iG,EAC/B,CAKDg1D,kBAAkBh1D,EAAY1C,GAK1B,OAJK7zG,KAAKumM,kBAAkBhwF,KACxBv2G,KAAKumM,kBAAkBhwF,GAAc,CAAC,GAGtCv2G,KAAKumM,kBAAkBhwF,GAAY1C,YAAcA,IAEjD7zG,KAAKumM,kBAAkBhwF,GAAY1C,UAAYA,IAAcprB,GAAU,UAAVA,YAAmB3hF,EAAY+sG,EAErF7zG,KAAK0mM,gCAInB,CAKDl7B,wBAAwBp/J,GACpB,MAAMsH,EAAQzI,MAAM6Q,KAAK9b,KAAKsmM,YACzBv1L,QAAOm+C,GAASA,EAAM,KAAO9iD,IAC7BqF,KAAIy9C,GAASA,EAAM,KAEnBx7C,SAAAA,EAAOpP,QAIZtE,KAAK8+I,iBAAiBprI,EACzB,4BC3WL,MAAM3I,IAASkC,EAAAA,EAAAA,iCAgBf,SAASq7L,GAAkBltI,GACvB,MAAqB,iBAAVA,EACA37D,OAAOiW,OAAOyzH,IAAe10H,MAAK5M,GAASA,IAAUuzD,EAAMvpC,gBAG/D,IACV,CAwCc,SAAS02K,GAAgBxhM,GAAS,UAC7C,IAAKA,EAAQuG,MAAQvG,EAAQuG,KAAKukB,gBAAkB9qB,EAAQuG,KAAKkE,WAAY,CACzE,MAAM45G,EACA,8GAIN,MADArgH,GAAOpH,MAAMynH,GACP,IAAI7oH,MAAM6oH,EACnB,CAID,GAHAprH,KAAK4e,WAAa7X,EAAQ6X,WAC1B5e,KAAKqrG,KAAL,UAAYrrG,KAAK4e,kBAAjB,aAAY,EAAiBysF,KAEzBrrG,KAAKqrG,KAAK+1B,cAAcr6H,EAAQuG,KAAMvG,EAAQwrH,cAAe,CAC7D,MAAMnH,EAAS,4DAKf,aAHOprH,KAAK4e,kBACL5e,KAAKqrG,KACZtgG,GAAOpH,MAAMynH,GACP,IAAI7oH,MAAM6oH,EACnB,CACDprH,KAAKsiG,aAAe,IAAI/9D,MACxBvkC,KAAK+G,QAAUA,EACf/G,KAAKwoM,aAAe,IAAIn5F,GAA4BrvG,MAMpDA,KAAKmxH,aAAe,IAAI/iE,IAOxBpuD,KAAKyyI,gBAAkB,IAAI4zD,GAE3BrmM,KAAKs9G,MAAMv2G,GACX/G,KAAKyoM,mBAAqB,IAAI1E,GAAmB/jM,MAMjDA,KAAKwvG,iBAAmB,KACxBxvG,KAAKwzG,oBAAsB,KAC3BxzG,KAAK0oM,YAAc,KACnB1oM,KAAK2oM,sBAAuB,EAC5B3oM,KAAKqyG,aAAc,EACnBryG,KAAKgzG,iBAAkB,EACvBhzG,KAAKizG,iBAAkB,EACvBjzG,KAAKmzG,iBAAmB,CACpBxL,OAAO,EACPtX,OAAO,GAEXrwF,KAAK2wG,gBAAiB,EAGtB3wG,KAAKywG,kBAAoB,KAEzBzwG,KAAK8wG,qBAAsB,EAG3B9wG,KAAK4wG,uBAAyB,KAM9B5wG,KAAK4oM,YAAa,EAGlB5oM,KAAKy6F,WAAa,CAAC,EAOnBz6F,KAAKopL,kBACC,IAAIF,GAAkBlpL,KAAMA,KAAKsiG,aAAcv7F,GAMrD/G,KAAKo6L,oBACC,IAAIsB,GAAoB17L,KAAM+G,EAAQyH,OAAOq6L,cAAgB,IAM9D9hM,EAAQyH,OAAOu9F,qBAChB/rG,KAAK8oM,4BAA8B,IAAI3P,GAA2Bn5L,OAMtEA,KAAKgxG,4BAA6B,EAKlChxG,KAAK+oM,sBAAwB,IAAIvK,GAAsBx+L,MAUvDA,KAAKgpM,qBAAuB,KAE5B,MAAMrnJ,EACA9sC,SAAS9N,EAAQyH,OAAOk7F,KAAO3iG,EAAQyH,OAAOk7F,IAAIu/F,eAAgB,IAOxEjpM,KAAKipM,eAAiB3kK,MAAMqd,GAAS,EAAIA,EACzC52C,GAAOsM,KAAM,mBAAkBrX,KAAKipM,kBAQpCjpM,KAAKkpM,4BAA6B,EAQlClpM,KAAK0pG,KAAM,EAMX1pG,KAAKuvG,iBAAmB,KAExBvvG,KAAKmpM,kBAAoB,IAAItD,GAAW7lM,KAAK6vG,MAC7C7vG,KAAKopM,iBAAmB,IAAIC,GAAiBrpM,KAAK6vG,MAQlD7vG,KAAKspM,uCAAoCxiM,EAKrC9G,KAAKupM,oBACLx+L,GAAOsM,KAAK,sCAEZrX,KAAKwpM,eAAiB,IAAI9jF,GAAc1lH,OAGxCynG,GAAAA,2BACA18F,GAAOsM,KAAK,qBAEZrX,KAAKypM,iBAAmB,IAAIhW,GAAgBzzL,OAQhDA,KAAK0pM,8BAA2B5iM,EAOhC9G,KAAK2pM,8BAA2B7iM,EAEhC9G,KAAK4pM,mBAAqBppK,GAAQm1D,qBAAqB,OAA7B,oBAClB31F,KAAK+G,QAAQyH,OAAOu3G,eADF,aAClB,EAA6B8jF,wBADX,SAE7B,CCtTc,SAASC,GAAgBC,EAAO1kD,EAAOt+I,GAClD/G,KAAK+pM,MAAQA,EACb/pM,KAAKqlJ,MAAQA,EACbrlJ,KAAK+G,QAAUA,EACf/G,KAAKqrG,KAAO,IAAI+5C,GAAKr+I,EAASs+I,GAG9BrlJ,KAAKklB,iBAAiBuzF,IAClB,CAACuxF,EAAS9gM,EAAKunB,EAAa4hE,KACxB+Y,GAAW8D,oBACPhd,GAA4B83G,EAAS9gM,EAAKmpF,GAD9C,IAKRryF,KAAKklB,iBAAiBuzF,IAClBvvG,IAMQA,GACAkiG,GAAWgE,cACP66F,GACA,CAAEnmL,QAAS5a,IAEnBkiG,GAAWwD,QACP3nG,KAAK8B,UACD,CACIqD,GAAI69L,GACJ/gM,QAJZ,GAOX,CChDM,IAAKghM,GFwUZ3B,GAAgB/lM,UAAU5C,YAAc2oM,GAcxCA,GAAgB4B,gBAAkB,SAAS/9H,EAAKg+H,GAC5C,IAAI7hD,EAKG,MAHH6hD,EAEA7hD,EAAchkJ,KAAAA,gBAA2B,GAAGstB,eAK5C02H,EAAW,UAAGhhF,GAAAA,QAAAA,eAAuB6E,UAA1B,aAAG,EAA6BxgE,OAAO,EAAG,GAChDimB,cAMA02H,GAFM,eAEa53I,KAAK43I,KACzBA,EAAchkJ,KAAAA,gBAA2B,GAAGstB,gBAIpD,OAAO02H,CACV,EAODggD,GAAgB/lM,UAAU86G,MAAQ,WAAuB,0BAAdv2G,EAAc,uDAAJ,CAAC,EAClD/G,KAAKwoM,aAAaz0F,qBAElB,MAAM,OAAEvlG,GAAWxO,KAAK+G,QAGlB6uI,EAAgB,CAClB8M,IAAK,CACD8H,gBAAiBhqH,GAAQw2D,kBAAR,UAA4BxoF,EAAOsnI,oBAAnC,OAA4B,EAAqBu0D,2BAC5D77L,EAAOsnI,aAAau0D,2BADT,UAEX77L,EAAOsnI,oBAFI,aAEX,EAAqBuU,qBAC3BE,cAAe+9C,GAAiB,UAAC95L,EAAOsnI,oBAAR,aAAC,EAAqByU,eACtDtU,eAAgBqyD,GAAiB,UAAC95L,EAAOsnI,oBAAR,aAAC,EAAqBG,iBAE3DvsC,IAAK,CACD8gD,gBAAiBhqH,GAAQw2D,kBAAR,UAA4BxoF,EAAOk7F,WAAnC,OAA4B,EAAY2gG,2BACnD77L,EAAOk7F,IAAI2gG,2BADA,UAEX77L,EAAOk7F,WAFI,aAEX,EAAY2gD,qBAClBE,cAAe+9C,GAAiB,UAAC95L,EAAOk7F,WAAR,aAAC,EAAY6gD,eAC7CtU,eAAgBqyD,GAAiB,UAAC95L,EAAOk7F,WAAR,aAAC,EAAYusC,kBA8GtD,GA1GAj2I,KAAKsqM,eAAiB,IAAIlgD,GAAepqJ,KAAM41I,GAC/C51I,KAAKuqM,gBAAkB/7L,EAAOg8L,aAAeh8L,EAAOg8L,aAAe31E,GAASV,kBAC5En0H,KAAK6vG,KAAO7vG,KAAKqrG,KAAKmnB,WAClBxyH,KAAK+G,QAAQuG,KAAM,IACZkB,EACHyrH,QAASj6H,KAAKuqM,iBAElBhC,GAAgB4B,iBAGpBnqM,KAAKyyI,gBAAgBy1D,YAAYloM,KAAK6vG,MACtC7vG,KAAKyyI,gBAAgB1tG,GACjBqlI,GAAgBI,gBAChB,CAACj0D,EAAYkpB,EAAYl6G,EAAOsuF,KAC5B,MAAM3D,EAAclwG,KAAKmxH,aAAahtG,IAAIs7G,GACpC3sC,EAAY83E,GAA2Br0D,GAEzCrG,IACAA,EAAYoG,YAAYxjB,EAAWvtE,EAAOgxF,EAAY1C,GACtD7zG,KAAKsiG,aAAahgG,KAAK8nF,GAAkD8lB,GAC5E,IAITlwG,KAAKyqM,4BACCzqM,KAAKyqM,4BAA4B5nM,KAAK7C,MAC5CA,KAAK6vG,KAAKxtG,YACNumF,GAAW,WAAXA,uBAAmC5oF,KAAKyqM,6BAE5CzqM,KAAK0qM,yBAA2B1qM,KAAK0qM,yBAAyB7nM,KAAK7C,MACnEA,KAAK6vG,KAAKxtG,YACNumF,GAAW,WAAXA,oBAAgC5oF,KAAK0qM,0BAEzC1qM,KAAK2qM,4BACC3qM,KAAK2qM,4BAA4B9nM,KAAK7C,MAC5CA,KAAK6vG,KAAKxtG,YACNumF,GAAW,WAAXA,uBAAmC5oF,KAAK2qM,6BAE5C3qM,KAAK4qM,kBAAoB5qM,KAAK4qM,kBAAkB/nM,KAAK7C,MACrDA,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,8BAClB5oF,KAAK4qM,mBAET5qM,KAAK6qM,kCAAoC7qM,KAAK6qM,kCAAkChoM,KAAK7C,MACrFA,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,eAA2B5oF,KAAK6qM,mCAEtD7qM,KAAK8qM,2BAA6B9qM,KAAK8qM,2BAA2BjoM,KAAK7C,MACvEA,KAAK+qM,oBAAsB/qM,KAAK+qM,oBAAoBloM,KAAK7C,MACzDA,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,eAA2B5oF,KAAK+qM,qBACtD/qM,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,WAAuB5oF,KAAK+qM,qBAClD/qM,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,iBAA6B5oF,KAAK8qM,4BACxD9qM,KAAK6vG,KAAKxtG,YAAYumF,GAAW,WAAXA,cAA0B5oF,KAAK+qM,qBAErD,UAAIv8L,EAAOijL,eAAX,OAAI,EAAgBtkK,UAChBntB,KAAKyxL,QAAU,IAAImB,GACf5yL,KACAwO,GACA,CAACsV,EAASjI,KACN,IACI7b,KAAKojH,YAAYt/F,EAASjI,GAAI,EACjC,CAAC,MAAOlY,GACLoH,GAAOuY,KAAK,+CAAgD3f,GAASA,EAAMuF,IAC9E,MAIRlJ,KAAKgwG,MACNhwG,KAAKgwG,IAAM,IAAIguE,GAAIh+K,KAAM+G,GACzB/G,KAAKwoM,aAAap1F,oBAClBpzG,KAAKgrM,sBAAsBhrM,KAAKgwG,MAGpChwG,KAAKirM,uBAAyB,IAAItW,GAAuB30L,KAAMA,KAAKgwG,KACpEhwG,KAAKkrM,oBAAsB,IAAI7V,GAAoBr1L,KAAMA,KAAKgwG,KAEzDhwG,KAAKkuG,aACNluG,KAAKkuG,WAAa,IAAI9C,GAAWprG,KAAKqrG,KAAM,CACxC7N,UAAWx9F,KAAKuqM,gBAChBzwG,SAAUtrF,EAAO28L,sBAAwB38L,EAAO28L,sBAAwBnrM,KAAK+yG,WAC7E7W,OAAQ1tF,EAAO0tF,QAAW,GAAEl8F,KAAK4e,WAAW7X,QAAQouH,MAAMlwD,UAAUjlE,KAAK+G,QAAQuG,OACjFwwF,OAAQtvF,EAAOsvF,OACf2N,gBAAiBj9F,EAAO48L,yBACxB3tG,YAAajvF,EAAOivF,YACpBC,gBAAiBlvF,EAAOkvF,gBACxB8N,iCAAkCh9F,EAAOg9F,iCACzCzpG,SAAU/B,KAAK+G,QAAQuG,KACvBswF,gBAAiBpvF,EAAOovF,gBACxBD,aAAcnvF,EAAO68L,wBAEzBjgG,GAAW/R,UAAUc,uBAAuB,CACxC,eAAkBn6F,KAAKuqM,kBAIvB/7L,EAAOy9F,wBACPjsG,KAAKkuG,WAAWb,qBAAqBrtG,OAI7CA,KAAKwoM,aAAa74F,yBAIlB3vG,KAAKwoM,aAAa3zF,2BAIdrmG,EAAO88L,sBAAwB9qK,GAAQ04D,uBAGvC,GAAI1qF,EAAO4gL,mBAAoB,CAC3BrkL,GAAOsM,KAAK,8DAEPrX,KAAKurM,iBACNvrM,KAAKurM,eAAiB,IAAIpc,GAAiBnvL,KAAMwO,EAAO4gL,qBAG5D,MAAMoc,EAAwB,IAAIta,GAElCsa,EAAsBzmK,GAAG6mJ,IAAsC,IAC3D5rL,KAAKsiG,aAAahgG,KAAK8nF,MAE3BpqF,KAAKurM,eAAe3b,uBAAuB4b,EAC9C,MACGzgM,GAAOuY,KAAK,0FAMpB,GAAI9U,EAAOi9L,yBAA2BjrK,GAAQ04D,uBAC1C,GAAI1qF,EAAO4gL,mBAAoB,CACtBpvL,KAAKurM,iBACNvrM,KAAKurM,eAAiB,IAAIpc,GAAiBnvL,KAAMwO,EAAO4gL,qBAG5D,MAAMsc,EAAoB,IAAIrb,GAE9Bqb,EAAkB3mK,GAAG6mJ,IAAkC,IACnD5rL,KAAKsiG,aAAahgG,KAAK8nF,MAE3BpqF,KAAKurM,eAAe3b,uBAAuB8b,EAC9C,MACG3gM,GAAOuY,KAAK,0FAKhB9U,EAAOm9L,yBAA2Bn9L,EAAOu9F,oBAAsB3L,GAAoBW,0BACnF/gG,KAAK4rM,wBAA0B,IAAI1f,GAAuBlsL,MAC1DA,KAAK4rM,wBAAwB7mK,GAAG6mJ,IAAgC,KAC5D5rL,KAAKsiG,aAAahgG,KAAK8nF,GAAvB,IAEJpqF,KAAK4rM,wBAAwB7mK,GAAG6mJ,IAA0CigB,IACtE7rM,KAAKsiG,aAAahgG,KAAK8nF,EAAgDyhH,EAAvE,KAIJ,iBAAkBr9L,GAClBxO,KAAK2oL,SAASn6K,EAAOysI,cAOzBj7I,KAAK8rM,aAAe,IAAI1Y,GAAqBpzL,MAG7CA,KAAK+rM,4BAA8B,IAAInf,GAA4B5sL,MAE/DwO,GAAUA,EAAOg3I,gBAAkBh3I,EAAOg3I,eAAewmD,YACzDhsM,KAAKu7G,4BACD,SAAU/sG,EAAOg3I,eAAewmD,YAIxChsM,KAAKu7G,4BAA4B,YAAav7G,KAAKsqM,eAAe1+C,uBAAuB,QAMrFp9I,GAAUA,EAAOy9L,uBAA0D,UAAjCz9L,EAAOy9L,uBACjDjsM,KAAKu7G,4BAA4B,yBAA0B/sG,EAAOy9L,sBAEzE,EAQD1D,GAAgB/lM,UAAUyQ,KAAO,SAASi+B,GAAsC,IAA5B4nF,EAA4B,wDACxE94H,KAAK6vG,MACL7vG,KAAK6vG,KAAK58F,KAAKi+B,EAAU4nF,GAAoBn+G,MAAK,IAAM3a,KAAKksM,sBAEpE,EAUD3D,GAAgB/lM,UAAUknJ,2BAA6B,SAAS3iJ,GAC5D,OAAO2iJ,GAA2BjiJ,KAAKzH,KAAM,IACtC+G,EACHshJ,iBAAkBkgD,GAAgB4B,iBAEzC,EAKD5B,GAAgB/lM,UAAU2pM,SAAW,WACjC,OAAOnsM,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKwiB,MACjC,EAMDk2E,GAAgB/lM,UAAU4pM,aAAe,WACrC,OAAO/rL,QAAQrgB,KAAK+G,QAAQyH,OAAOk7F,KAAO1pG,KAAK+G,QAAQyH,OAAOk7F,IAAIv8E,eAGxB,IAA5BntB,KAAK+G,QAAQyH,OAAOk7F,GACrC,EAOD6+F,GAAgB/lM,UAAU6pM,qBAAuB,WAC7C,OAAOhsL,QAAQrgB,KAAK+G,QAAQyH,OAAOu3G,SAC5B/lH,KAAK+G,QAAQyH,OAAOu3G,QAAQumF,YACtC,EAOD/D,GAAgB/lM,UAAU2vH,MAAQjtH,eAAe3B,GAyC7C,GAxCIvD,KAAKo6L,sBACLp6L,KAAKo6L,oBAAoBhgG,UACzBp6F,KAAKo6L,oBAAsB,MAG3Bp6L,KAAK8oM,8BACL9oM,KAAK8oM,4BAA4B1uG,UACjCp6F,KAAK8oM,4BAA8B,MAGnC9oM,KAAKyxL,UACLzxL,KAAKyxL,QAAQtnL,OACbnK,KAAKyxL,QAAU,MAGnBzxL,KAAK6qG,iBAAiBznG,SAAQkiB,GAAStlB,KAAKusM,oBAAoBjnL,KAEhEtlB,KAAKgwG,IAAIC,qBAETjwG,KAAKwsM,oCAEDxsM,KAAKkuG,YACLluG,KAAKkuG,WAAW9T,UAGpBp6F,KAAKysM,mBAAqBzsM,KAAKysM,kBAAkBl3I,SAEjDv1D,KAAK0sM,uBAGD1sM,KAAKwvG,mBACLxvG,KAAKwvG,iBAAiBvwF,QACtBjf,KAAKwvG,iBAAmB,MAExBxvG,KAAKuvG,mBACLvvG,KAAKuvG,iBAAiBtwF,QACtBjf,KAAKuvG,iBAAmB,OAIvBvvG,KAAK6vG,KACN,MAAM,IAAIttG,MAAM,wCAGpB,MAAMstG,EAAO7vG,KAAK6vG,KA6BlB,IAAI88F,EA1BJ98F,EAAKlrE,eACDikD,GAAW,WAAXA,uBACA5oF,KAAKyqM,6BACT56F,EAAKlrE,eACDikD,GAAW,WAAXA,oBACA5oF,KAAK0qM,0BACT76F,EAAKlrE,eACDikD,GAAW,WAAXA,uBACA5oF,KAAK2qM,6BAET96F,EAAKlrE,eACDikD,GAAW,WAAXA,8BACA5oF,KAAK4qM,mBAET/6F,EAAKlrE,eAAeikD,GAAW,WAAXA,eAA2B5oF,KAAK6qM,mCACpDh7F,EAAKlrE,eAAeikD,GAAW,WAAXA,eAA2B5oF,KAAK+qM,qBACpDl7F,EAAKlrE,eAAeikD,GAAW,WAAXA,WAAuB5oF,KAAK+qM,qBAChDl7F,EAAKlrE,eAAeikD,GAAW,WAAXA,iBAA6B5oF,KAAK8qM,4BACtDj7F,EAAKlrE,eAAeikD,GAAW,WAAXA,cAA0B5oF,KAAK+qM,qBAEnD/qM,KAAKwoM,aAAa10F,sBAElB9zG,KAAKyyI,gBAAgBy1D,YAAY,MAEjCloM,KAAK6vG,KAAO,KAIZ,UACUA,EAAKsiB,MAAM5uH,EACpB,CAAC,MAAOsgB,GACL8oL,EAAa9oL,EAKb7jB,KAAK20G,kBAAkBvxG,SACnB8sG,GAAelwG,KAAK4xG,aAAa1B,EAAY0E,WACpD,CAMD,GAJI50G,KAAKgwG,KACLhwG,KAAKgwG,IAAIk3E,UAGTylB,EACA,MAAMA,CAEb,EAODpE,GAAgB/lM,UAAUoqM,yBAA2B,WACjD,OAAOvsL,QAAQrgB,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKxE,KAAK41B,8BAC9C,EAKDsnE,GAAgB/lM,UAAUk3B,IAAM,WAC5B,GAAK15B,KAAK4sM,2BAAV,CAKA,IAAK5sM,KAAK6vG,KACN,MAAM,IAAIttG,MAAM,wCAGpBvC,KAAK6vG,KAAKn2E,KALT,MAHG3uB,GAAOuY,KAAK,2CASnB,EAODilL,GAAgB/lM,UAAUozL,sBAAwB,WAC9C,OAAO51L,KAAKizK,cAAgBjzK,KAAKuvG,iBAAmBvvG,KAAKwvG,gBAC5D,EAOD+4F,GAAgB/lM,UAAUmxG,iBAAmB,WACzC,MAAM6uC,EAAW,GAKjB,OAHAxiJ,KAAKwvG,kBAAoBgzC,EAAS5gJ,KAAK5B,KAAKwvG,kBAC5CxvG,KAAKuvG,kBAAoBizC,EAAS5gJ,KAAK5B,KAAKuvG,kBAErCizC,CACV,EAQD+lD,GAAgB/lM,UAAUwoM,sBAAwB,SAASh7F,GACvDA,EAAI3tG,YAAYskF,GAAAA,QAAAA,mBAA6B,KACzC,IAAK,MAAM+xF,KAAc14K,KAAKgwG,IAAI2L,YAC9B+8D,EAAW9wE,gBAAkB5nG,KAAK6mK,4BAA4B6R,EACjE,GAER,EAUD6vB,GAAgB/lM,UAAUqkK,4BAA8B,SAASgmC,GAC7D,IAAIh5F,GAAag5F,GAAcA,EAAWp9F,UAAYq9F,KAAAA,KAAuBD,EAAWhpC,eAEpFhwD,IAAci5F,KAAAA,SAA2B9sM,KAAK+sM,yBxFtyBjB,IwFuyB7Bl5F,EAAYi5F,KAAAA,kBAGhBD,GAAc7sM,KAAKgwG,IAAI23E,oBAAoBklB,EAAW9wD,gBAAiBloC,EAC1E,EAKD00F,GAAgB/lM,UAAUwyF,QAAU,WAChC,OAAOh1F,KAAK+G,QAAQuG,KAAKkE,UAC5B,EAKD+2L,GAAgB/lM,UAAU+jJ,cAAgB,WACtC,OAAOvmJ,KAAK4e,UACf,EAKD2pL,GAAgB/lM,UAAUwqM,cAAgB,WACtC,OAAOhtM,KAAKqyG,WACf,EAKDk2F,GAAgB/lM,UAAUyqM,WAAa,WACnC,OAAO5sL,QAAQrgB,KAAKsyG,aACvB,EAKDi2F,GAAgB/lM,UAAU0qM,aAAe,WACrC,OAAOltM,KAAKsyG,YACf,EAKDi2F,GAAgB/lM,UAAUkzH,sBAAwB,WAC9C,OAAO11H,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKwpB,UAAU3D,uBAC3C,EAQD6yE,GAAgB/lM,UAAU2qM,mBAAqB,SAASC,GACpD,OAAO,IAAIhzL,SAAQ,CAACC,EAASC,KACpBta,KAAK01H,wBAKN03E,EACAptM,KAAK6vG,KAAKwpB,UAAUpB,iBAAiB59G,EAASC,GAE9Cta,KAAK6vG,KAAKwpB,UAAU5B,YAAYp9G,EAASC,GAPzCA,GAQH,GAER,EAODiuL,GAAgB/lM,UAAUqoG,eAAiB,SAAS/X,GAChD,IAAI5lE,EAAS,GAMb,OAJIltB,KAAKgwG,MACL9iF,EAASltB,KAAKgwG,IAAInF,eAAe/X,IAG9B5lE,CACV,EAMDq7K,GAAgB/lM,UAAU4lL,mBAAqB,WAC3C,OAAOpoL,KAAKgwG,IAAMhwG,KAAKgwG,IAAIo4E,qBAAuB,IACrD,EAMDmgB,GAAgB/lM,UAAUw5I,mBAAqB,WAC3C,OAAOh8I,KAAKgwG,IAAMhwG,KAAKgwG,IAAIgsC,qBAAuB,IACrD,EAMDusD,GAAgB/lM,UAAUs5I,oBAAsB,WAC5C,OAAO97I,KAAKgwG,IAAMhwG,KAAKgwG,IAAI8rC,sBAAwB,IACtD,EAMDysD,GAAgB/lM,UAAU6qM,oBAAsB,WAC5C,MAAO,CACHC,eAAgBttM,KAAKkuG,WAAWxL,oBAEvC,EAWD6lG,GAAgB/lM,UAAUuiC,GAAK,SAASwoK,EAASlqM,GACzCrD,KAAKsiG,cACLtiG,KAAKsiG,aAAav9D,GAAGwoK,EAASlqM,EAErC,EAUDklM,GAAgB/lM,UAAUolC,IAAM,SAAS2lK,EAASlqM,GAC1CrD,KAAKsiG,cACLtiG,KAAKsiG,aAAa39D,eAAe4oK,EAASlqM,EAEjD,EAGDklM,GAAgB/lM,UAAU0iB,iBAAmBqjL,GAAgB/lM,UAAUuiC,GACvEwjK,GAAgB/lM,UAAUqkC,oBAAsB0hK,GAAgB/lM,UAAUolC,IAQ1E2gK,GAAgB/lM,UAAUwhM,mBAAqB,SAASwJ,EAASnqM,GACzDrD,KAAK6vG,MACL7vG,KAAK6vG,KAAKiD,oBAAoB06F,EAASnqM,EAE9C,EAODklM,GAAgB/lM,UAAUirM,sBAAwB,SAASD,EAASnqM,GAC5DrD,KAAK6vG,MACL7vG,KAAK6vG,KAAKsvB,uBAAuBquE,EAASnqM,EAEjD,EAQDklM,GAAgB/lM,UAAUkrM,gBAAkB,SAAS5pL,GAA+B,IAAtBm5G,EAAsB,uDAAR,OACpEj9H,KAAK6vG,MACL7vG,KAAK6vG,KAAKuT,YAAYt/F,EAASm5G,EAEtC,EASDsrE,GAAgB/lM,UAAUmrM,uBAAyB,SAASvhM,EAAI0X,GAA+B,IAAtBm5G,EAAsB,uDAAR,OAC/Ej9H,KAAK6vG,MACL7vG,KAAK6vG,KAAKkiB,mBAAmB3lH,EAAI0X,EAASm5G,EAEjD,EAODsrE,GAAgB/lM,UAAUorM,YAAc,SAAStgM,EAAMoI,GAC/C1V,KAAK6vG,KACL7vG,KAAK6vG,KAAKsX,uBAAuB75G,EAAMoI,IAAW1V,KAAK6vG,KAAKr8B,eAE5DzoE,GAAOuY,KAAK,+CAEnB,EAODilL,GAAgB/lM,UAAUqrM,gBAAkB,SAASvgM,EAAMoI,GACvD1V,KAAK4tM,YAAYtgM,EAAMoI,GACvB1V,KAAK8tM,cAAcxgM,EACtB,EAMDi7L,GAAgB/lM,UAAUsrM,cAAgB,SAASxgM,GAC3CtN,KAAK6vG,MACL7vG,KAAK6vG,KAAKqX,mBAAmB55G,EAEpC,EAMDi7L,GAAgB/lM,UAAUtC,eAAiB,SAASoN,GAChD,GAAItN,KAAK6vG,KAAM,CACX,MAAMk+F,EAAU,OAEZzgM,EACAtN,KAAK6vG,KAAKsX,uBAAuB4mF,EAAS,CACtCngK,WAAY,CAAEy/B,MAAO,mCACrBxlE,MAAOyF,KACLtN,KAAK6vG,KAAKr8B,eACTxzE,KAAK6vG,KAAKqvB,gBAAgB6uE,KACjC/tM,KAAK6vG,KAAKqX,mBAAmB6mF,GAC7B/tM,KAAK6vG,KAAKr8B,eAEjB,CACJ,EAMD+0H,GAAgB/lM,UAAU06H,WAAa,SAASpN,GACxC9vH,KAAK6vG,MAAQ7vG,KAAK+xG,cAClB/xG,KAAK6vG,KAAKqtB,WAAWpN,GAErB/kH,GAAOuY,KAAM,0BAAyBtjB,KAAK6vG,KAAO,GAAK,oBACnD7vG,KAAK+xG,cAAgB,GAAK,mCAErC,EAMDw2F,GAAgB/lM,UAAUwrM,eAAiB,WACvC,QAAyBlnM,IAArB9G,KAAK+iM,YAA2B,CAChC/iM,KAAK+iM,YAAc,IAAIN,GAGvB,MAAMwL,EAAmBjuM,KAAK6qG,eAAenH,GAAU8M,OAEvD,IAAK,MAAM63E,KAAc4lB,EACrBjuM,KAAK+iM,YAAYxpD,SAAS8uC,GAI9B,MAAMO,EAAoB5oL,KAAKgwG,IAAI0sC,gBAAgBh5C,GAAU8M,OAE7D,IAAK,MAAMstE,KAAe8K,EACtB5oL,KAAK+iM,YAAYxpD,SAASukC,EAEjC,CAED,OAAO99K,KAAK+iM,WACf,EAODwF,GAAgB/lM,UAAU0rM,uBAAyB,WAC/C,OAAOluM,KAAK6vG,KAAKkqB,mBACpB,EASDwuE,GAAgB/lM,UAAU+2I,SAAW,SAASj0H,GAC1C,IAAKA,EACD,MAAM,IAAI/iB,MAAM,kCAGpB,MAAMuwF,EAAYxtE,EAAMoqF,UAClBiM,EAAc37G,KAAKgwG,IAAInF,eAAe/X,GAG5C,GAAI6oB,EAAYr3G,OAAS,EAAG,CAExB,GAAIghB,IAAUq2F,EAAY,GACtB,OAAOvhG,QAAQC,QAAQiL,GAK3B,GAAImiF,GAAAA,mCACG3U,IAAc4Q,GAAUgH,QACvBiR,EAAYlnG,MAAKzI,GAAKA,EAAE63J,iBAAmBv+I,EAAMu+I,iBAAiB,OACtE,MAAMttD,EAAam0D,GACf1qK,KAAK+yG,WACLjgB,EAFyC,UAGzC9yF,KAAK6qG,eAAe/X,UAHqB,aAGzC,EAAgCxuF,QAEpCghB,EAAMo4H,cAAcnnC,GACpB,MAAM43F,EAAmB,GAKzB,OAHAnuM,KAAKuvG,kBAAoB4+F,EAAiBvsM,KAAK5B,KAAKuvG,iBAAiB+pC,UAAU,CAAEh0H,KACjFtlB,KAAKwvG,kBAAoB2+F,EAAiBvsM,KAAK5B,KAAKwvG,iBAAiB8pC,UAAU,CAAEh0H,KAE1ElL,QAAQ0c,IAAIq3K,GACdxzL,MAAK,KACF3a,KAAKouM,eAAe9oL,GACpBtlB,KAAK6mK,4BAA4BvhJ,GACjCtlB,KAAK+qM,oBAAoB/qM,KAAK41L,0BAE1B51L,KAAK2wG,gBAAkB3wG,KAAK8wG,sBAC5B9wG,KAAKquM,qBAAqB/oL,EAC7B,GAEZ,CAED,OAAOlL,QAAQE,OAAO,IAAI/X,MAAO,qBAAoBuwF,6BACxD,CAED,OAAO9yF,KAAKknB,aAAa,KAAM5B,GAC1B3K,MAAK,KAIE2K,EAAMu+I,iBAAmBp7E,GAAU,UAAVA,SAAqBgf,GAAAA,mCAC9CznG,KAAK+qM,oBAAoB/qM,KAAK41L,wBACjC,GAEZ,EAOD2S,GAAgB/lM,UAAU8rM,2BAA6B,SAAS/tG,EAAYhC,GACxE,MAAMgwG,EAAYvuM,KAAKwqL,0BAOlBjsF,GAAOgwG,IAAchwG,GACtBv+F,KAAKsiG,aAAahgG,KACd8nF,GACApqF,KAAK+yG,WAAYxS,EAE5B,EAMDgoG,GAAgB/lM,UAAU6rM,qBAAuB,SAAS/oL,GActD,IAAIovF,EAEJ,GAdI10G,KAAK2wG,gBAAkBrrF,EAAMgiF,iBAAmBhiF,EAAMmqF,WACtDzvG,KAAK2wG,gBAAiB,EAGtB3wG,KAAK6vG,KAAK8wB,gBAAgB3gI,KAAK6vG,KAAK8gB,WAAW,EAAOjtB,GAAU8M,QACzDxwG,KAAK8wG,qBAAuBxrF,EAAMsiF,iBAAmBtiF,EAAMmqF,YAClEzvG,KAAK8wG,qBAAsB,EAG3B9wG,KAAK6vG,KAAK8wB,gBAAgB3gI,KAAK6vG,KAAK8gB,WAAW,EAAOjtB,GAAUgH,QAKhE1qG,KAAKywG,mBAAqBnrF,EAAMgiF,eAAgB,CAChD,MAAMknG,EAAUjnI,GAAAA,QAAAA,mBAA2BvnE,KAAKywG,mBAEhDiE,EAAmB10G,KAAKmxH,aAAahtG,IAAIqqL,EAC5C,MAAM,GAAIxuM,KAAK4wG,wBAA0BtrF,EAAMsiF,eAAgB,CAC5D,MAAM4mG,EAAUjnI,GAAAA,QAAAA,mBAA2BvnE,KAAK4wG,wBAEhD8D,EAAmB10G,KAAKmxH,aAAahtG,IAAIqqL,EAC5C,CAMD,MAAM73G,EACAn2D,GAAQ+0D,gBAAkBjwE,EAAMuuF,YAAcprB,GAAU,UAAVA,QAAoBjoD,GAAQm2D,8BAE5ErxE,EAAMsiF,iBAAmBjR,GACzB32F,KAAK6mK,4BAA4BvhJ,GAGrCtlB,KAAKsiG,aAAahgG,KAAK8nF,GAA0C9kE,EAAOovF,EAC3E,EASD6zF,GAAgB/lM,UAAUisM,uBAAyB,WAK/C,OAAOzuM,KAAK6qG,iBACP95F,QAAOuU,IACJ,MAAMopL,EAAYppL,EAAMoqF,UAExB,QAAIg/F,IAAchrG,GAAU8M,QACdxwG,KAAK2uM,qBAAuB3uM,KAAKmzG,iBAAiBxL,SACrDnnE,GAAQq2D,kBACRr2D,GAAQ+0D,kBAERm5G,IAAchrG,GAAUgH,QAAU1qG,KAAK4uM,sBAAwB5uM,KAAKmzG,iBAAiB9iB,KAIhG,GAEX,EAMDk4G,GAAgB/lM,UAAU+pM,oBAAsB,SAASjnL,GACrDA,EAAMoiJ,cAAc,MACpB1nK,KAAKgwG,IAAIw4E,iBAAiBljK,GAC1BA,EAAMuhB,oBAAoB+nD,GAAqCtpE,EAAMupL,aACjEvpL,EAAMgiF,gBACNhiF,EAAMuhB,oBAAoB+nD,GAA4CtpE,EAAMwpL,mBAM5ExpL,EAAMsiF,gBAAkBtiF,EAAMuuF,YAAcprB,GAAU,UAAVA,SAC5CzoF,KAAKkuG,WAAWpO,wBAAuB,GAG3C9/F,KAAKsiG,aAAahgG,KAAK8nF,GAAqC9kE,EAC/D,EAQDijL,GAAgB/lM,UAAU4wJ,YAAc,SAAS9tI,GAC7C,OAAOtlB,KAAKknB,aAAa5B,EAAO,KACnC,EAWDijL,GAAgB/lM,UAAU0kB,aAAe,SAASy4H,EAAUC,GACxD,MAAMmvD,EAAepvD,aAAH,EAAGA,EAAUkkB,eACzB/wE,GAAY6sD,aAAA,EAAAA,EAAUjwC,aAAakwC,aAAvB,EAAuBA,EAAUlwC,WAC7Cg4F,EAAe9nD,aAAH,EAAGA,EAAUikB,eAE/B,GAAIp8D,GAAAA,mCAAkDk4C,GAAYC,GAAYmvD,IAAiBrH,EAC3F,MAAM,IAAInlM,MAAO,kCAAiCwsM,+BAA0CrH,oCAIhG,GAAI9nD,EAAU,OACV,MAAMrpC,EAAaopC,EACbA,EAAS5D,gBACT2uB,GACE1qK,KAAK+yG,WACLjgB,EAFwB,UAGxB9yF,KAAK6qG,eAAe/X,UAHI,aAGxB,EAAgCxuF,QAExCs7I,EAASlC,cAAcnnC,EAC1B,CACD,MAAMy4F,EAA8BhvM,QAAS2/I,aAAT,EAASA,EAAUryC,YAEvD,OAAI0hG,GAA+BrvD,EAAS5lD,UAGxC6lD,SAAAA,EAAU7lD,SAFH3/E,QAAQE,OAAO,IAAI21E,GAAgBb,MAM1CuwD,IAAaqvD,GACbjkM,GAAOuY,KAAM,0CAAyCq8H,wCAInD3/I,KAAKivM,gBAAgBD,EAA8BrvD,EAAW,KAAMC,GACtEjlI,MAAK,MACEq0L,GAAgCrvD,EAASlwC,WAAcmwC,GACvDD,EAASumB,iBAAgB,GAE7B8oC,GAA+BhvM,KAAKusM,oBAAoB5sD,GACxDC,GAAY5/I,KAAKouM,eAAexuD,IAG3BovD,SAA+BrvD,GAAAA,EAAU/3C,gBAAmBg4C,SAAAA,EAAUh4C,iBACvE5nG,KAAK6mK,4BAA4BjnB,GAErC5/I,KAAK+qM,oBAAoB/qM,KAAK41L,yBACb,OAAbh2C,IAAsB5/I,KAAK2wG,gBAAkB3wG,KAAK8wG,sBAClD9wG,KAAKquM,qBAAqBzuD,GAGvBxlI,QAAQC,aAElBuJ,OAAMjgB,IACHoH,GAAOpH,MAAO,wBAAuBA,aAAxB,EAAwBA,EAAO8H,SAErC2O,QAAQE,OAAO3W,MAEjC,EAcD4kM,GAAgB/lM,UAAUysM,gBAAkB,SAAStvD,EAAUC,GAC3D,MAAMsvD,EAAuB,GAc7B,OAZIlvM,KAAKwvG,iBACL0/F,EAAqBttM,KAAK5B,KAAKwvG,iBAAiBtoF,aAAay4H,EAAUC,IAEvE70I,GAAOsM,KAAK,0CAGZrX,KAAKuvG,iBACL2/F,EAAqBttM,KAAK5B,KAAKuvG,iBAAiBroF,aAAay4H,EAAUC,IAEvE70I,GAAOsM,KAAK,0CAGT+C,QAAQ0c,IAAIo4K,EACtB,EAUD3G,GAAgB/lM,UAAUsoM,2BAA6B,SAAS/6F,EAAepsG,EAAOmvF,GAClF,IAAKid,EACD,OAEJhlG,GAAOuY,KAAM,0BAAyBysF,cAA0BpsG,aAApD,EAAoDA,EAAOJ,qBAAqBI,aAAhF,EAAgFA,EAAOuF,QACnG,MAAMoc,EAAQtlB,KAAK6qG,eAAe/X,GAAW,GAE7C9yF,KAAKsiG,aAAahgG,KAAK8nF,GAA6C9kE,EACvE,EAMDijL,GAAgB/lM,UAAU4rM,eAAiB,SAASxuD,GAChD,MAAM9sD,EAAY8sD,EAASlwC,UAE3B,GAAIkwC,EAASt4C,gBAAmBs4C,EAASh4C,gBAAkBg4C,EAAS/rC,YAAcprB,GAAU,UAAVA,QAAoB,CAElG,MACM/zD,EADUspJ,GAAI/b,oCAEfxtJ,MAAKlP,GAAKA,EAAE8f,OAAU,GAAEu6H,EAAS8jB,WAAWr+I,aAAe9f,EAAE2V,QAAU0kI,EAAS8jB,WAAWxoJ,QAE5FwZ,GACA02E,GAAWoD,0BAA0BwvE,GAAI7b,4BAA4BztI,GAE5E,CAGD,IAAKkrH,EAAS7D,gBAAiB,OAC3B,MAAMxlC,EAAam0D,GACf1qK,KAAK+yG,WACLjgB,EAFyC,UAGzC9yF,KAAK6qG,eAAe/X,UAHqB,aAGzC,EAAgCxuF,QAEpCs7I,EAASlC,cAAcnnC,EAC1B,CAEDv2G,KAAKgwG,IAAIi4E,cAAcroC,GACvBA,EAAS8nB,cAAc1nK,MAGnBA,KAAKizK,eACLjzK,KAAKmvM,wCAITvvD,EAASivD,YAAc7uM,KAAKquM,qBAAqBxrM,KAAK7C,KAAM4/I,GAC5DA,EAAS16H,iBAAiB0pE,GAAqCgxD,EAASivD,aAEpEjvD,EAASt4C,iBACTs4C,EAASkvD,kBAAoB9uM,KAAKsuM,2BAA2BzrM,KAAK7C,MAClE4/I,EAAS16H,iBAAiB0pE,GAA4CgxD,EAASkvD,oBAGnF9uM,KAAKsiG,aAAahgG,KAAK8nF,GAAmCw1D,EAC7D,EAQD2oD,GAAgB/lM,UAAU4sM,iBAAmB,SAAS9pL,GAClD,IAAI+pL,GAAmB,EAMvB,OAJI/pL,IACA+pL,EAAmBrvM,KAAKyyI,gBAAgB84B,kBAAkBjmJ,EAAMy2H,gBAAiBz2H,EAAMuuF,YAGpFw7F,CACV,EAUD9G,GAAgB/lM,UAAU2jK,oBAAsB,SAASrzE,EAAW4lF,EAAYjpE,GAC5E,IAAI6/F,GAAkB,EAOtB,OALI52B,IACA42B,EAAkBtvM,KAAKyyI,gBAAgB64B,mBAAmBoN,EAAW38B,gBAAiBtsC,GACtF6/F,GAAmBvkM,GAAOkT,MAAO,iBAAgBy6J,sBAA+BjpE,MAG7E6/F,CACV,EAQD/G,GAAgB/lM,UAAUgjK,mBAAqB,SAASlgJ,GACpD,MAAMiqL,EAAc,GAcpB,OAZIvvM,KAAKwvG,iBACL+/F,EAAY3tM,KAAK5B,KAAKwvG,iBAAiB+wC,aAAaj7H,IAEpDva,GAAOkT,MAAM,6DAGbje,KAAKuvG,iBACLggG,EAAY3tM,KAAK5B,KAAKuvG,iBAAiBgxC,aAAaj7H,IAEpDva,GAAOkT,MAAM,6DAGV7D,QAAQikG,WAAWkxF,EAC7B,EASDhH,GAAgB/lM,UAAUyjK,wBAA0B,SAAS3gJ,GACzD,MAAMkqL,EAAiB,GAavB,OAXIxvM,KAAKwvG,iBACLggG,EAAe5tM,KAAK5B,KAAKwvG,iBAAiBixC,kBAAkBn7H,IAE5Dva,GAAOkT,MAAM,+DAEbje,KAAKuvG,iBACLigG,EAAe5tM,KAAK5B,KAAKuvG,iBAAiBkxC,kBAAkBn7H,IAE5Dva,GAAOkT,MAAM,+DAGV7D,QAAQikG,WAAWmxF,EAC7B,EAMDjH,GAAgB/lM,UAAU00G,QAAU,WAChC,OAAOl3G,KAAK6vG,KAAK/yC,IACpB,EASDyrI,GAAgB/lM,UAAUi1G,SAAW,WACjC,OAAKz3G,KAAK4e,WAIH2oD,GAAAA,QAAAA,iBAAyBvnE,KAAK4e,WAAWg2F,YACxC50G,KAAK+G,QAAQyH,OAAOyiH,aAJjB,IAKd,EAODs3E,GAAgB/lM,UAAUuvG,YAAc,WACpC,OAAO/xG,KAAK6vG,KAAO7vG,KAAK6vG,KAAKkC,cAAgB,IAChD,EAODw2F,GAAgB/lM,UAAUgxC,KAAO,SAAStC,GACtC,OAAKlxC,KAAK+xG,cAIH,IAAI33F,SAAQ,CAACC,EAASC,KACzBta,KAAK6vG,KAAK+uB,SACN1tF,GAAY,IACZ,IAAM72B,MACNwJ,GAAOvJ,EAAOuJ,KACd,IAAMvJ,EAAOuuE,IAJjB,IAJOzuE,QAAQE,OAAO,IAAI/X,MAAM,0BAUvC,EAMDgmM,GAAgB/lM,UAAUitM,OAAS,WAC/B,OAAOzvM,KAAKwzC,MACf,EAMD+0J,GAAgB/lM,UAAUoyK,SAAW,WACjC,OAAO50K,KAAKirM,uBAAuBr2B,UACtC,EAMD2zB,GAAgB/lM,UAAU0lL,oBAAsB,WAC5C,OAAOloL,KAAKgwG,IAAIk4E,qBACnB,EAUDqgB,GAAgB/lM,UAAUmmL,SAAW,SAASr7B,GAC1C,IAAKp9I,OAAOw/L,UAAUpiD,KAAWp9I,OAAO2E,SAASy4I,EAAO,IACpD,MAAM,IAAI/qJ,MAAO,4BAA2B+qJ,KAEhD,MAAM/6I,EAAIrC,OAAOo9I,GAEjB,GAAI/6I,GAAK,EACL,MAAM,IAAIw0B,WAAW,mCAKzB,GAHA/mC,KAAKirM,uBAAuBtiB,SAASp2K,GAGjCvS,KAAKuvG,iBAAkB,CACvB,MAAMogG,EAAsB,IAANp9L,EAEtBvS,KAAKuvG,iBACAoxC,0BAA0BgvD,GAC1B/rL,OAAMjgB,IACHoH,GAAOpH,MAAO,2CAA0CgsM,KAAkBhsM,EAA1E,GAEX,CACJ,EAKD4kM,GAAgB/lM,UAAUmyG,gBAAkB,WACxC,OAAO1pG,MAAM6Q,KAAK9b,KAAKmxH,aAAaz7G,SACvC,EAQD6yL,GAAgB/lM,UAAUqrJ,oBAAsB,WAA8B,IAArB+hD,EAAqB,wDACtEz+E,EAAenxH,KAAK20G,kBAOxB,OALKi7F,IACDz+E,EAAeA,EAAapgH,QAAOlD,IAAMA,EAAE4pG,cAIxC0Z,EAAa7sH,OAAS,CAChC,EAODikM,GAAgB/lM,UAAU2tG,mBAAqB,SAAS/jG,GACpD,OAAOpM,KAAKmxH,aAAahtG,IAAI/X,EAChC,EAMDm8L,GAAgB/lM,UAAUqtM,WAAa,SAASzjM,GAC5C,MAAM8jG,EAAclwG,KAAKmwG,mBAAmB/jG,GAEvC8jG,GAGLlwG,KAAK6vG,KAAK4uB,eAAevuB,EAAY2G,mBAAoB,QAC5D,EAOD0xF,GAAgB/lM,UAAUstM,YAAc,SAAS1jM,GAC7C,MAAM8jG,EAAclwG,KAAKmwG,mBAAmB/jG,GACtC2jM,EAAW/vM,KAAK+yG,aAAe3mG,EAC/B0wD,EAAO98D,KAAKgwM,gBAAkB,SAAW,OAE3CD,EACA/vM,KAAK6vG,KAAK4uB,eAAez+H,KAAK4e,WAAWg2F,SAAU93C,GAC5CozC,GACPlwG,KAAK6vG,KAAK4uB,eAAevuB,EAAY2G,mBAAoB/5C,EAEhE,EAODyrI,GAAgB/lM,UAAUytM,gBAAkB,SAAS7jM,EAAI7I,GACrD,MAAM2sG,EAAclwG,KAAKmwG,mBAAmB/jG,GAEvC8jG,GAGLlwG,KAAK6vG,KAAKwjB,KAAKnjB,EAAY0E,SAAUrxG,EACxC,EAODglM,GAAgB/lM,UAAUkqM,qBAAuB,WACzC1sM,KAAKkwM,0BACGlwM,KAAKwvG,kBAAoBxvG,KAAK6tJ,sBAAwB,KAC9DtuJ,OAAOoK,aAAa3J,KAAKkwM,yBACzBlwM,KAAKkwM,wBAA0B,KAEtC,EAOD3H,GAAgB/lM,UAAU0pM,mBAAqB,YAEtClsM,KAAKwvG,kBACCxvG,KAAK6tJ,uBAAyB,IAC7B7tJ,KAAKkwM,0BACblwM,KAAKkwM,wBAA0B3wM,OAAOqK,YAAW,KAC7C5J,KAAKkwM,wBAA0B,KAC/B9kG,GAAWgE,cAAczc,GACrBzB,GACA,CACIwY,KAAK,EACL7hG,MArpDM,MAipDd,GAjpDc,KAypDzB,EAMD0gM,GAAgB/lM,UAAUm+H,gBAAkB,SAASv0H,EAAI0mF,GACrD,MAAMq9G,EAAgBr9G,GAAwB4Q,GAAU8M,MAExD,GAAI2/F,IAAkBzsG,GAAU8M,OAAS2/F,IAAkBzsG,GAAUgH,MAGjE,YAFA3/F,GAAOpH,MAAO,2BAA0BwsM,KAK5C,MAAMjgG,EAAclwG,KAAKmwG,mBAAmB/jG,GAEvC8jG,GAGLlwG,KAAK6vG,KAAK8wB,gBAAgBzwB,EAAY0E,UAAU,EAAMu7F,EACzD,EAuBD5H,GAAgB/lM,UAAUkvG,eAAiB,SACnCtlC,EAAKsmC,EAAM51C,EAAM26C,EAAUtC,EAAS9/B,EAAQ+/B,EAAUyd,EAASu9E,EAASjhI,EAAU2sD,GAAsB,YAC5G,MAAM1vH,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAEtC,GAAW,UAAPhgE,GAAkBpM,KAAK+yG,aAAe3mG,EACtC,OAEJ,MAAM8jG,EAAc,IAAIgF,GAAiB9oC,EAAKpsE,KAAM0yG,EAAM+E,EAAUtC,EAAS9/B,EAAQ+/B,GAErFlF,EAAY4H,iBAAiBs4F,GAC7BlgG,EAAYoI,QAAQx7C,GACpBozC,EAAY0H,WAAWib,GACvB3iB,EAAYE,YAAYjhC,GACxB+gC,EAAYiI,eAAe2jB,GAG3B,MAAM++C,EAAe76K,KAAKizK,cAAL,oBACfjzK,KAAKuvG,wBADU,aACf,EAAuB9qF,eAAei4H,gBAAgBtwI,UADvC,QAC8C,GAD9C,oBAEfpM,KAAKwvG,wBAFU,aAEf,EAAuB/qF,eAAei4H,gBAAgBtwI,UAFvC,QAE8C,GAEnE,IAAK,MAAMkZ,KAASu1J,EAChB3qE,EAAY0F,QAAQh0G,KAAK0jB,GAG7BtlB,KAAKmxH,aAAarqF,IAAI16B,EAAI8jG,GAC1BlwG,KAAKsiG,aAAahgG,KACd8nF,GACAh+E,EACA8jG,GAEJlwG,KAAKqwM,gBAAgBngG,GAGjBlwG,KAAKmsM,YACLnsM,KAAKswM,uBAGTtwM,KAAKksM,oBACR,EAWD3D,GAAgB/lM,UAAUuuG,aAAe,WACrC/wG,KAAKswM,sBACR,EAQD/H,GAAgB/lM,UAAU6tM,gBAAkB,SAASngG,GACjDA,EAAY6G,cACPp8F,MAAKw0D,IACF+gC,EAAYyF,cAAgBxmC,EAASjrD,IAAI,0BACzClkB,KAAKuwM,oBAEDphI,EAASjrD,IAAIihI,KACbj1C,EAAY/uD,YAAY,mBAAmB,GAG3CguB,EAASjrD,IAAIi6F,KACbjO,EAAY/uD,YAAY,iBAAiB,EAC5C,IAEJv9B,OAAM,KAAM,GACpB,EAQD2kL,GAAgB/lM,UAAUmvG,wBAA0B,SAASvlC,EAAKymD,GAI9D,MACM29E,EADQxwM,KAAK20G,kBACUlgG,MAAK5G,GAAKA,EAAE+mG,WAAaxoC,IAEtD,GAAIokI,EAAgB,CAChBA,EAAe54F,WAAWib,GAC1B,MAAMzmH,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAEtCpsE,KAAKsiG,aAAahgG,KACd8nF,GACAh+E,EACAymH,EACP,CAMI29E,EAAe95F,cAChB12G,KAAKswM,sBAEZ,EAED/H,GAAgB/lM,UAAUovG,aAAe,SAASxlC,EAAK7oE,GACnD,MAAM6I,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAEtC,GAAW,UAAPhgE,GAAkBpM,KAAK+yG,aAAe3mG,EACtC,OAGJ,MAAMqkM,EAAgBzwM,KAAK2zG,mBAC3B,IAAI+8F,EAAoB,GAExB,IAAK,MAAM7/L,KAAW4/L,EAAe,CACjC,MAAM51B,EAAehqK,EAAQ4T,eAAei4H,gBAAgBtwI,GAE5DyuK,IAAiB61B,EAAoB,IAAKA,KAAsB71B,IAGhEhqK,EAAQ4hI,gBAAgB+4B,wBAAwBp/J,GAC3Cq7F,GAAAA,4BAED52F,EAAQmtI,2BAA2B5xI,EAE1C,CAEDskM,EAAkBttM,SAAQkiB,IAClBmiF,GAAAA,4BACAniF,EAAMo4H,cAAc,MACpBp4H,EAAMq4H,SAAS,OAGf39I,KAAKsiG,aAAahgG,KAAK8nF,GAAqC9kE,EAC/D,IAGL,MAAM4qF,EAAclwG,KAAKmxH,aAAahtG,IAAI/X,GAEtC8jG,IACAlwG,KAAKmxH,aAAa3xB,OAAOpzF,GACzBpM,KAAKsiG,aAAahgG,KAAK8nF,GAAiCh+E,EAAI8jG,EAAa3sG,IAG3D,OAAdvD,KAAK6vG,OACL7vG,KAAKswM,sBAAqB,GAC1BtwM,KAAK0sM,uBAEZ,EAgBDnE,GAAgB/lM,UAAUgvG,eAAiB,SACnC0hB,EACAs7E,EACAmC,EACAptM,EACAu4H,GAIJ,GAAI0yE,IAAYxuM,KAAK+yG,WACjB,OAGJ,MAAM2B,EAAmB10G,KAAKmxH,aAAahtG,IAAIqqL,GAE/C,GAAIt7E,EAMA,OALAlzH,KAAKsiG,aAAahgG,KACd8nF,GAA8BsqB,EAAkBnxG,EAAQu4H,QAE5D97H,KAAKmyH,QAAQ23B,SAAQ,IAAM9pJ,KAAKqrG,KAAKryF,eAKzC,MAAM43L,EAAoB5wM,KAAKmxH,aAAahtG,IAAIwsL,GAEhDC,EAAkB34F,cAAc6jB,GAEhC97H,KAAKsiG,aAAahgG,KACd8nF,GAA0CsqB,EAAkBk8F,EAAmBrtM,EACtF,EAMDglM,GAAgB/lM,UAAUsvG,mBAAqB,SAASh1C,GAEpD98D,KAAKsiG,aAAahgG,KACd8nF,GAAyCpqF,KAAK+yG,WAAYj2C,EACjE,EAEDyrI,GAAgB/lM,UAAU2vG,kBAAoB,SAAS/lC,EAAKtP,GACxD,MAAM1wD,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAChC8jC,EAAclwG,KAAKmwG,mBAAmB/jG,GAEvC8jG,IAGLA,EAAYoI,QAAQx7C,GACpB98D,KAAKsiG,aAAahgG,KAAK8nF,GAAyCh+E,EAAI0wD,GACvE,EAEDyrI,GAAgB/lM,UAAUqvG,qBAAuB,SAASzlC,EAAKtsE,GAC3D,MAAMsM,EAAKm7D,GAAAA,QAAAA,mBAA2B6E,GAChC8jC,EAAclwG,KAAKmwG,mBAAmB/jG,GAEvC8jG,GAIDA,EAAYwF,eAAiB51G,IAIjCowG,EAAYwF,aAAe51G,EAC3BE,KAAKsiG,aAAahgG,KACd8nF,GACAh+E,EACAtM,GACP,EAODyoM,GAAgB/lM,UAAU6wG,mBAAqB,SAAS/tF,GACpD,GAAIA,EAAMq5E,QAAU3+F,KAAKizK,cAGrB,YAFAloK,GAAOsM,KAAK,6DAGT,IAAKiO,EAAMq5E,OAAS3+F,KAAKizK,cAG5B,YAFAloK,GAAOsM,KAAK,yDAKhB,MAAMjL,EAAKkZ,EAAMkiF,mBACX0I,EAAclwG,KAAKmwG,mBAAmB/jG,GAGxC8jG,EACAA,EAAY0F,QAAQh0G,KAAK0jB,GAEzBva,GAAOsM,KAAM,iDAAgDjL,KAG7DpM,KAAK+iM,aACL/iM,KAAK+iM,YAAYxpD,SAASj0H,GAG9B,MAAMmf,EAAUzkC,KAAKsiG,aAErBh9E,EAAMJ,iBACF0pE,IACA,IAAMnqD,EAAQniC,KAAK8nF,GAA0C9kE,KACjEA,EAAMgiF,gBAAkBhiF,EAAMJ,iBAC1B0pE,IACA,CAAC2R,EAAYhC,KACSv+F,KAAKwqL,4BAELjsF,GACd95D,EAAQniC,KAAK8nF,GAAiDh+E,EAAIm0F,EACrE,IAIT97D,EAAQniC,KAAK8nF,GAAmC9kE,EACnD,EASDijL,GAAgB/lM,UAAU0xG,eAAiB,SAASrjG,EAASquI,GACrDl/I,KAAKuvG,mBAAqB1+F,IAC1B9F,GAAOsM,KAAK,iBAEZrX,KAAKuvG,iBAAiBsqC,UAAUqF,GAChCl/I,KAAKsiG,aAAahgG,KAAK8nF,GAA8CpqF,KAAKuvG,kBAEjF,EAUDg5F,GAAgB/lM,UAAU2xG,gBAAkB,SAAStjG,EAASggM,GACtD7wM,KAAKuvG,mBAAqB1+F,IAC1B9F,GAAOsM,KAAK,wBACZrX,KAAKuvG,iBAAiBujC,iBAAiB+9D,GAE9C,EAQDtI,GAAgB/lM,UAAU8wG,qBAAuB,SAASw9F,GACtD9wM,KAAK20G,kBAAkBvxG,SAAQ8sG,IAC3B,MAAMhjF,EAASgjF,EAAY9qF,YAE3B,IAAK,IAAItgB,EAAI,EAAGA,EAAIooB,EAAO5oB,OAAQQ,IAC/B,GAAIooB,EAAOpoB,KAAOgsM,EAAc,CAG5B5gG,EAAY0F,QAAQhrG,OAAO9F,EAAG,GAE9B9E,KAAKsiG,aAAahgG,KAAK8nF,GAAqC0mH,GAExD9wM,KAAK+iM,aACL/iM,KAAK+iM,YAAY3vC,YAAY09C,GAGjC,KACH,CACJ,GACF9wM,KACN,EAKDuoM,GAAgB/lM,UAAUuuM,mBAAqB,SAAShhG,EAAempC,GACnE,IAAI83D,EACJ,MAAMh7L,EAAkBwqB,GAAQy4D,sBAC1Bg4G,EAAc/3D,EAAYzkI,KAAK,YAAYm6B,KAAK,QAIlD54B,KAHwC,MAAhBi7L,GAAuC,MAAhBA,GAI/CD,EAAe,CACXztM,OAAQ,UACR64I,kBAAmB,eACnB/kB,SAAU,gEAELr3H,KAAKosM,iBAAmBpsM,KAAKqsM,wBAClC7rK,GAAQ5jB,cAAgB5c,KAAK4pM,mBACjCoH,EAAe,CACXztM,OAAQ,UACR64I,kBAAmB,eACnB/kB,SAAU,iEAEPr3H,KAAKuvG,iBAEZyhG,EAAe,CACXztM,OAAQ,OACR64I,kBAAmB,0BACnB/kB,SAAU,qCAENr3H,KAAKkxM,uBACbF,EAAe,CACXztM,OAAQ,UACR64I,kBAAmB,2BACnB/kB,SAAU,kEAEdjsB,GAAWgE,cAAczc,GAAkBrB,MAG3C0/G,EACAhxM,KAAKmxM,oBAAoBphG,EAAeihG,GAExChxM,KAAKoxM,uBAAuBrhG,EAAempC,EAElD,EAKDqvD,GAAgB/lM,UAAUyxG,eAAiB,SAASlE,EAAempC,EAAah4I,GAE5E,GAAI6uG,EAAcpR,MACd3+F,KAAK+wM,mBAAmBhhG,EAAempC,OACpC,CACH,IAAKl5I,KAAKg8H,QAAQjsB,EAAcmb,WAAY,CACxC,MAAMrjG,EAAc,6CASpB,YAPA7nB,KAAKmxM,oBACDphG,EAAe,CACXxsG,OAAQ,iBACR64I,kBAAmBv0H,EACnBwvG,SAAUxvG,GAIrB,CACD7nB,KAAKqxM,uBAAuBthG,EAAempC,EAAah4I,EAC3D,CACJ,EAKDqnM,GAAgB/lM,UAAU6uM,uBAAyB,SAASthG,EAAempC,EAAah4I,GAGpFlB,KAAKwvG,iBAAmBO,EACxB/vG,KAAK6vG,KAAKoB,gBAAgB,oBAAsB/vG,EAChDlB,KAAK6qM,oCAED7qM,KAAK4oM,YACLx9F,GAAW8D,oBAAoBvc,GAAkB5B,GAAuB,CAAE2Y,KAAK,KAGnF,MAAMwgF,EACA//I,KAAE+uG,GACCzkI,KAAK,4DACLm6B,KAAK,UAEd5uC,KAAKsiG,aAAahgG,KAAK8nF,GAA6C8/F,GAEpElqL,KAAK0sM,uBACLthG,GAAWgE,cAAczc,GACrB1B,GACA,CACIyY,KAAK,EACL7hG,MAAO3G,KAGf,IACI6uG,EAAchS,WACV/9F,KAAK6vG,KACL7vG,KAAKgwG,IACLhwG,KAAKyyI,gBACL,IACOzyI,KAAK+G,QAAQyH,OAChBonI,cAAe,CACX9iD,UAAW4Q,GAAUgH,MACrBgwC,UAAW16I,KAAKsqM,eAAe1+C,uBAAuB,QAE1D/V,wBAAyB71I,KAAKmjH,iBAAmB1b,GAAAA,0BAE5D,CAAC,MAAO9jG,GAIL,OAHAH,KAAAA,iBAAsCG,QACtCoH,GAAOpH,MAAMA,EAGhB,CAGD3D,KAAKswG,kBAAkB4oC,EAAanpC,EAActrF,gBAElD,MAAMk3F,EAAc37G,KAAKyuM,yBAEzB,IACI1+F,EAAcqjC,YACV8F,GACA,KAIQl5I,KAAKizK,eAAiBjzK,KAAKwvG,kBAC3BxvG,KAAKmvM,wCAGTnvM,KAAKsiG,aAAahgG,KAAK8nF,GAA8C2lB,GAChE/vG,KAAKizK,eACNjzK,KAAKsiG,aAAahgG,KAAK8nF,GAAqD2lB,EAC/E,IAELpsG,IACIH,KAAAA,iBAAsCG,GACtCoH,GAAOpH,MAAM,2CAA4CA,EAAzD,GAEJg4G,GAIJ37G,KAAK+sM,0BACEh9F,EAActrF,eAAe4gH,2BAA2BrlI,KAAK+sM,0BAMpEhiM,GAAOsM,KAAK,4CACZrX,KAAKkuG,WAAWL,eACZ7tG,KAAKwvG,iBAAiB/qF,eACtB,SACJzkB,KAAKkuG,WAAWhC,iBAAiBlsG,KAAKwvG,iBAAiB/qF,eAC1D,CAAC,MAAO7W,GACLpK,KAAAA,iBAAsCoK,GACtC7C,GAAOpH,MAAMiK,EAChB,CACJ,EAWD26L,GAAgB/lM,UAAU8tG,kBAAoB,SAASD,EAASluF,GAAI,kBAChE,MAAMmvL,EAAY,UAAGtxM,KAAK4e,kBAAR,iBAAG,EAAiB7X,eAApB,iBAAG,EAA0BwqM,qBAA7B,aAAG,EAAyCD,aACxDE,EAAU,oBAAGxxM,KAAK4e,kBAAR,iBAAG,EAAiB7X,eAApB,iBAAG,EAA0BwqM,qBAA7B,aAAG,EAAyCC,kBAA5C,SACVC,EACkB,IADJtnK,KAAEkmE,GAAS57F,KAAK,yBAC/Bs0B,QAAQzkC,OACb,IAAIggB,EAAQ,KAIZ,GAFAvZ,GAAOsM,KAAM,iBAAgBo6L,eAAyBD,OAEhDC,GAAeD,IACjBrnK,KAAEkmE,GAAS57F,KAAK,iCACXi0B,UACAj3B,KAAI7D,GAAKA,EAAEw6B,aAAa,SACxBhlC,SAAQ2c,IACAuE,GAAWgtL,GAAgBA,IAAiB,IAAIprH,IAAInmE,GAAKqoI,SAGlD9jI,GACRvZ,GAAOsM,KAAM,uCAAsCi6L,MAHnDhtL,EAAQvE,EACRhV,GAAOsM,KAAM,wBAAuB0I,KAGvC,IAGJuE,IAAO,CACR,MAAMotL,EAAavnK,KAAEkmE,GAAS57F,KAAK,iCAC9Bs0B,QAEqB,IAAtB2oK,EAAWptM,SACXggB,EAAQotL,EAAW,GAAGtpK,aAAa,OACnCr9B,GAAOsM,KAAM,mBAAkBiN,KAEtC,EAGDA,GAAWmtL,GAAeD,EAGnBC,EAEPzxM,KAAKgwG,IAAIq3E,wBAAwBllK,EAAI,MAErCpX,GAAOuY,KAAK,kFALZtjB,KAAKgwG,IAAIq3E,wBAAwB,KAAM/iK,EAO9C,EAcDikL,GAAgB/lM,UAAU2uM,oBAAsB,SAASphG,EAAehpG,GAChEA,SAAAA,EAASswH,UACTtsH,GAAOuY,KAAKvc,EAAQswH,UAIxBtnB,EAAcmjC,UACV,MACAvvI,IACIoH,GAAOuY,KACH,qEACiC3f,EAFrC,GAGD,CACCJ,OAAQwD,GAAWA,EAAQxD,OAC3B64I,kBAAmBr1I,GAAWA,EAAQq1I,kBACtCF,sBAAsB,GAEjC,EAYDqsD,GAAgB/lM,UAAU4xG,YAAc,SAASrE,EAAeysC,EAAiBC,GAI7E,GAHA1xI,GAAOsM,KACF,eAAcmlI,OAAqBC,UAChC1sC,EAAcpR,SAClBoR,IAAkB/vG,KAAKwvG,iBACvBxvG,KAAK4oM,YAAa,EAElBx9F,GAAWgE,cACPzc,GAAkBxB,GAAyB,CAAEuY,KAAK,KAGlD1pG,KAAKkuG,aACLluG,KAAKkuG,WAAW/B,gBACZnsG,KAAKwvG,iBAAiB/qF,gBAC1B1Z,GAAOsM,KAAK,0BACZrX,KAAKkuG,WAAWR,cACZ1tG,KAAKwvG,iBAAiB/qF,iBAI9BzkB,KAAKwvG,iBAAmB,KAGxBxvG,KAAKgwG,IAAIoE,mBACN,GAAIrE,IAAkB/vG,KAAKuvG,iBAAkB,CAChD,MAAMoiG,EAAc,CAAC,EAIG,YAApBn1D,GAAgD,iBAAfC,GACjC1xI,GAAOsM,KAAK,6BACZ+zF,GAAW/R,UAAUc,uBAAuB,CAAEy3G,aAAa,KAChC,uBAApBp1D,GACW,eAAfC,EAIHrxC,GAAW/R,UAAUc,uBAAuB,CAAE03G,WAAW,IAC9B,YAApBr1D,GAAgD,YAAfC,IAGxCk1D,EAAYr1D,gBAAiB,GAEjCt8I,KAAK8xM,gBAAgBH,EACxB,MACG5mM,GAAOpH,MACH,2CACAosG,EAAcx9B,IACdw9B,EAAcmb,UACdsxB,EACAC,EAEX,EAMD8rD,GAAgB/lM,UAAUivG,kBAAoB,SAAS1B,GAC9CA,EAAcpR,QACf3+F,KAAKmyH,QACLnyH,KAAKsiG,aAAahgG,KAAK8nF,IAE9B,EAEDm+G,GAAgB/lM,UAAU+tM,kBAAoB,WAC1C,IAAI5H,GAAuB,EAC3B,MAAMx3E,EAAenxH,KAAK20G,kBAG1B,IAAK,IAAI7vG,EAAI,EAAGA,EAAIqsH,EAAa7sH,OAAQQ,GAAK,EAC1C,GAAIqsH,EAAarsH,GAAG0zG,eAAgB,CAChCmwF,GAAuB,EACvB,KACH,CAEDA,IAAyB3oM,KAAK2oM,uBAC9B3oM,KAAK2oM,qBAAuBA,EAC5B3oM,KAAKsiG,aAAahgG,KACd8nF,GACAu+G,GAEX,EAODJ,GAAgB/lM,UAAUuvM,gBAAkB,WACxC,OAAO/xM,KAAK2oM,oBACf,EAMDJ,GAAgB/lM,UAAUuwG,SAAW,WACjC,OACI/yG,KAAK6vG,MAAQ7vG,KAAK6vG,KAAK8gB,UACjBppD,GAAAA,QAAAA,mBAA2BvnE,KAAK6vG,KAAK8gB,WACrC,IACb,EAED43E,GAAgB/lM,UAAUiiL,UAAY,SAASC,EAAOzhF,EAAU5xB,GAC5D,MAAM2gI,EAAiBhyM,KAAKwqL,0BAExBwnB,EACAA,EAAevtB,UAAUC,EAAOzhF,EAAU5xB,GAE1CtmE,GAAOuY,KAAK,uCAEnB,EASDilL,GAAgB/lM,UAAUu2L,eAAiB,SAAShyL,GAChD,OAAI/G,KAAK6vG,KACE7vG,KAAKopM,iBAAiBrQ,eAAehyL,GAGzCqT,QAAQE,OAAO,IAAI/X,MAAM,sCACnC,EASDgmM,GAAgB/lM,UAAUy2L,cAAgB,SAAS9C,GAC/C,OAAIn2L,KAAK6vG,KACE7vG,KAAKopM,iBAAiBnQ,cAAc9C,GAGxC/7K,QAAQE,OAAO,IAAI/X,MAAM,sCACnC,EAKDgmM,GAAgB/lM,UAAUyvM,sBAAwB,WAAW,UACzD,2BAAOjyM,KAAK6vG,YAAZ,iBAAO,EAAWwpB,iBAAlB,aAAO,EAAsB1D,6BAA7B,QACH,EAMD4yE,GAAgB/lM,UAAU09H,KAAO,SAASx/B,GACtC,OAAI1gG,KAAK6vG,KACE7vG,KAAK6vG,KAAKqwB,KAAKx/B,GAGnB,IAAItmF,SAAQ,CAACC,EAASC,KACzBA,EAAO,IAAI/X,MAAM,sCAAjB,GAEP,EAKDgmM,GAAgB/lM,UAAU49H,OAAS,WAC/B,OAAIpgI,KAAK6vG,KACE7vG,KAAK6vG,KAAKuwB,SAGd,IAAIhmH,SAAQ,CAACC,EAASC,KACzBA,EAAO,IAAI/X,MAAM,sCAAjB,GAEP,EAKDgmM,GAAgB/lM,UAAU0vM,iBAAmB,WACzC,OAAOlyM,KAAKkgI,KAAK,wBACpB,EAMDqoE,GAAgB/lM,UAAU2vM,gBAAkB5J,GAAgB/lM,UAAU49H,OAKtEmoE,GAAgB/lM,UAAUg+H,eAAiB,WACvC,OAAIxgI,KAAK6vG,KACE7vG,KAAK6vG,KAAK2wB,iBAGd,IACV,EAKD+nE,GAAgB/lM,UAAUi+H,YAAc,WACpC,OAAIzgI,KAAK6vG,KACE7vG,KAAK6vG,KAAK4wB,cAGd,IACV,EAOD8nE,GAAgB/lM,UAAU4vM,mBAAqB,WAC3C,GAAIpyM,KAAK6vG,KACL,OAAO7vG,KAAK6vG,KAAK6wB,cAExB,EAUD6nE,GAAgB/lM,UAAUgoL,wBAA0B,WAChD,MAAM35K,EAAU7Q,KAAKizK,cAAgBjzK,KAAKuvG,iBAAmBvvG,KAAKwvG,iBAElE,OAAO3+F,EAAUA,EAAQ4T,eAAiB,IAC7C,EAUD8jL,GAAgB/lM,UAAU0/I,mBAAqB,WAC3C,MAAM8vD,EAAiBhyM,KAAKwqL,0BAE5B,OAAOwnB,EAAiBA,EAAe9vD,qBAAuB,IACjE,EAQDqmD,GAAgB/lM,UAAU6vM,oBAAsB,SAASC,GAChDtyM,KAAK+xG,cAUV/xG,KAAK6vG,KAAKsX,uBAAuB,aAAc,CAC3Cv5E,WAAY,CACR+5D,MAAO2qG,EAAO3qG,MACdtX,MAAOiiH,EAAOjiH,MACdhjB,MAAO,2CAETrtE,KAAK6vG,KAAKr8B,eAfZzoE,GAAOuY,KAAM,qCAAoCtjB,KAAK6vG,KAAO,GAAK,oBAC9D7vG,KAAK+xG,cAAgB,GAAK,mCAerC,EAMDw2F,GAAgB/lM,UAAU+vM,oBAAsB,WAC5C,OAAOvyM,KAAKmzG,gBACf,EAKDo1F,GAAgB/lM,UAAUmsM,kBAAoB,WAC1C,OAAO3uM,KAAKgzG,eACf,EAKDu1F,GAAgB/lM,UAAUosM,kBAAoB,WAC1C,OAAO5uM,KAAKizG,eACf,EAKDs1F,GAAgB/lM,UAAU40K,mBAAqB,WAC3C,OAAOp3K,KAAK6vG,KAAKoB,eACpB,EAKDs3F,GAAgB/lM,UAAU+4G,4BAA8B,SAASjuG,EAAMzF,GACnE7H,KAAK4tM,YAAa,qBAAoBtgM,IAAQ,CAAEzF,SACnD,EAKD0gM,GAAgB/lM,UAAUgwM,+BAAiC,SAASllM,GAChEtN,KAAK8tM,cAAe,qBAAoBxgM,KACxCtN,KAAK6vG,KAAKr8B,cACb,EAQD+0H,GAAgB/lM,UAAUiwM,4BAA8B,SAASnlM,GAC7D,MAAMolM,EAAW1yM,KAAK6vG,KAAKkpB,QAAQzxH,MAAMmN,MAAK6jB,GAC1CA,EAAK7yB,UAAa,qBAAoB6H,MAG1C,OAAOolM,EAAWA,EAAS7qM,WAAQf,CACtC,EAUDyhM,GAAgB/lM,UAAUwsG,aAAe,SAAS2jG,EAAiBC,GAC/D,OAAO5yM,KAAKkuG,WAAWc,aAAa2jG,EAAiBC,EACxD,EASDrK,GAAgB/lM,UAAU2rG,mBAAqB,WAC3C,OAAOnuG,KAAKkuG,WAAWC,oBAC1B,EAQDo6F,GAAgB/lM,UAAUqwM,eAAiB,SAASvtL,GAAO,MACvD,OAAOA,EAAM45E,UAAN,UAAkBl/F,KAAKwqL,iCAAvB,aAAkB,EAAgCx1E,aAAa1vF,GAASA,EAAM4xJ,SACxF,EAQDqxB,GAAgB/lM,UAAUygK,eAAiB,SAAS39I,EAAOy9I,GACvD,MAAM7jE,EAAU55E,EAAM45E,UACtB,IAAI1rF,EAAO,KACX,MAAMmrF,EAAQr5E,EAAMq5E,MACdm0G,EAAen0G,EAAQr5E,EAAMkiF,mBAAqB,QAClDwqG,EACArzG,EACI3+F,KAAKuvG,kBAAoBvvG,KAAKuvG,iBAAiB9qF,eAC/CzkB,KAAKwvG,kBAAoBxvG,KAAKwvG,iBAAiB/qF,eAErDy6E,EAEI8yG,IACAx+L,EAAOw+L,EAAeh9F,aAAa1vF,IAGvC9R,EAAO8R,EAAM4xJ,UAEZnU,EAAU32J,IAAOoH,GAASw+L,GAI/BhyM,KAAKkuG,WAAWjP,4BACZ+yG,EACAx+L,EACA0rF,EACA4zG,EACAxtL,EAAMs+I,gBACNb,EAAU32J,GACjB,EASDm8L,GAAgB/lM,UAAUusG,mBAAqB,SAASjrF,GACpDsnF,GAAWwD,QAAQ9qF,EACtB,EASDykL,GAAgB/lM,UAAUw5H,QAAU,SAASqD,GACzC,OAAOr/H,KAAK6vG,KAAO7vG,KAAK6vG,KAAKmsB,QAAQqD,GAAU,IAClD,EAKDkpE,GAAgB/lM,UAAUuwM,+BAAiC,WACvD/yM,KAAKsiG,aAAahgG,KAAK8nF,EACnBvB,EACP,EAUD0/G,GAAgB/lM,UAAUwwM,oBAAsB,SAASn3L,EAAIg3F,GACzD7yG,KAAKgwG,IAAI04E,mBAAmB7sK,EAAIg3F,EACnC,EAOD01F,GAAgB/lM,UAAU0qJ,yBAA2B,SAASr6C,GAC1D7yG,KAAKgwG,IAAIk9C,yBAAyBr6C,EACrC,EAQD01F,GAAgB/lM,UAAUywM,yBAA2B,SAASpgG,GAC1D7yG,KAAKgzM,oBAAoB,GAAIngG,EAChC,EAgBD01F,GAAgB/lM,UAAU4gH,YAAc,SAASt/F,GAAkD,IAAzCjI,EAAyC,uDAApC,GAAIq3L,EAAgC,wDAC/F,MAAMC,SAAqBrvL,EAK3B,GAAoB,WAAhBqvL,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACAlzM,KAAKgzM,oBAAoBn3L,EAAIiI,OAC1B,CACH,IAAIsvL,EAAgBtvL,EAIhBm5G,EAAc,OAElB,GAAoB,WAAhBk2E,EAA0B,CAC1Bl2E,EAAc,eAGTm2E,EAAc5rM,eAAem3G,MAC9By0F,EAAcz0F,IAAuB,IAGzC,IACIy0F,EAAgBnsM,KAAK8B,UAAUqqM,EAClC,CAAC,MAAOxlM,GAGL,YAFA7C,GAAOpH,MAAM,6CAA8CiK,EAG9D,CACJ,CAEGiO,EACA7b,KAAK2tM,uBAAuB9xL,EAAIu3L,EAAen2E,GAG/Cj9H,KAAK0tM,gBAAgB0F,EAAen2E,EAE3C,MArCGlyH,GAAOpH,MAAO,kCAAiCwvM,IAuCtD,EAED5K,GAAgB/lM,UAAU2oL,wBAA0B,WAChD,OAAOnrL,KAAKizK,cACNjzK,KAAKkpM,2BAA6BlpM,KAAKgxG,0BAChD,EAQDu3F,GAAgB/lM,UAAU0uG,uBAAyB,SAASrgG,IACnDA,EAAQ8tF,OAAS3+F,KAAK+G,QAAQyH,OAAOqsI,oBACtC76I,KAAKsiG,aAAahgG,KAAK8nF,EAAyCvB,EAEvE,EAOD0/G,GAAgB/lM,UAAUioM,4BAA8B,SAAS55L,GACzDA,EAAQ8tF,MACR3+F,KAAKkpM,4BAA6B,EAElClpM,KAAKgxG,4BAA6B,EAElCngG,EAAQ8tF,QAAU3+F,KAAKizK,eACvBjzK,KAAKsiG,aAAahgG,KAAK8nF,GAE9B,EAODm+G,GAAgB/lM,UAAU2uG,uBAAyB,SAAStgG,GAGpDA,EAAQ8tF,OAGRyM,GAAW/R,UAAUc,uBAAuB,CAAE03G,WAAW,IAErD7xM,KAAKuvG,kBACLnE,GAAW8D,oBACPtc,GACIpB,GACA,CACI6kD,UAAWr2I,KAAKuvG,iBAAiBiR,eAIjDxgH,KAAK8xM,gBAAgB,CACjBvuM,OAAQ,qBACR64I,kBAAmB,gBAEhBvrI,GAAW7Q,KAAKwvG,mBAAqB3+F,IAC5C7Q,KAAKysM,kBAAoB,IAAIrhB,GAAkBprL,MAC/CA,KAAKysM,kBAAkBhjM,MAAMoH,GAEpC,EAOD03L,GAAgB/lM,UAAUkoM,yBAA2B,SAAS75L,GACtDA,EAAQ8tF,MACR3+F,KAAKkpM,4BAA6B,GAElClpM,KAAKgxG,4BAA6B,EAClChxG,KAAKysM,mBAAqBzsM,KAAKysM,kBAAkBl3I,UAGjD1kD,EAAQ8tF,QAAU3+F,KAAKizK,eACvBjzK,KAAKsiG,aAAahgG,KAAK8nF,GAE9B,EAQDm+G,GAAgB/lM,UAAU4uM,uBAAyB,SAASrhG,EAAempC,GACvEl5I,KAAKkpM,4BAA6B,EAGlClpM,KAAKuvG,iBAAmBQ,EACxB/vG,KAAK6qM,oCAEL7qM,KAAKuvG,iBAAiBxR,WAClB/9F,KAAK6vG,KACL7vG,KAAKgwG,IACLhwG,KAAKyyI,gBACL,IACOzyI,KAAK+G,QAAQyH,OAChBonI,cAAe,CACX9iD,UAAW4Q,GAAUgH,MACrBgwC,UAAW16I,KAAKsqM,eAAe1+C,uBAAuB,QAE1D/V,wBAAyB71I,KAAKmjH,iBAAmB1b,GAAAA,2BAGzD18F,GAAOsM,KAAK,4CAEZ,IAAIg8L,EAAW9rI,GAAAA,QAAAA,mBAA2BvnE,KAAKuvG,iBAAiB2b,WAEhE,MAAMhb,EAAclwG,KAAKmxH,aAAahtG,IAAIkvL,GAEtCnjG,IACAmjG,EAAWnjG,EAAYkH,cAAgBi8F,GAG3CrzM,KAAKkuG,WAAWL,eACZ7tG,KAAKuvG,iBAAiB9qF,eACtB4uL,GAEJ,MAAM13F,EAAc37G,KAAKyuM,yBAEzBzuM,KAAKuvG,iBAAiB6jC,YAClB8F,GACA,KACInuI,GAAOkT,MAAM,uCAEbje,KAAKsiG,aAAahgG,KACd8nF,GACA2lB,EAFJ,IAIJpsG,IACIoH,GAAOpH,MACH,+CAAgDA,EADpD,GAGJg4G,EACP,EAMD4sF,GAAgB/lM,UAAU8wM,oBAAsB,WAC5CtzM,KAAKuzM,iBAAiB,MAAOvzM,KAAKwvG,iBAAiB/qF,eAAei4H,kBACrE,EAMD6rD,GAAgB/lM,UAAUgxM,oBAAsB,WAC5CxzM,KAAKuzM,iBAAiB,MAAOvzM,KAAKuvG,iBAAiB9qF,eAAei4H,kBACrE,EAQD6rD,GAAgB/lM,UAAU+wM,iBAAmB,SAAShuB,EAAS1K,GAC3D,IAAK,MAAMv1J,KAASu1J,GAGZpzE,GAAAA,4BAA2CznG,KAAKmxH,aAAajtG,IAAIoB,EAAM6wJ,oBACvEprK,GAAOsM,KAAM,iBAAgBkuK,YAAkBjgK,KAC/CtlB,KAAKqzG,mBAAmB/tF,GAGnC,EASDijL,GAAgB/lM,UAAUmoM,4BAA8B,SAAS56F,GAC/B,OAA1B/vG,KAAKuvG,mBAILvvG,KAAKyzM,yBACCzzM,KAAKuvG,iBAAiBulC,uBAGF,OAA1B90I,KAAKwvG,mBACLxvG,KAAK0zM,yBACC1zM,KAAKwvG,iBAAiBslC,uBAGhC,IAAIp6H,GAAO,EACX,MAAMi5L,EAAmB3zM,KAAK+G,QAAQyH,OAAOmlM,iBAsB7C,GAnBK5jG,EAAcpR,MAER3+F,KAAKuvG,mBAAqBQ,GACjChlG,GAAOpH,MAAM,0DAEb+W,GAAO,IACCq1F,EAAcyQ,aACS,iBAArBmzF,GACP1vM,KAAKE,SAAWwvM,IACnB5oM,GAAOsM,KAAM,+BAA8Bs8L,SAC3CvoG,GAAW/R,UAAUc,uBAAuB,CAAEy3G,aAAa,IAC3D5xM,KAAK8xM,gBAAgB,CACjBvuM,OAAQ,UACR64I,kBAAmB,iBAGvB1hI,GAAO,GAfPA,GAAO,GAkBN4pB,MAAMtkC,KAAKyzM,4BACRnvK,MAAMtkC,KAAK0zM,0BAA2B,CAC1C,MAAME,EACA5zM,KAAKyzM,yBAA2BzzM,KAAK0zM,yBAE3CtoG,GAAWgE,cACPtd,GACA,CAAEjqF,MAAO+rM,GAChB,CAEG7jG,EAAcpR,QAAU3+F,KAAKizK,eAC7BjzK,KAAKsiG,aAAahgG,KAAK8nF,IAGvB1vE,IAMJ1a,KAAK6zM,eAAc,GAGf7zM,KAAKwvG,iBACLxvG,KAAK8zM,yBAEL/oM,GAAOsM,KAAK,mDAGhBrX,KAAKwzM,sBAGDxzM,KAAKwvG,kBACLxvG,KAAKmvM,wCAGTpkM,GAAOsM,KAAK,6CACZrX,KAAKkuG,WAAWhC,iBAAiBlsG,KAAKuvG,iBAAiB9qF,gBAEvD2mF,GAAW8D,oBACPtc,GACIrB,GACA,CACI8kD,UAAWr2I,KAAKuvG,iBAAiBiR,eAGhD,EAUD+nF,GAAgB/lM,UAAUooM,kBAAoB,WAA0B,IAAjBnwG,EAAiB,uDAAJ,CAAC,EACjE,MAAM7sE,GAAW8zF,KAAQjnB,EAAYz6F,KAAKy6F,YAG1C,GADAz6F,KAAKy6F,WAAaA,EACd7sE,EAAS,CACT5tB,KAAKsiG,aAAahgG,KAAK8nF,GAA0CpqF,KAAKy6F,YAEtE,MAAMs5G,EAA+D,SAA3C/zM,KAAKy6F,WAAW,uBACpCu5G,EAA+D,SAA3Ch0M,KAAKy6F,WAAW,uBAEtCz6F,KAAK0pM,2BAA6BqK,IAClC/zM,KAAK0pM,yBAA2BqK,EAChC/zM,KAAKsiG,aAAahgG,KAAK8nF,EAAwD2pH,GAC/EhpM,GAAOsM,KAAM,6CAA4C08L,MAGzD/zM,KAAK2pM,2BAA6BqK,IAClCh0M,KAAK2pM,yBAA2BqK,EAChCh0M,KAAKsiG,aAAahgG,KAAK8nF,GAAwD4pH,GAC/EjpM,GAAOsM,KAAM,6CAA4C28L,MAIvC,CAIlB,gBAGU5wM,SAAQwE,SACMd,IAApB2zF,EAAW7yF,IACXwjG,GAAW/R,UAAUc,uBAAuB,CACxC,CAACvyF,EAAI3F,QAAQ,IAAK,MAAOw4F,EAAW7yF,IAE3C,GAER,CACJ,EAQD2gM,GAAgB/lM,UAAUy0G,YAAc,SAASrvG,GAC7C,OAAO5H,KAAKy6F,WAAW7yF,EAC1B,EAMD2gM,GAAgB/lM,UAAUyxM,4BAA8B,WAChDj0M,KAAKgpM,uBACLj+L,GAAOsM,KAAK,mCACZ1N,aAAa3J,KAAKgpM,sBAClBhpM,KAAKgpM,qBAAuB,KAEnC,EAODT,GAAgB/lM,UAAUsxM,uBAAyB,WAC/C9zM,KAAKk0M,oBACD,MAAOl0M,KAAKwvG,iBAAiB/qF,eAAei4H,kBACnD,EAOD6rD,GAAgB/lM,UAAU2xM,uBAAyB,WAC/Cn0M,KAAKk0M,oBACD,MAAOl0M,KAAKuvG,iBAAiB9qF,eAAei4H,kBACnD,EASD6rD,GAAgB/lM,UAAU0xM,oBAAsB,SAASE,EAAiBv5B,GACtE,IAAK,MAAMv1J,KAASu1J,EAChB9vK,GAAOsM,KAAM,mBAAkB+8L,YAA0B9uL,KACzDtlB,KAAKszG,qBAAqBhuF,EAEjC,EAMDijL,GAAgB/lM,UAAU6xM,qCAAuC,WAC7DtpM,GAAOsM,KAAK,sDACZrX,KAAKwvG,iBAAiB8vC,wBAAuB,GACxC3kI,MAAK,KACF5P,GAAOsM,KAAK,kDAAZ,IAEHuM,OAAMjgB,IACHoH,GAAOpH,MAAM,2DAA4DA,EAAzE,GAEX,EASD4kM,GAAgB/lM,UAAUqxM,cAAgB,SAASz/B,GAC/C,GAAIp0K,KAAK0pG,MAAQ0qE,EAAjB,CAMA,GADAp0K,KAAK0pG,IAAM0qE,EACPA,EAAW,CACXrpK,GAAOsM,KAAK,wCAIZ+zF,GAAW/R,UAAUc,uBAAuB,CACxC03G,WAAW,EACXD,aAAa,IAKjB,MAAMjC,EAAoC,IAApB3vM,KAAK40K,WAE3B50K,KAAKuvG,iBAAiBoxC,0BAA0BgvD,GAC3C/rL,OAAMjgB,IACHoH,GAAOpH,MAAO,gDAA+CgsM,OAAmBhsM,IAAhF,GAEX,MACGoH,GAAOsM,KAAK,mCAIZrX,KAAKwvG,kBACLxvG,KAAKkuG,WAAWE,gCACZpuG,KAAKwvG,iBAAiB/qF,gBAAiB2vJ,GAI/Cp0K,KAAK0oM,YAAc,KAGnB1oM,KAAKsiG,aAAahgG,KACd8nF,GACApqF,KACAA,KAAK0pG,KACT1pG,KAAKsiG,aAAahgG,KAAK8nF,GAAqDpqF,KAAK41L,yBAGjF51L,KAAKsiG,aAAahgG,KACdtC,KAAKmrL,0BACC/gG,GACAA,GA5CT,MAHGr/E,GAAOkT,MAAO,8CAA6Cm2J,IAgDlE,EAODm0B,GAAgB/lM,UAAU8xM,iBAAmB,SAASppF,GAElD,GADAlrH,KAAKi0M,8BACDj0M,KAAKuvG,iBAGL,YAFAxkG,GAAOpH,MAAM,gCAKjB3D,KAAKkpM,4BAA6B,EAClClpM,KAAKuvG,iBACCvvG,KAAKqrG,KAAKzsF,WAAW+iH,OAAO+hB,oBAC1B1jJ,KAAK6vG,KAAK8gB,UACVzF,GACRngH,GAAOsM,KACH,gCAAiCrX,KAAK6vG,KAAK8gB,UAAWzF,GAC1DlrH,KAAK6qM,oCAEL7qM,KAAKuvG,iBAAiBxR,WAClB/9F,KAAK6vG,KACL7vG,KAAKgwG,IACLhwG,KAAKyyI,gBACL,IACOzyI,KAAK+G,QAAQyH,OAChBonI,cAAe,CACX9iD,UAAW4Q,GAAUgH,MACrBgwC,UAAW16I,KAAKsqM,eAAe1+C,uBAAuB,QAE1D/V,wBAAyB71I,KAAKmjH,iBAAmB1b,GAAAA,2BAGzD18F,GAAOsM,KAAK,4CAEZ,IAAIg8L,EAAW9rI,GAAAA,QAAAA,mBAA2BvnE,KAAKuvG,iBAAiB2b,WAEhE,MAAMhb,EAAclwG,KAAKmxH,aAAahtG,IAAIkvL,GAEtCnjG,IACAmjG,EAAWnjG,EAAYkH,cAAgBi8F,GAG3CrzM,KAAKkuG,WAAWL,eACZ7tG,KAAKuvG,iBAAiB9qF,eACtB4uL,GAEJ,MAAM13F,EAAc37G,KAAK6qG,iBAEzB7qG,KAAKuvG,iBAAiBwuB,OAAOpiB,EAChC,EAMD4sF,GAAgB/lM,UAAU2sM,sCAAwC,WAC9DpkM,GAAOsM,KAAK,wDACZrX,KAAKwvG,iBAAiB8vC,wBAAuB,GACxC3kI,MAAK,KACF5P,GAAOsM,KAAK,qDAAZ,IAEHuM,OAAMjgB,IACHoH,GAAOpH,MAAM,4DAA6DA,EAA1E,GAEX,EASD4kM,GAAgB/lM,UAAU8tM,qBAAuB,SAASiE,GACtD,IAAKv0M,KAAKosM,gBACCpsM,KAAKqsM,wBACJ7rK,GAAQ5jB,cAAgB5c,KAAK4pM,oBAC9B5pM,KAAKmjH,gBAGZ,YAFAp4G,GAAOsM,KAAK,qBAIhB,MAAMm9L,EAAQx0M,KAAK20G,kBACb8oF,EAAY+W,EAAMlwM,OAGlBmwM,EAAgBz0M,KAAKkxM,qBAQ3B,IALKuD,GAAiBz0M,KAAKgpM,sBACvBhpM,KAAKi0M,+BAIJj0M,KAAKuvG,kBAAoBklG,EAAe,CACzC,MAAMzyL,EAAOy7K,GAAa+W,EAAM,GAG1Bx2F,EAAOh+G,KAAK+yG,WACZ2hG,EAAU1yL,EAAKg1F,QAErB,GAAIgH,EAAO02F,EAKP,YAJA3pM,GAAOkT,MACH,2DACqC+/F,EAAM02F,GAG5C,GAAI12F,IAAS02F,EAGhB,YAFA3pM,GAAOpH,MAAM,kBAAmBq6G,EAAM02F,GAK1C,MAAMtoI,EAAMpqD,EAAK4yF,SAEjB,GAAI2/F,EAAe,CACf,GAAIv0M,KAAKgpM,qBAGL,YAFAj+L,GAAOpH,MAAM,+CAIjBoH,GAAOsM,KACF,wBAAuB+0D,WACpBpsE,KAAKipM,6BACbjpM,KAAKgpM,qBAAuBp/L,WACxB5J,KAAKs0M,iBAAiBzxM,KAAK7C,KAAMosE,GACX,IAAtBpsE,KAAKipM,eACZ,MACGl+L,GAAOsM,KAAM,wBAAuB+0D,KACpCpsE,KAAKs0M,iBAAiBloI,EAE7B,MAAUpsE,KAAKuvG,mBAAqBklG,IACjC1pM,GAAOsM,KAAM,uBAAsBrX,KAAKuvG,iBAAiB2b,aAGrDlrH,KAAKuvG,iBAAiBiR,aAAei9E,EAAY,GACjDryF,GAAW8D,oBACPtc,GAAenB,KAEvBzxF,KAAK8xM,kBAEZ,EAQDvJ,GAAgB/lM,UAAU0uM,mBAAqB,WAC3C,MAAMsD,EAAQx0M,KAAK20G,kBACb8oF,EAAY+W,EAAMlwM,OAClBqwM,OAAmG7tM,IAAtF0tM,EAAM//L,MAAK5G,GAAwB,gBAAnBA,EAAE6oG,cAAkC7oG,EAAEypG,WAAW6tC,MAC9EsvD,EAA8B,IAAdhX,IAAoBkX,EAI1C,OAFA5pM,GAAOkT,MAAO,mBAAkBw/K,kBAA0BkX,QAAiBF,KAEpEA,CACV,EAaDlM,GAAgB/lM,UAAUsvM,gBAAkB,WAAuB,IAAd/qM,EAAc,uDAAJ,CAAC,EAC5D,MAAM,OACFxD,EAAS,UADP,kBAEF64I,EAAoB,0BAFlB,eAGFE,GAAiB,GACjBv1I,EAEJ,IAAK/G,KAAKuvG,iBAGN,YAFAxkG,GAAOpH,MAAM,iCAKjB,MAAMixM,EAAoB50M,KAAKizK,cAG3B2hC,IACI50M,KAAKwvG,mBAAqB8sC,GAC1Bt8I,KAAKq0M,uCAITr0M,KAAKm0M,0BAITppM,GAAOsM,KAAK,4CACZrX,KAAKkuG,WAAW/B,gBAAgBnsG,KAAKuvG,iBAAiB9qF,gBACtD1Z,GAAOsM,KAAK,yCACZrX,KAAKkuG,WAAWR,cAAc1tG,KAAKuvG,iBAAiB9qF,gBAEpDzkB,KAAKuvG,iBAAiB2jC,WAClB,KACInoI,GAAOsM,KAAK,+BAAZ,IAEJ1T,IAemB,YAAXJ,GACAwH,GAAOpH,MAAM,iEAAkEA,EAClF,GACF,CACCJ,SACA64I,oBACAF,qBAAsBl8I,KAAK6vG,MACpB7vG,KAAKmwG,mBACJ5oC,GAAAA,QAAAA,mBAA2BvnE,KAAKuvG,iBAAiB2b,cAGjElrH,KAAKuvG,iBAAmB,KAGxBvvG,KAAK6zM,eAAc,GAEfe,IAEI50M,KAAKwvG,mBAAqB8sC,EAC1Bt8I,KAAKszM,sBAELvoM,GAAOsM,KAAK,iDAGvB,EAQDkxL,GAAgB/lM,UAAUuoM,oBAAsB,SAASh7F,EAAe0xC,GACpE,IAAK1xC,EACD,OAIJ,GAAI0xC,EAAK,CACL,GAAIA,EAAIozD,KACJ,OAEJpzD,EAAIozD,MAAO,CACd,CAED,IACIC,EAAmBzF,EADnBC,GAAkB,EAEtB,MAAM3zF,EAAc5L,EAActrF,eAAeomF,iBAGjD,IAAK,MAAMvlF,KAASq2F,EAAa,CAC7B,MAAMp2F,EAAQD,EAAMmqF,UAEpBqlG,EAAoB90M,KAAKmmK,oBAAoB7gJ,EAAMoqF,UAAWpqF,EAAOC,GACrEuvL,GAAqB/pM,GAAOkT,MAAO,0BAAyBqH,0BAA8BC,KACtFD,EAAMoqF,YAAchM,GAAUgH,QAC9B2kG,EAAmBrvM,KAAKovM,iBAAiB9pL,GACzC+pL,GAAoBtkM,GAAOkT,MAAO,qCAAoCqH,EAAMu+I,mBAEhFyrC,EAAkBA,GAAmBwF,GAAqBzF,CAC7D,CAEDC,GAAmBtvM,KAAK6vG,KAAKr8B,cAChC,EAQD+0H,GAAgB/lM,UAAUywK,YAAc,WACpC,OAAOjzK,KAAK0pG,GACf,EAQD6+F,GAAgB/lM,UAAUuyM,sBAAwB,WAC9C,OAAI/0M,KAAKizK,cACEjzK,KAAKuvG,iBAAiB9qF,eAAey9H,qBAGzC,IACV,EAQDqmD,GAAgB/lM,UAAU6iI,2BAA6B,SAASC,GAC5D,MAAsB,iBAAXA,GAAuBhhG,MAAMghG,IACpCv6H,GAAOpH,MAAO,iBAAgB2hI,+CAEvB,IAGXtlI,KAAK+sM,yBAA2BznE,EAGhCtlI,KAAKwvG,kBAAoBxvG,KAAKwvG,iBAAiB/qF,eAAe4gH,2BAA2BC,GAGzFtlI,KAAKgwG,IAAIq1B,2BAA2BC,IAE7B,EACV,EAKDijE,GAAgB/lM,UAAUwyM,gBAAkB,WACxC,MAAMR,EAAQx0M,KAAK20G,kBAGnB,GAAqB,IAAjB6/F,EAAMlwM,OAKN,MAAM,IAAI/B,MACN,kEANgB,CACpB,MAAMw9H,EAAUy0E,EAAM,GAAG5/F,SAEzB50G,KAAKs0M,iBAAiBv0E,EACzB,CAIJ,EAKDwoE,GAAgB/lM,UAAUyyM,eAAiB,SAASluM,GAChD/G,KAAK8xM,gBAAgB/qM,EACxB,EAMDwhM,GAAgB/lM,UAAU0yM,gBAAkB,WACxC,OAAOl1M,KAAK+oM,sBAAsB1mL,UACrC,EAMDkmL,GAAgB/lM,UAAU2yM,kBAAoB,SAAStiG,GAC/CA,EAAQu2C,gBACRppJ,KAAKqrG,KAAK89C,uBAAuBnpJ,KAAK6vG,KAAK6D,QAASb,EAE3D,EAmBD01F,GAAgB/lM,UAAU0yL,uBAAyB,SAASR,GACxD10L,KAAKirM,uBAAuB/V,uBAAuBR,EACtD,EAOD6T,GAAgB/lM,UAAUwyL,uBAAyB,SAASf,GACxDj0L,KAAKirM,uBAAuBjW,uBAAuBf,EACtD,EAUDsU,GAAgB/lM,UAAU64I,2BAA6B,SAASO,GAC5D57I,KAAKirM,uBAAuBhW,kCAAkCr5C,EACjE,EASD2sD,GAAgB/lM,UAAUm5I,yBAA2B,SAASC,GAC1D,OAAO57I,KAAKkrM,oBAAoBnV,+BAA+Bn6C,EAClE,EAeD2sD,GAAgB/lM,UAAU2jM,wBAA0B,SAASf,EAAYtlM,GACrE,OAAKE,KAAK6vG,KAIH7vG,KAAKmpM,kBACPhD,wBAAwBf,EAAYtlM,GAJ9B,IAAIyC,MAAM8iM,GAKxB,EAODkD,GAAgB/lM,UAAUqoM,kCAAoC,WAC1D,MAAM3vE,EAAYl7H,KAAKoyM,sBAEnBpyM,KAAKspM,mCAAsCpuE,GAAgD,OAAnCl7H,KAAKwqL,4BAIjEp/E,GAAWgE,cAAc9c,GAAsB,SAAU,CACrD4oC,YACA3zB,cAAgB,GAAE2zB,KAAal7H,KAAKuqM,qBAExCvqM,KAAKspM,kCAAoCroM,KAAKC,MACjD,EAMDqnM,GAAgB/lM,UAAUgqM,kCAAoC,WAC1D,MAAMtxE,EAAYl7H,KAAKoyM,qBAElBl3E,GAAcl7H,KAAKspM,mCAKxBl+F,GAAWgE,cAAc9c,GAAsB,OAAQ,CACnD4oC,YACA3zB,cAAgB,GAAE2zB,KAAal7H,KAAKuqM,kBACpCzoL,MAAO,CACHmhF,SAAUh/F,KAAKC,OAAOjD,KAAKC,MAAQlB,KAAKspM,mCAAqC,KAC7E8L,KAAMp1M,KAAKqtM,yBAGtB,EAOD9E,GAAgB/lM,UAAUg5G,sBAAwB,WAC1Cx7G,KAAKuvG,kBACLvvG,KAAK8xM,gBAAgB,CACjB11D,kBAAmB,UACnBE,gBAAgB,IAIpBt8I,KAAKwvG,kBACLxvG,KAAKwvG,iBAAiB0jC,UAClB,MACAvvI,IACIoH,GAAOuY,KAAK,8DAA+D3f,EAA3E,GACD,CACCJ,OAAQ,UACR64I,kBAAmB,mBACnBE,gBAAgB,EAChBJ,sBAAsB,IAIlCl8I,KAAKswM,sBAAqB,EAC7B,EAOD/H,GAAgB/lM,UAAU2gH,cAAgB,WACtC,OAAO9iG,QAAQrgB,KAAKwpM,gBAAkBxpM,KAAKwpM,eAAenuF,YAC7D,EAQDktF,GAAgB/lM,UAAU+mM,gBAAkB,WACxC,OAAO7jF,GAAcxkC,YAAYlhF,KAAK+G,QAAQyH,OACjD,EAQD+5L,GAAgB/lM,UAAU6yM,WAAa,SAASloL,GACvCntB,KAAKupM,kBAMVvpM,KAAKwpM,eAAetjF,WAAW/4F,GAL3BpiB,GAAOuY,KAAK,2DAMnB,EASDilL,GAAgB/lM,UAAU8yM,sBAAwB,SAASv5F,GACvD/7G,KAAKwpM,eAAe/tF,iBAAiBM,EACxC,EAQDwsF,GAAgB/lM,UAAU49G,kBAAoB,SAAS7Y,GACnD,MAAM2I,EAAclwG,KAAKmwG,mBAAmB5I,GAEvC2I,GAILlwG,KAAKwpM,eAAeppF,kBAAkBlQ,EACzC,EAUDq4F,GAAgB/lM,UAAU48G,wBAA0B,SAAS7X,EAAe8X,GACxE,MAAMnP,EAAclwG,KAAKmwG,mBAAmB5I,GAEvC2I,GAILlwG,KAAKwpM,eAAepqF,wBAAwBlP,EAAamP,EAC5D,EAODkpF,GAAgB/lM,UAAU+yM,iBAAmB,WACzC,OAAOl1L,QAAQrgB,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKwwB,WAAWn/C,cACpD,EAODqnH,GAAgB/lM,UAAUwtM,cAAgB,WACtC,OAAO3vL,QAAQrgB,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKiiB,mBACzC,EAODy2E,GAAgB/lM,UAAUmwH,YAAc,WACpC,OAAI3yH,KAAK6vG,MAAQ7vG,KAAK+xG,cACX/xG,KAAK6vG,KAAKwwB,WAAWv/C,SAGzB1mE,QAAQE,OACX,IAAI/X,MAAM,uDACjB,EAODgmM,GAAgB/lM,UAAUgzM,aAAe,WACjCx1M,KAAK6vG,MAAQ7vG,KAAK+xG,cAClB/xG,KAAK6vG,KAAKwwB,WAAW9sF,UAErBxoC,GAAOuY,KAAM,4BAA2BtjB,KAAK6vG,KAAO,GAAK,oBACrD7vG,KAAK+xG,cAAgB,GAAK,mCAErC,EASDw2F,GAAgB/lM,UAAUizM,UAAY,SAAS31M,EAAawyH,GACxD,OAAItyH,KAAK6vG,KACE7vG,KAAK6vG,KAAKwwB,WAAWptH,KAAKnT,EAAawyH,GAG3Cl4G,QAAQE,OAAO,IAAI/X,MAAM,8BACnC,EASDgmM,GAAgB/lM,UAAUkzM,cAAgB,WACtC,GAAI11M,KAAK6vG,KACL,OAAO7vG,KAAK6vG,KAAKwwB,WAAWrO,YAEnC,EAWDu2E,GAAgB/lM,UAAUmzM,iBAAmB,SAAS7xL,EAAS1X,GAC3D,GAAIpM,KAAK6vG,KACL,OAAIzjG,EACOpM,KAAK6vG,KAAKwwB,WAAWtO,mBAAmB3lH,EAAI0X,GAGhD9jB,KAAK6vG,KAAKwwB,WAAWjd,YAAYt/F,EAE/C,EASDykL,GAAgB/lM,UAAUozM,wBAA0B,SAAS38L,GACzD,GAAIjZ,KAAK6vG,KACL,OAAO7vG,KAAK6vG,KAAKwwB,WAAWpO,mBAAmBh5G,EAEtD,EAQDsvL,GAAgB/lM,UAAUqzM,0BAA4B,SAASxyM,GAC3D,GAAIrD,KAAK6vG,KACL,OAAO7vG,KAAK6vG,KAAKwwB,WAAWnO,qBAAqB7uH,EAExD,EAMDklM,GAAgB/lM,UAAUszM,gBAAkB,SAAS1pM,GAC7CpM,KAAK6vG,MACL7vG,KAAK6vG,KAAKwwB,WAAWjN,WAAWhnH,EAEvC,EAODm8L,GAAgB/lM,UAAUuzM,mBAAqB,SAAS3pM,GAChDpM,KAAK6vG,MACL7vG,KAAK6vG,KAAKwwB,WAAW/M,cAAclnH,EAE1C,EAODm8L,GAAgB/lM,UAAUwzM,wBAA0B,WAChD,OAAO31L,QAAQrgB,KAAK6vG,MAAQ7vG,KAAK6vG,KAAKywB,kBAAkBp/C,cAC3D,EAMDqnH,GAAgB/lM,UAAUyzM,mBAAqB,SAASnjH,GAChD9yF,KAAK6vG,MAAQ7vG,KAAK+xG,gBACdjf,IAAc4Q,GAAU8M,OAAS1d,IAAc4Q,GAAUgH,OAC7D1qG,KAAK6vG,KAAKywB,kBAAkBx/C,QAAO,EAAMgS,GAEzC/nF,GAAOuY,KAAM,mCAAkCtjB,KAAK6vG,KAAO,GAAK,oBAC5D7vG,KAAK+xG,cAAgB,GAAK,qCAC1B/xG,KAAK6vG,MAAQ7vG,KAAK+xG,cAAgB,0BAA4B,KAEzE,EAMDw2F,GAAgB/lM,UAAU0zM,oBAAsB,SAASpjH,GACjD9yF,KAAK6vG,MAAQ7vG,KAAK+xG,gBACdjf,IAAc4Q,GAAU8M,OAAS1d,IAAc4Q,GAAUgH,OAC7D1qG,KAAK6vG,KAAKywB,kBAAkBx/C,QAAO,EAAOgS,GAE1C/nF,GAAOuY,KAAM,oCAAmCtjB,KAAK6vG,KAAO,GAAK,oBAC7D7vG,KAAK+xG,cAAgB,GAAK,qCAC1B/xG,KAAK6vG,MAAQ7vG,KAAK+xG,cAAgB,0BAA4B,KAEzE,EAQDw2F,GAAgB/lM,UAAU2zM,oBAAsB,SAASrjH,EAAW1mF,GAChE,GAAIpM,KAAK6vG,MAAQ7vG,KAAK+xG,gBACdjf,IAAc4Q,GAAU8M,OAAS1d,IAAc4Q,GAAUgH,OAAQ,CAErE,MAAMwF,EAAclwG,KAAKmwG,mBAAmB/jG,GAE5C,IAAK8jG,EACD,OAGJlwG,KAAK6vG,KAAKywB,kBAAkB3R,QAAQ77B,EAAWod,EAAY0E,SAC9D,MACG7pG,GAAOuY,KAAM,mCAAkCtjB,KAAK6vG,KAAO,GAAK,oBAC5D7vG,KAAK+xG,cAAgB,GAAK,qCAC1B/xG,KAAK6vG,MAAQ7vG,KAAK+xG,cAAgB,0BAA4B,KAEzE,EAQDw2F,GAAgB/lM,UAAU4zM,mBAAqB,SAAStjH,EAAW1mF,GAC/D,GAAIpM,KAAK6vG,MAAQ7vG,KAAK+xG,gBACdjf,IAAc4Q,GAAU8M,OAAS1d,IAAc4Q,GAAUgH,OAAQ,CAErE,MAAMwF,EAAclwG,KAAKmwG,mBAAmB/jG,GAE5C,IAAK8jG,EACD,OAGJlwG,KAAK6vG,KAAKywB,kBAAkBhmH,OAAOw4E,EAAWod,EAAY0E,SAC7D,MACG7pG,GAAOuY,KAAM,kCAAiCtjB,KAAK6vG,KAAO,GAAK,oBAC3D7vG,KAAK+xG,cAAgB,GAAK,qCAC1B/xG,KAAK6vG,MAAQ7vG,KAAK+xG,cAAgB,0BAA4B,KAEzE,EAODw2F,GAAgB/lM,UAAUuwH,iBAAmB,WAAW,MACpD,iBAAO/yH,KAAK6vG,YAAZ,aAAO,EAAWkjB,kBACrB,EAODw1E,GAAgB/lM,UAAU+9H,mBAAqB,WAAW,MACtD,iBAAOvgI,KAAK6vG,YAAZ,aAAO,EAAW0wB,oBACrB,ECxlIDupE,GAAgBtnM,UAAUuW,QAAU,WAAuB,IAAdhS,EAAc,uDAAJ,CAAC,EACpD/G,KAAKqrG,KAAKtyF,QAAQhS,EAAQqF,GAAIrF,EAAQmqC,SACzC,EASD44J,GAAgBtnM,UAAU8vE,OAAS,SAASvrE,GACxC/G,KAAKqrG,KAAK/4B,OAAOvrE,EACpB,EAMD+iM,GAAgBtnM,UAAUwW,WAAa,WAKnC,OAAOhZ,KAAKqrG,KAAKryF,cAAc,UAClC,EAOD8wL,GAAgBtnM,UAAUoyG,OAAS,WAC/B,OAAO50G,KAAKqrG,KAAKuJ,QACpB,EAMDk1F,GAAgBtnM,UAAU6zM,SAAW,SAAShxD,GAC1CrlJ,KAAKqlJ,MAAQA,CAChB,EAUDykD,GAAgBtnM,UAAU8zM,oBAAsB,SAAShpM,EAAMvG,GAC3D,OAAO,IAAIwhM,GAAgB,CACvBj7L,OACAkB,OAAQzH,EACR6X,WAAY5e,MAEnB,EAOD8pM,GAAgBtnM,UAAU0iB,iBAAmB,SAAS5hB,EAAO2V,GACzDjZ,KAAKqrG,KAAKhpG,YAAYiB,EAAO2V,EAChC,EAOD6wL,GAAgBtnM,UAAUqkC,oBAAsB,SAASvjC,EAAO2V,GAC5DjZ,KAAKqrG,KAAK1mE,eAAerhC,EAAO2V,EACnC,EAKD6wL,GAAgBtnM,UAAU40K,mBAAqB,WAC3C,OAAOp3K,KAAKqrG,KAAK4F,eACpB,EASD64F,GAAgBtnM,UAAU48E,WAAa,SAASm4B,GAAyB,IAAhBnmE,EAAgB,wDACrEpxC,KAAKqrG,KAAKxsC,KAAKugB,WAAWm4B,EAASnmE,GAAQ,EAC9C,EASD04J,GAAgBtnM,UAAU88E,cAAgB,SAASi4B,GAAyB,IAAhBnmE,EAAgB,wDACxEpxC,KAAKqrG,KAAKxsC,KAAKygB,cAAci4B,EAASnmE,GAAQ,EACjD,EAKD04J,GAAgBtnM,UAAU+zM,QAAU,WAChC,MAAMt2L,EAAOjgB,KAAKqrG,KAAKo9C,eAEjB10B,EAAW,CAAC,EAElBA,EAASj/D,KAAO,IAAI7zD,KACpB8yH,EAASh0G,IAAMxgB,OAAO6Q,SAASiyB,KAC/B0xF,EAAS36B,GAAKp8E,UAAU8U,UAExB,MAAMhnB,EAAM9K,KAAKqrG,KAAKq9C,aAQtB,OANI59I,IACAipH,EAAS1oB,KAAOvgG,GAGpBmV,EAAK8zG,SAAWA,EAET9zG,CACV,WCvLWiqL,GAAAA,EAAAA,oBAAAA,4BAAAA,EAAAA,oBAAAA,0BAAAA,EAAAA,2BAAAA,uCAAAA,EAAAA,oBAAAA,iCAAAA,KAAAA,GAAAA,CAAAA,IAiCL,MAAMliH,GAAsBkiH,GAAwBliH,oBAC9Cb,GAAsB+iH,GAAwB/iH,oBAC9CqvH,GAA6BtM,GAAwBsM,2BACrDC,GAAsBvM,GAAwBuM,oBC/BrDC,GAAwB,aAExBC,GAAwB,SA6T9B,OAxTA,MAKI/2M,cACII,KAAKgsJ,cAAgB,IAAIznH,MACzBvkC,KAAK42M,aAAe,CAAC,EAErB54B,GAAI37K,YACAskF,GAAAA,QAAAA,qBACAtgE,GACIrmB,KAAKgsJ,cAAc1pJ,KACf4nM,GACA7jL,KACZ23J,GAAI37K,YACAskF,GAAAA,QAAAA,uBACAtgE,GACIrmB,KAAK62M,iBACD72M,KAAKu/J,uBACLl5I,KAGZ23J,GAAI37K,YACAskF,GAAAA,QAAAA,qBACAmwH,GAAe92M,KAAK+2M,yBAAyBD,KAIjD92M,KAAKg3M,yBAA2B,IAAI58L,SAAQC,IACxC,IAAK2C,UAAU85L,YAGX,YAFAz8L,GAAQ,GAKZ,MAAMjb,EAAOY,KAEPi+G,EAAW,GAEjBA,EAASr8G,KAAKob,UAAU85L,YAAYG,MAAM,CAAE3pM,KAAMqpM,KAC7Ch8L,MAAK06D,IACFr1E,KAAK+2M,yBAAyB,CAC1B,CAACrzG,GAAUgH,OAAQ1qG,KAAKk3M,sBAAsB7hI,KAElDA,EAAO8hI,SAAW,WACd,IACI/3M,EAAK23M,yBAAyB,CAC1B,CAACrzG,GAAUgH,OAAQtrG,EAAK83M,sBAAsBl3M,OAErD,CAAC,MAAO2D,GAER,CACJ,GAEM,KAEVigB,OAAM,KAAM,KAEjBq6F,EAASr8G,KAAKob,UAAU85L,YAAYG,MAAM,CAAE3pM,KAAMopM,KAC7C/7L,MAAK06D,IACFr1E,KAAK+2M,yBAAyB,CAC1B,CAACrzG,GAAU8M,OAAQxwG,KAAKk3M,sBAAsB7hI,KAElDA,EAAO8hI,SAAW,WACd,IACI/3M,EAAK23M,yBAAyB,CAC1B,CAACrzG,GAAU8M,OAAQpxG,EAAK83M,sBAAsBl3M,OAErD,CAAC,MAAO2D,GAER,CACJ,GAEM,KAEVigB,OAAM,KAAM,KAEjBxJ,QAAQ0c,IAAImnF,GAAUtjG,MAAK+hK,GAAWriK,EAAQqiK,EAAQ/wB,OAAMyrD,GAAaA,MAAzE,GAGP,CAUDF,wBAA6C,IAAvBG,EAAuB,uDAAJ,CAAC,EAItC,MAAMhiI,EAASgiI,EAAiBlxK,OAASkxK,EAAiBhiI,OAE1D,GAAsB,iBAAXA,EACP,MAAM,IAAI35D,UAGd,MA3G0B,YA2GnB25D,CACV,CASD0hI,yBAAyBD,GAEf,CAAEpzG,GAAU8M,MAAO9M,GAAUgH,OAC1BjzF,MAAKzG,GAAQA,KAAQ8lM,GAAeA,EAAY9lM,KAAUhR,KAAK42M,aAAa5lM,OAGjFhR,KAAK42M,aAAe,IACb52M,KAAK42M,gBACLE,GAEP92M,KAAKgsJ,cAAc1pJ,KAAK4nM,GAA6ClqM,KAAK42M,eAEtE52M,KAAK42M,aAAalzG,GAAU8M,QAAUxwG,KAAK42M,aAAalzG,GAAUgH,SAIlE1qG,KAAKomB,kBAAiB,SAGjC,CAODywL,iBAAiBS,EAAUjxL,GACvB,MAAMqO,EACArO,EAAQ5R,MACNlP,GAAgB,gBAAXA,EAAE8f,MAA0B9f,EAAEghB,WAAa+wL,IAEpD5iL,GACA02E,GAAWoD,0BACPwvE,GAAI7b,4BAA4BztI,GAE3C,CAMDtO,iBAAiBwrD,GACbosG,GAAI53J,iBAAiBwrD,EACxB,CAQD8tF,wBACI,OAAOse,GAAIte,uBACd,CASDJ,wBAAwBsC,GACpB,OAAOoc,GAAI1e,wBAAwBsC,EACtC,CASD21C,0BAA0BvmM,GACtB,OAAO,IAAIoJ,SAAQC,IAGXrJ,KAAQhR,KAAK42M,aACbv8L,EAAQra,KAAK42M,aAAa5lM,IAM9BhR,KAAKg3M,yBAAyBr8L,MAAKy8L,IAC/B,IAAKA,EAGD,YAFA/8L,GAAQ,GAKZ,MAAM4jG,EAAW,GAEjB,OAAQjtG,GACR,KAAK0yF,GAAUgH,MACXuT,EAASr8G,KACLob,UAAU85L,YAAYG,MAAM,CACxB3pM,KAAMqpM,MAEd,MACJ,KAAKjzG,GAAU8M,MACXyN,EAASr8G,KACLob,UAAU85L,YAAYG,MAAM,CACxB3pM,KAAMopM,MAEd,MACJ,QACIz4F,EAASr8G,KACLob,UAAU85L,YAAYG,MAAM,CACxB3pM,KAAMqpM,MAEd14F,EAASr8G,KACLob,UAAU85L,YAAYG,MAAM,CACxB3pM,KAAMopM,MAIlBt8L,QAAQ0c,IAAImnF,GAAUtjG,MAClB+hK,GAAWriK,EAAQqiK,EAAQ/wB,OAAM0rD,IAC7B,IACI,OAAOr3M,KAAKk3M,sBAAsBG,EACrC,CAAC,MACE,OAAO,CACV,QAEL,IAAMh9L,GAAQ,IARlB,GAjCJ,GA6CP,CAODm9L,gCACI,QACKh3K,GAAQ5jB,aAAe4jB,GAAQo1D,kBAAkB,QAC/Cp1D,GAAQu2D,eAElB,CAODwoE,uBACI,OAAOye,GAAIze,sBACd,CAUDyC,qBAAqBz7I,GAWjB,OAVyBy3J,GAAI/b,oCAER39J,OAAS,GAI1BtE,KAAK62M,iBACDtwL,EAAUy3J,GAAI/b,qCAGf+b,GAAIhc,qBAAqBz7I,EACnC,CAODrB,iBAAiB5hB,EAAOD,GACpBrD,KAAKgsJ,cAAc3pJ,YAAYiB,EAAOD,EACzC,CAODwjC,oBAAoBvjC,EAAOD,GACvBrD,KAAKgsJ,cAAcrnH,eAAerhC,EAAOD,EAC5C,CAMDo0M,UAAUn0M,GAAgB,2BAANZ,EAAM,iCAANA,EAAM,kBACtB1C,KAAKgsJ,cAAc1pJ,KAAKgB,KAAUZ,EACrC,GC9TCqI,IAASkC,EAAAA,EAAAA,wDAoFf,SAASyqM,GAAkBp5C,GACvB,IAAK,MAAM5pI,KAAU4pI,EACjB5pI,EAAO6xI,YAEd,CC3FD,MAAMx7J,IAASkC,EAAAA,EAAAA,8DAKA,MAAM0qM,WAA6B1sC,GAI9CrrK,cACIu4E,QAMAn4E,KAAKsmM,WAAa,IAAIl4I,IAMtBpuD,KAAK4vG,SAAW,IACnB,CAKDkuC,iBAAiBxc,EAAOxuC,EAAWyjB,GAC/B,MAAO,CAAC,CACX,CAKD20D,kBAAkB5pC,EAAO/qB,GAExB,CAKD40D,aAAa33J,GACT,OAAOxT,KAAKsmM,WAAWniL,IAAI3Q,EAC9B,CAKD43J,mBAAmB53J,GAElB,CAKDsrI,iBAAiBusB,GACb,GAAKA,SAAAA,EAAU/mK,OAIf,IAAK,MAAMkP,KAAQ63J,EACfrrK,KAAKsmM,WAAW9mG,OAAOhsF,EAE9B,CAMD00L,YAAYr4F,GACR7vG,KAAK4vG,SAAWC,CACnB,CAKD+oC,aAAaplI,EAAMisH,GACf,GAAoB,iBAATjsH,EACP,MAAM,IAAIkI,UAAW,QAAOlI,uBAKhC,MAAM40L,EAAgBpoM,KAAKsmM,WAAWniL,IAAI3Q,GAEtC40L,GAAiBA,IAAkB3oE,GACnC10H,GAAOpH,MAAO,+BAA8BykM,QAAoB3oE,KAEpEz/H,KAAKsmM,WAAWx/J,IAAItzB,EAAMisH,EAC7B,CAKD6rC,mBAAmB/0D,EAAYhxF,GAC3B,OAAO,CACV,CAKDgmJ,kBAAkBh1D,EAAY1C,GAC1B,OAAO,CACV,CAKD8kC,mBAAmBnlI,EAAM+iG,GACxB,CAKDi1D,wBAAwBp/J,GACpB,MAAMsH,EAAQzI,MAAM6Q,KAAK9b,KAAKsmM,YACzBv1L,QAAOm+C,GAASA,EAAM,KAAO9iD,IAC7BqF,KAAIy9C,GAASA,EAAM,KAEnBx7C,SAAAA,EAAOpP,QAIZtE,KAAK8+I,iBAAiBprI,EACzB,EC7HE,IAAKkkM,aAAAA,GAAAA,EAAAA,OAAAA,iBAAAA,EAAAA,iBAAAA,+BAAAA,EAAAA,SAAAA,mBAAAA,EAAAA,UAAAA,oBAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,YAAAA,eAAAA,KAAAA,GAAAA,CAAAA,ICOZ,MAAM7sM,IAASkC,EAAAA,EAAAA,2DASA,MAAM4qM,GAgBjBj4M,cAA0B,IAAdmH,EAAc,uDAAJ,CAAC,EACnB/G,KAAKosH,SAAW,CACZkmB,SAAU,CAAC,EACX9xB,aAAa,EACbs3F,cAAc,EACdC,cAAc,KACXhxM,GASP/G,KAAK41G,QAAU,GAOf51G,KAAKg4M,gBAAkB,KAGvBh4M,KAAKo9E,SAAWp9E,KAAKo9E,SAASv6E,KAAK7C,MACnCA,KAAKi4M,gBAAkBj4M,KAAKi4M,gBAAgBp1M,KAAK7C,MACjDA,KAAKk4M,eAAiBl4M,KAAKk4M,eAAer1M,KAAK7C,KAClD,CAQDm4M,aACI,OAAOn4M,KAAKosH,SAAS2T,OACxB,CASDq4E,eAAeC,GACX,OAAQA,EAAQzpK,KAAK,WACrB,KAAKgpK,GAAQU,OACTt4M,KAAKu4M,iBAAiBF,GACtB,MAEJ,KAAKT,GAAQY,SACTx4M,KAAKy4M,mBAAmBJ,GACxB,MAEJ,KAAKT,GAAQc,UACT14M,KAAK24M,oBAAoBN,GACzB,MAEJ,KAAKT,GAAQgB,eACT54M,KAAK64M,iBAAiBR,GAG7B,CAUD5uM,QAAwB,IAAlBkyG,EAAkB,uDAAJ,GACZ37G,KAAKg4M,kBAITh4M,KAAK41G,QAAU51G,KAAK41G,QAAQ7pG,OAAO4vG,GAEnC37G,KAAKg4M,gBAAkBh4M,KAAK84M,wBAE5B94M,KAAKg4M,gBAAgBj6E,OAAOpiB,GAC/B,CAQDxxG,OACQnK,KAAKg4M,iBACLh4M,KAAKg4M,gBAAgB9kE,YAGzBlzI,KAAK24M,qBACR,CASDG,wBAOI,MAWMC,EAAiB,CAGnB9oI,WAAW,EACX0xD,OAAQ,CACJuR,UAAW,QAEfl/D,OAAQh0E,KAAKk4M,eAIbhzL,iBAAkB,IAAM,QAWtB8zL,EAAe,CACjBl0L,WAAYogI,MACTllJ,KAAKosH,SAASkmB,UAgCf2mE,EAAW,CACb/zL,iBAAkB,OAClB4tF,oBAAqB,OACrB7B,gBAAiB,GACjB3O,aAAc,CAAEhgG,KArBJgB,IACZ,OAAQA,GACR,KAAKslF,GAAW,WAAXA,sBACL,KAAKA,GAAW,WAAXA,kBACD5oF,KAAKo9E,SAASw6H,GAAQzuH,iBAAkB7lF,GAH5C,GAqBAujC,oBAAqB,OACrBs4F,uBAAwB,OACxB1C,2BAA4B,KAAM,GAiBtCz8H,KAAK40L,KAAO,IAAI5W,GAVO,CACnBjrE,SAAU,IAAM,IASgB,CAAC,GAOrC/yG,KAAK40L,KAAKvyL,YACNskF,GAAAA,QAAAA,mBACA3mF,KAAKi4M,iBAGT,MAAMjG,EAAiB,IAAIv+D,QACvB3sI,OACAA,EACA9G,KAAKosH,SAAS2T,QACdg5E,EACA,CACIn2D,oBAAqB5iJ,KAAKosH,SAAS0rF,aACnCj1D,oBAAqB7iJ,KAAKosH,SAAS2rF,cAEvCiB,GACA,EACAh5M,KAAKosH,SAAS5L,aAGZoyB,EAAiB,IAAI+kE,GAU3B,OARA/kE,EAAes1D,YAAY+Q,GAM3BjH,EAAej0G,WAAWk7G,EAAUj5M,KAAK40L,KAAMhiD,EA7H5B,CAAC,GA+Hbo/D,CACV,CAWD50H,SAAS+U,GAAyB,IAAdE,EAAc,uDAAJ,GAC1BryF,KAAKosH,SAAShrG,QAAQphB,KAAKosH,SAAS2T,QAAS5tC,EAAWE,EAC3D,CAWD4lH,gBAAgBiB,GACZl5M,KAAK41G,QAAQh0G,KAAKs3M,GAElBl5M,KAAKosH,SAAS+sF,eAAeD,EAChC,CAUDhB,eAAernI,GACX7wE,KAAKosH,SAASgtF,cAAcp5M,KAAKosH,SAAS2T,QAASlvD,EACtD,CAWD0nI,iBAAiBF,GACRr4M,KAAKg4M,gBAMVh4M,KAAKg4M,gBAAgBn+D,UAAUw+D,GAL3BttM,GAAOpH,MAAM,qDAMpB,CAUD80M,mBAAmBJ,GACXr4M,KAAKg4M,gBACLjtM,GAAOpH,MAAM,sDAKjB3D,KAAKg4M,gBAAkBh4M,KAAK84M,wBAE5B94M,KAAKg4M,gBAAgB5kE,YACjBilE,GACA,SACA,IAAMr4M,KAAKo9E,SACPp9E,KAAKosH,SAAS2T,QACd63E,GAAQzuH,iBACR,4BAGX,CASDwvH,sBACI34M,KAAK41G,QAAQxyG,SAAQkiB,GAASA,EAAM80E,YACpCp6F,KAAK41G,QAAU,GAEX51G,KAAKg4M,iBACLh4M,KAAKg4M,gBAAgBz7D,eAGrBv8I,KAAK40L,OACL50L,KAAK40L,KAAKjwJ,eACNgiD,GAAAA,QAAAA,mBACA3mF,KAAKi4M,iBAGTj4M,KAAK40L,KAAK1N,UAEjB,CAUD2xB,iBAAiBR,GACbr4M,KAAKg4M,gBAAgBllE,iBAAiBulE,EACzC,ECvYL,MAAMttM,IAASkC,EAAAA,EAAAA,gECJTosM,GAAuB,qBACvB50K,GAAU,IAAIF,MACpB,IAAI+0K,IAAe,EACfC,GAAM,KAsHV,UACI7/L,KAtDGxU,eAAoB6B,GACvB,GAAIuyM,GACA,MAAM,IAAI/2M,MAAM,oCAGpB,MAAM,YAAEk7F,EAAF,gBAAeC,EAAf,0BAAgClE,GAA8BzyF,EAEpE,IAAK02F,IAAgBC,GAAmBlE,EACpC,MAAM,IAAIj3F,MAAM,yBAOpB,aAzEJ,SAAqBwE,GACjB,IAAIy5B,GAAQ+0D,gBAIZ,OAAO,IAAIn7E,SAAQC,IACfrV,KAAAA,WACI+B,EAAQqkM,0BAA4Bj8G,IACxB,GACE,OACIroF,EACCuT,EALvB,GAOP,CAwDSm/L,CAAYzyM,GAElBwyM,GAAM,IAAIh6M,OAAO89F,UA1CrB,SAAqBt2F,GACjB,OAAO,IAAIqT,SAAQ,CAACC,EAASC,KACzB,MAAMm/L,EAAQ1yM,EAAQ02F,YAChBi8G,EAAY3yM,EAAQ22F,gBACpB79F,EAASkH,EAAQyjM,cAAgBzjM,EAAQokM,uBAAyBt2E,GAASV,kBAEjFolF,GAAIx7G,WAAW07G,EAAOC,EAAW75M,GAAQ,CAACw1E,EAAQvxD,KAC/B,YAAXuxD,GACAkkI,GAAIx0K,GAAGs0K,IAAsB,WAAa,2BAAT32M,EAAS,yBAATA,EAAS,gBACtC+hC,GAAQniC,KAAK+2M,MAAyB32M,EACzC,IACD42M,IAAe,EACfj/L,KAEAC,EAAO,CACH+6D,SACAvxD,WAEP,GACF,KAAM,CAAE61L,oBAAoB,GAb/B,GAeP,CAuBUC,CAAY7yM,EACtB,EAuCG8yM,QAxBG,WACH,OAAKP,GAIE,IAAIl/L,SAAQ,CAACC,EAASC,KACzBmqB,GAAQM,GAAGs0K,IAAsB,CAAChkI,EAAQw9B,KACvB,YAAXx9B,EACAh7D,EAAQw4F,GAERv4F,EAAO,CACH+6D,SACAw9B,WAEP,IAIL0mG,GAAIO,iBAAJ,IAhBO1/L,QAAQE,OAAO,gBAkB7B,6BC3HD,MAAMvP,IAASkC,EAAAA,EAAAA,6CAMA,MAAM8sM,GAIjBn6M,cACII,KAAKg6M,UAAW,EAChBh6M,KAAKi6M,cAAgB,GACrBj6M,KAAKk6M,gBAAkB,EAC1B,CAODC,eAAenoM,GACNA,EAAO0/I,kBACR3mJ,GAAOuY,KAAK,mDAGhBtjB,KAAKi6M,cAAcr4M,KAAKoQ,EAC3B,CASDvI,QAEI,GAAIzJ,KAAKg6M,SACL,OAAOh6M,KAAKo6M,UAAUpoM,OAK1B,GAFAhS,KAAKutL,cAAgBT,MAEhB9sL,KAAKi6M,cAAc31M,OAGpB,OAFAyG,GAAOuY,KAAK,8DAEL,KAGXtjB,KAAKg6M,UAAW,EAEhBh6M,KAAKo6M,UAAYp6M,KAAKutL,cAAc8sB,+BAEpC,IAAK,MAAMroM,KAAUhS,KAAKi6M,cAAe,CACrC,MAAMK,EAAYt6M,KAAKutL,cAAcpsF,wBAAwBnvF,GAE7DsoM,EAAUvhM,QAAQ/Y,KAAKo6M,WAGvBp6M,KAAKk6M,gBAAgBt4M,KAAK04M,EAC7B,CAED,OAAOt6M,KAAKo6M,UAAUpoM,MACzB,CAODq/B,QACIrxC,KAAKg6M,UAAW,EAChBh6M,KAAKi6M,cAAgB,GAGrB,IAAK,MAAMK,KAAat6M,KAAKk6M,gBACzBI,EAAUthM,aAGdhZ,KAAKk6M,gBAAkB,GAEnBl6M,KAAKutL,gBACLvtL,KAAKutL,mBAAgBzmL,EAE5B,EClDL,MAAMiE,GAAS/C,IAAAA,4BAef,SAASuyM,GAAkCxzM,GACvC,MAAM6mC,EAAkB,CAAC,EAUzB,OARAA,EAAU,gBAAsB7mC,EAAQsf,QAAQqH,SAAS,SACzDkgB,EAAU,gBAAsB7mC,EAAQsf,QAAQqH,SAAS,SACzDkgB,EAAU,yBAA+B7mC,EAAQsf,QAAQqH,SAAS,WAE9DkgB,EAAW4sK,kBACX5sK,EAAWg3D,WAAa79F,EAAQ69F,YAG7Bh3D,CACV,CAwBD,UAEIj7B,QAAS,WAETm3L,gBAJW,GAaX2Q,uBHpFW,MAeX76M,cAA0B,IAAdmH,EAAc,uDAAJ,CAAC,EACnB,MAAM,gBACF2zM,KACGp6C,GACHv5J,EAOJ/G,KAAKosH,SAAW,CACZkmB,SAAUooE,GAAmBA,EAAgBrvG,KAAKzsF,WAAW+iH,OAAOghB,gBACjE2d,GAQPtgK,KAAKg4M,gBAAkB,KAGvBh4M,KAAK26M,cAAgB36M,KAAK26M,cAAc93M,KAAK7C,MAC7CA,KAAKk4M,eAAiBl4M,KAAKk4M,eAAer1M,KAAK7C,MAC/CA,KAAKi4M,gBAAkBj4M,KAAKi4M,gBAAgBp1M,KAAK7C,KACpD,CAgBDo4M,eAAet0L,GACX,MAAMi8G,EAAUj8G,EAAQhI,KAExB,IAAKikH,EACD,OAMJ,GAAI//H,KAAKg4M,iBACFh4M,KAAKg4M,gBAAgBG,eAAiBp4E,EAOzC,YANA//H,KAAK26M,cACD56E,EACA63E,GAAQzuH,iBACR,YAMR,MAAMtY,EAAK7wE,KAAK46M,oBAAoB92L,EAAQ7D,KAAK4wD,IAC3CwnI,EAAUxnI,GAAMA,EAAGp8D,KAAK,UACxBT,EAASqkM,GAAWA,EAAQzpK,KAAK,UAEnC56B,IAAW4jM,GAAQY,WACnBx4M,KAAKg4M,gBAAkBh4M,KAAK84M,sBAAsB/4E,EAAS,CACvDvf,aAAa,EACbu3F,cAAc,KAMlB/3M,KAAKg4M,iBACLh4M,KAAKg4M,gBAAgBI,eAAeC,GAKpCrkM,IAAW4jM,GAAQzuH,kBAChBn1E,IAAW4jM,GAAQiD,aACnB7mM,IAAW4jM,GAAQc,WACtB14M,KAAK86M,sBAIZ,CAWDrxM,MAAMs2H,GAA2B,IAAlBpkB,EAAkB,uDAAJ,GACzB37G,KAAKg4M,gBAAkBh4M,KAAK84M,sBAAsB/4E,EAAS,CACvDvf,aAAa,EACbu3F,cAAc,IAGlBp8F,EAAYv4G,SAAQ,CAACs1K,EAAYqiC,KAC7B,MAAMC,EAAuBtwC,GAA2B,OAAQgO,EAAWhpE,UAAWqrG,GAEtFriC,EAAWh7B,cAAcs9D,EAAzB,IAGJh7M,KAAKg4M,gBAAgBvuM,MAAMkyG,EAC9B,CAODxxG,OACQnK,KAAKg4M,iBACLh4M,KAAKg4M,gBAAgB7tM,OAGzBnK,KAAKg4M,gBAAkB,IAC1B,CAUD4C,oBAAoBK,GAChB,IACI,MAAMC,GAAS,IAAIz3J,WAAYC,gBAAgBu3J,EAAK,YAEpD,OAAO9wK,KAAE+wK,EACZ,CAAC,MAAOttM,GAGL,OAFA7C,GAAOpH,MAAM,kDAEN,IACV,CACJ,CAaDm1M,sBAAsB/4E,GAAuB,IAAdh5H,EAAc,uDAAJ,CAAC,EACtC,IAAKg5H,EACD,MAAM,IAAIx9H,MAAM,mDAGpB,MAAMgzI,EAAY,CACdjD,SAAUtyI,KAAKosH,SAASkmB,SACxBlxH,QAASphB,KAAK26M,cACdxB,eAAgBn5M,KAAKi4M,gBACrBmB,cAAep5M,KAAKk4M,eACpBn4E,aACGh5H,GAGP,OAAO,IAAI8wM,GAAkBtiE,EAChC,CAgBDolE,cAAc56E,EAAS5tC,GAAyB,IAAdE,EAAc,uDAAJ,GACxCtnF,GAAOpH,MACH,oCAAqCo8H,EAAS5tC,EAAWE,GAE7D,MAAMxhB,GAAKnJ,EAAAA,GAAAA,KAAI,CACX7rD,GAAIkkH,EACJ/uH,KAAM,QAELhD,EAAE,SAAU,CACTq/D,MAAO,oBACPr5D,OAAQm+E,IAEXnkF,EAAE,WACFhC,EAAEqmF,GACF9kB,KAELvtE,KAAKk4M,eAAen4E,EAASlvD,GAEzB7wE,KAAKg4M,iBACFh4M,KAAKg4M,gBAAgBG,eAAiBp4E,GACzC//H,KAAK86M,sBAEZ,CAaD7C,gBAAgBiB,GACZ,IAAKl5M,KAAKosH,SAAS+sF,eAIf,OAHApuM,GAAOpH,MAAM,gDACbu1M,EAAiB9+G,UAKrB,MAAM+gH,EAAUjC,EAAiBtxG,eACjC,IAAIiM,EAEAsnG,IACAtnG,EAAY7zG,KAAKosH,SAASgvF,sBACpB3yH,GAAU,UAAVA,QAAoBA,GAAU,UAAVA,QAK9B,MAAMo5E,EAAcq3C,EAAiBvsG,oBAC/B0uG,EAAmBr9B,GAAIs9B,kBACzB,CACI,CACI/0L,SACK,SAAQvmB,KAAKg4M,gBAAgBG,eAClCrlH,UAAWqoH,EAAUz3G,GAAUgH,MAAQhH,GAAU8M,MACjDo0B,WAAY,QACZ5yH,OAAQ6vJ,EACRv8I,MAAOu8I,EAAY18B,iBAAiB,GACpCtxB,eAIZ7zG,KAAKosH,SAAS+sF,eAAekC,EAAiB,GACjD,CAUDnD,eAAen4E,EAASlvD,GACpB,GAAK7wE,KAAKosH,SAASgtF,cAInB,IACI,MAAMmC,GACA,IAAIC,eAAgBC,kBAAkB5qI,EAAGvD,UAAYuD,GAE3D7wE,KAAKosH,SAASgtF,cAAcr5E,EAAS,CAAElvD,GAAI0qI,GAC9C,CAAC,MAAO3tM,GACL7C,GAAOpH,MAAM,iDAChB,CACJ,CAQDm3M,uBACI96M,KAAKmK,OAELnK,KAAKosH,SAASsvF,oBACP17M,KAAKosH,SAASsvF,oBACxB,GGhODC,UAAW,CACPC,UC1GR,CACIj4M,MAAO,CACHk4M,KAAM,OACNzyM,MAAO,QACP0yM,oBAAqB,sBACrBC,mBAAoB,qBACpBC,oBAAqB,uBAEzBzrL,KAAM,CACF0rL,KAAM,OACNzzI,OAAQ,UAEZ6M,OAAQ,CACJ84C,IAAK,MACLD,GAAI,KACJ8jB,QAAS,YD4FTkqE,WAAY7W,EACZtrE,oBAAqB9L,EACrBonD,qBAAsBnD,IAE1BzsI,OAAQ,CACJ6nE,WAAYljB,EACZxrE,WAAY65F,EACZ0jG,UAAWvwB,EACXtmK,MAAOspE,EACPzoE,aAAc+jL,EACd9gB,kBAAmB7C,EACnBkL,QAASL,GAEbj3G,OAAQ,CACJmzB,WAAYzkB,EACZjqE,WAAYk6F,EACZxzF,MAAO8pE,GAEXgtH,WAAY,CACRnsH,gBAAeA,IAEnBosH,UAAWr0M,IAAAA,OACXme,aAAcm2L,GACdjjH,UAAW+R,GAAW/R,UACtB3/E,OAAwC,IAAnC3S,EAAmC,uDAAJ,CAAC,EAEjCgE,GAAOsM,KAAM,sBAAqBmpB,GAAQw0D,mBAAmBx0D,GAAQg1D,gBAErEq/B,GAASn7G,KAAK3S,EAAQmtH,iBACtB9oB,GAAW1xF,KAAK3S,GAChB,MAAM+9B,EAAQ/9B,EAAQ+9B,OAAS,CAAC,EAqBhC,GAlBA2iE,GAAAA,KAAkB3iE,GAIbvlC,OAAO0xG,kBACR1xG,OAAO0xG,gBAAkB,CAAC,IAGS,IAAnClqG,EAAQw1M,yBACRxxM,GAAOuY,KAAK,kCACZtjB,KAAKq5F,UAAUe,WAGfrzF,EAAQy1M,4BACRh5M,KAAAA,WACIxD,KAAKy8M,wBAAwB55M,KAAK7C,OAGtCA,KAAK2S,QAAS,CACd,MAAMs/F,EAAY,CACd7lG,GAAI,oBACJwF,UAAW,iBACXe,QAAS3S,KAAK2S,SAGlBy4F,GAAWwD,QAAQ3nG,KAAK8B,UAAUkpG,GACrC,CAED,OAAO+rE,GAAItkK,KAAK3S,EACnB,EAODg7J,wBAAuB,IACZic,GAAIjc,0BAWf26C,kBAAiB,IACN1+B,GAAI0+B,oBAGfvvM,YAAYnC,GACRhD,IAAAA,YAAmBgD,EACtB,EAUDkC,gBAAgBlC,EAAOoB,GACnBpE,IAAAA,gBAAuBgD,EAAOoB,EACjC,EAQDuwM,sBAAsBC,GAClB50M,IAAAA,mBAA0B40M,EAC7B,EAQDC,yBAAyBD,GACrB50M,IAAAA,sBAA6B40M,EAChC,EASDE,oBAAoB/1M,GAChBiB,IAAAA,iBAAwBjB,EAC3B,EAwCDu0M,oBAA+F,IAA7Ev0M,EAA6E,uDAAzC,CAAC,EAAGg2M,EAAqC,uCACvFC,GAAmB,EAEvB,MAAM,iCAAEC,EAAF,qBAAoCC,KAAyBC,GAAgBp2M,EAoBnF,OAnB6Bk2M,IAAoCF,GAEpC/+B,GAAI9b,2CAGtBg7C,GACP39M,OAAOqK,YAAW,KACTozM,GACDV,GAAAA,UAA4BpS,GAC/B,GArPuB,KAgP5BoS,GAAAA,UAA4BpS,GAAoD1pK,GAAQw0D,WASvFz1F,OAAO0xG,kBACR1xG,OAAO0xG,gBAAkB,CAAC,GAE9B1xG,OAAO0xG,gBAAgB,2BACjB1xG,OAAOqvB,YAAY1tB,MAElB88K,GAAI3d,+BAA+B88C,GACrCxiM,MAAKuS,IAWF,GAVA8vL,GAAmB,EAEnBz9M,OAAO0xG,gBAAgB,yBACjB1xG,OAAOqvB,YAAY1tB,MAEzBkqG,GAAWgE,cACP1c,GACI,UACA6nH,GAAkC4C,KAEtCn9M,KAAKo9M,yBACL,IAAK,IAAIt4M,EAAI,EAAGA,EAAIooB,EAAO5oB,OAAQQ,IAAK,CACpC,MAAMwgB,EAAQ4H,EAAOpoB,GAEjBwgB,EAAMoqF,YAAchM,GAAU8M,OAC9BpF,GAAWmB,gBAAgBjnF,EACvBA,EAAMwvF,cAAcjyG,KAAKyiB,GAEpC,CAIL,MAAM+3L,EACAr/B,GAAI/b,oCAEV,GAAIo7C,EACA,IAAK,IAAIv4M,EAAI,EAAGA,EAAIooB,EAAO5oB,OAAQQ,IACjBooB,EAAOpoB,GAEfsgK,+BACFi4C,GAIZ,OAAOnwL,CAAP,IAEHtJ,OAAMjgB,IAGH,GAFAq5M,GAAmB,EAEfr5M,EAAM2J,OAAS8hF,GAA8C,CAI7D,MAAM6iB,EAAY,CACd7lG,GAAI,8BACJ0X,QAASngB,EAAMmgB,SAGnBsnF,GAAWwD,QAAQ3nG,KAAK8B,UAAUkpG,IAElC7G,GAAWgE,cACP1c,GACI,UACA,CACInvF,OAAQ,oCAEvB,MAAM,GAAII,EAAM2J,OAAS8hF,GAA4B,CAElD,MAAM6iB,EAAY,CACd7lG,GAAI,2BACJipE,OAAQ1xE,EAAMusF,IAAI7pE,SAGtB+kF,GAAWwD,QAAQ3nG,KAAK8B,UAAUkpG,IAElC,MAAMrkE,EACA2sK,GAAkCxzM,GAExC6mC,EAAWrqC,OAAS,mBACpBqqC,EAAWvnB,QAAU1iB,EAAMusF,IAAI7pE,QAAQpT,KAAK,KAC5Cm4F,GAAWgE,cACP1c,GAAwB,QAAS9kD,GACxC,KAAM,CAEHw9D,GAAWsD,uBAAuB/qG,GAElC,MAAMiqC,EACA2sK,GAAkCxzM,GAExC6mC,EAAWrqC,OAASI,EAAM2J,KAC1B89F,GAAWgE,cACP1c,GAAwB,QAAS9kD,GACxC,CAKD,OAHAruC,OAAO0xG,gBAAgB,yBACjB1xG,OAAOqvB,YAAY1tB,MAElBkZ,QAAQE,OAAO3W,EAAtB,GAEX,EAkBD25M,sBAAqB,CAACC,EAAoB/vB,EAAYN,IAC3CF,GAAgBz6J,OAAOgrL,EAAoB/vB,EAAYN,GASlEswB,iBAAgB,IACL,IAAIzD,GAQf0D,qBAAoB,IPvZb,IAAIrjM,SAAQC,IACf2jK,GAAI53J,kBAAiBC,IACjB,MAAMq3L,EAAer3L,EAAQtV,QAAO2jB,GAA0B,eAAhBA,EAAOrP,OAC/Cs4L,EAAqB,GAG3B,IAAK,MAAMC,KAAaF,EAAc,CAClC,MAAMG,EAAgB7/B,GAAI3d,+BAA+B,CAAEh6I,QAAS,CAAE,SAClE26I,YAAa48C,EAAUr3L,WAAY5L,MAAKuS,IAIxC,MAAM5H,EAAQ4H,EAAO,GAIrB,OAFAk+E,GAAWmB,gBAAgBjnF,EAAOA,EAAMwvF,cAAcjyG,KAAKyiB,IAEpDA,CAAP,IAGJq4L,EAAmB/7M,KAAKi8M,EAC3B,CAEDzjM,QAAQikG,WAAWs/F,GAAoBhjM,MAAKmjM,IACxC,MAAMC,EAAqBD,EAAa/sM,QAAOlD,GAAkB,cAAbA,EAAEwnE,SAChD2oI,EAAmBF,EAAa/sM,QAAOlD,GAAkB,aAAbA,EAAEwnE,SAG9CyoF,EAAmBigD,EAAmBtsM,KAAI5D,GAAKA,EAAEhG,QACjDo2M,EAAgBD,EAAiBvsM,KAAI5D,GAAKA,EAAEhG,QAElD,IAAK,MAAMtE,KAAU06M,EACjBlzM,GAAOpH,MAAM,8CAA+CJ,GAIhE,IAAK,MAAMmxB,KAAUopI,EACjBppI,EAAOqQ,GAAG6pD,IAA4C2R,IAK9CA,EAAa,OACbm3G,GAAkB55C,GAClBzjJ,EAAQ,CAAEkM,SAAUmO,EAAOnO,SACvB23L,YAAaxpL,EAAOpP,MAAMpK,QACjC,IAKTtR,YAAW,KACP8tM,GAAkB55C,GAClBzjJ,EAAQ,CACJkM,SAAU,GACV23L,YAAa,IAFjB,GA9DM,IA4DV,GA5BJ,GArBJ,IOkaJx+C,wBAII,OAHA30J,GAAOuY,KAAK,yFAGLtjB,KAAKmmB,aAAau5I,uBAC5B,EAWDJ,wBAAwBsC,GAIpB,OAHA72J,GAAOuY,KAAK,2FAGLtjB,KAAKmmB,aAAam5I,wBAAwBsC,EACpD,EASD41C,gCACI,OAAOx3M,KAAKmmB,aAAaqxL,+BAC5B,EAOD4F,uBAAsB,IACXhyG,GAAWU,oBAAsB1L,GAAoBW,wBAShE36E,iBAAiBwrD,GACb7mE,GAAOuY,KAAK,oFAEZtjB,KAAKmmB,aAAaC,iBAAiBwrD,EACtC,EAUD6qI,wBAAwB34L,EAAS/L,EAAQomM,EAAQC,EAAOz6M,GACpDoH,GAAOpH,MACF,mBAAkBmgB,IAClB,WAAU/L,IACV,SAAQomM,IACR,WAAUC,IACX,eAAgBz6M,GACpBynG,GAAW6D,kBAAkBtrG,EAChC,EASD06M,eAAe,GAAc,IAAd,SAAEt2F,GAAY,EACzBW,GAAAA,kBAA8B,CAAEX,YACnC,EAEDu2F,YAlbW,GA0bXC,KAAM,CACFC,SADE,KAEFx5M,WAFE,KAGFw7B,QAAOA,OEthBXrI,yBAA2B,CAAC,EAGhC,SAASjB,oBAAoBkB,GAE5B,IAAIqmL,EAAetmL,yBAAyBC,GAC5C,QAAqBtxB,IAAjB23M,EACH,OAAOA,EAAaz/M,QAGrB,IAAIC,EAASk5B,yBAAyBC,GAAY,CACjDhsB,GAAIgsB,EACJsmL,QAAQ,EACR1/M,QAAS,CAAC,GAUX,OANAq5B,oBAAoBD,GAAU3wB,KAAKxI,EAAOD,QAASC,EAAQA,EAAOD,QAASk4B,qBAG3Ej4B,EAAOy/M,QAAS,EAGTz/M,EAAOD,OACf,CCzBAk4B,oBAAoBynL,KAAO,CAAC,ECC5BznL,oBAAoB3kB,EAAKtT,IACxB,IAAI2/M,EAAS3/M,GAAUA,EAAO66B,WAC7B,IAAO76B,EAAiB,QACxB,IAAM,EAEP,OADAi4B,oBAAoB3xB,EAAEq5M,EAAQ,CAAE1wM,EAAG0wM,IAC5BA,CAAM,ECLd1nL,oBAAoB3xB,EAAI,CAACvG,EAAS6/M,KACjC,IAAI,IAAIj3M,KAAOi3M,EACX3nL,oBAAoB1pB,EAAEqxM,EAAYj3M,KAASsvB,oBAAoB1pB,EAAExO,EAAS4I,IAC5EnI,OAAOwc,eAAejd,EAAS4I,EAAK,CAAEgyB,YAAY,EAAMzV,IAAK06L,EAAWj3M,IAE1E,ECNDsvB,oBAAoBlc,EAAI,WACvB,GAA0B,iBAAf8jM,WAAyB,OAAOA,WAC3C,IACC,OAAO9+M,MAAQ,IAAI4C,SAAS,cAAb,EAChB,CAAE,MAAOgL,GACR,GAAsB,iBAAXrO,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxB23B,oBAAoB1pB,EAAI,CAACxG,EAAKsxB,IAAU74B,OAAO+C,UAAUgF,eAAeC,KAAKT,EAAKsxB,GCClFpB,oBAAoBnpB,EAAK/O,IACH,oBAAXuc,QAA0BA,OAAOse,aAC1Cp6B,OAAOwc,eAAejd,EAASuc,OAAOse,YAAa,CAAEhyB,MAAO,WAE7DpI,OAAOwc,eAAejd,EAAS,aAAc,CAAE6I,OAAO,GAAO,ECL9DqvB,oBAAoB6nL,IAAO9/M,IAC1BA,EAAO+/M,MAAQ,GACV//M,EAAOqzC,WAAUrzC,EAAOqzC,SAAW,IACjCrzC,GCAR,IAAIggN,oBAAsB/nL,oBAAoB","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@hapi/bourne/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/watchRTC/webpack/universalModuleDefinition","webpack://JitsiMeetJS/watchRTC/src/index.ts","webpack://JitsiMeetJS/watchRTC/src/sdk.ts","webpack://JitsiMeetJS/watchRTC/src/stats.ts","webpack://JitsiMeetJS/watchRTC/src/types.ts","webpack://JitsiMeetJS/watchRTC/src/utils.ts","webpack://JitsiMeetJS/watchRTC/src/version.ts","webpack://JitsiMeetJS/watchRTC/src/watchrtchttp.ts","webpack://JitsiMeetJS/watchRTC/src/watchrtcsocket.ts","webpack://JitsiMeetJS/watchRTC/src/detect-gpu.js","webpack://JitsiMeetJS/watchRTC/src/gpu-benchmarks|sync|/^/.*$","webpack://JitsiMeetJS/watchRTC/src/lz-string.js","webpack://JitsiMeetJS/watchRTC/webpack/bootstrap","webpack://JitsiMeetJS/watchRTC/webpack/startup","webpack://JitsiMeetJS/webpack:/watchRTC/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jquery/dist/jquery.slim.min.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/watchRTC/WatchRTC.ts","webpack://JitsiMeetJS/./modules/watchRTC/functions.ts","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/json.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/E2EEErrors.ts","webpack://JitsiMeetJS/./modules/e2ee/SAS.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/sha1.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/RoomMetadata.ts","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/onlyOnce.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/setImmediate.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/DoublyLinkedList.js","webpack://JitsiMeetJS/./node_modules/async-es/asyncify.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/wrapAsync.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/initialParams.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/queue.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async-es/queue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/litemode/LiteModeContext.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/trackRecorder.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/CustomSignalingLayer.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.ts","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, () => {\nreturn ","const ljm = require('./JitsiMeetJS').default;\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(ljm);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceLandmarks = [];\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} isNowDominantSpeaker - If true, the user will be accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face landmarks of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceLandmarks() {\n        return this._faceLandmarks;\n    }\n\n    /**\n     * Sets the face landmarks of the user.\n     *\n     * @param {Object} faceLandmarks - object with face expressions.\n     * @returns {void}\n     */\n    setFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks = faceLandmarks;\n    }\n\n    /**\n     * Adds new face landmarks to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks.push(faceLandmarks);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"watchRTC\"] = factory();\n\telse\n\t\troot[\"watchRTC\"] = factory();\n})(self, function() {\nreturn ","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.addStateListener = exports.persistentStart = exports.persistentEnd = exports.addStatsListener = exports.disconnect = exports.connect = exports.mapTrack = exports.mapStream = exports.addEvent = exports.enableDataCollection = exports.disableDataCollection = exports.addKeys = exports.setUserRating = exports.addTags = exports.setConfig = exports.init = void 0;\r\nrequire(\"./types\");\r\nvar sdk_1 = require(\"./sdk\");\r\n/**\r\n * Initialize SDK. Can be called multiple times but it will be initialized only at the first time.\r\n * Use 'setConfig' function after if you don't have rtcRoomId and rtcPeerId yet.\r\n * @param watchrtc\r\n * @param prefixesToWrap\r\n * @param services\r\n */\r\nvar init = function (watchrtcConfig, services) {\r\n    (0, sdk_1.initSDK)((watchrtcConfig || {}), [\"\"], services);\r\n};\r\nexports.init = init;\r\n/**\r\n * You also can use watchRTC.setConfig function to set watchRTC configuration after calling init()\r\n * and before the creation of RTCPeerConnection objects\r\n */\r\nvar setConfig = function (watchrtcConfig) {\r\n    (0, sdk_1.setConfig)(watchrtcConfig);\r\n};\r\nexports.setConfig = setConfig;\r\n/**\r\n * @deprecated Tags no longer supported. Use addKeys instead\r\n * Add tags for peer session\r\n * @param rtcTags[]\r\n */\r\nvar addTags = function (\r\n/** [\"tag1\", \"tag2\", \"tag3\"] */\r\n_rtcTags) { };\r\nexports.addTags = addTags;\r\n/**\r\n * Set user rating and/or comment for peer session\r\n * @param rating number from 1 to 5\r\n * @param comment string\r\n */\r\nvar setUserRating = function (\r\n/** 1 | 2 | 3 | 4 | 5 */\r\nrating, comment) {\r\n    (0, sdk_1.setUserRating)(rating, comment);\r\n};\r\nexports.setUserRating = setUserRating;\r\n/**\r\n * Add keys for peer session\r\n * @param keys\r\n */\r\nvar addKeys = function (\r\n/** { \"key1\": \"value1\", \"key2\": [\"value2_1\", \"value2_2\"]} */\r\nkeys) {\r\n    (0, sdk_1.addKeys)(keys);\r\n};\r\nexports.addKeys = addKeys;\r\n/**\r\n * Disables data collection\r\n */\r\nvar disableDataCollection = function () {\r\n    (0, sdk_1.disableDataCollection)();\r\n};\r\nexports.disableDataCollection = disableDataCollection;\r\n/**\r\n * Enables data collection\r\n */\r\nvar enableDataCollection = function () {\r\n    (0, sdk_1.enableDataCollection)();\r\n};\r\nexports.enableDataCollection = enableDataCollection;\r\nvar addEvent = function (event) {\r\n    (0, sdk_1.addEvent)(event);\r\n};\r\nexports.addEvent = addEvent;\r\n/**\r\n * Map an incoming stream with a human-readable name\r\n * @param id The identifier of the stream (streamIdentifier attribute)\r\n * @param name The human-readable name\r\n * @deprecated\r\n */\r\nvar mapStream = function (id, name) {\r\n    (0, sdk_1.mapStream)(id, name);\r\n};\r\nexports.mapStream = mapStream;\r\n/**\r\n * Map an incoming track with a human-readable name\r\n * @param id The identifier of the track (trackIdentifier attribute)\r\n * @param name The human-readable name\r\n */\r\nvar mapTrack = function (id, name) {\r\n    (0, sdk_1.mapTrack)(id, name);\r\n};\r\nexports.mapTrack = mapTrack;\r\nvar connect = function () {\r\n    (0, sdk_1.connect)();\r\n};\r\nexports.connect = connect;\r\nvar disconnect = function () {\r\n    (0, sdk_1.disconnect)();\r\n};\r\nexports.disconnect = disconnect;\r\nvar addStatsListener = function (listener) {\r\n    (0, sdk_1.registerOnStatsListener)(listener);\r\n};\r\nexports.addStatsListener = addStatsListener;\r\nvar persistentEnd = function (nailUpCallEnd) {\r\n    (0, sdk_1.persistentEnd)(nailUpCallEnd);\r\n};\r\nexports.persistentEnd = persistentEnd;\r\nvar persistentStart = function (roomId, peerId) {\r\n    (0, sdk_1.persistentStart)(roomId, peerId);\r\n};\r\nexports.persistentStart = persistentStart;\r\nvar addStateListener = function (listener) {\r\n    (0, sdk_1.registerStateListener)(listener);\r\n};\r\nexports.addStateListener = addStateListener;\r\nexports.default = {\r\n    /**\r\n     * Initialize SDK. Can be called multiple times but it will be initialized only at the first time.\r\n     * Use 'setConfig' function after if you don't have rtcRoomId and rtcPeerId yet.\r\n     * @param watchrtc\r\n     * @param prefixesToWrap\r\n     */\r\n    init: exports.init,\r\n    /**\r\n     * @deprecated Tags no longer supported. Use addKeys instead\r\n     * Add tags for peer session\r\n     * @param rtcTags[]\r\n     */\r\n    addTags: exports.addTags,\r\n    /**\r\n     * Set user rating and/or comment for peer session\r\n     * @param rating number from 1 to 5\r\n     * @param comment string\r\n     */\r\n    setUserRating: exports.setUserRating,\r\n    /**\r\n     * Add keys for peer session\r\n     * @param keys\r\n     */\r\n    addKeys: exports.addKeys,\r\n    /**\r\n     * You also can use watchRTC.setConfig function to set watchRTC configuration after calling init()\r\n     * and before the creation of RTCPeerConnection objects\r\n     */\r\n    setConfig: exports.setConfig,\r\n    /**\r\n     * Disables data collection\r\n     */\r\n    disableDataCollection: exports.disableDataCollection,\r\n    /**\r\n     * Enables data collection\r\n     */\r\n    enableDataCollection: exports.enableDataCollection,\r\n    addEvent: exports.addEvent,\r\n    /**\r\n     * Map an incoming stream with a human-readable name\r\n     * @param id The identifier of the stream (streamIdentifier attribute)\r\n     * @param name The human-readable name\r\n     * @deprecated\r\n     */\r\n    mapStream: exports.mapStream,\r\n    /**\r\n     * Map an incoming track with a human-readable name\r\n     * @param id The identifier of the track (trackIdentifier attribute)\r\n     * @param name The human-readable name\r\n     */\r\n    mapTrack: exports.mapTrack,\r\n    connect: exports.connect,\r\n    disconnect: exports.disconnect,\r\n    addStatsListener: exports.addStatsListener,\r\n    persistentEnd: exports.persistentEnd,\r\n    persistentStart: exports.persistentStart,\r\n    addStateListener: exports.addStateListener,\r\n};\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.persistentStart = exports.persistentEnd = exports.registerStateListener = exports.registerOnStatsListener = exports.disconnect = exports.connect = exports.mapTrack = exports.mapStream = exports.addEvent = exports.enableDataCollection = exports.disableDataCollection = exports.addKeys = exports.setUserRating = exports.setConfig = exports.initSDK = void 0;\r\nvar watchrtcsocket_1 = require(\"./watchrtcsocket\");\r\nvar watchrtchttp_1 = require(\"./watchrtchttp\");\r\nvar utils_1 = require(\"./utils\");\r\nvar version_1 = require(\"./version\");\r\nvar standardGetstats = true;\r\nvar isFirefox = !!window.mozRTCPeerConnection;\r\nvar isSafari = !isFirefox && window.RTCPeerConnection && !window.navigator.webkitGetUserMedia;\r\n// Data structure for RTCPeerConnection related stuff we need\r\nvar openChannels = {};\r\nvar peerconnectioncounter = 0;\r\nvar connectionData = {};\r\nvar watchrtcIdentifiers = {\r\n    rtcRoomId: undefined,\r\n    rtcPeerId: undefined,\r\n    projectId: undefined,\r\n};\r\nvar watchrtcConfig = null;\r\nvar http = null;\r\nvar socket = null;\r\nvar trace;\r\nvar lastConnectionOpen = 0; // so we know when was the last active connection seen\r\nvar getStatsInterval;\r\nvar tryingToConnectSocket = false;\r\nvar hardwareInfo;\r\nvar currentAudioOutputId;\r\nvar authFailed = false;\r\nvar reconnectTimerId;\r\nvar isManualConnect = false;\r\nvar isManualDisconnect = false;\r\nvar getStatsCallback;\r\nvar stateListener = null;\r\nvar debugLog = utils_1.debugLog.bind(null, function () { return watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.debug; });\r\n// Data structure for storing and applying mapTrack\r\nvar mappedTrack = {};\r\nvar maybeOpenWebsocketConnection = function (_a) {\r\n    var _b;\r\n    var _c = _a.forceRecreate, forceRecreate = _c === void 0 ? false : _c, _d = _a.reconnecting, reconnecting = _d === void 0 ? false : _d, _e = _a.pcId, pcId = _e === void 0 ? \"PC_unknown\" : _e;\r\n    debugLog(\"info\", \"maybeOpenWebsocketConnection called: [\".concat(pcId, \"]\"), {\r\n        forceRecreate: forceRecreate,\r\n        reconnecting: reconnecting,\r\n        isManualDisconnect: isManualDisconnect,\r\n        tryingToConnectSocket: tryingToConnectSocket,\r\n        watchrtcConfig: watchrtcConfig,\r\n        openChannels: JSON.stringify(openChannels),\r\n    });\r\n    isManualDisconnect = false;\r\n    var opened = ((_b = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _b === void 0 ? void 0 : _b.readyState) === WebSocket.OPEN;\r\n    if (opened) {\r\n        var roomIdOrPeerIdChanged = (0, utils_1.isRoomIdOrPeerIdChanged)(watchrtcIdentifiers, watchrtcConfig);\r\n        if (roomIdOrPeerIdChanged && forceRecreate) {\r\n            debugLog(\"info\", \"maybeOpenWebsocketConnection. Closing WS connection. [\".concat(pcId, \"]\"));\r\n            socket === null || socket === void 0 ? void 0 : socket.close();\r\n        }\r\n        else {\r\n            debugLog(\"info\", \"maybeOpenWebsocketConnection. WS connection already opened [\".concat(pcId, \"]\"));\r\n            return;\r\n        }\r\n    }\r\n    var connectionCount = (0, utils_1.countOfValidConnections)(openChannels);\r\n    if (!isManualConnect && connectionCount < 1 && !tryingToConnectSocket) {\r\n        debugLog(\"info\", \"maybeOpenWebsocketConnection. WS connection not opened - previous connect call not finished or missing peer connection [\".concat(pcId, \"]\"), {\r\n            openChannels: JSON.stringify(openChannels),\r\n            connectionCount: connectionCount,\r\n            tryingToConnectSocket: tryingToConnectSocket,\r\n            isManualConnect: isManualConnect,\r\n        });\r\n        return;\r\n    }\r\n    var canConnect = (0, utils_1.validateConfig)(watchrtcConfig);\r\n    var id = Object.keys(openChannels)[connectionCount - 1]; // not very critical, but for consistency with trace\r\n    if (!canConnect) {\r\n        tryingToConnectSocket = false;\r\n        debugLog(\"info\", \"maybeOpenWebsocketConnection. WS connection not opened - invalid config [\".concat(pcId, \"]\"), {\r\n            watchrtcConfig: watchrtcConfig,\r\n        });\r\n        return;\r\n    }\r\n    if (watchrtcConfig.keys) {\r\n        Object.keys(watchrtcConfig.keys || {}).forEach(function (k) {\r\n            if (typeof watchrtcConfig.keys[k] === \"string\") {\r\n                watchrtcConfig.keys[k] = [watchrtcConfig.keys[k]];\r\n            }\r\n        });\r\n    }\r\n    var useToken = !!watchrtcConfig.rtcToken;\r\n    var wsConnectionData = (0, utils_1.getConnectionData)(\"ws\", useToken ? watchrtcConfig.rtcToken : watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\r\n    if (!socket) {\r\n        debugLog(\"error\", \"maybeOpenWebsocketConnection. WS socket wasn't initialized [\".concat(pcId, \"]\"));\r\n    }\r\n    tryingToConnectSocket = true;\r\n    lastConnectionOpen = Date.now();\r\n    debugLog(\"info\", \"maybeOpenWebsocketConnection. Opening websocket connection [\".concat(pcId, \"]\"));\r\n    startStatsCollection();\r\n    var wsOpeningTimestamp = Date.now();\r\n    socket === null || socket === void 0 ? void 0 : socket.connect({\r\n        url: \"\".concat(wsConnectionData.url, \"?\").concat(useToken ? \"token\" : \"apiKey\", \"=\").concat(wsConnectionData.key, \"&timestamp=\").concat(Date.now()),\r\n        onData: function (data) {\r\n            var _a;\r\n            for (var _i = 0, _b = Object.entries(data); _i < _b.length; _i++) {\r\n                var _c = _b[_i], key = _c[0], value = _c[1];\r\n                connectionData[key] = value;\r\n            }\r\n            watchrtcIdentifiers.projectId = data.projectId;\r\n            tryingToConnectSocket = false;\r\n            watchrtcConfig.allowBrowserLogCollection = Boolean(data.collectConsoleLogEnabled);\r\n            if (!watchrtcConfig.allowBrowserLogCollection) {\r\n                (0, utils_1.restoreOriginalConsoleMethods)();\r\n                // clean up collected logs from socket buffer\r\n                if (socket === null || socket === void 0 ? void 0 : socket.buffer) {\r\n                    socket.buffer = socket.buffer.filter(function (data) { return data[0] !== \"log\"; });\r\n                }\r\n            }\r\n            else {\r\n                if (!((_a = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.console) === null || _a === void 0 ? void 0 : _a.override) && data.collectConsoleLogLevel) {\r\n                    (0, utils_1.setConsoleLevel)(data.collectConsoleLogLevel, trace);\r\n                }\r\n            }\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"Connection established. watchRTCConnectionId: \".concat(data.connectionId, \" sdkVersion:\").concat(version_1.default, \" [\").concat(pcId, \"]\")], false));\r\n            trace({ data: [\"watchrtc\", id, __assign(__assign(__assign({}, watchrtcConfig), data), { sdkVersion: version_1.default })] });\r\n            if (reconnecting) {\r\n                trace({ data: [\"reconnect\", null, null] });\r\n            }\r\n            if (hardwareInfo) {\r\n                trace({ data: [\"hardware\", null, hardwareInfo] });\r\n            }\r\n            trace({ data: [\"sessionId\", null, window.watchRTCSessionId] });\r\n            if (data.interval === watchrtcConfig.collectionInterval) {\r\n                return;\r\n            }\r\n            var oldInterval = watchrtcConfig.collectionInterval;\r\n            watchrtcConfig.collectionInterval = data.interval;\r\n            resetConnectionState();\r\n            startStatsCollection();\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"Collection interval missmatch - connection state reset\"], false));\r\n            trace({ data: [\"collectionIntervalChange\", null, { oldInterval: oldInterval }] });\r\n        },\r\n        onError: function (_, type) {\r\n            if (type === \"auth\") {\r\n                authFailed = true;\r\n            }\r\n            tryingToConnectSocket = false;\r\n            lastConnectionOpen = 0;\r\n        },\r\n        onOpen: function () {\r\n            if (stateListener) {\r\n                stateListener({ connectionStatus: \"connected\" });\r\n            }\r\n            authFailed = false;\r\n            if (reconnectTimerId) {\r\n                clearInterval(reconnectTimerId);\r\n                reconnectTimerId = undefined;\r\n            }\r\n            var delta = Date.now() - wsOpeningTimestamp;\r\n            debugLog(\"info\", \"maybeOpenWebsocketConnection. Connection opened. Opening time - \".concat(delta, \" ms [\").concat(pcId, \"]\"));\r\n        },\r\n        onClose: function (closeEvent) {\r\n            if (stateListener) {\r\n                stateListener({ connectionStatus: \"disconnected\" });\r\n            }\r\n            var code = closeEvent.code, reason = closeEvent.reason, wasClean = closeEvent.wasClean;\r\n            debugLog(\"info\", \"close event\", { authFailed: authFailed, code: code, reason: reason, wasClean: wasClean });\r\n            if (authFailed) {\r\n                if (reconnectTimerId) {\r\n                    clearInterval(reconnectTimerId);\r\n                }\r\n            }\r\n            else if (!reconnectTimerId && !isManualDisconnect) {\r\n                maybeOpenWebsocketConnection({ reconnecting: true, pcId: pcId });\r\n                reconnectTimerId = setInterval(function () {\r\n                    maybeOpenWebsocketConnection({ reconnecting: true, pcId: pcId });\r\n                }, 30 * 1000);\r\n            }\r\n        },\r\n    });\r\n};\r\nvar startStatsCollection = function () {\r\n    window.clearInterval(getStatsInterval);\r\n    getStatsInterval = window.setInterval(function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stats, _i, _a, pcInfo, _b, peer, streams;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (!(!isManualConnect && (0, utils_1.countOfValidConnections)(openChannels) === 0)) return [3 /*break*/, 1];\r\n                        debugLog(\"info\", \"getStatsInterval. No valid connections at this time\");\r\n                        // if we don't have any connection for 20 sec we can close the socket\r\n                        if (lastConnectionOpen && lastConnectionOpen + 20000 < Date.now()) {\r\n                            window.clearInterval(getStatsInterval);\r\n                            socket === null || socket === void 0 ? void 0 : socket.close();\r\n                            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"Last connection closed. watchRTCConnectionId: \".concat(connectionData === null || connectionData === void 0 ? void 0 : connectionData.connectionId, \" sdkVersion: \").concat(version_1.default)], false));\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 1:\r\n                        lastConnectionOpen = Date.now();\r\n                        stats = { connections: {}, streams: {} };\r\n                        _i = 0, _a = Object.values(openChannels);\r\n                        _c.label = 2;\r\n                    case 2:\r\n                        if (!(_i < _a.length)) return [3 /*break*/, 5];\r\n                        pcInfo = _a[_i];\r\n                        debugLog(\"info\", \"getStatsInterval. \".concat(pcInfo.id, \" signalingState: \").concat(pcInfo.pc.signalingState));\r\n                        if (!(pcInfo.pc.signalingState !== \"closed\")) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, getStats(pcInfo)];\r\n                    case 3:\r\n                        _b = _c.sent(), peer = _b.peer, streams = _b.streams;\r\n                        stats.connections = __assign(__assign({}, stats.connections), peer);\r\n                        stats.streams = __assign(__assign({}, stats.streams), streams);\r\n                        _c.label = 4;\r\n                    case 4:\r\n                        _i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        if (getStatsCallback) {\r\n                            getStatsCallback(stats);\r\n                        }\r\n                        _c.label = 6;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }, watchrtcConfig.collectionInterval);\r\n};\r\nvar getStats = function (pcInfo) {\r\n    return new Promise(function (resolve, __reject) {\r\n        if (pcInfo) {\r\n            var id_1 = pcInfo.id, pc_1 = pcInfo.pc, prev_1 = pcInfo.prev;\r\n            if (standardGetstats || isFirefox || isSafari) {\r\n                pc_1.getStats(null).then(function (res) {\r\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\r\n                        debugLog(\"info\", \"getStats res\", { res: res });\r\n                    }\r\n                    var now = {};\r\n                    if (isFirefox) {\r\n                        res.forEach(function (report) {\r\n                            now[\"\".concat(report.type, \"_\").concat(report.id)] = report;\r\n                        });\r\n                    }\r\n                    else {\r\n                        now = (0, utils_1.map2obj)(res);\r\n                    }\r\n                    var base = JSON.parse(JSON.stringify(now)); // our new prev\r\n                    now = (0, utils_1.applyPatchForRTT)(prev_1, now);\r\n                    var data = (0, utils_1.deltaCompression)(prev_1, now);\r\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\r\n                        debugLog(\"info\", \"getStats(null) [\".concat(id_1, \"]\"), { data: data });\r\n                    }\r\n                    if ((data === null || data === void 0 ? void 0 : data.timestamp) !== null && (data === null || data === void 0 ? void 0 : data.timestamp) !== -Infinity) {\r\n                        trace({ data: [\"getstats\", id_1, data] });\r\n                    }\r\n                    pcInfo.prev = base;\r\n                    resolve((0, utils_1.exposeApplicationStatsForPC)(id_1, prev_1, now, mappedTrack));\r\n                });\r\n            }\r\n            else {\r\n                pc_1.getStats(function (res) {\r\n                    var now = (0, utils_1.mangleChromeStats)(pc_1, res);\r\n                    var base = JSON.parse(JSON.stringify(now)); // our new prev\r\n                    var data = (0, utils_1.deltaCompression)(prev_1, now);\r\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\r\n                        debugLog(\"info\", \"getStats() [\".concat(id_1, \"]\"), { data: data });\r\n                    }\r\n                    if ((data === null || data === void 0 ? void 0 : data.timestamp) !== null && (data === null || data === void 0 ? void 0 : data.timestamp) !== -Infinity) {\r\n                        trace({ data: [\"getstats\", id_1, data] });\r\n                    }\r\n                    pcInfo.prev = base;\r\n                    resolve((0, utils_1.exposeApplicationStatsForPC)(id_1, prev_1, now, mappedTrack));\r\n                });\r\n            }\r\n        }\r\n    });\r\n};\r\nvar getHardware = function () {\r\n    setTimeout(function () {\r\n        // if get hardware take more than 50 ms then do not save it\r\n        var getHardwareStartTime = Date.now();\r\n        (0, utils_1.getHardwareInfo)()\r\n            .then(function (hwInfo) {\r\n            var getHardwareTime = Date.now() - getHardwareStartTime;\r\n            if (getHardwareTime <= 50000) {\r\n                hardwareInfo = hwInfo;\r\n                debugLog(\"info\", \"getHardware\", { hardwareInfo: hardwareInfo });\r\n            }\r\n            else {\r\n                debugLog(\"info\", \"getHardware failure: getHardwareTime: \".concat(getHardwareTime), { hardwareInfo: hardwareInfo });\r\n            }\r\n        })\r\n            .catch(function (err) {\r\n            console.error(\"Error. Get hardware info: \".concat(err.message));\r\n        });\r\n    }, 0);\r\n};\r\n/**\r\n * Initialize SDK.\r\n * @param watchrtc\r\n * @param prefixesToWrap\r\n * @param services\r\n */\r\nvar initSDK = function (watchrtc, prefixesToWrap, services) {\r\n    var _a, _b;\r\n    var initialized = window.watchRTCInitialized;\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    var isRTCPeerConnectionNative = RTCPeerConnection.toString().indexOf(\"[native code]\") !== -1;\r\n    if (!isRTCPeerConnectionNative) {\r\n        console.warn.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"init. RTCPeerConnection object has been already overridden\"], false));\r\n    }\r\n    window.watchRTCInitialized = true;\r\n    window.watchRTCSessionId = (0, utils_1.generateID)();\r\n    getHardware();\r\n    var urlParams = new URLSearchParams(location.search);\r\n    if (urlParams.has(\"watchrtc\") && urlParams.get(\"watchrtc\") === \"debug\") {\r\n        watchrtc.debug = true;\r\n    }\r\n    socket = (services === null || services === void 0 ? void 0 : services.socketService) || new watchrtcsocket_1.default({ debug: watchrtc === null || watchrtc === void 0 ? void 0 : watchrtc.debug });\r\n    http = (services === null || services === void 0 ? void 0 : services.httpService) || new watchrtchttp_1.default({ debug: watchrtc === null || watchrtc === void 0 ? void 0 : watchrtc.debug });\r\n    watchrtc.collectionInterval = (_a = watchrtc.collectionInterval) !== null && _a !== void 0 ? _a : 8000;\r\n    watchrtcConfig = watchrtc;\r\n    watchrtcIdentifiers.rtcRoomId = watchrtcConfig.rtcRoomId;\r\n    watchrtcIdentifiers.rtcPeerId = watchrtcConfig.rtcPeerId;\r\n    trace = socket.trace;\r\n    if (watchrtcConfig.wsUrl) {\r\n        console.warn.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"\\\"wsUrl\\\" config property is deprecated. Use \\\"proxyUrl\\\" instead of it\"], false));\r\n    }\r\n    if (watchrtcConfig.proxyUrl) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"\\\"proxyUrl\\\" is used\"], false));\r\n    }\r\n    prefixesToWrap.forEach(function (prefix) {\r\n        if (!window[prefix + \"RTCPeerConnection\"]) {\r\n            return;\r\n        }\r\n        var origPeerConnection = window[prefix + \"RTCPeerConnection\"];\r\n        var peerconnection = function (config, constraints) {\r\n            if (config === null || config === void 0 ? void 0 : config.watchrtc) {\r\n                watchrtcConfig = __assign(__assign({}, watchrtcConfig), config.watchrtc);\r\n            }\r\n            debugLog(\"info\", \"new RTCPeerConnection called.\", {\r\n                config: config,\r\n                constraints: constraints,\r\n            });\r\n            var pc = new origPeerConnection(config, constraints);\r\n            var id = \"PC_\" + peerconnectioncounter++;\r\n            pc.__rtcStatsId = id;\r\n            openChannels[id] = {\r\n                id: id,\r\n                pc: pc,\r\n                validConnection: false,\r\n            };\r\n            if (!config) {\r\n                config = { nullConfig: true };\r\n            }\r\n            config = JSON.parse(JSON.stringify(config)); // deepcopy\r\n            // don't log credentials\r\n            ((config && config.iceServers) || []).forEach(function (server) {\r\n                delete server.credential;\r\n            });\r\n            if (config === null || config === void 0 ? void 0 : config.watchrtc) {\r\n                delete config.watchrtc;\r\n            }\r\n            if (isFirefox) {\r\n                config.browserType = \"moz\";\r\n            }\r\n            else {\r\n                config.browserType = \"webkit\";\r\n            }\r\n            trace({ data: [\"create\", id, config] });\r\n            // TODO: do we want to log constraints here? They are chrome-proprietary.\r\n            // http://stackoverflow.com/questions/31003928/what-do-each-of-these-experimental-goog-rtcpeerconnectionconstraints-do\r\n            if (constraints) {\r\n                trace({ data: [\"constraints\", id, constraints] });\r\n            }\r\n            pc.addEventListener(\"icecandidate\", function (e) {\r\n                trace({ data: [\"onicecandidate\", id, e.candidate] });\r\n            });\r\n            pc.addEventListener(\"icecandidateerror\", function (e) {\r\n                trace({ data: [\"onicecandidateerror\", id, e] });\r\n            });\r\n            pc.addEventListener(\"addstream\", function (e) {\r\n                trace({\r\n                    data: [\r\n                        \"onaddstream\",\r\n                        id,\r\n                        e.stream.id +\r\n                            \" \" +\r\n                            e.stream.getTracks().map(function (t) {\r\n                                return t.kind + \":\" + t.id;\r\n                            }),\r\n                    ],\r\n                });\r\n            });\r\n            pc.addEventListener(\"track\", function (e) {\r\n                trace({\r\n                    data: [\r\n                        \"ontrack\",\r\n                        id,\r\n                        e.track.kind +\r\n                            \":\" +\r\n                            e.track.id +\r\n                            \" state:\" +\r\n                            e.track.readyState +\r\n                            \" muted:\" +\r\n                            e.track.muted +\r\n                            \" \" +\r\n                            e.streams.map(function (stream) {\r\n                                return \"stream:\" + stream.id;\r\n                            }),\r\n                    ],\r\n                });\r\n                // https://redmine.testrtc.com/issues/7166\r\n                e.track.onended = function () {\r\n                    trace({\r\n                        data: [\r\n                            \"ontrack\",\r\n                            id,\r\n                            e.track.kind +\r\n                                \":\" +\r\n                                e.track.id +\r\n                                \" state:\" +\r\n                                e.track.readyState +\r\n                                \" \" +\r\n                                e.streams.map(function (stream) {\r\n                                    return \"stream:\" + stream.id;\r\n                                }),\r\n                        ],\r\n                    });\r\n                };\r\n                e.track.onmute = function () {\r\n                    trace({\r\n                        data: [\r\n                            \"ontrack\",\r\n                            id,\r\n                            e.track.kind +\r\n                                \":\" +\r\n                                e.track.id +\r\n                                \" state:\" +\r\n                                e.track.readyState +\r\n                                \" muted:\" +\r\n                                e.track.muted +\r\n                                \" \" +\r\n                                e.streams.map(function (stream) {\r\n                                    return \"stream:\" + stream.id;\r\n                                }),\r\n                        ],\r\n                    });\r\n                };\r\n                e.track.onunmute = function () {\r\n                    trace({\r\n                        data: [\r\n                            \"ontrack\",\r\n                            id,\r\n                            e.track.kind +\r\n                                \":\" +\r\n                                e.track.id +\r\n                                \" state:\" +\r\n                                e.track.readyState +\r\n                                \" muted:\" +\r\n                                e.track.muted +\r\n                                \" \" +\r\n                                e.streams.map(function (stream) {\r\n                                    return \"stream:\" + stream.id;\r\n                                }),\r\n                        ],\r\n                    });\r\n                };\r\n            });\r\n            pc.addEventListener(\"removestream\", function (e) {\r\n                trace({\r\n                    data: [\r\n                        \"onremovestream\",\r\n                        id,\r\n                        e.stream.id +\r\n                            \" \" +\r\n                            e.stream.getTracks().map(function (t) {\r\n                                return t.kind + \":\" + t.id;\r\n                            }),\r\n                    ],\r\n                });\r\n            });\r\n            pc.addEventListener(\"signalingstatechange\", function () {\r\n                if (openChannels[id] && !openChannels[id].validConnection) {\r\n                    openChannels[id].validConnection = true;\r\n                    setTimeout(function () {\r\n                        maybeOpenWebsocketConnection({ forceRecreate: true, pcId: id });\r\n                    }, 5000);\r\n                }\r\n                else {\r\n                    debugLog(\"info\", \"signalingstatechage. WS connection opening not triggered - peer connection not in channels or was already opened [\".concat(id, \"]\"), { openChannels: JSON.stringify(openChannels) });\r\n                }\r\n                trace({ data: [\"onsignalingstatechange\", id, pc.signalingState] });\r\n            });\r\n            pc.addEventListener(\"iceconnectionstatechange\", function () {\r\n                trace({ data: [\"oniceconnectionstatechange\", id, pc.iceConnectionState] });\r\n            });\r\n            pc.addEventListener(\"icegatheringstatechange\", function () {\r\n                trace({ data: [\"onicegatheringstatechange\", id, pc.iceGatheringState] });\r\n            });\r\n            pc.addEventListener(\"connectionstatechange\", function () {\r\n                trace({ data: [\"onconnectionstatechange\", id, pc.connectionState] });\r\n            });\r\n            pc.addEventListener(\"negotiationneeded\", function () {\r\n                trace({ data: [\"onnegotiationneeded\", id, undefined] });\r\n            });\r\n            pc.addEventListener(\"datachannel\", function (event) {\r\n                trace({ data: [\"ondatachannel\", id, [event.channel.id, event.channel.label]] });\r\n            });\r\n            // https://redmine.testrtc.com/issues/6529\r\n            // pc.addEventListener(\"iceconnectionstatechange\", () => {\r\n            //   if (pc.iceConnectionState === \"connected\") {\r\n            //     getStats(openChannels[id]);\r\n            //   }\r\n            // });\r\n            return pc;\r\n        };\r\n        if (\"HTMLMediaElement\" in window && \"setSinkId\" in HTMLMediaElement.prototype) {\r\n            var nativeMethod_1 = HTMLMediaElement.prototype.setSinkId;\r\n            HTMLMediaElement.prototype.setSinkId = function () {\r\n                var selectedDeviceId = arguments[0];\r\n                navigator.mediaDevices\r\n                    .enumerateDevices()\r\n                    .then(function (devices) {\r\n                    var currentDevice = devices.find(function (_a) {\r\n                        var deviceId = _a.deviceId;\r\n                        return deviceId === selectedDeviceId;\r\n                    });\r\n                    if (currentDevice && currentDevice.deviceId !== currentAudioOutputId) {\r\n                        trace({ data: [\"audioOutputChange\", null, currentDevice.label] });\r\n                    }\r\n                    currentAudioOutputId = selectedDeviceId;\r\n                })\r\n                    .catch(function (error) {\r\n                    debugLog(\"error\", error.message, { error: error });\r\n                });\r\n                return nativeMethod_1.apply(this, arguments);\r\n            };\r\n        }\r\n        // wrap RTCRtpTransceiver.setCodecPreferences\r\n        if (\"RTCRtpTransceiver\" in window && \"setCodecPreferences\" in window.RTCRtpTransceiver.prototype) {\r\n            var origRTCRtpTransceiver = window.RTCRtpTransceiver;\r\n            var nativeMethod_2 = origRTCRtpTransceiver.prototype.setCodecPreferences;\r\n            origRTCRtpTransceiver.prototype.setCodecPreferences = function () {\r\n                trace({ data: [\"setCodecPreferences\", this.__pcId, arguments] });\r\n                return nativeMethod_2.apply(this, arguments);\r\n            };\r\n        }\r\n        // wrap RTCRtpSender.setParameters\r\n        if (\"RTCRtpSender\" in window && \"setParameters\" in window.RTCRtpSender.prototype) {\r\n            var origRTCRtpSender = window.RTCRtpSender;\r\n            var nativeMethod_3 = origRTCRtpSender.prototype.setParameters;\r\n            origRTCRtpSender.prototype.setParameters = function () {\r\n                trace({ data: [\"setParameters\", this.__pcId, arguments] });\r\n                return nativeMethod_3.apply(this, arguments);\r\n            };\r\n        }\r\n        // wrap RTCRtpSender.replaceTrack\r\n        if (\"RTCRtpSender\" in window && \"replaceTrack\" in window.RTCRtpSender.prototype) {\r\n            var origRTCRtpSender = window.RTCRtpSender;\r\n            var nativeMethod_4 = origRTCRtpSender.prototype.replaceTrack;\r\n            origRTCRtpSender.prototype.replaceTrack = function () {\r\n                var track = arguments[0];\r\n                if (track) {\r\n                    trace({\r\n                        data: [\r\n                            \"replaceTrack\",\r\n                            this.__pcId,\r\n                            track.kind +\r\n                                \":\" +\r\n                                track.id +\r\n                                \" state:\" +\r\n                                track.readyState +\r\n                                \" muted:\" +\r\n                                track.muted +\r\n                                \" label:\" +\r\n                                track.label,\r\n                        ],\r\n                    });\r\n                }\r\n                else {\r\n                    trace({ data: [\"replaceTrack\", this.__pcId, null] });\r\n                }\r\n                return nativeMethod_4.apply(this, arguments);\r\n            };\r\n        }\r\n        // adding pc id to sender for above logic\r\n        [\"addTransceiver\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var _this_1 = this;\r\n                    var streams = \"\";\r\n                    if (arguments[1] && arguments[1].streams) {\r\n                        streams = arguments[1].streams.map(function (s) { return \"stream:\" + s.id; }).join(\";\");\r\n                    }\r\n                    var trackOrKind = typeof arguments[0] === \"string\"\r\n                        ? arguments[0]\r\n                        : arguments[0].kind + \":\" + arguments[0].id + \" \" + arguments[0].label;\r\n                    var init = arguments[1] ? __assign(__assign({}, arguments[1]), { streams: streams }) : null;\r\n                    trace({ data: [method, this.__rtcStatsId, [trackOrKind, init]] });\r\n                    var transceiver = nativeMethod.apply(this, arguments);\r\n                    transceiver.sender.__pcId = this.__rtcStatsId;\r\n                    // https://redmine.testrtc.com/issues/7166\r\n                    var track = arguments[0];\r\n                    if (typeof track === \"object\") {\r\n                        trace({\r\n                            data: [\r\n                                \"onlocaltrack\",\r\n                                this.__rtcStatsId,\r\n                                track.kind +\r\n                                    \":\" +\r\n                                    track.id +\r\n                                    \" state:\" +\r\n                                    track.readyState +\r\n                                    \" muted:\" +\r\n                                    track.muted +\r\n                                    \" label:\" +\r\n                                    track.label,\r\n                            ],\r\n                        });\r\n                        track.onended = function () {\r\n                            trace({\r\n                                data: [\r\n                                    \"onlocaltrack\",\r\n                                    _this_1.__rtcStatsId,\r\n                                    track.kind + \":\" + track.id + \" state:\" + track.readyState + \" label:\" + track.label,\r\n                                ],\r\n                            });\r\n                        };\r\n                        track.onmute = function () {\r\n                            trace({\r\n                                data: [\r\n                                    \"onlocaltrack\",\r\n                                    _this_1.__rtcStatsId,\r\n                                    track.kind +\r\n                                        \":\" +\r\n                                        track.id +\r\n                                        \" state:\" +\r\n                                        track.readyState +\r\n                                        \" muted:\" +\r\n                                        track.muted +\r\n                                        \" label:\" +\r\n                                        track.label,\r\n                                ],\r\n                            });\r\n                        };\r\n                        track.onunmute = function () {\r\n                            trace({\r\n                                data: [\r\n                                    \"onlocaltrack\",\r\n                                    _this_1.__rtcStatsId,\r\n                                    track.kind +\r\n                                        \":\" +\r\n                                        track.id +\r\n                                        \" state:\" +\r\n                                        track.readyState +\r\n                                        \" muted:\" +\r\n                                        track.muted +\r\n                                        \" label:\" +\r\n                                        track.label,\r\n                                ],\r\n                            });\r\n                        };\r\n                    }\r\n                    return transceiver;\r\n                };\r\n            }\r\n        });\r\n        [\"createDataChannel\", \"restartIce\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    trace({ data: [method, this.__rtcStatsId, arguments] });\r\n                    return nativeMethod.apply(this, arguments);\r\n                };\r\n            }\r\n        });\r\n        [\"close\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    trace({ data: [method, this.__rtcStatsId, arguments] });\r\n                    delete openChannels[this.__rtcStatsId];\r\n                    isManualDisconnect = true;\r\n                    debugLog(\"info\", \"on RTCPeerConnection(\".concat(this.__rtcStatsId, \") close\"));\r\n                    return nativeMethod.apply(this, arguments);\r\n                };\r\n            }\r\n        });\r\n        [\"addStream\", \"removeStream\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var _this_1 = this;\r\n                    var stream = arguments[0];\r\n                    var streamInfo = stream\r\n                        .getTracks()\r\n                        .map(function (t) {\r\n                        return t.kind + \":\" + t.id;\r\n                    })\r\n                        .join(\",\");\r\n                    trace({ data: [method, this.__rtcStatsId, stream.id + \" \" + streamInfo] });\r\n                    // https://redmine.testrtc.com/issues/7166\r\n                    if (method === \"addStream\") {\r\n                        stream.getTracks().map(function (track) {\r\n                            trace({\r\n                                data: [\r\n                                    \"onlocaltrack\",\r\n                                    _this_1.__rtcStatsId,\r\n                                    track.kind +\r\n                                        \":\" +\r\n                                        track.id +\r\n                                        \" state:\" +\r\n                                        track.readyState +\r\n                                        \" muted:\" +\r\n                                        track.muted +\r\n                                        \" label:\" +\r\n                                        track.label +\r\n                                        \" \" +\r\n                                        stream.id,\r\n                                ],\r\n                            });\r\n                            track.onended = function () {\r\n                                trace({\r\n                                    data: [\r\n                                        \"onlocaltrack\",\r\n                                        _this_1.__rtcStatsId,\r\n                                        track.kind +\r\n                                            \":\" +\r\n                                            track.id +\r\n                                            \" state:\" +\r\n                                            track.readyState +\r\n                                            \" label:\" +\r\n                                            track.label +\r\n                                            \" \" +\r\n                                            stream.id,\r\n                                    ],\r\n                                });\r\n                            };\r\n                            track.onmute = function () {\r\n                                trace({\r\n                                    data: [\r\n                                        \"onlocaltrack\",\r\n                                        _this_1.__rtcStatsId,\r\n                                        track.kind +\r\n                                            \":\" +\r\n                                            track.id +\r\n                                            \" state:\" +\r\n                                            track.readyState +\r\n                                            \" muted:\" +\r\n                                            track.muted +\r\n                                            \" label:\" +\r\n                                            track.label +\r\n                                            \" \" +\r\n                                            stream.id,\r\n                                    ],\r\n                                });\r\n                            };\r\n                            track.onunmute = function () {\r\n                                trace({\r\n                                    data: [\r\n                                        \"onlocaltrack\",\r\n                                        _this_1.__rtcStatsId,\r\n                                        track.kind +\r\n                                            \":\" +\r\n                                            track.id +\r\n                                            \" state:\" +\r\n                                            track.readyState +\r\n                                            \" muted:\" +\r\n                                            track.muted +\r\n                                            \" label:\" +\r\n                                            track.label +\r\n                                            \" \" +\r\n                                            stream.id,\r\n                                    ],\r\n                                });\r\n                            };\r\n                        });\r\n                    }\r\n                    return nativeMethod.apply(this, arguments);\r\n                };\r\n            }\r\n        });\r\n        [\"addTrack\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var _this_1 = this;\r\n                    var track = arguments[0];\r\n                    var streams = [].slice.call(arguments, 1);\r\n                    trace({\r\n                        data: [\r\n                            method,\r\n                            this.__rtcStatsId,\r\n                            track.kind +\r\n                                \":\" +\r\n                                track.id +\r\n                                \" \" +\r\n                                track.label +\r\n                                \" \" +\r\n                                (streams\r\n                                    .map(function (s) {\r\n                                    return \"stream:\" + s.id;\r\n                                })\r\n                                    .join(\";\") || \"-\"),\r\n                        ],\r\n                    });\r\n                    // https://redmine.testrtc.com/issues/7166\r\n                    trace({\r\n                        data: [\r\n                            \"onlocaltrack\",\r\n                            this.__rtcStatsId,\r\n                            track.kind +\r\n                                \":\" +\r\n                                track.id +\r\n                                \" state:\" +\r\n                                track.readyState +\r\n                                \" muted:\" +\r\n                                track.muted +\r\n                                \" label:\" +\r\n                                track.label +\r\n                                \" \" +\r\n                                streams.map(function (stream) {\r\n                                    return \"stream:\" + stream.id;\r\n                                }),\r\n                        ],\r\n                    });\r\n                    track.onended = function () {\r\n                        trace({\r\n                            data: [\r\n                                \"onlocaltrack\",\r\n                                _this_1.__rtcStatsId,\r\n                                track.kind +\r\n                                    \":\" +\r\n                                    track.id +\r\n                                    \" state:\" +\r\n                                    track.readyState +\r\n                                    \" label:\" +\r\n                                    track.label +\r\n                                    \" \" +\r\n                                    streams.map(function (stream) {\r\n                                        return \"stream:\" + stream.id;\r\n                                    }),\r\n                            ],\r\n                        });\r\n                    };\r\n                    track.onmute = function () {\r\n                        trace({\r\n                            data: [\r\n                                \"onlocaltrack\",\r\n                                _this_1.__rtcStatsId,\r\n                                track.kind +\r\n                                    \":\" +\r\n                                    track.id +\r\n                                    \" state:\" +\r\n                                    track.readyState +\r\n                                    \" muted:\" +\r\n                                    track.muted +\r\n                                    \" label:\" +\r\n                                    track.label +\r\n                                    \" \" +\r\n                                    streams.map(function (stream) {\r\n                                        return \"stream:\" + stream.id;\r\n                                    }),\r\n                            ],\r\n                        });\r\n                    };\r\n                    track.onunmute = function () {\r\n                        trace({\r\n                            data: [\r\n                                \"onlocaltrack\",\r\n                                _this_1.__rtcStatsId,\r\n                                track.kind +\r\n                                    \":\" +\r\n                                    track.id +\r\n                                    \" state:\" +\r\n                                    track.readyState +\r\n                                    \" muted:\" +\r\n                                    track.muted +\r\n                                    \" label:\" +\r\n                                    track.label +\r\n                                    \" \" +\r\n                                    streams.map(function (stream) {\r\n                                        return \"stream:\" + stream.id;\r\n                                    }),\r\n                            ],\r\n                        });\r\n                    };\r\n                    var sender = nativeMethod.apply(this, arguments);\r\n                    sender.__pcId = this.__rtcStatsId;\r\n                    // Associate the peer id to the existing transceivers\r\n                    var transceivers = this.getTransceivers();\r\n                    if (transceivers) {\r\n                        transceivers.forEach(function (transceiver) {\r\n                            transceiver.__pcId = _this_1.__rtcStatsId;\r\n                        });\r\n                    }\r\n                    return sender;\r\n                };\r\n            }\r\n        });\r\n        [\"removeTrack\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var track = arguments[0].track;\r\n                    trace({\r\n                        data: [method, this.__rtcStatsId, track ? track.kind + \":\" + track.id + \" \" + track.label : \"null\"],\r\n                    });\r\n                    return nativeMethod.apply(this, arguments);\r\n                };\r\n            }\r\n        });\r\n        [\"createOffer\", \"createAnswer\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var rtcStatsId = this.__rtcStatsId;\r\n                    var args = arguments;\r\n                    var opts;\r\n                    if (arguments.length === 1 && typeof arguments[0] === \"object\") {\r\n                        opts = arguments[0];\r\n                    }\r\n                    else if (arguments.length === 3 && typeof arguments[2] === \"object\") {\r\n                        opts = arguments[2];\r\n                    }\r\n                    trace({ data: [method, this.__rtcStatsId, opts] });\r\n                    return nativeMethod.apply(this, opts ? [opts] : undefined).then(function (description) {\r\n                        trace({ data: [method + \"OnSuccess\", rtcStatsId, description] });\r\n                        if (args.length > 0 && typeof args[0] === \"function\") {\r\n                            args[0].apply(null, [description]);\r\n                            return undefined;\r\n                        }\r\n                        return description;\r\n                    }, function (err) {\r\n                        trace({ data: [method + \"OnFailure\", rtcStatsId, err.toString()] });\r\n                        if (args.length > 1 && typeof args[1] === \"function\") {\r\n                            args[1].apply(null, [err]);\r\n                            return;\r\n                        }\r\n                        throw err;\r\n                    });\r\n                };\r\n            }\r\n        });\r\n        [\"setLocalDescription\", \"setRemoteDescription\", \"addIceCandidate\"].forEach(function (method) {\r\n            var nativeMethod = origPeerConnection.prototype[method];\r\n            if (nativeMethod) {\r\n                origPeerConnection.prototype[method] = function () {\r\n                    var rtcStatsId = this.__rtcStatsId;\r\n                    var args = arguments;\r\n                    var _this = this;\r\n                    // because of setLocalDescription(null) sometimes we don't have SDP value\r\n                    // fippo suggested: Access pc.localDescription.sdp in the successcallback\r\n                    var needToHandleSDPInSuccessCallback = method === \"setLocalDescription\" && (!args[0] || (args[0] && !args[0].sdp));\r\n                    trace({\r\n                        data: [method, this.__rtcStatsId, needToHandleSDPInSuccessCallback ? { parameterless: true } : args[0]],\r\n                    });\r\n                    return nativeMethod.apply(this, [args[0]]).then(function () {\r\n                        trace({\r\n                            data: [\r\n                                method + \"OnSuccess\",\r\n                                rtcStatsId,\r\n                                needToHandleSDPInSuccessCallback ? _this === null || _this === void 0 ? void 0 : _this.localDescription : undefined,\r\n                            ],\r\n                        });\r\n                        if (args.length >= 2 && typeof args[1] === \"function\") {\r\n                            args[1].apply(null, []);\r\n                            return undefined;\r\n                        }\r\n                        return undefined;\r\n                    }, function (err) {\r\n                        trace({ data: [method + \"OnFailure\", rtcStatsId, err.toString()] });\r\n                        if (args.length >= 3 && typeof args[2] === \"function\") {\r\n                            args[2].apply(null, [err]);\r\n                            return undefined;\r\n                        }\r\n                        throw err;\r\n                    });\r\n                };\r\n            }\r\n        });\r\n        // wrap static methods. Currently just generateCertificate.\r\n        if (origPeerConnection.generateCertificate) {\r\n            Object.defineProperty(peerconnection, \"generateCertificate\", {\r\n                get: function () {\r\n                    return arguments.length\r\n                        ? origPeerConnection.generateCertificate.apply(null, arguments)\r\n                        : origPeerConnection.generateCertificate;\r\n                },\r\n            });\r\n        }\r\n        window[prefix + \"RTCPeerConnection\"] = peerconnection;\r\n        window[prefix + \"RTCPeerConnection\"].prototype = origPeerConnection.prototype;\r\n    });\r\n    // getUserMedia wrappers\r\n    prefixesToWrap.forEach(function (prefix) {\r\n        var name = prefix + (prefix.length ? \"GetUserMedia\" : \"getUserMedia\");\r\n        if (!navigator[name]) {\r\n            return;\r\n        }\r\n        var origGetUserMedia = navigator[name].bind(navigator);\r\n        var gum = function () {\r\n            trace({ data: [\"getUserMedia\", null, arguments[0]] });\r\n            var cb = arguments[1];\r\n            var eb = arguments[2];\r\n            origGetUserMedia(arguments[0], function (stream) {\r\n                // we log the stream id, track ids and tracks readystate since that is ended GUM fails\r\n                // to acquire the cam (in chrome)\r\n                trace({ data: [\"getUserMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\r\n                if (cb) {\r\n                    cb(stream);\r\n                }\r\n            }, function (err) {\r\n                var errorData = [\"getUserMediaOnFailure\", null, err.name];\r\n                trace({ data: errorData });\r\n                httpReportError(errorData);\r\n                if (eb) {\r\n                    eb(err);\r\n                }\r\n            });\r\n        };\r\n        navigator[name] = gum.bind(navigator);\r\n    });\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n        var origGetUserMedia_1 = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\r\n        var gum = function () {\r\n            trace({ data: [\"navigator.mediaDevices.getUserMedia\", null, arguments[0]] });\r\n            return origGetUserMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {\r\n                trace({ data: [\"navigator.mediaDevices.getUserMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\r\n                return stream;\r\n            }, function (err) {\r\n                var errorData = [\"navigator.mediaDevices.getUserMediaOnFailure\", null, err.name];\r\n                trace({ data: errorData });\r\n                httpReportError(errorData);\r\n                return Promise.reject(err);\r\n            });\r\n        };\r\n        navigator.mediaDevices.getUserMedia = gum.bind(navigator.mediaDevices);\r\n    }\r\n    // getDisplayMedia\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\r\n        var origGetDisplayMedia_1 = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        var gdm = function () {\r\n            trace({ data: [\"navigator.mediaDevices.getDisplayMedia\", null, arguments[0]] });\r\n            return origGetDisplayMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {\r\n                trace({ data: [\"navigator.mediaDevices.getDisplayMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\r\n                return stream;\r\n            }, function (err) {\r\n                var errorData = [\"navigator.mediaDevices.getDisplayMediaOnFailure\", null, err.name];\r\n                trace({ data: errorData });\r\n                httpReportError(errorData);\r\n                return Promise.reject(err);\r\n            });\r\n        };\r\n        navigator.mediaDevices.getDisplayMedia = gdm.bind(navigator.mediaDevices);\r\n    }\r\n    if ((_b = watchrtc.console) === null || _b === void 0 ? void 0 : _b.level) {\r\n        (0, utils_1.setConsoleLevel)(watchrtc.console.level, trace);\r\n    }\r\n};\r\nexports.initSDK = initSDK;\r\nvar setConfig = function (newWatchrtcConfig) {\r\n    var _a;\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    var collectConsoleDisabled = (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.allowBrowserLogCollection) === false;\r\n    if (!collectConsoleDisabled && ((_a = newWatchrtcConfig === null || newWatchrtcConfig === void 0 ? void 0 : newWatchrtcConfig.console) === null || _a === void 0 ? void 0 : _a.override) === true && newWatchrtcConfig.console.level) {\r\n        (0, utils_1.setConsoleLevel)(newWatchrtcConfig.console.level, trace);\r\n    }\r\n    if (\"collectionInterval\" in newWatchrtcConfig) {\r\n        delete newWatchrtcConfig.collectionInterval;\r\n    }\r\n    watchrtcConfig = __assign(__assign({}, watchrtcConfig), newWatchrtcConfig);\r\n    watchrtcIdentifiers.rtcRoomId = watchrtcConfig.rtcRoomId;\r\n    watchrtcIdentifiers.rtcPeerId = watchrtcConfig.rtcPeerId;\r\n    debugLog(\"info\", \"setConfig\", { newWatchrtcConfig: newWatchrtcConfig, watchrtcConfig: watchrtcConfig });\r\n    maybeOpenWebsocketConnection({});\r\n};\r\nexports.setConfig = setConfig;\r\n/**\r\n * Set user rating and/or comment for peer session\r\n * @param rating number from 1 to 5\r\n * @param comment string\r\n */\r\nvar setUserRating = function (\r\n/** 1 | 2 | 3 | 4 | 5 */\r\nrating, ratingComment) {\r\n    var _a;\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"SDK is not initialized. Use 'init' function first.\"], false));\r\n        return Promise.resolve({ error: \"SDK is not initialized. Use 'init' function first.\" });\r\n    }\r\n    var isValidRating = (0, utils_1.validateRating)(rating);\r\n    if (!isValidRating) {\r\n        return Promise.resolve({ error: \"Rating is invalid\" });\r\n    }\r\n    var opened = ((_a = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN;\r\n    var data = [\"userRating\", null, { rating: rating, ratingComment: ratingComment }];\r\n    return new Promise(function (resolve, reject) {\r\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\r\n        if (opened) {\r\n            trace({ data: data, options: options });\r\n        }\r\n        else {\r\n            httpTrace.apply(void 0, data).then(function () { return resolve({}); })\r\n                .catch(function (error) { return resolve({ error: error }); });\r\n        }\r\n    });\r\n};\r\nexports.setUserRating = setUserRating;\r\n/**\r\n * Add keys for peer session\r\n * @param keys\r\n */\r\nvar addKeys = function (\r\n/** { \"key1\": \"value1\", \"key2\": [\"value2_1\", \"value2_2\"]} */\r\nkeys) {\r\n    var _a;\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    Object.keys(keys || {}).forEach(function (k) {\r\n        if (typeof keys[k] === \"string\") {\r\n            keys[k] = [keys[k]];\r\n        }\r\n    });\r\n    var data = [\"keys\", null, keys];\r\n    var opened = ((_a = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN;\r\n    var wasConnected = socket === null || socket === void 0 ? void 0 : socket.wasConnected;\r\n    return new Promise(function (resolve, reject) {\r\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\r\n        if (opened) {\r\n            trace({ data: data, options: options });\r\n        }\r\n        else if (!wasConnected) {\r\n            trace({ data: data, options: options });\r\n        }\r\n        else {\r\n            httpTrace.apply(void 0, data).then(function () { return resolve({}); })\r\n                .catch(function (error) { return resolve({ error: error }); });\r\n        }\r\n    });\r\n};\r\nexports.addKeys = addKeys;\r\nvar disableDataCollection = function () {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    socket === null || socket === void 0 ? void 0 : socket.disableDataCollection();\r\n};\r\nexports.disableDataCollection = disableDataCollection;\r\nvar enableDataCollection = function () {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    socket === null || socket === void 0 ? void 0 : socket.enableDataCollection();\r\n};\r\nexports.enableDataCollection = enableDataCollection;\r\nvar addEvent = function (event) {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"addEvent error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    // const opened = socket?.connection?.readyState === WebSocket.OPEN;\r\n    // if (!opened && socket?.wasConnected) {\r\n    //   console.info(...logPrefix(\"error\"), `addEvent error. Connection has been closed.`);\r\n    //   return;\r\n    // }\r\n    var isEventValid = (0, utils_1.validateEvent)(event);\r\n    if (!isEventValid) {\r\n        return;\r\n    }\r\n    var data = [\"event\", null, event];\r\n    return new Promise(function (resolve, reject) {\r\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\r\n        trace({ data: data, options: options });\r\n    });\r\n};\r\nexports.addEvent = addEvent;\r\nvar mapStream = function (id, name) {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"mapStream error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    var isDataValid = !!id && !!name;\r\n    if (!isDataValid) {\r\n        return;\r\n    }\r\n    var data = [\"mapStream\", null, { id: id, name: name }];\r\n    console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"mapStream method is deprecated. Please use mapTrack instead.\"], false));\r\n    trace({ data: data });\r\n};\r\nexports.mapStream = mapStream;\r\nvar mapTrack = function (id, name) {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"mapTrack error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    var isDataValid = !!id && !!name;\r\n    if (!isDataValid) {\r\n        return;\r\n    }\r\n    mappedTrack[id] = name;\r\n    var data = [\"mapTrack\", null, { id: id, name: name }];\r\n    trace({ data: data });\r\n};\r\nexports.mapTrack = mapTrack;\r\nvar connect = function () {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"connect error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    isManualConnect = true;\r\n    debugLog(\"info\", \"manual connect\");\r\n    maybeOpenWebsocketConnection({});\r\n};\r\nexports.connect = connect;\r\nvar disconnect = function () {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"disconnect error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    isManualConnect = false;\r\n    isManualDisconnect = true;\r\n    socket === null || socket === void 0 ? void 0 : socket.close();\r\n    debugLog(\"info\", \"manual disconnect\");\r\n};\r\nexports.disconnect = disconnect;\r\nvar registerOnStatsListener = function (listener) {\r\n    getStatsCallback = listener;\r\n};\r\nexports.registerOnStatsListener = registerOnStatsListener;\r\nvar registerStateListener = function (listener) {\r\n    stateListener = listener;\r\n};\r\nexports.registerStateListener = registerStateListener;\r\nvar httpTrace = function () {\r\n    var _a;\r\n    var data = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        data[_i] = arguments[_i];\r\n    }\r\n    if (!watchrtcIdentifiers.rtcRoomId || !watchrtcIdentifiers.rtcPeerId) {\r\n        var message = \"Cannot do http without room and peer ids\";\r\n        console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [message], false));\r\n        return Promise.reject(message);\r\n    }\r\n    if (!watchrtcIdentifiers.projectId && !watchrtcConfig.rtcApiKey) {\r\n        var message = \"Missing apiKey to enable trace before connection establishment\";\r\n        console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [message], false));\r\n        return Promise.reject(message);\r\n    }\r\n    var httpConnectionData = (0, utils_1.getConnectionData)(\"http\", watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\r\n    return http\r\n        ? http.trace.apply(http, __spreadArray([\"\".concat(httpConnectionData.url, \"/trace\"), (_a = watchrtcIdentifiers.projectId) !== null && _a !== void 0 ? _a : httpConnectionData.key, watchrtcIdentifiers.rtcRoomId,\r\n            watchrtcIdentifiers.rtcPeerId], data, false)) : Promise.reject(\"Invalid configuration of http service\");\r\n};\r\nvar httpReportError = function (data) {\r\n    var apiKey = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcApiKey;\r\n    var rtcRoomId = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcRoomId;\r\n    var rtcPeerId = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcPeerId;\r\n    if (!apiKey || !rtcRoomId || !rtcPeerId) {\r\n        console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"Cannot report an error. Please provide apiKey, rtcRoomId and rtcPeerId \"], false));\r\n        return;\r\n    }\r\n    var httpConnectionData = (0, utils_1.getConnectionData)(\"http\", watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\r\n    data = data || (socket === null || socket === void 0 ? void 0 : socket.buffer) || [];\r\n    http === null || http === void 0 ? void 0 : http.trace(\"\".concat(httpConnectionData.url, \"/error\"), httpConnectionData.key, rtcRoomId, rtcPeerId, data);\r\n};\r\nvar persistentEnd = function (nailUpCallEnd) {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"persistentEnd error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    clearInterval(getStatsInterval);\r\n    isManualConnect = false;\r\n    isManualDisconnect = true;\r\n    socket === null || socket === void 0 ? void 0 : socket.close(nailUpCallEnd);\r\n    debugLog(\"info\", \"persistentEnd. sessionId: \".concat(window.watchRTCSessionId));\r\n};\r\nexports.persistentEnd = persistentEnd;\r\nvar resetConnectionState = function () {\r\n    var _a;\r\n    for (var _i = 0, _b = Object.values(openChannels); _i < _b.length; _i++) {\r\n        var channel = _b[_i];\r\n        channel.prev = null;\r\n    }\r\n    if ((_a = socket === null || socket === void 0 ? void 0 : socket.buffer) === null || _a === void 0 ? void 0 : _a.length) {\r\n        socket.buffer = [];\r\n    }\r\n};\r\nvar persistentStart = function (roomId, peerId) {\r\n    var initialized = window.watchRTCInitialized;\r\n    if (!initialized) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"persistentStart error. SDK is not initialized. Use 'init' function first.\"], false));\r\n        return;\r\n    }\r\n    watchrtcConfig = __assign(__assign({}, watchrtcConfig), { rtcRoomId: roomId, rtcPeerId: peerId });\r\n    watchrtcIdentifiers.rtcRoomId = roomId;\r\n    watchrtcIdentifiers.rtcPeerId = peerId;\r\n    resetConnectionState();\r\n    maybeOpenWebsocketConnection({});\r\n    debugLog(\"info\", \"persistentStart. sessionId: \".concat(window.watchRTCSessionId), { watchrtcConfig: watchrtcConfig });\r\n};\r\nexports.persistentStart = persistentStart;\r\n// (window as any).setUserRating = setUserRating;\r\n// (window as any).addTags = addTags;\r\n// (window as any).addKeys = addKeys;\r\n// (window as any).init = initSDK;\r\n// (window as any).addEvent = addEvent;\r\n// (window as any).wrtcConnect = connect;\r\n// (window as any).wrtcDisconnect = disconnect;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getStreamsFromStats = exports.getTransportFromStats = void 0;\r\nvar getTransportFromStats = function (id, reports) {\r\n    if (!reports) {\r\n        return null;\r\n    }\r\n    var reportKeys = Object.keys(reports);\r\n    var keyPairs = reportKeys.filter(function (reportKey) { return reports[reportKey].type === \"candidate-pair\" && reports[reportKey].nominated; });\r\n    if (keyPairs.length > 0) {\r\n        var _a = reports[keyPairs[0]], localCandidateId_1 = _a.localCandidateId, remoteCandidateId_1 = _a.remoteCandidateId;\r\n        var localCandidateKey = reportKeys.find(function (reportKey) { return reports[reportKey].type === \"local-candidate\" && reports[reportKey].id === localCandidateId_1; });\r\n        var remoteCandidateKey = reportKeys.find(function (reportKey) { return reports[reportKey].type === \"remote-candidate\" && reports[reportKey].id === remoteCandidateId_1; });\r\n        if (localCandidateKey && remoteCandidateKey) {\r\n            var localCandidate = reports[localCandidateKey];\r\n            var remoteCandidate = reports[remoteCandidateKey];\r\n            var peer = {};\r\n            peer[id] = {\r\n                connection: localCandidate.candidateType === \"relay\" ? \"relay\" : \"direct\",\r\n                transport: localCandidate.candidateType === \"relay\" ? localCandidate.relayProtocol : \"udp\",\r\n                address: \"\".concat(remoteCandidate.address, \":\").concat(remoteCandidate.port),\r\n            };\r\n            return peer;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nexports.getTransportFromStats = getTransportFromStats;\r\nvar getStreamsFromStats = function (id, previous, current, mappedTrack) {\r\n    var streams = {};\r\n    var currentReportsKeys = Object.keys(current);\r\n    var streamsKeys = currentReportsKeys.filter(function (keys) { return current[keys].type === \"inbound-rtp\" || current[keys].type === \"outbound-rtp\"; });\r\n    streamsKeys.forEach(function (streamKey) {\r\n        var currentReport = current[streamKey];\r\n        var previousReport = previous && streamKey in previous ? previous[streamKey] : null;\r\n        var direction = currentReport.type === \"inbound-rtp\" ? \"inbound\" : \"outbound\";\r\n        var kind = currentReport.kind;\r\n        var currentRemoteReport = currentReport.remoteId in current ? current[currentReport.remoteId] : null;\r\n        var previousRemoteReport = previousReport && previousReport.remoteId in previous ? previous[previousReport.remoteId] : null;\r\n        var deltaSeconds = previousReport ? (currentReport.timestamp - previousReport.timestamp) / 1000 : null;\r\n        var stream = {\r\n            direction: direction,\r\n            kind: kind,\r\n            peerId: id,\r\n        };\r\n        // Specific video (in inbound, outbound\r\n        if (kind === \"video\") {\r\n            stream.frameWidth = currentReport.frameWidth;\r\n            stream.frameHeight = currentReport.frameHeight;\r\n            stream.framerate = currentReport.framesPerSecond;\r\n        }\r\n        if (currentReport.type === \"inbound-rtp\") {\r\n            stream.jitter = currentReport.jitter;\r\n            // For inbound stream, trackIdentifier is part of the inbound-rtp report\r\n            stream.mappedName =\r\n                currentReport.trackIdentifier in mappedTrack ? mappedTrack[currentReport.trackIdentifier] : null;\r\n            // Compute intermediate values if previous report exists\r\n            stream.bytesReceived = previousReport ? currentReport.bytesReceived - previousReport.bytesReceived : null;\r\n            stream.packetsReceived = previousReport ? currentReport.packetsReceived - previousReport.packetsReceived : null;\r\n            stream.packetsLost = previousReport ? currentReport.packetsLost - previousReport.packetsLost : null;\r\n            stream.packetsLoss =\r\n                stream.packetsLost + stream.packetsReceived > 0\r\n                    ? (stream.packetsLost * 100) / (stream.packetsLost + stream.packetsReceived)\r\n                    : null;\r\n            stream.bitrate = deltaSeconds ? (stream.bytesReceived * 8) / deltaSeconds : null;\r\n            // Compute intermediate stats from remoteId (remoteOutbound);\r\n            stream.roundTripTime =\r\n                currentRemoteReport && \"roundTripTime\" in currentRemoteReport ? currentRemoteReport.roundTripTime : null;\r\n        }\r\n        else {\r\n            // Compute intermediate values if previous report exists\r\n            stream.bytesSent = previousReport ? currentReport.bytesSent - previousReport.bytesSent : null;\r\n            stream.packetsSent = previousReport ? currentReport.packetsSent - previousReport.packetsSent : null;\r\n            stream.bitrate = deltaSeconds ? (stream.bytesSent * 8) / deltaSeconds : null;\r\n            // Compute intermediate stats from remoteId (remoteInbound)\r\n            stream.roundTripTime =\r\n                currentRemoteReport && \"roundTripTime\" in currentRemoteReport ? currentRemoteReport.roundTripTime : null;\r\n            stream.jitter = currentRemoteReport && \"jitter\" in currentRemoteReport ? currentRemoteReport.jitter : null;\r\n            stream.packetsLost =\r\n                currentRemoteReport && previousRemoteReport\r\n                    ? currentRemoteReport.packetsLost - previousRemoteReport.packetsLost\r\n                    : null;\r\n            stream.packetsLoss =\r\n                currentRemoteReport && \"fractionLost\" in currentRemoteReport ? currentRemoteReport.fractionLost : null;\r\n            // For outbound stream, trackIdentifier is part of the media-source report\r\n            var mediaSourceKey = currentReportsKeys.find(function (key) { return current[key].id === currentReport.mediaSourceId; });\r\n            if (mediaSourceKey) {\r\n                var outboundTrackIdentifier = current[mediaSourceKey].trackIdentifier;\r\n                stream.mappedName = outboundTrackIdentifier in mappedTrack ? mappedTrack[outboundTrackIdentifier] : null;\r\n            }\r\n        }\r\n        streams[current[streamKey].id] = stream;\r\n    });\r\n    return streams;\r\n};\r\nexports.getStreamsFromStats = getStreamsFromStats;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.generateID = exports.applyPatchForRTT = exports.exposeApplicationStatsForPC = exports.restoreOriginalConsoleMethods = exports.setConsoleLevel = exports.getHardwareInfo = exports.validateEvent = exports.validateRating = exports.isRoomIdOrPeerIdChanged = exports.countOfValidConnections = exports.validateConfig = exports.getConnectionData = exports.dumpStream = exports.map2obj = exports.mangleChromeStats = exports.deltaCompression = exports.debugLog = exports.logPrefix = void 0;\r\nvar GPU = require(\"./detect-gpu\");\r\nvar stats_1 = require(\"./stats\");\r\nvar logPrefix = function (type) {\r\n    if (type === void 0) { type = \"info\"; }\r\n    return type === \"error\"\r\n        ? [\r\n            \"%cwatchRTC %cERROR\",\r\n            \"background: \".concat(\"gold\", \"; color: black; padding: 2px 0.5em; border-radius: 0.5em;\"),\r\n            \"background: \".concat(\"red\", \"; color: white; padding: 2px 0.5em; border-radius: 0.5em;\"),\r\n        ]\r\n        : [\"%cwatchRTC\", \"background: \".concat(\"gold\", \"; color: black; padding: 2px 0.5em; border-radius: 0.5em;\")];\r\n};\r\nexports.logPrefix = logPrefix;\r\nvar debugLog = function (getDebugStatus, prefix, message, object) {\r\n    var isDebugEnabled = getDebugStatus();\r\n    if (!isDebugEnabled) {\r\n        return;\r\n    }\r\n    var logArgs = __spreadArray(__spreadArray([], (0, exports.logPrefix)(prefix), true), [message], false);\r\n    if (object) {\r\n        logArgs.push(object);\r\n    }\r\n    console.log.apply(console, logArgs);\r\n};\r\nexports.debugLog = debugLog;\r\n// apply a delta compression to the stats report. Reduces size by ~90%.\r\n// To reduce further, report keys could be compressed.\r\n// Muly: maybe can improve using https://github.com/AsyncBanana/microdiff?utm_source=tldrnewsletter\r\nvar deltaCompression = function (oldStats, newStats) {\r\n    oldStats = oldStats || {};\r\n    newStats = newStats || {};\r\n    newStats = JSON.parse(JSON.stringify(newStats));\r\n    Object.keys(newStats).forEach(function (id) {\r\n        var report = newStats[id];\r\n        delete report.id;\r\n        if (!oldStats[id]) {\r\n            return;\r\n        }\r\n        Object.keys(report).forEach(function (name) {\r\n            if (report.timestamp && typeof report.timestamp === \"string\") {\r\n                report.timestamp = new Date(report.timestamp).getTime();\r\n            }\r\n            if (report[name] === oldStats[id][name]) {\r\n                delete newStats[id][name];\r\n            }\r\n            else if (Array.isArray(report[name])) {\r\n                // Arrays get serialized if anything changed.\r\n                if (JSON.stringify(report[name]) === JSON.stringify(oldStats[id][name])) {\r\n                    delete newStats[id][name];\r\n                }\r\n            }\r\n            if (Object.keys(report).length === 0) {\r\n                delete newStats[id];\r\n            }\r\n            else if (Object.keys(report).length === 1 && report.timestamp) {\r\n                delete newStats[id];\r\n            }\r\n        });\r\n    });\r\n    var timestamp = -Infinity;\r\n    Object.keys(newStats).forEach(function (id) {\r\n        var report = newStats[id];\r\n        if (report.timestamp > timestamp) {\r\n            timestamp = report.timestamp;\r\n        }\r\n    });\r\n    Object.keys(newStats).forEach(function (id) {\r\n        var report = newStats[id];\r\n        if (report.timestamp === timestamp) {\r\n            report.timestamp = 0;\r\n        }\r\n    });\r\n    newStats.timestamp = timestamp;\r\n    return newStats;\r\n};\r\nexports.deltaCompression = deltaCompression;\r\nvar mangleChromeStats = function (pc, response) {\r\n    var standardReport = {};\r\n    var reports = response.result();\r\n    reports.forEach(function (report) {\r\n        var standardStats = {\r\n            id: report.id,\r\n            timestamp: report.timestamp.getTime(),\r\n            type: report.type,\r\n        };\r\n        report.names().forEach(function (name) {\r\n            standardStats[name] = report.stat(name);\r\n        });\r\n        standardReport[standardStats.id] = standardStats;\r\n    });\r\n    return standardReport;\r\n};\r\nexports.mangleChromeStats = mangleChromeStats;\r\n// transforms a maplike to an object. Mostly for getStats +\r\n// JSON.parse(JSON.stringify())\r\nvar map2obj = function (m) {\r\n    if (!m.entries) {\r\n        return m;\r\n    }\r\n    var o = {};\r\n    m.forEach(function (v, k) {\r\n        o[k] = v;\r\n    });\r\n    return o;\r\n};\r\nexports.map2obj = map2obj;\r\nvar dumpStream = function (stream) {\r\n    return {\r\n        id: stream.id,\r\n        tracks: stream.getTracks().map(function (track) {\r\n            return {\r\n                id: track.id,\r\n                kind: track.kind,\r\n                label: track.label,\r\n                enabled: track.enabled,\r\n                muted: track.muted,\r\n                readyState: track.readyState, // `live` or `ended`\r\n            };\r\n        }),\r\n    };\r\n};\r\nexports.dumpStream = dumpStream;\r\nvar getConnectionData = function (type, key, proxyURL) {\r\n    var localUrl = \"\".concat(type == \"ws\" ? \"ws\" : \"http\", \"://localhost:9101\");\r\n    var staging1Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-staging1.testrtc.com\");\r\n    var staging2Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-staging2.testrtc.com\");\r\n    var productionUrl = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc.testrtc.com\");\r\n    var production1Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-app1.testrtc.com\");\r\n    if (proxyURL && type === \"http\") {\r\n        if (proxyURL.includes(\"wss://\")) {\r\n            proxyURL = proxyURL.replace(\"wss://\", \"https://\");\r\n        }\r\n        else {\r\n            proxyURL = proxyURL.replace(\"ws://\", \"http://\");\r\n        }\r\n    }\r\n    var splitted = key.split(\":\");\r\n    if (key.indexOf(\"local\") !== -1) {\r\n        return {\r\n            url: proxyURL || localUrl,\r\n            key: splitted[1],\r\n        };\r\n    }\r\n    else if (key.indexOf(\"staging1\") !== -1) {\r\n        return {\r\n            url: proxyURL || staging1Url,\r\n            key: splitted[1],\r\n        };\r\n    }\r\n    else if (key.indexOf(\"staging\") !== -1) {\r\n        return {\r\n            url: proxyURL || staging2Url,\r\n            key: splitted[1],\r\n        };\r\n    }\r\n    else if (key.indexOf(\"production1\") !== -1) {\r\n        return {\r\n            url: proxyURL || production1Url,\r\n            key: splitted[1],\r\n        };\r\n    }\r\n    else if (key.indexOf(\"production\") !== -1) {\r\n        return {\r\n            url: proxyURL || productionUrl,\r\n            key: splitted[1],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            url: proxyURL || productionUrl,\r\n            key: splitted[0],\r\n        };\r\n    }\r\n};\r\nexports.getConnectionData = getConnectionData;\r\nvar validateConfig = function (config) {\r\n    if (!(config === null || config === void 0 ? void 0 : config.rtcApiKey)) {\r\n        if (config === null || config === void 0 ? void 0 : config.debug) {\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"config.rtcApiKey or config.rtcToken need to be provided.\"], false));\r\n            return false;\r\n        }\r\n    }\r\n    if (!(config === null || config === void 0 ? void 0 : config.rtcRoomId) || !(config === null || config === void 0 ? void 0 : config.rtcPeerId)) {\r\n        if (config === null || config === void 0 ? void 0 : config.debug) {\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"info\"), false), [\"config.rtcRoomId or config.rtcPeerId is empty.\"], false));\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nexports.validateConfig = validateConfig;\r\nvar countOfValidConnections = function (openChannels) {\r\n    return Object.keys(openChannels).filter(function (id) { return openChannels[id].validConnection; }).length;\r\n};\r\nexports.countOfValidConnections = countOfValidConnections;\r\nvar isRoomIdOrPeerIdChanged = function (watchrtcIdentifiers, watchrtcConfig) {\r\n    var changed = false;\r\n    if (watchrtcConfig.rtcRoomId &&\r\n        watchrtcIdentifiers.rtcRoomId &&\r\n        watchrtcIdentifiers.rtcRoomId !== watchrtcConfig.rtcRoomId) {\r\n        changed = true;\r\n    }\r\n    if (watchrtcConfig.rtcPeerId &&\r\n        watchrtcIdentifiers.rtcPeerId &&\r\n        watchrtcIdentifiers.rtcPeerId !== watchrtcConfig.rtcPeerId) {\r\n        changed = true;\r\n    }\r\n    if (changed && watchrtcConfig.debug) {\r\n        console.log.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"info\"), false), [\"maybeOpenWebsocketConnection. rtcRoomId or rtcPeerId has been changed\", {\r\n                old: {\r\n                    rtcRoomId: watchrtcIdentifiers.rtcRoomId,\r\n                    rtcPeerId: watchrtcIdentifiers.rtcPeerId,\r\n                },\r\n                new: {\r\n                    rtcRoomId: watchrtcConfig.rtcRoomId,\r\n                    rtcPeerId: watchrtcConfig.rtcPeerId,\r\n                },\r\n            }], false));\r\n    }\r\n    return changed;\r\n};\r\nexports.isRoomIdOrPeerIdChanged = isRoomIdOrPeerIdChanged;\r\nvar validateRating = function (rating) {\r\n    if (!rating) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"rating parameter is required\"], false));\r\n        return false;\r\n    }\r\n    if (typeof rating !== \"number\" || rating < 1 || rating > 5) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"rating parameter should be number from 1 to 5\"], false));\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nexports.validateRating = validateRating;\r\nvar validateEvent = function (event) {\r\n    if (!event) {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"event parameter is required\"], false));\r\n        return false;\r\n    }\r\n    if (event.type !== \"global\" && event.type !== \"local\" && event.type !== \"log\") {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"event.type should be either \\\"global\\\" or \\\"local\\\" or \\\"log\\\"\"], false));\r\n        return false;\r\n    }\r\n    if (event.parameters && typeof event.parameters !== \"object\") {\r\n        console.info.apply(console, __spreadArray(__spreadArray([], (0, exports.logPrefix)(\"error\"), false), [\"event.parameters should be JSON object\\\"\"], false));\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nexports.validateEvent = validateEvent;\r\nvar getHardwareInfo = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n    function number_format(num) {\r\n        return (Math.round(num * 100) / 100).toFixed(2);\r\n    }\r\n    var loadBenchmarks, gpuInfo, result, memory;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                loadBenchmarks = function (fileName) { return __awaiter(void 0, void 0, void 0, function () {\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, new Promise(function (resolve) {\r\n                                    try {\r\n                                        var data = require(\"./gpu-benchmarks/\".concat(fileName));\r\n                                        data.shift();\r\n                                        return resolve(data);\r\n                                    }\r\n                                    catch (err) {\r\n                                        console.error(\"Error. getHardwareInfo. loadBenchmarks\", { err: err.stack, fileName: fileName });\r\n                                        resolve([]);\r\n                                    }\r\n                                })];\r\n                            case 1: return [2 /*return*/, _a.sent()];\r\n                        }\r\n                    });\r\n                }); };\r\n                return [4 /*yield*/, GPU.getGPUTier({\r\n                        override: { loadBenchmarks: loadBenchmarks },\r\n                    })];\r\n            case 1:\r\n                gpuInfo = _a.sent();\r\n                result = __assign(__assign({}, gpuInfo), { cores_count: window.navigator.hardwareConcurrency });\r\n                memory = window.performance[\"memory\"];\r\n                if (memory) {\r\n                    result.jsHeapSizeLimit = number_format(memory.jsHeapSizeLimit / 1048576);\r\n                    result.totalJSHeapSize = number_format(memory.totalJSHeapSize / 1048576);\r\n                    result.usedJSHeapSize = number_format(memory.usedJSHeapSize / 1048576);\r\n                }\r\n                return [2 /*return*/, result];\r\n        }\r\n    });\r\n}); };\r\nexports.getHardwareInfo = getHardwareInfo;\r\nvar patchConsoleConfig = {\r\n    originalMethodPrefix: \"_original_\",\r\n    methodsToPatch: [\"log\", \"debug\", \"info\", \"warn\", \"error\"],\r\n    level: \"\",\r\n};\r\nvar patchConsoleMethod = function (methodName, trace) {\r\n    var originalMethod = console[methodName];\r\n    if (!originalMethod) {\r\n        return;\r\n    }\r\n    console[patchConsoleConfig.originalMethodPrefix + methodName] = originalMethod;\r\n    console[methodName] = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (patchConsoleConfig.level && args.length && trace) {\r\n            var currentMethodIndex = patchConsoleConfig.methodsToPatch.indexOf(methodName);\r\n            var configMethodIndex = patchConsoleConfig.methodsToPatch.indexOf(patchConsoleConfig.level);\r\n            var shouldTraceMethod = currentMethodIndex >= 0 && currentMethodIndex >= configMethodIndex;\r\n            if (shouldTraceMethod) {\r\n                var text = stringifyArgs(args);\r\n                trace({ data: [\"log\", null, { type: methodName, text: text }] });\r\n            }\r\n        }\r\n        originalMethod.apply(console, args);\r\n    };\r\n};\r\nvar setConsoleLevel = function (level, trace) {\r\n    if (level && patchConsoleConfig.methodsToPatch.includes(level) && level !== patchConsoleConfig.level) {\r\n        var currentIndex = patchConsoleConfig.methodsToPatch.indexOf(level);\r\n        var previousIndex = patchConsoleConfig.methodsToPatch.indexOf(patchConsoleConfig.level);\r\n        if (previousIndex < 0) {\r\n            for (var _i = 0, _a = patchConsoleConfig.methodsToPatch.slice(currentIndex); _i < _a.length; _i++) {\r\n                var methodName = _a[_i];\r\n                patchConsoleMethod(methodName, trace);\r\n            }\r\n        }\r\n        else if (currentIndex < previousIndex) {\r\n            for (var _b = 0, _c = patchConsoleConfig.methodsToPatch.slice(currentIndex, previousIndex); _b < _c.length; _b++) {\r\n                var methodName = _c[_b];\r\n                patchConsoleMethod(methodName, trace);\r\n            }\r\n        }\r\n        patchConsoleConfig.level = level;\r\n    }\r\n};\r\nexports.setConsoleLevel = setConsoleLevel;\r\nvar restoreOriginalConsoleMethods = function () {\r\n    if (!(\"console\" in window)) {\r\n        return;\r\n    }\r\n    for (var _i = 0, _a = patchConsoleConfig.methodsToPatch; _i < _a.length; _i++) {\r\n        var methodName = _a[_i];\r\n        var originalMethod = console[patchConsoleConfig.originalMethodPrefix + methodName];\r\n        if (!originalMethod) {\r\n            continue;\r\n        }\r\n        console[methodName] = originalMethod.bind(console);\r\n        delete console[patchConsoleConfig.originalMethodPrefix + methodName];\r\n    }\r\n};\r\nexports.restoreOriginalConsoleMethods = restoreOriginalConsoleMethods;\r\nvar exposeApplicationStatsForPC = function (id, previous, current, mappedTradk) {\r\n    return {\r\n        peer: (0, stats_1.getTransportFromStats)(id, current),\r\n        streams: (0, stats_1.getStreamsFromStats)(id, previous, current, mappedTradk),\r\n    };\r\n};\r\nexports.exposeApplicationStatsForPC = exposeApplicationStatsForPC;\r\nvar stringifyArgs = function (args) {\r\n    try {\r\n        return args.map(function (item) { return (typeof item === \"string\" ? item : JSON.stringify(item, replacerFunc())); }).join(\" \");\r\n    }\r\n    catch (_a) {\r\n        // do not log anything to not go into loop\r\n        // can fail with Illegal Invocation of JSON.stringify\r\n        // assumption - when customer also uses custom logger and binds another context\r\n        // so just ignore it\r\n        return \"\";\r\n    }\r\n};\r\n// avoid \"Converting circular structure to JSON\" error while JSON.stringifying\r\nvar replacerFunc = function () {\r\n    var visited = new WeakSet();\r\n    return function (_key, value) {\r\n        if (typeof value === \"object\" && value !== null) {\r\n            if (visited.has(value)) {\r\n                return;\r\n            }\r\n            visited.add(value);\r\n        }\r\n        return value;\r\n    };\r\n};\r\nvar applyPatchForRTT = function (oldStats, newStats) {\r\n    oldStats = oldStats || {};\r\n    newStats = newStats || {};\r\n    var hasOldStats = true;\r\n    if (Object.keys(oldStats).length === 0) {\r\n        hasOldStats = false;\r\n    }\r\n    var keys = Object.keys(newStats);\r\n    var reportKeys = keys.filter(function (key) { return newStats[key].type === \"remote-outbound-rtp\" || newStats[key].type === \"remote-inbound-rtp\"; });\r\n    reportKeys.forEach(function (reportKey) {\r\n        // case for Firefox/Safari\r\n        if (!(\"roundTripTime\" in newStats[reportKey])) {\r\n            newStats[reportKey].roundTripTime = NaN;\r\n        }\r\n        else {\r\n            // case Chrome\r\n            var statsHaveRTTMeasurements = \"roundTripTimeMeasurements\" in newStats[reportKey] &&\r\n                Boolean(oldStats[reportKey]) &&\r\n                \"roundTripTimeMeasurements\" in oldStats[reportKey];\r\n            if (hasOldStats && statsHaveRTTMeasurements) {\r\n                if (newStats[reportKey].roundTripTimeMeasurements === oldStats[reportKey].roundTripTimeMeasurements) {\r\n                    newStats[reportKey].roundTripTime = NaN;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return newStats;\r\n};\r\nexports.applyPatchForRTT = applyPatchForRTT;\r\nvar generateID = function () {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n};\r\nexports.generateID = generateID;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = \"1.36.3\";\r\n","\"use strict\";\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"./utils\");\r\nvar WatchRTCHttp = /** @class */ (function () {\r\n    function WatchRTCHttp(options) {\r\n        this.debug = false;\r\n        if (WatchRTCHttp._instance) {\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"WatchRTCSocket instance already created\"], false));\r\n        }\r\n        else {\r\n            WatchRTCHttp._instance = this;\r\n            this.debug = !!options.debug;\r\n        }\r\n    }\r\n    WatchRTCHttp.prototype.trace = function (url, projectId, rtcRoomId, rtcPeerId) {\r\n        var data = [];\r\n        for (var _i = 4; _i < arguments.length; _i++) {\r\n            data[_i - 4] = arguments[_i];\r\n        }\r\n        var args = Array.prototype.slice.call(data);\r\n        args.push(Date.now());\r\n        if (args[1] instanceof RTCPeerConnection) {\r\n            args[1] = args[1].__rtcStatsId;\r\n        }\r\n        var response = fetch(url, {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                data: data,\r\n                projectId: projectId,\r\n                rtcRoomId: rtcRoomId,\r\n                rtcPeerId: rtcPeerId,\r\n            }),\r\n        });\r\n        return response\r\n            .then(function () { return ({}); })\r\n            .catch(function (err) {\r\n            console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [err.message, { err: err.stack }], false));\r\n            return { error: err };\r\n        });\r\n    };\r\n    return WatchRTCHttp;\r\n}());\r\nexports.default = WatchRTCHttp;\r\n","\"use strict\";\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"./utils\");\r\nvar LZString = require(\"./lz-string\");\r\nvar PROTOCOL_VERSION = \"2.0\";\r\nvar WatchRTCSocket = /** @class */ (function () {\r\n    function WatchRTCSocket(options) {\r\n        this.connection = null;\r\n        this.wasConnected = false;\r\n        this.buffer = [];\r\n        this.sendInterval = 1;\r\n        this.onClose = function () { };\r\n        this.debug = false;\r\n        this.dataCollection = true;\r\n        this.sendPromises = [];\r\n        this.trace = function (_a) {\r\n            var _b;\r\n            var data = _a.data, options = _a.options;\r\n            var args = Array.prototype.slice.call(data);\r\n            args.push(Date.now());\r\n            if (args[1] instanceof RTCPeerConnection) {\r\n                args[1] = args[1].__rtcStatsId;\r\n            }\r\n            if (!WatchRTCSocket._instance.dataCollection) {\r\n                if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\r\n                    options.promiseFuncs.resolve({ error: \"Data collection disabled\" });\r\n                }\r\n                return;\r\n            }\r\n            if (!WatchRTCSocket._instance.connection) {\r\n                if (WatchRTCSocket._instance.buffer.length > 1000) {\r\n                    if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\r\n                        options.promiseFuncs.resolve({ error: \"Message buffer size exceeded\" });\r\n                    }\r\n                    return;\r\n                }\r\n                WatchRTCSocket._instance.buffer.push(args);\r\n                if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\r\n                    WatchRTCSocket._instance.sendPromises.push(options.promiseFuncs);\r\n                }\r\n                return;\r\n            }\r\n            if (WatchRTCSocket._instance.connection.readyState === WebSocket.OPEN) {\r\n                WatchRTCSocket._instance.buffer.push(args);\r\n                if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\r\n                    WatchRTCSocket._instance.sendPromises.push(options.promiseFuncs);\r\n                }\r\n                if (WatchRTCSocket._instance.buffer.length >= WatchRTCSocket._instance.sendInterval) {\r\n                    var lines = JSON.stringify(WatchRTCSocket._instance.buffer);\r\n                    var compressedMessage = LZString.compressToEncodedURIComponent(lines);\r\n                    if (WatchRTCSocket._instance.debug) {\r\n                        var logFunc = (_b = console._original_log) !== null && _b !== void 0 ? _b : console.log;\r\n                        logFunc.apply(void 0, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"lines: \".concat(lines.length)], false));\r\n                        logFunc.apply(void 0, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"compressedMessage: \".concat(compressedMessage.length)], false));\r\n                    }\r\n                    WatchRTCSocket._instance.buffer = [];\r\n                    WatchRTCSocket._instance.connection.send(compressedMessage);\r\n                    WatchRTCSocket._instance.sendPromises.forEach(function (_a) {\r\n                        var resolve = _a.resolve;\r\n                        return resolve({});\r\n                    });\r\n                    WatchRTCSocket._instance.sendPromises = [];\r\n                }\r\n            }\r\n        };\r\n        if (WatchRTCSocket._instance) {\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"WatchRTCSocket instance already created\"], false));\r\n        }\r\n        else {\r\n            WatchRTCSocket._instance = this;\r\n            this.debug = !!options.debug;\r\n        }\r\n    }\r\n    WatchRTCSocket.prototype.connect = function (_a) {\r\n        var url = _a.url, onData = _a.onData, onError = _a.onError, onOpen = _a.onOpen, onClose = _a.onClose;\r\n        if (WatchRTCSocket._instance.connection) {\r\n            WatchRTCSocket._instance.connection.close();\r\n        }\r\n        var _this = WatchRTCSocket._instance;\r\n        WatchRTCSocket._instance.connection = new WebSocket(url, PROTOCOL_VERSION);\r\n        WatchRTCSocket._instance.connection.onopen = onOpen || null;\r\n        WatchRTCSocket._instance.connection.onclose = onClose || null;\r\n        WatchRTCSocket._instance.connection.onmessage = function (e) {\r\n            var _a;\r\n            try {\r\n                var data = JSON.parse(e.data);\r\n                if (data.error) {\r\n                    (_a = _this === null || _this === void 0 ? void 0 : _this.connection) === null || _a === void 0 ? void 0 : _a.close();\r\n                    _this.connection = null;\r\n                    console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"\\n\" + data.error], false));\r\n                    onError(data.error, \"auth\");\r\n                }\r\n                else {\r\n                    if (data.sendInterval) {\r\n                        WatchRTCSocket._instance.sendInterval = data.sendInterval;\r\n                    }\r\n                    onData(data);\r\n                    WatchRTCSocket._instance.wasConnected = true;\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [{ err: err.stack }], false));\r\n                onError(err.message);\r\n            }\r\n        };\r\n        WatchRTCSocket._instance.connection.onerror = function (e) {\r\n            console.info.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"error\"), false), [\"\\n\", e], false));\r\n            onError(e, \"connection\");\r\n        };\r\n    };\r\n    WatchRTCSocket.prototype.close = function (nailUpCallEnd) {\r\n        var _a, _b;\r\n        if (nailUpCallEnd && ((_b = (_a = WatchRTCSocket._instance) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.readyState) === WebSocket.OPEN) {\r\n            var lines = JSON.stringify([\"nailUpCallEnd\", null, null]);\r\n            var compressedMessage = LZString.compressToEncodedURIComponent(lines);\r\n            WatchRTCSocket._instance.connection.send(compressedMessage);\r\n        }\r\n        WatchRTCSocket._instance.buffer = [];\r\n        WatchRTCSocket._instance.sendPromises.forEach(function (_a) {\r\n            var resolve = _a.resolve;\r\n            return resolve({ error: \"Connection was close\" });\r\n        });\r\n        WatchRTCSocket._instance.sendPromises = [];\r\n        if (WatchRTCSocket._instance.connection) {\r\n            WatchRTCSocket._instance.connection.close();\r\n            WatchRTCSocket._instance.onClose();\r\n            WatchRTCSocket._instance.connection = null;\r\n        }\r\n    };\r\n    WatchRTCSocket.prototype.disableDataCollection = function () {\r\n        if (WatchRTCSocket._instance.debug) {\r\n            console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"Data collection disabled.\"], false));\r\n        }\r\n        WatchRTCSocket._instance.dataCollection = false;\r\n    };\r\n    WatchRTCSocket.prototype.enableDataCollection = function () {\r\n        if (WatchRTCSocket._instance.debug) {\r\n            console.log.apply(console, __spreadArray(__spreadArray([], (0, utils_1.logPrefix)(\"info\"), false), [\"Data collection enabled.\"], false));\r\n        }\r\n        WatchRTCSocket._instance.dataCollection = true;\r\n    };\r\n    WatchRTCSocket.prototype.toggleDebug = function (debug) {\r\n        WatchRTCSocket._instance.debug = debug;\r\n    };\r\n    return WatchRTCSocket;\r\n}());\r\nexports.default = WatchRTCSocket;\r\n","!(function (e, r) {\n  \"object\" == typeof exports && \"undefined\" != typeof module\n    ? r(exports)\n    : \"function\" == typeof define && define.amd\n    ? define([\"exports\"], r)\n    : r(((e = \"undefined\" != typeof globalThis ? globalThis : e || self).DetectGPU = {}));\n})(this, function (e) {\n  \"use strict\";\n  var r = function (e, n) {\n    return (r =\n      Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array &&\n        function (e, r) {\n          e.__proto__ = r;\n        }) ||\n      function (e, r) {\n        for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n      })(e, n);\n  };\n  function n(e, r, n, t) {\n    return new (n || (n = Promise))(function (o, a) {\n      function i(e) {\n        try {\n          u(t.next(e));\n        } catch (e) {\n          a(e);\n        }\n      }\n      function c(e) {\n        try {\n          u(t.throw(e));\n        } catch (e) {\n          a(e);\n        }\n      }\n      function u(e) {\n        var r;\n        e.done\n          ? o(e.value)\n          : ((r = e.value),\n            r instanceof n\n              ? r\n              : new n(function (e) {\n                  e(r);\n                })).then(i, c);\n      }\n      u((t = t.apply(e, r || [])).next());\n    });\n  }\n  function t(e, r) {\n    var n,\n      t,\n      o,\n      a,\n      i = {\n        label: 0,\n        sent: function () {\n          if (1 & o[0]) throw o[1];\n          return o[1];\n        },\n        trys: [],\n        ops: [],\n      };\n    return (\n      (a = { next: c(0), throw: c(1), return: c(2) }),\n      \"function\" == typeof Symbol &&\n        (a[Symbol.iterator] = function () {\n          return this;\n        }),\n      a\n    );\n    function c(a) {\n      return function (c) {\n        return (function (a) {\n          if (n) throw new TypeError(\"Generator is already executing.\");\n          for (; i; )\n            try {\n              if (\n                ((n = 1),\n                t &&\n                  (o = 2 & a[0] ? t.return : a[0] ? t.throw || ((o = t.return) && o.call(t), 0) : t.next) &&\n                  !(o = o.call(t, a[1])).done)\n              )\n                return o;\n              switch (((t = 0), o && (a = [2 & a[0], o.value]), a[0])) {\n                case 0:\n                case 1:\n                  o = a;\n                  break;\n                case 4:\n                  return i.label++, { value: a[1], done: !1 };\n                case 5:\n                  i.label++, (t = a[1]), (a = [0]);\n                  continue;\n                case 7:\n                  (a = i.ops.pop()), i.trys.pop();\n                  continue;\n                default:\n                  if (!((o = i.trys), (o = o.length > 0 && o[o.length - 1]) || (6 !== a[0] && 2 !== a[0]))) {\n                    i = 0;\n                    continue;\n                  }\n                  if (3 === a[0] && (!o || (a[1] > o[0] && a[1] < o[3]))) {\n                    i.label = a[1];\n                    break;\n                  }\n                  if (6 === a[0] && i.label < o[1]) {\n                    (i.label = o[1]), (o = a);\n                    break;\n                  }\n                  if (o && i.label < o[2]) {\n                    (i.label = o[2]), i.ops.push(a);\n                    break;\n                  }\n                  o[2] && i.ops.pop(), i.trys.pop();\n                  continue;\n              }\n              a = r.call(e, i);\n            } catch (e) {\n              (a = [6, e]), (t = 0);\n            } finally {\n              n = o = 0;\n            }\n          if (5 & a[0]) throw a[1];\n          return { value: a[0] ? a[1] : void 0, done: !0 };\n        })([a, c]);\n      };\n    }\n  }\n  var o = [\n    \"geforce 320m\",\n    \"geforce 8600\",\n    \"geforce 8600m gt\",\n    \"geforce 8800 gs\",\n    \"geforce 8800 gt\",\n    \"geforce 9400\",\n    \"geforce 9400m g\",\n    \"geforce 9400m\",\n    \"geforce 9600m gt\",\n    \"geforce 9600m\",\n    \"geforce fx go5200\",\n    \"geforce gt 120\",\n    \"geforce gt 130\",\n    \"geforce gt 330m\",\n    \"geforce gtx 285\",\n    \"google swiftshader\",\n    \"intel g41\",\n    \"intel g45\",\n    \"intel gma 4500mhd\",\n    \"intel gma x3100\",\n    \"intel hd 3000\",\n    \"intel q45\",\n    \"legacy\",\n    \"mali-2\",\n    \"mali-3\",\n    \"mali-4\",\n    \"quadro fx 1500\",\n    \"quadro fx 4\",\n    \"quadro fx 5\",\n    \"radeon hd 2400\",\n    \"radeon hd 2600\",\n    \"radeon hd 4670\",\n    \"radeon hd 4850\",\n    \"radeon hd 4870\",\n    \"radeon hd 5670\",\n    \"radeon hd 5750\",\n    \"radeon hd 6290\",\n    \"radeon hd 6300\",\n    \"radeon hd 6310\",\n    \"radeon hd 6320\",\n    \"radeon hd 6490m\",\n    \"radeon hd 6630m\",\n    \"radeon hd 6750m\",\n    \"radeon hd 6770m\",\n    \"radeon hd 6970m\",\n    \"sgx 543\",\n    \"sgx543\",\n  ];\n  function a(e) {\n    return (e = e\n      .toLowerCase()\n      .replace(/^angle ?\\((.+)\\)*$/, \"$1\")\n      .replace(/\\s(\\d{1,2}gb|direct3d.+$)|\\(r\\)| \\([^)]+\\)$/g, \"\"));\n  }\n  const i = 34962;\n  var c = \"undefined\" == typeof window,\n    u = (function () {\n      if (!c) {\n        var e = window.navigator,\n          r = e.userAgent,\n          n = e.platform,\n          t = e.maxTouchPoints,\n          o = /(iphone|ipod|ipad)/i.test(r),\n          a = \"iPad\" === n || (\"MacIntel\" === n && t > 0 && !window.MSStream);\n        return { isIpad: a, isMobile: /android/i.test(r) || o || a, isSafari12: /Version\\/12.+Safari/.test(r) };\n      }\n    })();\n  function f(e, r, n) {\n    if (!n) return [r];\n    var t,\n      o = (function (e) {\n        var r =\n            \"\\n    precision highp float;\\n    attribute vec3 aPosition;\\n    varying float vvv;\\n    void main() {\\n      vvv = 0.31622776601683794;\\n      gl_Position = vec4(aPosition, 1.0);\\n    }\\n  \",\n          n =\n            \"\\n    precision highp float;\\n    varying float vvv;\\n    void main() {\\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\\n      enc = fract(enc);\\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\\n      gl_FragColor = enc;\\n    }\\n  \",\n          t = e.createShader(35633),\n          o = e.createShader(35632),\n          a = e.createProgram();\n        if (!(o && t && a)) return;\n        e.shaderSource(t, r),\n          e.shaderSource(o, n),\n          e.compileShader(t),\n          e.compileShader(o),\n          e.attachShader(a, t),\n          e.attachShader(a, o),\n          e.linkProgram(a),\n          e.detachShader(a, t),\n          e.detachShader(a, o),\n          e.deleteShader(t),\n          e.deleteShader(o),\n          e.useProgram(a);\n        var c = e.createBuffer();\n        e.bindBuffer(i, c), e.bufferData(i, new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]), 35044);\n        var u = e.getAttribLocation(a, \"aPosition\");\n        e.vertexAttribPointer(u, 3, 5126, !1, 0, 0),\n          e.enableVertexAttribArray(u),\n          e.clearColor(1, 1, 1, 1),\n          e.clear(16384),\n          e.viewport(0, 0, 1, 1),\n          e.drawArrays(4, 0, 3);\n        var f = new Uint8Array(4);\n        return e.readPixels(0, 0, 1, 1, 6408, 5121, f), e.deleteProgram(a), e.deleteBuffer(c), f.join(\"\");\n      })(e),\n      a = \"801621810\",\n      c = \"8016218135\",\n      f = \"80162181161\",\n      l = (null == u ? void 0 : u.isIpad)\n        ? [\n            [\"a7\", f, 12],\n            [\"a8\", c, 15],\n            [\"a8x\", c, 15],\n            [\"a9\", c, 15],\n            [\"a9x\", c, 15],\n            [\"a10\", c, 15],\n            [\"a10x\", c, 15],\n            [\"a12\", a, 15],\n            [\"a12x\", a, 15],\n            [\"a12z\", a, 15],\n            [\"a14\", a, 15],\n            [\"m1\", a, 15],\n          ]\n        : [\n            [\"a7\", f, 12],\n            [\"a8\", c, 12],\n            [\"a9\", c, 15],\n            [\"a10\", c, 15],\n            [\"a11\", a, 15],\n            [\"a12\", a, 15],\n            [\"a13\", a, 15],\n            [\"a14\", a, 15],\n          ];\n    return (\n      \"80162181255\" === o\n        ? (t = l.filter(function (e) {\n            return e[2] >= 14;\n          }))\n        : (t = l.filter(function (e) {\n            return e[1] === o;\n          })).length || (t = l),\n      t.map(function (e) {\n        var r = e[0];\n        return \"apple \".concat(r, \" gpu\");\n      })\n    );\n  }\n  var l = [],\n    d = [];\n  function s(e, r) {\n    if (e === r) return 0;\n    var n = e;\n    e.length > r.length && ((e = r), (r = n));\n    for (var t = e.length, o = r.length; t > 0 && e.charCodeAt(~-t) === r.charCodeAt(~-o); ) t--, o--;\n    for (var a, i = 0; i < t && e.charCodeAt(i) === r.charCodeAt(i); ) i++;\n    if (((o -= i), 0 === (t -= i))) return o;\n    for (var c, u, f = 0, s = 0, h = 0; s < t; ) (d[s] = e.charCodeAt(i + s)), (l[s] = ++s);\n    for (; h < o; )\n      for (a = r.charCodeAt(i + h), c = h++, f = h, s = 0; s < t; s++)\n        (u = a === d[s] ? c : c + 1), (c = l[s]), (f = l[s] = c > f ? (u > f ? f + 1 : u) : u > c ? c + 1 : u);\n    return f;\n  }\n  function h(e) {\n    return null != e;\n  }\n  var v = (function (e) {\n    function n(r) {\n      var n = this.constructor,\n        t = e.call(this, r) || this;\n      return Object.setPrototypeOf(t, n.prototype), t;\n    }\n    return (\n      (function (e, n) {\n        if (\"function\" != typeof n && null !== n)\n          throw new TypeError(\"Class extends value \" + String(n) + \" is not a constructor or null\");\n        function t() {\n          this.constructor = e;\n        }\n        r(e, n), (e.prototype = null === n ? Object.create(n) : ((t.prototype = n.prototype), new t()));\n      })(n, e),\n      n\n    );\n  })(Error);\n  (e.getGPUTier = function (e) {\n    var r = void 0 === e ? {} : e,\n      i = r.mobileTiers,\n      l = void 0 === i ? [0, 15, 30, 60] : i,\n      d = r.desktopTiers,\n      p = void 0 === d ? [0, 15, 30, 60] : d,\n      g = r.override,\n      m = void 0 === g ? {} : g,\n      b = r.glContext,\n      w = r.failIfMajorPerformanceCaveat,\n      y = void 0 !== w && w,\n      x = r.benchmarksURL,\n      P = void 0 === x ? \"https://unpkg.com/detect-gpu@\".concat(\"4.0.8\", \"/dist/benchmarks\") : x;\n    return n(void 0, void 0, void 0, function () {\n      var e, r, i, d, g, w, x, A, S, _, C, E, L, M, j, B, k, O, T, U, I, D, R, G, N, K;\n      return t(this, function (W) {\n        switch (W.label) {\n          case 0:\n            if (((e = {}), c)) return [2, { tier: 0, type: \"SSR\" }];\n            if (\n              ((r = m.isIpad),\n              (i = void 0 === r ? !!(null == u ? void 0 : u.isIpad) : r),\n              (d = m.isMobile),\n              (g = void 0 === d ? !!(null == u ? void 0 : u.isMobile) : d),\n              (w = m.screenSize),\n              (x = void 0 === w ? window.screen : w),\n              (A = m.loadBenchmarks),\n              (S =\n                void 0 === A\n                  ? function (e) {\n                      return n(void 0, void 0, void 0, function () {\n                        var r;\n                        return t(this, function (n) {\n                          switch (n.label) {\n                            case 0:\n                              return [\n                                4,\n                                fetch(\"\".concat(P, \"/\").concat(e)).then(function (e) {\n                                  return e.json();\n                                }),\n                              ];\n                            case 1:\n                              if (((r = n.sent()), parseInt(r.shift().split(\".\")[0], 10) < 4))\n                                throw new v(\"Detect GPU benchmark data is out of date. Please update to version 4x\");\n                              return [2, r];\n                          }\n                        });\n                      });\n                    }\n                  : A),\n              (_ = m.renderer),\n              (C = function (e) {\n                for (\n                  var r = 0,\n                    n = g\n                      ? [\"adreno\", \"apple\", \"mali-t\", \"mali\", \"nvidia\", \"powervr\"]\n                      : [\"intel\", \"apple\", \"amd\", \"radeon\", \"nvidia\", \"geforce\"];\n                  r < n.length;\n                  r++\n                ) {\n                  var t = n[r];\n                  if (e.includes(t)) return t;\n                }\n              }),\n              (E = function (r) {\n                return n(void 0, void 0, void 0, function () {\n                  var n, o, a, c, u, f, l, d, h, p, m, b, w, y, P, A, _, E, L, M, j, B, k, O, T, U;\n                  return t(this, function (t) {\n                    switch (t.label) {\n                      case 0:\n                        if (!(n = C(r))) return [2];\n                        (o = \"\"\n                          .concat(g ? \"m\" : \"d\", \"-\")\n                          .concat(n)\n                          .concat(i ? \"-ipad\" : \"\", \".json\")),\n                          (a = e[o] = null !== (U = e[o]) && void 0 !== U ? U : S(o)),\n                          (t.label = 1);\n                      case 1:\n                        return t.trys.push([1, 3, , 4]), [4, a];\n                      case 2:\n                        return (c = t.sent()), [3, 4];\n                      case 3:\n                        if ((u = t.sent()) instanceof v) throw u;\n                        return [2];\n                      case 4:\n                        if (\n                          ((f = (function (e) {\n                            var r,\n                              n =\n                                (e = e.replace(/\\([^)]+\\)/, \"\")).match(/\\d+/) ||\n                                e.match(/(\\W|^)([A-Za-z]{1,3})(\\W|$)/g);\n                            return null !== (r = null == n ? void 0 : n.join(\"\").replace(/\\W|amd/g, \"\")) && void 0 !== r\n                              ? r\n                              : \"\";\n                          })(r)),\n                          (l = c.filter(function (e) {\n                            return e[1] === f;\n                          })).length ||\n                            (l = c.filter(function (e) {\n                              return e[0].includes(r);\n                            })),\n                          0 === (d = l.length))\n                        )\n                          return [2];\n                        for (\n                          h =\n                            d > 1\n                              ? l\n                                  .map(function (e) {\n                                    return [e, s(r, e[0])];\n                                  })\n                                  .sort(function (e, r) {\n                                    return e[1] - r[1];\n                                  })[0][0]\n                              : l[0],\n                            p = h[0],\n                            m = h[3],\n                            b = Number.MAX_VALUE,\n                            y = window.devicePixelRatio,\n                            P = x.width * y * x.height * y,\n                            A = 0,\n                            _ = m;\n                          A < _.length;\n                          A++\n                        )\n                          (E = _[A]),\n                            (L = E[0]),\n                            (M = E[1]),\n                            (j = L * M),\n                            (B = Math.abs(P - j)) < b && ((b = B), (w = E));\n                        return w ? ((O = (k = w)[2]), (T = k[3]), [2, [b, O, p, T]]) : [2];\n                    }\n                  });\n                });\n              }),\n              (L = function (e, r, n, t, o) {\n                return { device: o, fps: t, gpu: n, isMobile: g, tier: e, type: r };\n              }),\n              (j = \"\"),\n              _)\n            )\n              (_ = a(_)), (M = [_]);\n            else {\n              if (\n                !(B =\n                  b ||\n                  (function (e, r) {\n                    void 0 === r && (r = !1);\n                    var n = {\n                      alpha: !1,\n                      antialias: !1,\n                      depth: !1,\n                      failIfMajorPerformanceCaveat: r,\n                      powerPreference: \"high-performance\",\n                      stencil: !1,\n                    };\n                    e && delete n.powerPreference;\n                    var t = window.document.createElement(\"canvas\"),\n                      o = t.getContext(\"webgl\", n) || t.getContext(\"experimental-webgl\", n);\n                    return null != o ? o : void 0;\n                  })(null == u ? void 0 : u.isSafari12, y))\n              )\n                return [2, L(0, \"WEBGL_UNSUPPORTED\")];\n              if (\n                ((k = B.getExtension(\"WEBGL_debug_renderer_info\")) && (_ = B.getParameter(k.UNMASKED_RENDERER_WEBGL)),\n                !_)\n              )\n                return [2, L(1, \"FALLBACK\")];\n              (j = _),\n                (_ = a(_)),\n                (M = (function (e, r, n) {\n                  return \"apple gpu\" === r ? f(e, r, n) : [r];\n                })(B, _, g));\n            }\n            return [4, Promise.all(M.map(E))];\n          case 1:\n            if (\n              !(O = W.sent()\n                .filter(h)\n                .sort(function (e, r) {\n                  var n = e[0],\n                    t = void 0 === n ? Number.MAX_VALUE : n,\n                    o = e[1],\n                    a = r[0],\n                    i = void 0 === a ? Number.MAX_VALUE : a,\n                    c = r[1];\n                  return t === i ? o - c : t - i;\n                })).length\n            )\n              return [\n                2,\n                (T = o.find(function (e) {\n                  return _.includes(e);\n                }))\n                  ? L(0, \"BLOCKLISTED\", T)\n                  : L(1, \"FALLBACK\", \"\".concat(_, \" (\").concat(j, \")\")),\n              ];\n            if (((U = O[0]), (I = U[1]), (D = U[2]), (R = U[3]), -1 === I)) return [2, L(0, \"BLOCKLISTED\", D, I, R)];\n            for (G = g ? l : p, N = 0, K = 0; K < G.length; K++) I >= G[K] && (N = K);\n            return [2, L(N, \"BENCHMARK\", D, I, R)];\n        }\n      });\n    });\n  }),\n    Object.defineProperty(e, \"__esModule\", { value: !0 });\n});\n//# sourceMappingURL=detect-gpu.umd.js.map\n","var map = {\n\t\"./d-adreno.json\": 622,\n\t\"./d-amd.json\": 183,\n\t\"./d-apple.json\": 732,\n\t\"./d-geforce.json\": 405,\n\t\"./d-intel.json\": 178,\n\t\"./d-nvidia.json\": 217,\n\t\"./d-radeon.json\": 145,\n\t\"./m-adreno.json\": 921,\n\t\"./m-apple-ipad.json\": 535,\n\t\"./m-apple.json\": 438,\n\t\"./m-intel.json\": 283,\n\t\"./m-mali-t.json\": 327,\n\t\"./m-mali.json\": 538,\n\t\"./m-nvidia.json\": 884,\n\t\"./m-powervr.json\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 804;","var LZString = (function () {\n  function o(o, r) {\n    if (!t[o]) {\n      t[o] = {};\n      for (var n = 0; n < o.length; n++) t[o][o.charAt(n)] = n;\n    }\n    return t[o][r];\n  }\n  var r = String.fromCharCode,\n    n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\",\n    t = {},\n    i = {\n      compressToBase64: function (o) {\n        if (null == o) return \"\";\n        var r = i._compress(o, 6, function (o) {\n          return n.charAt(o);\n        });\n        switch (r.length % 4) {\n          default:\n          case 0:\n            return r;\n          case 1:\n            return r + \"===\";\n          case 2:\n            return r + \"==\";\n          case 3:\n            return r + \"=\";\n        }\n      },\n      decompressFromBase64: function (r) {\n        return null == r\n          ? \"\"\n          : \"\" == r\n          ? null\n          : i._decompress(r.length, 32, function (e) {\n              return o(n, r.charAt(e));\n            });\n      },\n      compressToUTF16: function (o) {\n        return null == o\n          ? \"\"\n          : i._compress(o, 15, function (o) {\n              return r(o + 32);\n            }) + \" \";\n      },\n      decompressFromUTF16: function (o) {\n        return null == o\n          ? \"\"\n          : \"\" == o\n          ? null\n          : i._decompress(o.length, 16384, function (r) {\n              return o.charCodeAt(r) - 32;\n            });\n      },\n      compressToUint8Array: function (o) {\n        for (\n          var r = i.compress(o), n = new Uint8Array(2 * r.length), e = 0, t = r.length;\n          t > e;\n          e++\n        ) {\n          var s = r.charCodeAt(e);\n          (n[2 * e] = s >>> 8), (n[2 * e + 1] = s % 256);\n        }\n        return n;\n      },\n      decompressFromUint8Array: function (o) {\n        if (null === o || void 0 === o) return i.decompress(o);\n        for (var n = new Array(o.length / 2), e = 0, t = n.length; t > e; e++)\n          n[e] = 256 * o[2 * e] + o[2 * e + 1];\n        var s = [];\n        return (\n          n.forEach(function (o) {\n            s.push(r(o));\n          }),\n          i.decompress(s.join(\"\"))\n        );\n      },\n      compressToEncodedURIComponent: function (o) {\n        return null == o\n          ? \"\"\n          : i._compress(o, 6, function (o) {\n              return e.charAt(o);\n            });\n      },\n      decompressFromEncodedURIComponent: function (r) {\n        return null == r\n          ? \"\"\n          : \"\" == r\n          ? null\n          : ((r = r.replace(/ /g, \"+\")),\n            i._decompress(r.length, 32, function (n) {\n              return o(e, r.charAt(n));\n            }));\n      },\n      compress: function (o) {\n        return i._compress(o, 16, function (o) {\n          return r(o);\n        });\n      },\n      _compress: function (o, r, n) {\n        if (null == o) return \"\";\n        var e,\n          t,\n          i,\n          s = {},\n          p = {},\n          u = \"\",\n          c = \"\",\n          a = \"\",\n          l = 2,\n          f = 3,\n          h = 2,\n          d = [],\n          m = 0,\n          v = 0;\n        for (i = 0; i < o.length; i += 1)\n          if (\n            ((u = o.charAt(i)),\n            Object.prototype.hasOwnProperty.call(s, u) || ((s[u] = f++), (p[u] = !0)),\n            (c = a + u),\n            Object.prototype.hasOwnProperty.call(s, c))\n          )\n            a = c;\n          else {\n            if (Object.prototype.hasOwnProperty.call(p, a)) {\n              if (a.charCodeAt(0) < 256) {\n                for (e = 0; h > e; e++)\n                  (m <<= 1), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++;\n                for (t = a.charCodeAt(0), e = 0; 8 > e; e++)\n                  (m = (m << 1) | (1 & t)),\n                    v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                    (t >>= 1);\n              } else {\n                for (t = 1, e = 0; h > e; e++)\n                  (m = (m << 1) | t), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t = 0);\n                for (t = a.charCodeAt(0), e = 0; 16 > e; e++)\n                  (m = (m << 1) | (1 & t)),\n                    v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                    (t >>= 1);\n              }\n              l--, 0 == l && ((l = Math.pow(2, h)), h++), delete p[a];\n            } else\n              for (t = s[a], e = 0; h > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            l--, 0 == l && ((l = Math.pow(2, h)), h++), (s[c] = f++), (a = String(u));\n          }\n        if (\"\" !== a) {\n          if (Object.prototype.hasOwnProperty.call(p, a)) {\n            if (a.charCodeAt(0) < 256) {\n              for (e = 0; h > e; e++)\n                (m <<= 1), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++;\n              for (t = a.charCodeAt(0), e = 0; 8 > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            } else {\n              for (t = 1, e = 0; h > e; e++)\n                (m = (m << 1) | t), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t = 0);\n              for (t = a.charCodeAt(0), e = 0; 16 > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            }\n            l--, 0 == l && ((l = Math.pow(2, h)), h++), delete p[a];\n          } else\n            for (t = s[a], e = 0; h > e; e++)\n              (m = (m << 1) | (1 & t)),\n                v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                (t >>= 1);\n          l--, 0 == l && ((l = Math.pow(2, h)), h++);\n        }\n        for (t = 2, e = 0; h > e; e++)\n          (m = (m << 1) | (1 & t)), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t >>= 1);\n        for (;;) {\n          if (((m <<= 1), v == r - 1)) {\n            d.push(n(m));\n            break;\n          }\n          v++;\n        }\n        return d.join(\"\");\n      },\n      decompress: function (o) {\n        return null == o\n          ? \"\"\n          : \"\" == o\n          ? null\n          : i._decompress(o.length, 32768, function (r) {\n              return o.charCodeAt(r);\n            });\n      },\n      _decompress: function (o, n, e) {\n        var t,\n          i,\n          s,\n          p,\n          u,\n          c,\n          a,\n          l,\n          f = [],\n          h = 4,\n          d = 4,\n          m = 3,\n          v = \"\",\n          w = [],\n          A = { val: e(0), position: n, index: 1 };\n        for (i = 0; 3 > i; i += 1) f[i] = i;\n        for (p = 0, c = Math.pow(2, 2), a = 1; a != c; )\n          (u = A.val & A.position),\n            (A.position >>= 1),\n            0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n            (p |= (u > 0 ? 1 : 0) * a),\n            (a <<= 1);\n        switch ((t = p)) {\n          case 0:\n            for (p = 0, c = Math.pow(2, 8), a = 1; a != c; )\n              (u = A.val & A.position),\n                (A.position >>= 1),\n                0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                (p |= (u > 0 ? 1 : 0) * a),\n                (a <<= 1);\n            l = r(p);\n            break;\n          case 1:\n            for (p = 0, c = Math.pow(2, 16), a = 1; a != c; )\n              (u = A.val & A.position),\n                (A.position >>= 1),\n                0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                (p |= (u > 0 ? 1 : 0) * a),\n                (a <<= 1);\n            l = r(p);\n            break;\n          case 2:\n            return \"\";\n        }\n        for (f[3] = l, s = l, w.push(l); ; ) {\n          if (A.index > o) return \"\";\n          for (p = 0, c = Math.pow(2, m), a = 1; a != c; )\n            (u = A.val & A.position),\n              (A.position >>= 1),\n              0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n              (p |= (u > 0 ? 1 : 0) * a),\n              (a <<= 1);\n          switch ((l = p)) {\n            case 0:\n              for (p = 0, c = Math.pow(2, 8), a = 1; a != c; )\n                (u = A.val & A.position),\n                  (A.position >>= 1),\n                  0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                  (p |= (u > 0 ? 1 : 0) * a),\n                  (a <<= 1);\n              (f[d++] = r(p)), (l = d - 1), h--;\n              break;\n            case 1:\n              for (p = 0, c = Math.pow(2, 16), a = 1; a != c; )\n                (u = A.val & A.position),\n                  (A.position >>= 1),\n                  0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                  (p |= (u > 0 ? 1 : 0) * a),\n                  (a <<= 1);\n              (f[d++] = r(p)), (l = d - 1), h--;\n              break;\n            case 2:\n              return w.join(\"\");\n          }\n          if ((0 == h && ((h = Math.pow(2, m)), m++), f[l])) v = f[l];\n          else {\n            if (l !== d) return null;\n            v = s + s.charAt(0);\n          }\n          w.push(v),\n            (f[d++] = s + v.charAt(0)),\n            h--,\n            (s = v),\n            0 == h && ((h = Math.pow(2, m)), m++);\n        }\n      },\n    };\n  return i;\n})();\n\"function\" == typeof define && define.amd\n  ? define(function () {\n      return LZString;\n    })\n  : \"undefined\" != typeof module && null != module && (module.exports = LZString);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(607);\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n            typeof define === 'function' && define.amd ? define(['exports'], factory) :\n            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.strophe = {}));\n})(this, (function (exports) { 'use strict';\n\n            var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n\n            /*\n             * This module provides uniform\n             * Shims APIs and globals that are not present in all JS environments,\n             * the most common example for Strophe being browser APIs like WebSocket\n             * and DOM that don't exist under nodejs.\n             *\n             * Usually these will be supplied in nodejs by conditionally requiring a\n             * NPM module that provides a compatible implementation.\n             */\n\n            /* global global */\n\n            /**\n             * WHATWG WebSockets API\n             * https://www.w3.org/TR/websockets/\n             *\n             * Interface to use the web socket protocol\n             *\n             * Used implementations:\n             * - supported browsers: built-in in WebSocket global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility\n             * - nodejs: use standard-compliant 'ws' module\n             *   https://www.npmjs.com/package/ws\n             */\n            function getWebSocketImplementation() {\n              let WebSocketImplementation = global$1.WebSocket;\n\n              if (typeof WebSocketImplementation === 'undefined') {\n                try {\n                  WebSocketImplementation = require('ws');\n                } catch (err) {\n                  throw new Error('You must install the \"ws\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return WebSocketImplementation;\n            }\n\n            const WebSocket = getWebSocketImplementation();\n            /**\n             * DOMParser\n             * https://w3c.github.io/DOM-Parsing/#the-domparser-interface\n             *\n             * Interface to parse XML strings into Document objects\n             *\n             * Used implementations:\n             * - supported browsers: built-in in DOMParser global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility\n             * - nodejs: use '@xmldom/xmldom' module\n             *   https://www.npmjs.com/package/@xmldom/xmldom\n             */\n\n            function getDOMParserImplementation() {\n              let DOMParserImplementation = global$1.DOMParser;\n\n              if (typeof DOMParserImplementation === 'undefined') {\n                try {\n                  DOMParserImplementation = require('@xmldom/xmldom').DOMParser;\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              }\n\n              return DOMParserImplementation;\n            }\n\n            const DOMParser = getDOMParserImplementation();\n            /**\n             *  Gets IE xml doc object. Used by getDummyXMLDocument shim.\n             *\n             *  Returns:\n             *    A Microsoft XML DOM Object\n             *  See Also:\n             *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n             */\n\n            function _getIEXmlDom() {\n              const docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n              for (let d = 0; d < docStrings.length; d++) {\n                try {\n                  // eslint-disable-next-line no-undef\n                  const doc = new ActiveXObject(docStrings[d]);\n                  return doc;\n                } catch (e) {// Try next one\n                }\n              }\n            }\n            /**\n             * Creates a dummy XML DOM document to serve as an element and text node generator.\n             *\n             * Used implementations:\n             *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific\n             *    workaround\n             *  - other supported browsers: use document's createDocument\n             *  - nodejs: use '@xmldom/xmldom'\n             */\n\n\n            function getDummyXMLDOMDocument() {\n              // nodejs\n              if (typeof document === 'undefined') {\n                try {\n                  const DOMImplementation = require('@xmldom/xmldom').DOMImplementation;\n\n                  return new DOMImplementation().createDocument('jabber:client', 'strophe', null);\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              } // IE < 10\n\n\n              if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                const doc = _getIEXmlDom();\n\n                doc.appendChild(doc.createElement('strophe'));\n                return doc;\n              } // All other supported browsers\n\n\n              return document.implementation.createDocument('jabber:client', 'strophe', null);\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            const safe_add$1 = function (x, y) {\n              const lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            const bit_rol = function (num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            const str2binl = function (str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              const bin = [];\n\n              for (let i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            const binl2str = function (bin) {\n              let str = \"\";\n\n              for (let i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            const binl2hex = function (binarray) {\n              const hex_tab = \"0123456789abcdef\";\n              let str = \"\";\n\n              for (let i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            const md5_cmn = function (q, a, b, x, s, t) {\n              return safe_add$1(bit_rol(safe_add$1(safe_add$1(a, q), safe_add$1(x, t)), s), b);\n            };\n\n            const md5_ff = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            const md5_gg = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            const md5_hh = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            const md5_ii = function (a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            const core_md5 = function (x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              let a = 1732584193;\n              let b = -271733879;\n              let c = -1732584194;\n              let d = 271733878;\n              let olda, oldb, oldc, oldd;\n\n              for (let i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            const MD5 = {\n              hexdigest: function (s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function (s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /** Class: Strophe.SASLMechanism\n             *\n             *  Encapsulates an SASL authentication mechanism.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n            class SASLMechanism {\n              /**\n               * PrivateConstructor: Strophe.SASLMechanism\n               * SASL auth mechanism abstraction.\n               *\n               *  Parameters:\n               *    (String) name - SASL Mechanism name.\n               *    (Boolean) isClientFirst - If client should send response first without challenge.\n               *    (Number) priority - Priority.\n               *\n               *  Returns:\n               *    A new Strophe.SASLMechanism object.\n               */\n              constructor(name, isClientFirst, priority) {\n                /** PrivateVariable: mechname\n                 *  Mechanism name.\n                 */\n                this.mechname = name;\n                /** PrivateVariable: isClientFirst\n                 *  If client sends response without initial server challenge.\n                 */\n\n                this.isClientFirst = isClientFirst;\n                /** Variable: priority\n                 *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n                 *  Users may override this to prioritize mechanisms differently.\n                 *\n                 *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n                 *\n                 *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;\n                 *\n                 *  See <SASL mechanisms> for a list of available mechanisms.\n                 *\n                 */\n\n                this.priority = priority;\n              }\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n\n\n              test() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n\n\n              onStart(connection) {\n                this._connection = connection;\n              }\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge.\n               *\n               *  By deafult, if the client is expected to send data first (isClientFirst === true),\n               *  this method is called with `challenge` as null on the first call,\n               *  unless `clientChallenge` is overridden in the relevant subclass.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line\n                throw new Error(\"You should implement challenge handling!\");\n              }\n              /** PrivateFunction: clientChallenge\n               *  Called by the protocol implementation if the client is expected to send\n               *  data first in the authentication exchange (i.e. isClientFirst === true).\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              clientChallenge(connection) {\n                if (!this.isClientFirst) {\n                  throw new Error(\"clientChallenge should not be called if isClientFirst is false!\");\n                }\n\n                return this.onChallenge(connection);\n              }\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n\n\n              onFailure() {\n                this._connection = null;\n              }\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n\n\n              onSuccess() {\n                this._connection = null;\n              }\n\n            }\n\n            class SASLAnonymous extends SASLMechanism {\n              /** PrivateConstructor: SASLAnonymous\n               *  SASL ANONYMOUS authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid === null;\n              }\n\n            }\n\n            class SASLExternal extends SASLMechanism {\n              /** PrivateConstructor: SASLExternal\n               *  SASL EXTERNAL authentication.\n               *\n               *  The EXTERNAL mechanism allows a client to request the server to use\n               *  credentials established by means external to the mechanism to\n               *  authenticate the client. The external means may be, for instance,\n               *  TLS services.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n                super(mechname, isClientFirst, priority);\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n\n                /** According to XEP-178, an authzid SHOULD NOT be presented when the\n                 * authcid contained or implied in the client certificate is the JID (i.e.\n                 * authzid) with which the user wants to log in as.\n                 *\n                 * To NOT send the authzid, the user should therefore set the authcid equal\n                 * to the JID when instantiating a new Strophe.Connection object.\n                 */\n                return connection.authcid === connection.authzid ? '' : connection.authzid;\n              }\n\n            }\n\n            const utils = {\n              utf16to8: function (str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function (cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (const cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    let expires = '';\n                    let domain = '';\n                    let path = '';\n                    const cookieObj = cookies[cookieName];\n                    const isObj = typeof cookieObj === \"object\";\n                    const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            class SASLOAuthBearer extends SASLMechanism {\n              /** PrivateConstructor: SASLOAuthBearer\n               *  SASL OAuth Bearer authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = 'n,';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + 'a=' + connection.authzid;\n                }\n\n                auth_str = auth_str + ',';\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + 'auth=Bearer ';\n                auth_str = auth_str + connection.pass;\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + \"\\u0001\";\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            class SASLPlain extends SASLMechanism {\n              /** PrivateConstructor: SASLPlain\n               *  SASL PLAIN authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                const {\n                  authcid,\n                  authzid,\n                  domain,\n                  pass\n                } = connection;\n\n                if (!domain) {\n                  throw new Error(\"SASLPlain onChallenge: domain is not defined!\");\n                } // Only include authzid if it differs from authcid.\n                // See: https://tools.ietf.org/html/rfc6120#section-6.3.8\n\n\n                let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + authcid;\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n                e = safe_add(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            const SHA1 = {\n              b64_hmac_sha1: function (key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function (s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function (key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function (s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            class SASLSHA1 extends SASLMechanism {\n              /** PrivateConstructor: SASLSHA1\n               *  SASL SCRAM SHA 1 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line class-methods-use-this\n                let nonce, salt, iter, Hi, U, U_old, i, k;\n                let responseText = \"c=biws,\";\n                let authMessage = `${connection._sasl_data[\"client-first-message-bare\"]},${challenge},`;\n                const cnonce = connection._sasl_data.cnonce;\n                const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  const matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.slice(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                const pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                const clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                const serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                const clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              }\n\n              clientChallenge(connection, test_cnonce) {\n                // eslint-disable-line class-methods-use-this\n                const cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n                let auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n                auth_str += \",r=\";\n                auth_str += cnonce;\n                connection._sasl_data.cnonce = cnonce;\n                connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n                auth_str = \"n,,\" + auth_str;\n                return auth_str;\n              }\n\n            }\n\n            class SASLXOAuth2 extends SASLMechanism {\n              /** PrivateConstructor: SASLXOAuth2\n               *  SASL X-OAuth2 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = '\\u0000';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + connection.authzid;\n                }\n\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + connection.pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /**\n             * Implementation of atob() according to the HTML and Infra specs, except that\n             * instead of throwing INVALID_CHARACTER_ERR we return null.\n             */\n\n            function atob$2(data) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              } // Web IDL requires DOMStrings to just be converted using ECMAScript\n              // ToString, which in our case amounts to using a template literal.\n\n\n              data = `${data}`; // \"Remove all ASCII whitespace from data.\"\n\n              data = data.replace(/[ \\t\\n\\f\\r]/g, \"\"); // \"If data's length divides by 4 leaving no remainder, then: if data ends\n              // with one or two U+003D (=) code points, then remove them from data.\"\n\n              if (data.length % 4 === 0) {\n                data = data.replace(/==?$/, \"\");\n              } // \"If data's length divides by 4 leaving a remainder of 1, then return\n              // failure.\"\n              //\n              // \"If data contains a code point that is not one of\n              //\n              // U+002B (+)\n              // U+002F (/)\n              // ASCII alphanumeric\n              //\n              // then return failure.\"\n\n\n              if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n                return null;\n              } // \"Let output be an empty byte sequence.\"\n\n\n              let output = \"\"; // \"Let buffer be an empty buffer that can have bits appended to it.\"\n              //\n              // We append bits via left-shift and or.  accumulatedBits is used to track\n              // when we've gotten to 24 bits.\n\n              let buffer = 0;\n              let accumulatedBits = 0; // \"Let position be a position variable for data, initially pointing at the\n              // start of data.\"\n              //\n              // \"While position does not point past the end of data:\"\n\n              for (let i = 0; i < data.length; i++) {\n                // \"Find the code point pointed to by position in the second column of\n                // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n                // the first cell of the same row.\n                //\n                // \"Append to buffer the six bits corresponding to n, most significant bit\n                // first.\"\n                //\n                // atobLookup() implements the table from RFC 4648.\n                buffer <<= 6;\n                buffer |= atobLookup(data[i]);\n                accumulatedBits += 6; // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n                // big-endian numbers. Append three bytes with values equal to those\n                // numbers to output, in the same order, and then empty buffer.\"\n\n                if (accumulatedBits === 24) {\n                  output += String.fromCharCode((buffer & 0xff0000) >> 16);\n                  output += String.fromCharCode((buffer & 0xff00) >> 8);\n                  output += String.fromCharCode(buffer & 0xff);\n                  buffer = accumulatedBits = 0;\n                } // \"Advance position by 1.\"\n\n              } // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n              // 12 bits, then discard the last four and interpret the remaining eight as\n              // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n              // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n              // the one or two bytes with values equal to those one or two numbers to\n              // output, in the same order.\"\n\n\n              if (accumulatedBits === 12) {\n                buffer >>= 4;\n                output += String.fromCharCode(buffer);\n              } else if (accumulatedBits === 18) {\n                buffer >>= 2;\n                output += String.fromCharCode((buffer & 0xff00) >> 8);\n                output += String.fromCharCode(buffer & 0xff);\n              } // \"Return output.\"\n\n\n              return output;\n            }\n            /**\n             * A lookup table for atob(), which converts an ASCII character to the\n             * corresponding six-bit number.\n             */\n\n\n            const keystr$1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function atobLookup(chr) {\n              const index = keystr$1.indexOf(chr); // Throw exception if character is not in the lookup string; should not be hit in tests\n\n              return index < 0 ? undefined : index;\n            }\n\n            var atob_1 = atob$2;\n\n            /**\n             * btoa() as defined by the HTML and Infra specs, which mostly just references\n             * RFC 4648.\n             */\n\n            function btoa$2(s) {\n              if (arguments.length === 0) {\n                throw new TypeError(\"1 argument required, but only 0 present.\");\n              }\n\n              let i; // String conversion as required by Web IDL.\n\n              s = `${s}`; // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n              // data contains any character whose code point is greater than U+00FF.\"\n\n              for (i = 0; i < s.length; i++) {\n                if (s.charCodeAt(i) > 255) {\n                  return null;\n                }\n              }\n\n              let out = \"\";\n\n              for (i = 0; i < s.length; i += 3) {\n                const groupsOfSix = [undefined, undefined, undefined, undefined];\n                groupsOfSix[0] = s.charCodeAt(i) >> 2;\n                groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n\n                if (s.length > i + 1) {\n                  groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n                  groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n                }\n\n                if (s.length > i + 2) {\n                  groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n                  groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n                }\n\n                for (let j = 0; j < groupsOfSix.length; j++) {\n                  if (typeof groupsOfSix[j] === \"undefined\") {\n                    out += \"=\";\n                  } else {\n                    out += btoaLookup(groupsOfSix[j]);\n                  }\n                }\n              }\n\n              return out;\n            }\n            /**\n             * Lookup table for btoa(), which converts a six-bit number into the\n             * corresponding ASCII character.\n             */\n\n\n            const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n            function btoaLookup(index) {\n              if (index >= 0 && index < 64) {\n                return keystr[index];\n              } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n\n\n              return undefined;\n            }\n\n            var btoa_1 = btoa$2;\n\n            const atob$1 = atob_1;\n\n            const btoa$1 = btoa_1;\n\n            var abab = {\n              atob: atob$1,\n              btoa: btoa$1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2018, OGG, LLC\n            */\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n            const Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"1.5.0\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag(tag) {\n                  for (let i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n\n                validCSS(style) {\n                  for (let i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11,\n                ATTACHFAIL: 12\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild(elem, elemName, func) {\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = getDummyXMLDOMDocument();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (let a = 1; a < arguments.length; a++) {\n                  const arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (typeof arg === \"object\" && typeof arg.sort === \"function\") {\n                    for (let i = 0; i < arg.length; i++) {\n                      const attr = arg[i];\n\n                      if (typeof attr === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (typeof arg === \"object\") {\n                    for (const k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode(html) {\n                let node; //ensure text is escaped\n\n                if (DOMParser) {\n                  const parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                let str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (let i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        const attribute = Strophe.XHTML.attributes[tag][i];\n                        let value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          const css = [];\n                          const cssAttrs = value.split(';');\n\n                          for (let j = 0; j < cssAttrs.length; j++) {\n                            const attr = cssAttrs[j].split(':');\n                            const cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              const cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (let i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (let i = 0; i < elem.childNodes.length; i++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid(jid) {\n                const bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  const parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                const s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log(level, msg) {\n                if (level === this.LogLevel.FATAL) {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);\n                names.sort();\n                let result = names.reduce((a, n) => `${a} ${n}=\"${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}\"`, `<${elem.nodeName}`);\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    const child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = class Builder {\n              constructor(name, attrs) {\n                // Set correct namespace for jabber:client elements\n                if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                  if (attrs && !attrs.xmlns) {\n                    attrs.xmlns = Strophe.NS.CLIENT;\n                  } else if (!attrs) {\n                    attrs = {\n                      xmlns: Strophe.NS.CLIENT\n                    };\n                  }\n                } // Holds the tree being built.\n\n\n                this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n                this.node = this.nodeTree;\n              }\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n\n\n              tree() {\n                return this.nodeTree;\n              }\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n\n\n              toString() {\n                return Strophe.serialize(this.nodeTree);\n              }\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              up() {\n                this.node = this.node.parentNode;\n                return this;\n              }\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              root() {\n                this.node = this.nodeTree;\n                return this;\n              }\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              attrs(moreattrs) {\n                for (const k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              }\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              c(name, attrs, text) {\n                const child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              }\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              cnode(elem) {\n                let impNode;\n                const xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              }\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              t(text) {\n                const child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              }\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              h(html) {\n                const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                const xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace(elem) {\n                let elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch(elem) {\n                let nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, elem => {\n                    if (this.getNamespace(elem) === this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch(elem) {\n                let from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                const elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run(elem) {\n                let result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            Strophe.TimedHandler = class TimedHandler {\n              /** PrivateConstructor: Strophe.TimedHandler\n               *  Create and initialize a new Strophe.TimedHandler object.\n               *\n               *  Parameters:\n               *    (Integer) period - The number of milliseconds to wait before the\n               *      handler is called.\n               *    (Function) handler - The callback to run when the handler fires.  This\n               *      function should take no arguments.\n               *\n               *  Returns:\n               *    A new Strophe.TimedHandler object.\n               */\n              constructor(period, handler) {\n                this.period = period;\n                this.handler = handler;\n                this.lastCalled = new Date().getTime();\n                this.user = true;\n              }\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n\n\n              run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              }\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n\n\n              reset() {\n                this.lastCalled = new Date().getTime();\n              }\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n\n\n              toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  protocol:\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  worker:\n             *\n             *  Set this option to URL from where the shared worker script should be loaded.\n             *\n             *  To run the websocket connection inside a shared worker.\n             *  This allows you to share a single websocket-based connection between\n             *  multiple Strophe.Connection instances, for example one per browser tab.\n             *\n             *  The script to use is the one in `src/shared-connection-worker.js`.\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = class Connection {\n              constructor(service, options) {\n                // The service URL\n                this.service = service; // Configuration options\n\n                this.options = options || {};\n                this.setProtocol();\n                /* The connected JID. */\n\n                this.jid = \"\";\n                /* the JIDs domain */\n\n                this.domain = null;\n                /* stream:features */\n\n                this.features = null; // SASL\n\n                this._sasl_data = {};\n                this.do_bind = false;\n                this.do_session = false;\n                this.mechanisms = {}; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.protocolErrorHandlers = {\n                  'HTTP': {},\n                  'websocket': {}\n                };\n                this._idleTimeout = null;\n                this._disconnectTimeout = null;\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.do_authentication = true;\n                this.paused = false;\n                this.restored = false;\n                this._data = [];\n                this._uniqueId = 0;\n                this._sasl_success_handler = null;\n                this._sasl_failure_handler = null;\n                this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n                this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                utils.addCookies(this.options.cookies);\n                this.registerSASLMechanisms(this.options.mechanisms); // A client must always respond to incoming IQ \"set\" and \"get\" stanzas.\n                // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3\n                //\n                // This is a fallback handler which gets called when no other handler\n                // was called for a received IQ \"set\" or \"get\".\n\n                this.iqFallbackHandler = new Strophe.Handler(iq => this.send($iq({\n                  type: 'error',\n                  id: iq.getAttribute('id')\n                }).c('error', {\n                  'type': 'cancel'\n                }).c('service-unavailable', {\n                  'xmlns': Strophe.NS.STANZAS\n                })), null, 'iq', ['get', 'set']); // initialize plugins\n\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const F = function () {};\n\n                    F.prototype = Strophe._connectionPlugins[k];\n                    this[k] = new F();\n                    this[k].init(this);\n                  }\n                }\n              }\n              /** Function: setProtocol\n               *  Select protocal based on this.options or this.service\n               */\n\n\n              setProtocol() {\n                const proto = this.options.protocol || \"\";\n\n                if (this.options.worker) {\n                  this._proto = new Strophe.WorkerWebsocket(this);\n                } else if (this.service.indexOf(\"ws:\") === 0 || this.service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                  this._proto = new Strophe.Websocket(this);\n                } else {\n                  this._proto = new Strophe.Bosh(this);\n                }\n              }\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n\n\n              reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              }\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n\n\n              pause() {\n                this.paused = true;\n              }\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n\n\n              resume() {\n                this.paused = false;\n              }\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n\n\n              getUniqueId(suffix) {\n                // eslint-disable-line class-methods-use-this\n                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  const r = Math.random() * 16 | 0,\n                        v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              }\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n\n\n              addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              }\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should NOT be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               *     (Integer) disconnection_timeout - The optional disconnection timeout\n               *      in milliseconds before _doDisconnect will be called.\n               */\n\n\n              connect(jid, pass, callback, wait, hold, route, authcid) {\n                let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false;\n                this.disconnection_timeout = disconnection_timeout; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              }\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto._attach) {\n                  return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"attach\" method is not available for your connection protocol');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n\n\n              _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              }\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n\n\n              xmlInput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n\n\n              xmlOutput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n\n\n              rawInput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n\n\n              rawOutput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n\n\n              nextValidRid(rid) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n\n\n              send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (let i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              }\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n\n\n              flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              }\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n\n\n              sendPresence(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n\n\n              sendIQ(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    const iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      const error = new Error(`Got bad IQ type of ${iqtype}`);\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n\n\n              _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  const error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              }\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n              }\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n\n\n              deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              }\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addHandler(handler, ns, name, type, id, from, options) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n\n\n              deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                const i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              }\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n\n\n              registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(m => this.registerSASLMechanism(m));\n              }\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n\n\n              registerSASLMechanism(Mechanism) {\n                const mechanism = new Mechanism();\n                this.mechanisms[mechanism.mechname] = mechanism;\n              }\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n\n\n              disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                if (reason) {\n                  Strophe.warn(\"Disconnect was called because: \" + reason);\n                } else {\n                  Strophe.info(\"Disconnect was called\");\n                }\n\n                if (this.connected) {\n                  let pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              }\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n\n\n              _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(`${k} plugin caused an exception changing status: ${err}`);\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(`User connection callback caused an exception: ${e}`);\n                  }\n                }\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n\n\n              _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              }\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n\n\n              _dataRecv(req, raw) {\n                const elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  const hand = this.removeHandlers.pop();\n                  const i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                const type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  let cond = elem.getAttribute(\"condition\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, child => {\n                  const matches = [];\n                  this.handlers = this.handlers.reduce((handlers, handler) => {\n                    try {\n                      if (handler.isMatch(child) && (this.authenticated || !handler.user)) {\n                        if (handler.run(child)) {\n                          handlers.push(handler);\n                        }\n\n                        matches.push(handler);\n                      } else {\n                        handlers.push(handler);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n\n                    return handlers;\n                  }, []); // If no handler was fired for an incoming IQ with type=\"set\",\n                  // then we return an IQ error stanza with service-unavailable.\n\n                  if (!matches.length && this.iqFallbackHandler.isMatch(child)) {\n                    this.iqFallbackHandler.run(child);\n                  }\n                });\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n\n\n              _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                let bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                const conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                let hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                const matched = Array.from(bodyWrap.getElementsByTagName(\"mechanism\")).map(m => this.mechanisms[m.textContent]).filter(m => m);\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              }\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n\n\n              sortMechanismsByPriority(mechanisms) {\n                // eslint-disable-line class-methods-use-this\n                // Sorting mechanisms according to priority.\n                for (let i = 0; i < mechanisms.length - 1; ++i) {\n                  let higher = i;\n\n                  for (let j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].priority > mechanisms[higher].priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    const swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              }\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n\n\n              authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              }\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n\n\n              _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                let mechanism_found = false;\n\n                for (let i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = mechanisms[i];\n\n                  this._sasl_mechanism.onStart(this);\n\n                  const request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.mechname\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    const response = this._sasl_mechanism.clientChallenge(this);\n\n                    request_auth_exchange.t(abab.btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              }\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n\n\n              _sasl_challenge_cb(elem) {\n                const challenge = abab.atob(Strophe.getText(elem));\n\n                const response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                const stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(abab.btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              }\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n\n\n              _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              }\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onLegacyAuthIQResult(elem) {\n                // eslint-disable-line no-unused-vars\n                // build plaintext auth iq\n                const iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              }\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_success_cb(elem) {\n                if (this._sasl_data[\"server-signature\"]) {\n                  let serverSignature;\n                  const success = abab.atob(Strophe.getText(elem));\n                  const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  const matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                const streamfeature_handlers = [];\n\n                const wrapper = (handlers, elem) => {\n                  while (handlers.length) {\n                    this.deleteHandler(handlers.pop());\n                  }\n\n                  this._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              }\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              }\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n\n\n              bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but \"do_bind\" is false`);\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                const resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              }\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n                  let condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                const bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  const jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.authenticated = true;\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              }\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n\n\n              _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              }\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this.authenticated = false;\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              }\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n\n\n              _addSysTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n\n\n              _addSysHandler(handler, ns, name, type, id) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n\n\n              _onIdle() {\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  const thand = this.removeTimeds.pop();\n                  const i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                const now = new Date().getTime();\n                const newList = [];\n\n                for (let i = 0; i < this.timedHandlers.length; i++) {\n                  const thand = this.timedHandlers[i];\n\n                  if (this.authenticated || !thand.user) {\n                    const since = thand.lastCalled + thand.period;\n\n                    if (since - now <= 0) {\n                      if (thand.run()) {\n                        newList.push(thand);\n                      }\n                    } else {\n                      newList.push(thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                }\n              }\n\n            };\n            Strophe.SASLMechanism = SASLMechanism;\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain       - SASL PLAIN authentication.\n             *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal    - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication\n             */\n\n            Strophe.SASLAnonymous = SASLAnonymous;\n            Strophe.SASLPlain = SASLPlain;\n            Strophe.SASLSHA1 = SASLSHA1;\n            Strophe.SASLOAuthBearer = SASLOAuthBearer;\n            Strophe.SASLExternal = SASLExternal;\n            Strophe.SASLXOAuth2 = SASLXOAuth2;\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            Strophe.Request = class Request {\n              /** PrivateConstructor: Strophe.Request\n               *  Create and initialize a new Strophe.Request object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data to be sent in the request.\n               *    (Function) func - The function that will be called when the\n               *      XMLHttpRequest readyState changes.\n               *    (Integer) rid - The BOSH rid attribute associated with this request.\n               *    (Integer) sends - The number of times this same request has been sent.\n               */\n              constructor(elem, func, rid, sends) {\n                this.id = ++Strophe._requestId;\n                this.xmlData = elem;\n                this.data = Strophe.serialize(elem); // save original function in case we need to make a new request\n                // from this one.\n\n                this.origFunc = func;\n                this.func = func;\n                this.rid = rid;\n                this.date = NaN;\n                this.sends = sends || 0;\n                this.abort = false;\n                this.dead = null;\n\n                this.age = function () {\n                  if (!this.date) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.date) / 1000;\n                };\n\n                this.timeDead = function () {\n                  if (!this.dead) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.dead) / 1000;\n                };\n\n                this.xhr = this._newXHR();\n              }\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n\n\n              getResponse() {\n                let node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe.error(\"invalid response received\");\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe.error(\"responseXML: \" + Strophe.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    const error = new Error();\n                    error.name = Strophe.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              }\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n\n\n              _newXHR() {\n                let xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe.Bosh = class Bosh {\n              constructor(connection) {\n                this._conn = connection;\n                /* request id for body tags */\n\n                this.rid = Math.floor(Math.random() * 4294967295);\n                /* The current session ID. */\n\n                this.sid = null; // default BOSH values\n\n                this.hold = 1;\n                this.wait = 60;\n                this.window = 5;\n                this.errors = 0;\n                this.inactivity = null;\n                this.lastResponseHeaders = null;\n                this._requests = [];\n              }\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n\n\n              _buildBody() {\n                const bodyWrap = $build('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n\n\n              _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n\n\n              _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                const body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                const _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n              }\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _restore(jid, callback, wait, hold, wind) {\n                const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe.getNodeFromJid(jid) === null && Strophe.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  let cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe.error(\"BOSH-Connection failed: \" + cond);\n                  const conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                const wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                const hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                const wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                const inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                this._sendTerminate(pres);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n\n\n              _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n\n\n              _emptyQueue() {\n                return this._requests.length === 0;\n              }\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _callProtocolErrorHandlers(req) {\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              }\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n\n\n              _hitError(reqStatus) {\n                this.errors++;\n                Strophe.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                const body = this._buildBody();\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n\n\n              _onDisconnectTimeout() {\n                this._abortAllRequests();\n              }\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  const req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  const body = this._buildBody();\n\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  const time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                    Strophe.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              }\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n\n\n              static _getRequestStatus(req, def) {\n                let reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              }\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _onRequestStateChange(func, req) {\n                Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this._conn.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                const reqIs0 = this._requests[0] === req;\n                const reqIs1 = this._requests[1] === req;\n                const valid_request = reqStatus > 0 && reqStatus < 500;\n                const too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n                }\n              }\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _processRequest(i) {\n                let req = this._requests[i];\n\n                const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                const time_elapsed = req.age();\n                const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n                const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n                const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    const content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  const sendFunc = () => {\n                    req.date = new Date();\n\n                    if (this._conn.options.customHeaders) {\n                      const headers = this._conn.options.customHeaders;\n\n                      for (const header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    const backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              }\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n\n\n              _removeRequest(req) {\n                Strophe.debug(\"removing request\");\n\n                for (let i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _restartRequest(i) {\n                const req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              }\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n\n\n              _sendTerminate(pres) {\n                Strophe.debug(\"_sendTerminate was called\");\n\n                const body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                const req = new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n\n\n              _send() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              }\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n\n\n              _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n\n            };\n            /** Variable: strip\n             *\n             *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n             *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n             *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n             *\n             *  > Strophe.Bosh.prototype.strip = \"body\";\n             *\n             *  This will enable stripping of the body tag in both\n             *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n             */\n\n            Strophe.Bosh.prototype.strip = null;\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            Strophe.Websocket = class Websocket {\n              /** PrivateConstructor: Strophe.Websocket\n               *  Create and initialize a Strophe.WebSocket object.\n               *  Currently only sets the connection Object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n               *\n               *  Returns:\n               *    A new Strophe.WebSocket object.\n               */\n              constructor(connection) {\n                this._conn = connection;\n                this.strip = \"wrapper\";\n                const service = connection.service;\n\n                if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                  // If the service is not an absolute URL, assume it is a path and put the absolute\n                  // URL together from options, current URL and the path.\n                  let new_service = \"\";\n\n                  if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                    new_service += \"ws\";\n                  } else {\n                    new_service += \"wss\";\n                  }\n\n                  new_service += \"://\" + window.location.host;\n\n                  if (service.indexOf(\"/\") !== 0) {\n                    new_service += window.location.pathname + service;\n                  } else {\n                    new_service += service;\n                  }\n\n                  connection.service = new_service;\n                }\n              }\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n\n\n              _buildStream() {\n                return $build(\"open\", {\n                  \"xmlns\": Strophe.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              }\n              /** PrivateFunction: _checkStreamError\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n\n\n              _checkStreamError(bodyWrap, connectstatus) {\n                let errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                const error = errors[0];\n                let condition = \"\";\n                let text = \"\";\n                const ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (let i = 0; i < error.childNodes.length; i++) {\n                  const e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                let errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n\n\n              _reset() {\n                // eslint-disable-line class-methods-use-this\n                return;\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n\n\n              _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket();\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n\n                this.socket.onopen = () => this._onOpen();\n\n                this.socket.onerror = e => this._onError(e);\n\n                this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called\n\n\n                this.socket.onmessage = message => this._onInitialMessage(message);\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const error = this._checkStreamError(bodyWrap, Strophe.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe.Status.CONNFAIL;\n                }\n              }\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n\n\n              _handleStreamStart(message) {\n                let error = false; // Check for errors in the <open /> tag\n\n                const ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                const ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              }\n              /** PrivateFunction: _onInitialMessage\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n\n\n              _onInitialMessage(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  const data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  const streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  const parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  const see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    const isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  this._replaceMessageHandler();\n\n                  const string = this._streamWrap(message.data);\n\n                  const elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this.socket.onmessage = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  const close = $build(\"close\", {\n                    \"xmlns\": Strophe.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  const closeString = Strophe.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                setTimeout(() => this._conn._doDisconnect(), 0);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n\n\n              _doDisconnect() {\n                Strophe.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              }\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n\n\n              _streamWrap(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              }\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n\n\n              _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n\n\n              _emptyQueue() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               */\n\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n\n\n              _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n\n\n              _onError(error) {\n                Strophe.error(\"Websocket error \" + JSON.stringify(error));\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      let stanza;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      const rawStanza = Strophe.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              }\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n\n\n              _onMessage(message) {\n                let elem; // check for closing stream\n\n                const close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  const data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._checkStreamError(elem, Strophe.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              }\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n\n\n              _onOpen() {\n                Strophe.debug(\"Websocket open\");\n\n                const start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                const startString = Strophe.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return stanza;\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n\n\n              _send() {\n                this._conn.flush();\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2020, JC Brand\n            */\n            const lmap = {};\n            lmap['debug'] = Strophe.LogLevel.DEBUG;\n            lmap['info'] = Strophe.LogLevel.INFO;\n            lmap['warn'] = Strophe.LogLevel.WARN;\n            lmap['error'] = Strophe.LogLevel.ERROR;\n            lmap['fatal'] = Strophe.LogLevel.FATAL;\n            /** Class: Strophe.WorkerWebsocket\n             *  _Private_ helper class that handles a websocket connection inside a shared worker.\n             */\n\n            Strophe.WorkerWebsocket = class WorkerWebsocket extends Strophe.Websocket {\n              /** PrivateConstructor: Strophe.WorkerWebsocket\n               *  Create and initialize a Strophe.WorkerWebsocket object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection\n               *\n               *  Returns:\n               *    A new Strophe.WorkerWebsocket object.\n               */\n              constructor(connection) {\n                super(connection);\n                this._conn = connection;\n                this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');\n\n                this.worker.onerror = e => {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);\n                  Strophe.log(Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);\n                };\n              }\n\n              get socket() {\n                return {\n                  'send': str => this.worker.port.postMessage(['send', str])\n                };\n              }\n\n              _connect() {\n                this._messageHandler = m => this._onInitialMessage(m);\n\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);\n              }\n\n              _attach(callback) {\n                this._messageHandler = m => this._onMessage(m);\n\n                this._conn.connect_callback = callback;\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_attach', this._conn.service]);\n              }\n\n              _attachCallback(status, jid) {\n                if (status === Strophe.Status.ATTACHED) {\n                  this._conn.jid = jid;\n                  this._conn.authenticated = true;\n                  this._conn.connected = true;\n                  this._conn.restored = true;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHED);\n                } else if (status === Strophe.Status.ATTACHFAIL) {\n                  this._conn.authenticated = false;\n                  this._conn.connected = false;\n                  this._conn.restored = false;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHFAIL);\n                }\n              }\n\n              _disconnect(readyState, pres) {\n                pres && this._conn.send(pres);\n                const close = $build(\"close\", {\n                  \"xmlns\": Strophe.NS.FRAMING\n                });\n\n                this._conn.xmlOutput(close.tree());\n\n                const closeString = Strophe.serialize(close);\n\n                this._conn.rawOutput(closeString);\n\n                this.worker.port.postMessage(['send', closeString]);\n\n                this._conn._doDisconnect();\n              }\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n\n              _closeSocket() {\n                this.worker.port.postMessage(['_closeSocket']);\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this._messageHandler = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _onWorkerMessage\n               * _Private_ function that handles messages received from the service worker\n               */\n\n\n              _onWorkerMessage(ev) {\n                const {\n                  data\n                } = ev;\n                const method_name = data[0];\n\n                if (method_name === '_onMessage') {\n                  this._messageHandler(data[1]);\n                } else if (method_name in this) {\n                  try {\n                    this[method_name].apply(this, ev.data.slice(1));\n                  } catch (e) {\n                    Strophe.log(Strophe.LogLevel.ERROR, e);\n                  }\n                } else if (method_name === 'log') {\n                  const level = data[1];\n                  const msg = data[2];\n                  Strophe.log(lmap[level], msg);\n                } else {\n                  Strophe.log(Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);\n                }\n              }\n\n            };\n\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n            global$1.Strophe = core.Strophe;\n            const {\n              b64_sha1\n            } = SHA1;\n\n            exports.$build = $build;\n            exports.$iq = $iq;\n            exports.$msg = $msg;\n            exports.$pres = $pres;\n            exports.Strophe = Strophe;\n            exports.b64_sha1 = b64_sha1;\n\n            Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const h of (this._resumeState.handlers || [])\n\t\t\t\t\t.concat(this._resumeState.addHandlers || [])) {\n\t\t\t\tthis._c._addSysHandler(h.handler, h.ns, h.name, h.type, h.id);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.timedHandlers || [])\n\t\t\t\t\t.concat(this._resumeState.addTimeds)) {\n\t\t\t\tthis._c.addTimedHandler(h.period, h.handler);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.removeTimeds || [])\n\t\t\t\t\t.concat(this._resumeState.removeHandlers || [])) {\n\t\t\t\tthis._c.deleteTimedHandler(h);\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && (\n\t\t\t(elem.firstElementChild && elem.firstElementChild.tagName)\n\t\t\t|| (elem.firstChild && elem.firstChild.tagName));\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    DATA_CHANNEL_CLOSED = 'rtc.data_channel_closed',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Designates an event indicating that some received video SSRCs will now map to\n     * new remote sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that some received audio SSRCs will now map to\n     * new remote sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const DATA_CHANNEL_CLOSED = RTCEvents.DATA_CHANNEL_CLOSED;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Event for incoming presence error which is for required display name.\n     */\n    DISPLAY_NAME_REQUIRED = 'xmpp.display_name_required',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    /**\n     * The conference was redirected to a visitor node.\n     */\n    REDIRECTED = 'xmpp.redirected',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that the display name is required when joining the room.\n     * There are cases like lobby room where display name is required.\n     * @param {boolean|null} lobby whether the error is because lobby is enabled.\n     */\n    DISPLAY_NAME_REQUIRED = 'conference.display_name_required',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * The conference is redirected to a visitor node.\n     */\n    REDIRECTED = 'conference.redirected',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const DISPLAY_NAME_REQUIRED = JitsiConferenceErrors.DISPLAY_NAME_REQUIRED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const REDIRECTED = JitsiConferenceErrors.REDIRECTED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A connection to the video bridge's data channel has been closed.\n     * This event is only emitted in \n     */\n    DATA_CHANNEL_CLOSED = 'conference.dataChannelClosed',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates the state of sources attached to a given remote participant has changed.\n     */\n    PARTICIPANT_SOURCE_UPDATED = 'conference.participant_source_updated',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated',\n\n    E2EE_VERIFICATION_AVAILABLE = 'conference.e2ee.verification.available',\n\n    E2EE_VERIFICATION_READY = 'conference.e2ee.verification.ready',\n\n    E2EE_VERIFICATION_COMPLETED = 'conference.e2ee.verification.completed'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DATA_CHANNEL_CLOSED = JitsiConferenceEvents.DATA_CHANNEL_CLOSED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const E2EE_VERIFICATION_AVAILABLE = JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE;\nexport const E2EE_VERIFICATION_READY = JitsiConferenceEvents.E2EE_VERIFICATION_READY;\nexport const E2EE_VERIFICATION_COMPLETED = JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const PARTICIPANT_SOURCE_UPDATED = JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * An SSRC has been remapped. The track is now associated with a new participant.\n     */\n    TRACK_OWNER_CHANGED = 'track.owner_changed',\n\n    /**\n     * A track is being removed. Fired when a session terminates for tracks\n     * that persist in ssrc-rewriting mode.\n     */\n    TRACK_REMOVED = 'track.removed',\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\nexport const TRACK_OWNER_CHANGED = JitsiTrackEvents.TRACK_OWNER_CHANGED;\nexport const TRACK_REMOVED = JitsiTrackEvents.TRACK_REMOVED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (ignore.length === 0) {\n            return JSON.stringify(this._storage);\n        }\n\n        const storageCopy = { ...this._storage };\n\n        ignore.forEach(key => {\n            delete storageCopy[key];\n        });\n\n        return JSON.stringify(storageCopy);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Switch between window.localStorage and DummyLocalStorage.\n     */\n    setLocalStorageDisabled(value) {\n        this._localStorageDisabled = value;\n\n        try {\n            this._storage = value ? new DummyLocalStorage() : window.localStorage;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) {\n            this._storage = new DummyLocalStorage();\n        }\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize(ignore);\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            if (!ignore.includes(key)) {\n                localStorageContent[key] = this._storage.getItem(key);\n            }\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { BrowserDetection } from '@jitsi/js-utils';\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the client is running on an Android browser.\n     *\n     * @returns {boolean}\n     */\n    isAndroidBrowser() {\n        const { userAgent } = navigator;\n\n        return !this.isReactNative() && userAgent.match(/Android/i);\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the client is running on a mobile device.\n     */\n    isMobileDevice() {\n        return this.isAndroidBrowser() || this.isIosBrowser() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if the browser supports track based statistics for the local video track. Otherwise,\n     * track resolution and framerate will be calculated based on the 'outbound-rtp' statistics.\n     * @returns {boolean}\n     */\n    supportsTrackBasedStats() {\n        return this.isChromiumBased() && this.isVersionLessThan(112);\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isElectron() && (this._getChromiumBasedVersion() < 96));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","\nimport Logger from '@jitsi/logger';\nimport watchRTC from '@testrtc/watchrtc-sdk';\n\nimport { isAnalyticsEnabled, isRtcstatsEnabled, isWatchRTCEnabled } from './functions';\nimport { IWatchRTCConfiguration } from './interfaces';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * Class that controls the watchRTC flow, because it overwrites and proxies global function it should only be\n * initialized once.\n */\nclass WatchRTCHandler {\n    options?: IWatchRTCConfiguration;\n    /**\n     * Initialize watchRTC, it overwrites GUM and PeerConnection global functions and adds a proxy over them\n     * used to capture stats.\n     *\n     * @param {Object} options - Init options.\n     * @returns {void}\n     */\n    init(options: any): void {\n\n        if (isWatchRTCEnabled(options)) {\n\n            if (!isAnalyticsEnabled(options)) {\n                logger.error('Cannot initialize WatchRTC when analytics or third party requests are disabled.');\n                return;\n            }\n\n            if (isRtcstatsEnabled(options)) {\n                logger.error('Cannot initialize WatchRTC when RTCStats is enabled.');\n                return;\n            }\n\n            try {\n                if (options?.watchRTCConfigParams?.rtcApiKey) {\n                    watchRTC.init({\n                        rtcApiKey: options.watchRTCConfigParams.rtcApiKey,\n                    });\n                    this.options = options.watchRTCConfigParams;\n                    logger.info('WatchRTC initialized.');\n                } else {\n                    logger.error('WatchRTC is enabled but missing API key.');\n                }\n            } catch (error) {\n                logger.error('Failed to initialize WatchRTC: ', error);\n            }\n        }\n    }\n\n    /**\n     * Begin watchRTC session considering roomName and userName if already not available\n     *\n     * @param {string} roomName - The room name we are currently in.\n     * @param {string} userName - The user name. This value is obtained from\n     * JitsiConference.prototype.myUserId\n     * @returns {void}\n     */\n    start(roomName: string, userName: string): void {\n        try {\n            if (this.options) {\n                this.options.rtcRoomId = this.options.rtcRoomId ? this.options.rtcRoomId : roomName;\n                this.options.rtcPeerId = this.options.rtcPeerId ? this.options.rtcPeerId : userName;\n                watchRTC.persistentEnd();\n                watchRTC.setConfig(this.options);\n                logger.info('WatchRTC setConfig.');\n            }\n        } catch (error) {\n            logger.error('Failed to start WatchRTC session: ', error);\n        }\n    }\n}\n\nexport default new WatchRTCHandler();","/**\n * Checks whether analytics is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isAnalyticsEnabled(options): boolean {\n    const { analytics, disableThirdPartyRequests } = options;\n    return !(analytics?.disabled || disableThirdPartyRequests);\n}\n\n/**\n * Checks whether rtcstats is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isRtcstatsEnabled(options): boolean {\n    const { analytics } = options;\n    return analytics?.rtcstatsEnabled ?? false;\n}\n\n/**\n * Checks whether watchrtc is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isWatchRTCEnabled(options): boolean {\n    const { analytics } = options;\n    return analytics?.watchRTCEnabled ?? false;\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.debug('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window?.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","\nimport browser from '../browser';\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.ssrcRewritingEnabled - Use SSRC rewriting. Requires sourceNameSignaling to be enabled.\n     * @param {boolean=} flags.enableJoinAsVisitor - Enable joining as a visitor.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n        this._joinAsVisitor = Boolean(flags.enableJoinAsVisitor ?? true);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSendSupportEnabled() {\n        return browser.supportsUnifiedPlan();\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Insertable streams are used to discard\n     * all media before it is decoded). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode && browser.supportsInsertableStreams();\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n\n    /**\n     * Checks if the clients supports joining as a visitor.\n     * @returns {boolean}\n     */\n    isJoinAsVisitorSupported() {\n        return this._joinAsVisitor;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats && browser.supportsReceiverStats()) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                for (const ssrc in audioLevels) {\n                    if (audioLevels.hasOwnProperty(ssrc)) {\n                        // Use a scaling factor of 2.5 to report the same audio levels that getStats reports.\n                        const audioLevel = audioLevels[ssrc] * 2.5;\n\n                        this.eventEmitter.emit(\n                            StatisticsEvents.AUDIO_LEVEL,\n                            this.peerconnection,\n                            Number.parseInt(ssrc, 10),\n                            audioLevel,\n                            false /* isLocal */);\n                    }\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        ssrcStats.resetBitrate();\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let audioCodec;\n        let videoCodec;\n\n        if (track.isAudioTrack()) {\n            audioBitrateDownload += ssrcStats.bitrate.download;\n            audioBitrateUpload += ssrcStats.bitrate.upload;\n            audioCodec = ssrcStats.codec;\n        } else {\n            videoBitrateDownload += ssrcStats.bitrate.download;\n            videoBitrateUpload += ssrcStats.bitrate.upload;\n            videoCodec = ssrcStats.codec;\n        }\n\n        const participantId = track.getParticipantId();\n\n        if (!participantId) {\n            // All tracks in ssrc-rewriting mode need not have a participant associated with it.\n            if (!FeatureFlags.isSsrcRewritingSupported()) {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n            continue; // eslint-disable-line no-continue\n        }\n\n        const userCodecs = codecs[participantId] ?? { };\n\n        userCodecs[ssrc] = {\n            audio: audioCodec,\n            video: videoCodec\n        };\n\n        codecs[participantId] = userCodecs;\n        const { resolution } = ssrcStats;\n\n        if (!track.isVideoTrack()\n            || isNaN(resolution?.height)\n            || isNaN(resolution?.width)\n            || resolution.height === -1\n            || resolution.width === -1) {\n            continue; // eslint-disable-line no-continue\n        }\n        const userResolutions = resolutions[participantId] || {};\n\n        // If simulcast (VP8) is used, there will be 3 \"outbound-rtp\" streams with different resolutions and 3\n        // different SSRCs. Based on the requested resolution and the current cpu and available bandwidth\n        // values, some of the streams might get suspended. Therefore the actual send resolution needs to be\n        // calculated based on the outbound-rtp streams that are currently active for the simulcast case.\n        // However for the SVC case, there will be only 1 \"outbound-rtp\" stream which will have the correct\n        // send resolution width and height.\n        if (track.isLocal() && !browser.supportsTrackBasedStats() && this.peerconnection.doesTrueSimulcast()) {\n            const localSsrcs = this.peerconnection.getLocalVideoSSRCs(track);\n\n            for (const localSsrc of localSsrcs) {\n                const ssrcResolution = this.ssrc2stats.get(localSsrc)?.resolution;\n\n                // The code processes resolution stats only for 'outbound-rtp' streams that are currently active.\n                if (ssrcResolution?.height && ssrcResolution?.width) {\n                    resolution.height = Math.max(resolution.height, ssrcResolution.height);\n                    resolution.width = Math.max(resolution.width, ssrcResolution.width);\n                }\n            }\n        }\n\n        userResolutions[ssrc] = resolution;\n        resolutions[participantId] = userResolutions;\n\n        if (ssrcStats.framerate > 0) {\n            const userFramerates = framerates[participantId] || {};\n\n            userFramerates[ssrc] = ssrcStats.framerate;\n            framerates[participantId] = userFramerates;\n        }\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Calculates the frames per second rate between before and now using a supplied field name and its value in stats.\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} before the previous stats\n * @param {string} fieldName the field to use for calculations.\n * @returns {number} the calculated frame rate between now and before.\n */\nStatsCollector.prototype._calculateFps = function(now, before, fieldName) {\n    const timeMs = now.timestamp - before.timestamp;\n    let frameRate = 0;\n\n    if (timeMs > 0 && now[fieldName]) {\n        const numberOfFramesSinceBefore = now[fieldName] - before[fieldName];\n\n        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n    }\n\n    return frameRate;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            if (before) {\n                const packetsBefore = this.getNonNegativeValue(before[key]);\n                const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n                const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n                const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n                const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n                ssrcStats.setLoss({\n                    packetsTotal: packetsDiff + packetsLostDiff,\n                    packetsLost: packetsLostDiff,\n                    isDownloadStream\n                });\n            }\n\n            let resolution;\n\n            // Process the stats for 'inbound-rtp' streams always and 'outbound-rtp' only if the browser is\n            // Chromium based and version 112 and later since 'track' based stats are no longer available there\n            // for calculating send resolution and frame rate.\n            if (typeof now.frameHeight !== 'undefined' && typeof now.frameWidth !== 'undefined') {\n                // Assume the stream is active if the field is missing in the stats(Firefox)\n                const isStreamActive = now.active ?? true;\n\n                if (now.type === 'inbound-rtp' || (!browser.supportsTrackBasedStats() && isStreamActive)) {\n                    resolution = {\n                        height: now.frameHeight,\n                        width: now.frameWidth\n                    };\n                }\n            }\n            ssrcStats.setResolution(resolution);\n\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (now.type === 'inbound-rtp' && before) {\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else if (before) {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Continue to use the 'track' based stats for Firefox and Safari and older versions of Chromium.\n        } else if (browser.supportsTrackBasedStats()\n            && now.type === 'track'\n            && now.kind === MediaType.VIDEO\n            && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    if (Object.keys(byteSentStats).length) {\n        this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    }\n\n    this._processAndEmitReport();\n};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\nimport WatchRTC from '../watchRTC/WatchRTC';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n\n    // WatchRTC is not required to work for react native\n    if (!browser.isReactNative()) {\n        WatchRTC.init(options);\n    }\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n\n    // WatchRTC is not required to work for react native\n    if (!browser.isReactNative()) {\n        WatchRTC.start(this.options.roomName, this.options.userName);\n    }\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_REMOVED, track => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.DISPLAY_NAME_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.DISPLAY_NAME_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.REDIRECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.REDIRECTED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts, nick, isGuest) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, nick, isGuest);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        // Ignore the strartmuted policy if the presence is received from self. The moderator should join with\n        // available local sources and the policy needs to be applied only on users that join the call after.\n        if (conference.myUserId() === from) {\n            return;\n        }\n        const participant = conference.getParticipantById(from);\n\n        if (!participant || !participant.isModerator()) {\n            return;\n        }\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_CLOSED, ev => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_CLOSED, ev);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.VIDEO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.AUDIO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n\n        /**\n         * Remote sources associated with the participant in the following format.\n         * Map<mediaType, Map<sourceName, sourceInfo>>\n         *\n         * mediaType - 'audio' or 'video'.\n         * sourceName - name of the remote source.\n         * sourceInfo: {\n         *   muted: boolean;\n         *   videoType: string;\n         * }\n         */\n        this._sources = new Map();\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and which belong to this\n     * JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified mediaType and which belong to this\n     * JitsiParticipant are muted; otherwise, false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * Sets source info.\n     * @param {MediaType} mediaType The media type, 'audio' or 'video'.\n     * @param {boolean} muted The new muted state.\n     * @param {string} sourceName The name of the source.\n     * @param {string} videoType The video type of the source.\n     * @returns {void}\n     */\n    _setSources(mediaType, muted, sourceName, videoType) {\n        let sourceByMediaType = this._sources.get(mediaType);\n        const sourceInfo = {\n            muted,\n            videoType\n        };\n\n        if (sourceByMediaType?.size) {\n            sourceByMediaType.set(sourceName, sourceInfo);\n\n            return;\n        }\n\n        sourceByMediaType = new Map();\n        sourceByMediaType.set(sourceName, sourceInfo);\n        this._sources.set(mediaType, sourceByMediaType);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Returns the sources associated with this participant.\n     * @returns Map<string, Map<string, Object>>\n     */\n    getSources() {\n        return this._sources;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","import Bourne from '@hapi/bourne';\n\n/**\n * Safely parse JSON payloads.\n *\n * @param {string} data - The payload to be parsed.\n * @returns The parsed object.\n */\nexport function safeJsonParse(data) {\n    return Bourne.parse(data);\n}\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","export enum E2EEErrors {\n    E2EE_SAS_KEYS_MAC_MISMATCH = 'e2ee.sas.keys-mac-mismatch',\n    E2EE_SAS_MAC_MISMATCH = 'e2ee.sas.mac-mismatch',\n    E2EE_SAS_MISSING_KEY =  'e2ee.sas.missing-key',\n    E2EE_SAS_COMMITMENT_MISMATCHED =  'e2ee.sas.commitment-mismatched',\n    E2EE_SAS_CHANNEL_VERIFICATION_FAILED = 'e2ee.sas.channel-verification-failed',\n    E2EE_SAS_INVALID_SAS_VERIFICATION =  'e2ee.sas.invalid-sas-verification',\n}\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n\n/**\n * Generates a SAS composed of decimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateDecimalSas(sasBytes) {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000\n    ];\n}\n\nconst emojiMapping = [\n    [ '🐶', 'dog' ],\n    [ '🐱', 'cat' ],\n    [ '🦁', 'lion' ],\n    [ '🐎', 'horse' ],\n    [ '🦄', 'unicorn' ],\n    [ '🐷', 'pig' ],\n    [ '🐘', 'elephant' ],\n    [ '🐰', 'rabbit' ],\n    [ '🐼', 'panda' ],\n    [ '🐓', 'rooster' ],\n    [ '🐧', 'penguin' ],\n    [ '🐢', 'turtle' ],\n    [ '🐟', 'fish' ],\n    [ '🐙', 'octopus' ],\n    [ '🦋', 'butterfly' ],\n    [ '🌷', 'flower' ],\n    [ '🌳', 'tree' ],\n    [ '🌵', 'cactus' ],\n    [ '🍄', 'mushroom' ],\n    [ '🌏', 'globe' ],\n    [ '🌙', 'moon' ],\n    [ '☁️', 'cloud' ],\n    [ '🔥', 'fire' ],\n    [ '🍌', 'banana' ],\n    [ '🍎', 'apple' ],\n    [ '🍓', 'strawberry' ],\n    [ '🌽', 'corn' ],\n    [ '🍕', 'pizza' ],\n    [ '🎂', 'cake' ],\n    [ '❤️', 'heart' ],\n    [ '🙂', 'smiley' ],\n    [ '🤖', 'robot' ],\n    [ '🎩', 'hat' ],\n    [ '👓', 'glasses' ],\n    [ '🔧', 'spanner' ],\n    [ '🎅', 'santa' ],\n    [ '👍', 'thumbs up' ],\n    [ '☂️', 'umbrella' ],\n    [ '⌛', 'hourglass' ],\n    [ '⏰', 'clock' ],\n    [ '🎁', 'gift' ],\n    [ '💡', 'light bulb' ],\n    [ '📕', 'book' ],\n    [ '✏️', 'pencil' ],\n    [ '📎', 'paperclip' ],\n    [ '✂️', 'scissors' ],\n    [ '🔒', 'lock' ],\n    [ '🔑', 'key' ],\n    [ '🔨', 'hammer' ],\n    [ '☎️', 'telephone' ],\n    [ '🏁', 'flag' ],\n    [ '🚂', 'train' ],\n    [ '🚲', 'bicycle' ],\n    [ '✈️', 'aeroplane' ],\n    [ '🚀', 'rocket' ],\n    [ '🏆', 'trophy' ],\n    [ '⚽', 'ball' ],\n    [ '🎸', 'guitar' ],\n    [ '🎺', 'trumpet' ],\n    [ '🔔', 'bell' ],\n    [ '⚓️', 'anchor' ],\n    [ '🎧', 'headphones' ],\n    [ '📁', 'folder' ],\n    [ '📌', 'pin' ]\n];\n\n/**\n * Generates a SAS composed of defimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateEmojiSas(sasBytes) {\n    // Just like base64.\n    const emojis = [\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6\n    ];\n\n    return emojis.map(num => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas\n};\n\n/**\n * Generates multiple SAS for the given bytes.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns {object}\n */\nexport function generateSas(sasBytes) {\n    const sas = {};\n\n    for (const method in sasGenerators) {\n        if (sasGenerators.hasOwnProperty(method)) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n\n    return sas;\n}\n","/* global Olm */\n\nimport { safeJsonParse as _safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nimport { E2EEErrors } from './E2EEErrors';\nimport { generateSas } from './SAS';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init',\n    SAS_START: 'sas-start',\n    SAS_ACCEPT: 'sas-accept',\n    SAS_KEY: 'sas-key',\n    SAS_MAC: 'sas-mac'\n};\n\nconst OLM_SAS_NUM_BYTES = 6;\nconst OLM_KEY_VERIFICATION_MAC_INFO = 'Jitsi-KEY_VERIFICATION_MAC';\nconst OLM_KEY_VERIFICATION_MAC_KEY_IDS = 'Jitsi-KEY_IDS';\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_SAS_AVAILABLE: 'olm.participant_sas_available',\n    PARTICIPANT_SAS_READY: 'olm.participant_sas_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated',\n    PARTICIPANT_VERIFICATION_COMPLETED: 'olm.participant_verification_completed'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._mediaKey = undefined;\n        this._mediaKeyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Returns the current participants conference ID.\n     *\n     * @returns {string}\n     */\n    get myId() {\n        return this._conf.myUserId();\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._mediaKey = key;\n        this._mediaKeyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentMediaKey(key) {\n        this._mediaKey = key;\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Sends sacMac if channel verification waas successful.\n     *\n     */\n    markParticipantVerified(participant, isVerified) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        const pId = participant.getId();\n\n        if (!isVerified) {\n            olmData.sasVerification = undefined;\n            logger.warn(`Verification failed for participant ${pId}`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_CHANNEL_VERIFICATION_FAILED);\n\n            return;\n        }\n\n        if (!olmData.sasVerification) {\n            logger.warn(`Participant ${pId} does not have valid sasVerification`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n            return;\n        }\n\n        const { sas, sasMacSent } = olmData.sasVerification;\n\n        if (sas && sas.is_their_key_set() && !sasMacSent) {\n            this._sendSasMac(participant);\n\n            // Mark the MAC as sent so we don't send it multiple times.\n            olmData.sasVerification.sasMacSent = true;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            this._idKeys = _safeJsonParse(this._olmAccount.identity_keys());\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeysReady(this._idKeys);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n    }\n\n    /**\n     * Starts the verification process for the given participant as described here\n     * https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     *\n     *    |                                 |\n          | m.key.verification.start        |\n          |-------------------------------->|\n          |                                 |\n          |       m.key.verification.accept |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.key          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.key |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.mac          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.mac |\n          |<--------------------------------|\n          |                                 |\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @returns {Promise<void>}\n     * @private\n     */\n    startVerification(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (!olmData.session) {\n            logger.warn(`Tried to start verification with participant ${pId} but we have no session`);\n\n            return;\n        }\n\n        if (olmData.sasVerification) {\n            logger.warn(`There is already a verification in progress with participant ${pId}`);\n\n            return;\n        }\n\n        olmData.sasVerification = {\n            sas: new Olm.SAS(),\n            transactionId: uuidv4()\n        };\n\n        const startContent = {\n            transactionId: olmData.sasVerification.transactionId\n        };\n\n        olmData.sasVerification.startContent = startContent;\n        olmData.sasVerification.isInitiator = true;\n\n        const startMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_START,\n                data: startContent\n            }\n        };\n\n        this._sendMessage(startMessage, pId);\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeysReady(idKeys) {\n        logger.debug(`Olm id key ready: ${idKeys}`);\n\n        // Publish it in presence.\n        for (const keyType in idKeys) {\n            if (idKeys.hasOwnProperty(keyType)) {\n                const key = idKeys[keyType];\n\n                this._conf.setLocalParticipantProperty(`e2ee.idKey.${keyType}`, key);\n            }\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._mediaKey !== undefined) {\n            keyInfo.key = this._mediaKey ? base64js.fromByteArray(this._mediaKey) : false;\n            keyInfo.keyIndex = this._mediaKeyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_START: {\n            if (!olmData.session) {\n                logger.debug(`Received sas init message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-init');\n\n                return;\n            }\n\n            if (olmData.sasVerification?.sas) {\n                logger.warn(`SAS already created for participant ${pId}`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { transactionId } = msg.data;\n\n            const sas = new Olm.SAS();\n\n            olmData.sasVerification = {\n                sas,\n                transactionId,\n                isInitiator: false\n            };\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n            const commitment = this._computeCommitment(pubKey, msg.data);\n\n            /* The first phase of the verification process, the Key agreement phase\n                https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n            */\n            const acceptMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_ACCEPT,\n                    data: {\n                        transactionId,\n                        commitment\n                    }\n                }\n            };\n\n            this._sendMessage(acceptMessage, pId);\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_ACCEPT: {\n            if (!olmData.session) {\n                logger.debug(`Received sas accept message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-accept');\n\n                return;\n            }\n\n            const { commitment, transactionId } = msg.data;\n\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_ACCEPT Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            if (olmData.sasVerification.sasCommitment) {\n                logger.debug(`Already received sas commitment message from ${pId}!`);\n\n                this._sendError(participant, 'Already received sas commitment message from ${pId}!');\n\n                return;\n            }\n\n            olmData.sasVerification.sasCommitment = commitment;\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n\n            // Send KEY.\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_KEY: {\n            if (!olmData.session) {\n                logger.debug(`Received sas key message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-key');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_KEY Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { isInitiator, sas, sasCommitment, startContent, keySent } = olmData.sasVerification;\n\n            if (sas.is_their_key_set()) {\n                logger.warn('SAS already has their key!');\n\n                return;\n            }\n\n            const { key: theirKey, transactionId } = msg.data;\n\n            if (sasCommitment) {\n                const commitment = this._computeCommitment(theirKey, startContent);\n\n                if (sasCommitment !== commitment) {\n                    this._sendError(participant, 'OlmAdapter commitments mismatched');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_COMMITMENT_MISMATCHED);\n                    olmData.sasVerification.free();\n\n                    return;\n                }\n            }\n\n            sas.set_their_key(theirKey);\n\n            const pubKey = sas.get_pubkey();\n\n            const myInfo = `${this.myId}|${pubKey}`;\n            const theirInfo = `${pId}|${theirKey}`;\n\n            const info = isInitiator ? `${myInfo}|${theirInfo}` : `${theirInfo}|${myInfo}`;\n\n            const sasBytes = sas.generate_bytes(info, OLM_SAS_NUM_BYTES);\n            const generatedSas = generateSas(sasBytes);\n\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_READY, pId, generatedSas);\n\n            if (keySent) {\n                return;\n            }\n\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_MAC: {\n            if (!olmData.session) {\n                logger.debug(`Received sas mac message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-mac');\n\n                return;\n            }\n\n            const { keys, mac, transactionId } = msg.data;\n\n            if (!mac || !keys) {\n                logger.warn('Invalid SAS MAC message');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_MAC Participant ${pId} does not have valid sasVerification`);\n\n                return;\n            }\n\n            const sas = olmData.sasVerification.sas;\n\n            // Verify the received MACs.\n            const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${pId}${this.myId}${transactionId}`;\n            const keysMac = sas.calculate_mac(\n                Object.keys(mac).sort().join(','), // eslint-disable-line newline-per-chained-call\n                baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n            );\n\n            if (keysMac !== keys) {\n                logger.error('SAS verification error: keys MAC mismatch');\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_KEYS_MAC_MISMATCH);\n\n                return;\n            }\n\n            if (!olmData.ed25519) {\n                logger.warn('SAS verification error: Missing ed25519 key');\n\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_MISSING_KEY);\n\n                return;\n            }\n\n            for (const [ keyInfo, computedMac ] of Object.entries(mac)) {\n                const ourComputedMac = sas.calculate_mac(\n                    olmData.ed25519,\n                    baseInfo + keyInfo\n                );\n\n                if (computedMac !== ourComputedMac) {\n                    logger.error('SAS verification error: MAC mismatch');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_MAC_MISMATCH);\n\n                    return;\n                }\n            }\n\n            logger.info(`SAS MAC verified for participant ${pId}`);\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED, pId, true);\n\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        const participantId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        case 'e2ee.idKey.ed25519':\n            olmData.ed25519 = newValue;\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_AVAILABLE, participantId);\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = _safeJsonParse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKeys.curve25519,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n\n    /**\n     * Builds and sends the SAS MAC message to the given participant.\n     * The second phase of the verification process, the Key verification phase\n        https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     */\n    _sendSasMac(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n        const { sas, transactionId } = olmData.sasVerification;\n\n        // Calculate and send MAC with the keys to be verified.\n        const mac = {};\n        const keyList = [];\n        const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${this.myId}${pId}${transactionId}`;\n\n        const deviceKeyId = `ed25519:${pId}`;\n\n        mac[deviceKeyId] = sas.calculate_mac(\n            this._idKeys.ed25519,\n            baseInfo + deviceKeyId);\n        keyList.push(deviceKeyId);\n\n        const keys = sas.calculate_mac(\n            keyList.sort().join(','),\n            baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n        );\n\n        const macMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_MAC,\n                data: {\n                    keys,\n                    mac,\n                    transactionId\n                }\n            }\n        };\n\n        this._sendMessage(macMessage, pId);\n    }\n\n    /**\n     * Computes the commitment.\n     */\n    _computeCommitment(pubKey, data) {\n        const olmUtil = new Olm.Utility();\n        const commitment = olmUtil.sha256(pubKey + JSON.stringify(data));\n\n        olmUtil.free();\n\n        return commitment;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return _safeJsonParse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_READY,\n            this._onParticipantSasReady.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_AVAILABLE,\n            this._onParticipantSasAvailable.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_VERIFICATION_COMPLETED,\n            this._onParticipantVerificationCompleted.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * Returns the sasVerficiation object.\n     *\n     * @returns {Object}\n     */\n    get sasVerification() {\n        return this._olmAdapter;\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentMediaKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles the SAS ready event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {Uint8Array} sas - The bytes from sas.generate_bytes..\n     * @private\n     */\n    _onParticipantSasReady(pId, sas) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_READY, pId, sas);\n    }\n\n    /**\n     * Handles the sas available event.\n     *\n     * @param {string} pId - The participant ID.\n     * @private\n     */\n    _onParticipantSasAvailable(pId) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE, pId);\n    }\n\n\n    /**\n     * Handles the SAS completed event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {boolean} success - Wheter the verification was succesfull.\n     * @private\n     */\n    _onParticipantVerificationCompleted(pId, success, message) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED, pId, success, message);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n\n    /**\n     * Starts the verification process of the participant\n     *\n     * @param {Participant} - participant to be verified.\n     * @returns {void}\n     */\n    startVerification(participant) {\n        this._keyHandler.sasVerification?.startVerification(participant);\n    }\n\n    /**\n     * Marks the channel as verified\n     *\n     * @param {Participant} - participant to be verified.\n     * @param {boolean} isVerified - whether the verification was succesfull.\n     * @returns {void}\n     */\n    markParticipantVerified(participant, isVerified) {\n        this._keyHandler.sasVerification?.markParticipantVerified(participant, isVerified);\n    }\n}\n","/* eslint-disable */\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (24 - len % 32);\n    x[((len + 64 >> 9) << 4) + 15] = len;\n\n    var w = new Array(80);\n    var a =  1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d =  271733878;\n    var e = -1009589776;\n\n    var i, j, t, olda, oldb, oldc, oldd, olde;\n    for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = x[i + j];\n            } else {\n                w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n            }\n\n            t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                         safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = rol(b, 30);\n            b = a;\n            a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft (t, b, c, d) {\n    if (t < 20) { return (b & c) | ((~b) & d); }\n    if (t < 40) { return b ^ c ^ d; }\n    if (t < 60) { return (b & c) | (b & d) | (c & d); }\n    return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data) {\n    var bkey = str2binb(key);\n    if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n    }\n\n    var ipad = new Array(16), opad = new Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n    return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str) {\n    var bin = [];\n    var mask = 255;\n    for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n    }\n    return bin;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64 (binarray) {\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var str = \"\";\n    var triplet, j;\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n                  (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n                  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n\n        for (j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n            else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n        }\n    }\n    return str;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin) {\n    var str = \"\";\n    var mask = 255;\n    for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n    }\n    return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nconst SHA1 = {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\nexport { SHA1 as default };\n","import $ from 'jquery';\nimport { Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nimport sha1 from './sha1';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return sha1.b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {Object} - handler for the connection.\n     */\n    addHandler(...args) {\n        return this._stropheConn.addHandler(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.deleteHandler}\n     *\n     * @returns {void}\n     */\n    deleteHandler(...args) {\n        this._stropheConn.deleteHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            logger.error(`Trying to send stanza while not connected. Status:${this._status} Proto:${\n                this.isUsingWebSocket ? this._stropheConn?._proto?.socket?.readyState : 'bosh'\n            }`);\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    RENAME: `${FEATURE_KEY}/rename`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs breakout room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Changes the subject of a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     * @param {string} subject - A new subject for the breakout room.\n     */\n    renameBreakoutRoom(breakoutRoomJid, subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot rename breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.RENAME,\n            breakoutRoomJid,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Retrieves whether a breakout room feature is supported.\n     *\n     * @param {string} feature - Feature to check.\n     * @returns Wether the feature is supported.\n     */\n    isFeatureSupported(feature) {\n        return Boolean((this.room.xmpp.breakoutRoomsFeatures || {})[feature]);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            const filteredPayload = this._filterUpdatePayload(payload);\n\n            this._rooms = filteredPayload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, filteredPayload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Filters the hidden participants from the payload.\n     *\n     * @param {Object} payload - The payload of the update message.\n     * @return {Object} - The filtered payload.\n     */\n    _filterUpdatePayload(payload) {\n        const hiddenDomain = this.room.options.hiddenDomain;\n        const { rooms } = payload;\n        const filteredRooms = {};\n\n        Object.entries(rooms).forEach(([ key, room ]) => {\n            const { participants = {} } = room;\n            const filteredParticipants = {};\n\n            Object.entries(participants).forEach(([ k, participant ]) => {\n                if (Strophe.getDomainFromJid(participant.jid) !== hiddenDomain) {\n                    filteredParticipants[k] = participant;\n                }\n            });\n\n            filteredRooms[key] = {\n                ...room,\n                participants: filteredParticipants\n            };\n        });\n\n        return {\n            ...payload,\n            rooms: filteredRooms\n        };\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* eslint-disable newline-per-chained-call */\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n    const maxTimeout = 120000;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return Math.min(timeout * step, maxTimeout);\n    };\n}\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n    this.options = options;\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n\n    // Whether SIP gateway (jigasi) support is enabled. TODO: use presence so it can be changed based on jigasi\n    // availability.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = xmpp.connection;\n\n    // The JID to which conference-iq requests are sent over XMPP.\n    this.targetJid = this.options.hosts?.focus;\n\n    // If not specified default to 'focus.domain'\n    if (!this.targetJid) {\n        this.targetJid = `focus.${this.options.hosts?.domain}`;\n    }\n\n    this.targetUrl = this.options.conferenceRequestUrl;\n\n    // Whether to send conference requests over HTTP or XMPP\n    this.mode = this.targetUrl ? 'http' : 'xmpp';\n    logger.info(`Using ${this.mode} for conference requests.`);\n\n    // The set of JIDs known to belong to jicofo. Populated from configuration\n    // and responses from conference requests.\n    this.focusUserJids = new Set();\n\n    if (options.focusUserJid) {\n        this.focusUserJids.add(options.focusUserJid);\n    }\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(`Ignoring sessionId from different origin: ${event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\nModerator.prototype.isFocusJid = function(jid) {\n    if (!jid) {\n        return false;\n    }\n\n    for (const focusJid of this.focusUserJids) {\n        // jid may be a full JID, and focusUserJids may be bare JIDs\n        if (jid.indexOf(`${focusJid}/`) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\n/**\n * Create a conference request based on the configured options and saved Settings.\n *\n * A conference request has the following format:\n * {\n *   room: \"room@example.com\",\n *   sessionId: \"foo\", // optional\n *   machineUdi: \"bar\", // optional\n *   identity: \"baz\", // optional\n *   properties: { } // map string to string\n * }\n *\n * It can be encoded in either JSON or and IQ.\n *\n * @returns the created conference request.\n */\nModerator.prototype._createConferenceRequest = function() {\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const config = this.options;\n    const properties = {};\n\n    if (config.startAudioMuted !== undefined) {\n        properties.startAudioMuted = config.startAudioMuted;\n    }\n    if (config.startVideoMuted !== undefined) {\n        properties.startVideoMuted = config.startVideoMuted;\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = config?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        properties.rtcstatsEnabled = false;\n    }\n\n    const conferenceRequest = {\n        properties,\n        machineUid: Settings.machineId,\n        room: this.roomName\n    };\n\n    if (sessionId) {\n        conferenceRequest.sessionId = sessionId;\n    }\n\n    return conferenceRequest;\n};\n\n/**\n * Create a conference request and encode it as an IQ.\n */\nModerator.prototype._createConferenceIq = function() {\n    const conferenceRequest = this._createConferenceRequest();\n\n    // Generate create conference IQ\n    const elem = $iq({ to: this.targetJid,\n        type: 'set' });\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': conferenceRequest.machineUid\n    });\n\n    if (conferenceRequest.sessionId) {\n        elem.attrs({ 'session-id': conferenceRequest.sessionId });\n    }\n\n    for (const k in conferenceRequest.properties) {\n        if (conferenceRequest.properties.hasOwnProperty(k)) {\n            elem.c(\n                'property', {\n                    name: k,\n                    value: conferenceRequest.properties[k]\n                }).up();\n        }\n    }\n    if (FeatureFlags.isJoinAsVisitorSupported()) {\n        elem.c('property', {\n            name: 'visitors-version',\n            value: 1 }).up();\n    }\n\n    return elem;\n};\n\nModerator.prototype._parseConferenceIq = function(resultIq) {\n    const conferenceRequest = { properties: {} };\n\n    conferenceRequest.focusJid = $(resultIq).find('conference').attr('focusjid');\n    conferenceRequest.sessionId = $(resultIq).find('conference').attr('session-id');\n    conferenceRequest.identity = $(resultIq).find('>conference').attr('identity');\n    conferenceRequest.ready = $(resultIq).find('conference').attr('ready') === 'true';\n    conferenceRequest.vnode = $(resultIq).find('conference').attr('vnode');\n\n    if ($(resultIq).find('>conference>property[name=\\'authentication\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.authentication = 'true';\n    }\n\n    if ($(resultIq).find('>conference>property[name=\\'externalAuth\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.externalAuth = 'true';\n    }\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find('>conference>property[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.sipGatewayEnabled = 'true';\n    }\n\n    return conferenceRequest;\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.sendConferenceRequest = function() {\n    return new Promise(resolve => {\n        if (this.mode === 'xmpp') {\n            logger.info(`Sending conference request over XMPP to ${this.targetJid}`);\n\n            this.connection.sendIQ(\n                this._createConferenceIq(),\n                result => this._handleIqSuccess(result, resolve),\n                error => this._handleIqError(error, resolve));\n\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for Strophe to\n            // decide to send our IQ.\n            this.connection.flush();\n        } else {\n            logger.info(`Sending conference request over HTTP to ${this.targetUrl}`);\n            fetch(this.targetUrl, {\n                method: 'POST',\n                body: JSON.stringify(this._createConferenceRequest()),\n                headers: { 'Content-Type': 'application/json' }\n            })\n            .then(response => {\n                if (!response.ok) {\n                    response.text().then(text => {\n                        logger.warn(`Received HTTP ${response.status} ${response.statusText}. Body: ${text}`);\n                        const sessionError = response.status === 400 && text.indexOf('400 invalid-session') > 0;\n                        const notAuthorized = response.status === 403;\n\n                        this._handleError(sessionError, notAuthorized, resolve);\n                    })\n                    .catch(error => {\n                        logger.warn(`Error: ${error}`);\n                        this._handleError();\n                    });\n\n                    // _handleError has either scheduled a retry or fired an event indicating failure.\n                    return;\n                }\n                response.json().then(resultJson => {\n                    this._handleSuccess(resultJson, resolve);\n                });\n            })\n            .catch(error => {\n                logger.warn(`Error: ${error}`);\n                this._handleError();\n            });\n        }\n    });\n};\n\nModerator.prototype._handleSuccess = function(conferenceRequest, callback) {\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    if (conferenceRequest.focusJid) {\n        logger.info(`Adding focus JID: ${conferenceRequest.focusJid}`);\n        this.focusUserJids.add(conferenceRequest.focusJid);\n    } else {\n        logger.warn('Conference request response contained no focusJid.');\n    }\n\n    const authenticationEnabled = conferenceRequest.properties.authentication === 'true';\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = conferenceRequest.properties.externalAuth === 'true';\n    logger.info(`External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled && conferenceRequest.sessionId) {\n        logger.info(`Received sessionId: ${conferenceRequest.sessionId}`);\n        Settings.sessionId = conferenceRequest.sessionId;\n    }\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED, authenticationEnabled, conferenceRequest.identity);\n\n    this.sipGatewayEnabled = conferenceRequest.properties.sipGatewayEnabled;\n    logger.info(`Sip gateway enabled: ${this.sipGatewayEnabled}`);\n\n    if (conferenceRequest.ready) {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // we want to ignore redirects when this is jibri (record/live-stream or a sip jibri)\n        if (conferenceRequest.vnode && !this.options.iAmRecorder && !this.options.iAmSipGateway) {\n            logger.warn(`Redirected to: ${conferenceRequest.vnode} with focusJid ${conferenceRequest.focusJid} }`);\n\n            this.eventEmitter.emit(XMPPEvents.REDIRECTED, conferenceRequest.vnode, conferenceRequest.focusJid);\n\n            return;\n        }\n\n        logger.info('Conference-request successful, ready to join the MUC.');\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        // This was a successful response, but the \"ready\" flag is not set. Retry after a timeout.\n        logger.info(`Not ready yet, will retry in ${waitMs} ms.`);\n        window.setTimeout(\n            () => this.sendConferenceRequest().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype._handleError = function(sessionError, notAuthorized, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    if (sessionError) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n\n    // Not authorized to create new room\n    if (notAuthorized) {\n        logger.warn('Unauthorized to start the conference');\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n\n    const waitMs = this.getNextErrorTimeout();\n\n    if (sessionError && waitMs < 60000) {\n        // If the session is invalid, retry a limited number of times and then fire an error.\n        logger.info(`Invalid session, will retry after ${waitMs} ms.`);\n        this.getNextTimeout(true);\n        window.setTimeout(() => this.sendConferenceRequest().then(callback), waitMs);\n    } else {\n        const errmsg = 'Failed to get a successful response, giving up.';\n        const error = new Error(errmsg);\n\n        logger.error(errmsg, error);\n        GlobalOnErrorHandler.callErrorHandler(error);\n\n        // This is a \"fatal\" error and the user of the lib should handle it accordingly.\n        // TODO: change the event name to something accurate.\n        this.eventEmitter.emit(XMPPEvents.FOCUS_DISCONNECTED);\n    }\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that {@link sendConferenceRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqError = function(error, callback) {\n\n    // The reservation system only works over XMPP. Handle the error separately.\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    const invalidSession\n        = Boolean($(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length);\n\n    // Not authorized to create new room\n    const notAuthorized = $(error).find('>error>not-authorized').length > 0;\n\n    if (notAuthorized && Strophe.getDomainFromJid(error.getAttribute('to')) !== this.options.hosts.anonymousdomain) {\n        // FIXME \"is external\" should come either from the focus or\n        // config.js\n        this.externalAuthEnabled = true;\n    }\n\n    this._handleError(invalidSession, notAuthorized, callback);\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that {@link #sendConferenecRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    const conferenceRequest = this._parseConferenceIq(result);\n\n    this._handleSuccess(conferenceRequest, callback);\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this._createConferenceIq(),\n            result => {\n                const sessionId = $(result).find('conference').attr('session-id');\n\n                if (sessionId) {\n                    logger.info(`Received sessionId:  ${sessionId}`);\n                    Settings.sessionId = sessionId;\n                } else {\n                    logger.warn('Response did not contain a session-id');\n                }\n\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first').prop('tagName'),\n                message: $(errorIq).find('iq>error>text').text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n * Process nodes to extract data needed for MUC_JOINED and MUC_MEMBER_JOINED events.\n *\n */\nfunction extractIdentityInformation(node, hiddenFromRecorderFeatureEnabled) {\n    const identity = {};\n    const userInfo = node.children.find(c => c.tagName === 'user');\n\n    if (userInfo) {\n        identity.user = {};\n        const tags = [ 'id', 'name', 'avatar' ];\n\n        if (hiddenFromRecorderFeatureEnabled) {\n            tags.push('hidden-from-recorder');\n        }\n\n        for (const tag of tags) {\n            const child\n                = userInfo.children.find(c => c.tagName === tag);\n\n            if (child) {\n                identity.user[tag] = child.value;\n            }\n        }\n    }\n    const groupInfo = node.children.find(c => c.tagName === 'group');\n\n    if (groupInfo) {\n        identity.group = groupInfo.value;\n    }\n\n    return identity;\n}\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, xmpp, options) {\n        super();\n        this.xmpp = xmpp;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joining MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, xmpp.options);\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            // there is no point of sending conference iq when in visitor mode\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.sendConferenceRequest();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(safeJsonParse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established, only if needed\n        if (status === XmppConnection.Status.CONNECTED && this.presenceUpdateTime > this.presenceSyncTime) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus = this.moderator.isFocusJid(jid);\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node, this.options.hiddenFromRecorderFeatureEnabled);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                delete this.lastPresences[jid];\n                if (!member.isFocus) {\n                    this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n                }\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            const member = this.members[from];\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            delete this.lastPresences[from];\n\n            // In this case we *do* fire MUC_MEMBER_LEFT for the focus?\n            this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, from, reason);\n            if (member?.isFocus) {\n                logger.info('Focus has left the room - leaving conference');\n                this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                const nickEl = $(msg).find('>nick');\n                let nick;\n\n                if (nickEl.length > 0) {\n                    nick = nickEl.text();\n                }\n\n                // we will fire explicitly that this is a guest(isGuest:true) to the conference\n                // informing that this is probably a message from a guest to the conference (visitor)\n                // a message with explicit name set\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                    from, txt, this.myroomjid, stamp, nick, Boolean(nick));\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        let errorDescriptionNode;\n\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            const waitingForHost = $(pres).find('>error[type=\"auth\"]>waiting-for-host').length > 0;\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid, waitingForHost);\n        } else if ((errorDescriptionNode = $(pres).find(\n                '>error[type=\"modify\"]>displayname-required[xmlns=\"http://jitsi.org/jitmeet\"]')).length) {\n            logger.warn('display name required ', pres);\n            this.eventEmitter.emit(XMPPEvents.DISPLAY_NAME_REQUIRED, errorDescriptionNode[0].attributes.lobby?.value);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     * Redirected back.\n     * @param iq The received iq.\n     */\n    onVisitorIQ(iq) {\n        const visitors = $(iq).find('>visitors[xmlns=\"jitsi:visitors\"]');\n        const response = $(iq).find('promotion-response');\n\n        if (visitors.length && response.length\n            && String(response.attr('allow')).toLowerCase() === 'true') {\n            logger.warn('Redirected back to main room.');\n\n            this.eventEmitter.emit(\n                XMPPEvents.REDIRECTED, undefined, visitors.attr('focusjid'), response.attr('username'));\n        }\n    }\n\n    /**\n     * Obtains the info about given media advertised (in legacy format) in the MUC presence of the participant\n     * identified by the given endpoint JID. This is for mantining interop with endpoints that do not support\n     * source-name signaling (Jigasi and very old mobile clients).\n     *\n     * @param {string} endpointId the endpoint ID mapped to the participant which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence info or <tt>null</tt> either if there\n     * is no presence available or if the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            if (this.joined) {\n                timeout = setTimeout(() => onMucLeft(true), 5000);\n\n                this.clean();\n                this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n                this.doLeave(reason);\n            } else {\n                // we are clearing up, and we haven't joined the room\n                // there is no point of sending presence unavailable and check for timeout\n                // let's just clean\n                this.connection.emuc.doLeave(this.roomjid);\n                this.clean();\n            }\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onVisitors.bind(this),\n            'jitsi:visitors', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n\n    /**\n     * A visitor IQ is received, pass it to the room.\n     * @param iq The received iq.\n     * @returns {boolean}\n     */\n    onVisitors(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        room?.onVisitorIQ(iq);\n\n        return true;\n    }\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: sourceCompactJson.n\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = safeJsonParse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the codec mime types\n * @type {{AV1: string, H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nexport const CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n};\n\nexport default CodecMimeType;\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingResolution, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    minWidth: desktopSharingResolution?.width?.min,\n                                    minHeight: desktopSharingResolution?.height?.min,\n                                    maxWidth: desktopSharingResolution?.width?.max ?? window.screen.width,\n                                    maxHeight: desktopSharingResolution?.height?.max ?? window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => {\n                                this.setContentHint(stream);\n                                onSuccess({\n                                    stream,\n                                    sourceId: streamId,\n                                    sourceType: streamType\n                                });\n                            })\n                            .catch(err => onFailure(err));\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const audio = this._getAudioConstraints();\n        let video = {};\n        const { desktopSharingFrameRate } = this.options;\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia on any of the\n        // browsers. getDisplayMedia will fail with an error \"invalid constraints\" in this case.\n        video.frameRate && delete video.frameRate.min;\n\n        if (browser.isChromiumBased()) {\n            // Allow users to seamlessly switch which tab they are sharing without having to select the tab again.\n            browser.isVersionGreaterThan(106) && (video.surfaceSwitching = 'include');\n\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311 for low fps screenshare. Capturing SS at\n            // very high resolutions restricts the framerate. Therefore, skip this hack when capture fps > 5 fps.\n            if (!(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n                video.height = 99999;\n                video.width = 99999;\n            }\n        }\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                this.setContentHint(stream);\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                this.setContentHint(stream);\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /** Sets the contentHint on the transmitted MediaStreamTrack to indicate charaterstics in the video stream, which\n     * informs RTCPeerConnection on how to encode the track (to prefer motion or individual frame detail).\n     *\n     * @param {MediaStream} stream - The captured desktop stream.\n     * @returns {void}\n     */\n    setContentHint(stream) {\n        const { desktopSharingFrameRate } = this.options;\n        const desktopTrack = stream.getVideoTracks()[0];\n\n        // Set contentHint on the desktop track based on the fps requested.\n        if ('contentHint' in desktopTrack) {\n            desktopTrack.contentHint = desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE ? 'motion' : 'detail';\n        } else {\n            logger.warn('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        } else {\n            logger.error(`No matching RTP payload type found for ${codecName}, failed to set preferred codecs`);\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile codec needs to be stripped from the sdp for a\n     * given codec type.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const highProfileCodecs = new Map();\n        let removePts = [];\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (highProfile) {\n                    highProfileCodecs.set(rtp.payload, rtp.codec);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        if (highProfile) {\n            removePts = mLine.fmtp\n                .filter(item => {\n                    const codec = highProfileCodecs.get(item.payload);\n\n                    if (codec) {\n                        return codec.toLowerCase() === CodecMimeType.VP9\n                            ? !item.config.includes('profile-id=0')\n                            : item.config.includes('profile-level-id=64');\n                    }\n\n                    return false;\n                })\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'video' && typeof this.initialLastN === 'number') {\n            elem.c('initial-last-n',\n                { xmlns: 'jitsi:colibri2',\n                    value: this.initialLastN }).up();\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: sourceName,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:', this.session);\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=extmap-allow-mixed', this.session)) {\n                elem.c('extmap-allow-mixed', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0'\n                });\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n    if (desc.find('>extmap-allow-mixed[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]').length > 0) {\n        sdp += 'a=extmap-allow-mixed\\r\\n';\n    }\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: sourceName,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","export default function onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n","/* istanbul ignore file */\n\nexport var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nexport var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nexport var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nexport function fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nexport function wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nexport default wrap(_defer);\n","// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nexport default class DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head\n        while (cur) {\n            yield cur.data\n            cur = cur.next\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\n","import initialParams from './internal/initialParams.js'\nimport setImmediate from './internal/setImmediate.js'\nimport { isAsync } from './internal/wrapAsync.js'\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nexport default function asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop()\n            const promise = func.apply(this, args)\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate(e => { throw e }, err);\n    }\n}\n","import asyncify from '../asyncify.js'\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nexport default wrapAsync;\n\nexport { isAsync, isAsyncGenerator, isAsyncIterable };\n","export default function (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n","import onlyOnce from './onlyOnce.js'\nimport setImmediate from './setImmediate.js'\nimport DLL from './DoublyLinkedList.js'\nimport wrapAsync from './wrapAsync.js'\n\nexport default function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    }\n\n    function on (event, handler) {\n        events[event].push(handler)\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove)\n            handler(...args)\n        }\n        events[event].push(handleAndRemove)\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler)\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args))\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args)\n        }\n\n        var item = q._createTaskItem(\n            data,\n            rejectOnError ? promiseCallback :\n                (callback || promiseCallback)\n        );\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve\n                rej = reject\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated')\n            }\n\n            if (q.idle()) {\n                trigger('drain')\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data)\n                })\n            })\n        }\n        off(name)\n        on(name, handler)\n\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        _createTaskItem (data, callback) {\n            return {\n                data,\n                callback\n            };\n        },\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]()\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off()\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    })\n    return q;\n}\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async-es';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * Pauses the execution of the tasks on the queue.\n     */\n    pause() {\n        this._queue.pause();\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Resumes the execution of the tasks on the queue.\n     */\n    resume() {\n        this._queue.resume();\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","import queue from './internal/queue.js'\nimport wrapAsync from './internal/wrapAsync.js'\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nexport default function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: ssrc_,\n        name: s.source\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * video test ?(ask George).\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localSendReceiveVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteSendReceiveVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection after the session is established.\n         * The queue is paused until the first offer/answer cycle is complete. Only track or codec related\n         * operations which necessitate a renegotiation cycle need to be pushed to the modification queue.\n         * These tasks will be executed after the session has been established.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n        this.modificationQueue.pause();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.codecSettings = options.codecSettings;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan = browser.supportsUnifiedPlan();\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n        } else {\n            // H264 scalability is not supported on jvb, so simulcast needs to be disabled when H264 is preferred.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast || options.videoQuality?.preferredCodec === CodecMimeType.H264;\n\n            // Do not send lower spatial layers for low fps screenshare and enable them only for high fps screenshare.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            if (this.isP2P) {\n                this.sendIceCandidate(candidate);\n            }\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator\n                            && (browser.isChromiumBased() || browser.isReactNative())))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    this._renegotiate()\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (ssrcElement.hasAttribute('name')) {\n                const sourceName = ssrcElement.getAttribute('name');\n\n                this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        logger.debug(`${this} Executing invite task`);\n\n        const addTracks = [];\n\n        for (const track of localTracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n\n        Promise.all(addTracks)\n            .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n            .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n                this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n            })\n            .then(() => {\n                logger.debug(`${this} invite executed - OK`);\n            })\n            .catch(error => {\n                logger.error(`${this} invite error`, error);\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        logger.debug(`${this} Executing setAnswer task`);\n\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n        const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n        const remoteDescription = new RTCSessionDescription({\n            type: 'answer',\n            sdp: newRemoteSdp.raw\n        });\n\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // Start processing tasks on the modification queue.\n                    logger.debug('Resuming the modification queue after session is established!');\n                    this.modificationQueue.resume();\n                    const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this.sendContentModify();\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                }\n            })\n            .then(() => {\n                logger.debug(`${this} setAnswer task done`);\n            })\n            .catch(error => {\n                logger.error(`${this} setAnswer task failed: ${error}`);\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        logger.debug(`${this} Executing setOfferAnswerCycle task`);\n\n        const addTracks = [];\n        const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n        const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n        let tracks = localTracks;\n\n        // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n        // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n        // renegotiation.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length > 1) {\n            tracks = [ ...audioTracks, videoTracks[0] ];\n        }\n        for (const track of tracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n        const bridgeSession = $(jingleOfferAnswerIq).find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n        const bridgeSessionId = bridgeSession.attr('id');\n\n        if (bridgeSessionId !== this._bridgeSessionId) {\n            this._bridgeSessionId = bridgeSessionId;\n        }\n\n        Promise.all(addTracks)\n            .then(() => this._renegotiate(newRemoteSdp.raw))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                    // adjust the video media direction only in the local SDP and the Jingle contents direction\n                    // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                    // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                    // interested in receiving video content. Changing media direction in the remote SDP will mess\n                    // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                    // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                    if (this.isP2P && (!this._localSendReceiveVideoActive || this._sourceReceiverConstraints)) {\n                        this.sendContentModify();\n                    }\n                }\n\n            })\n            .then(() => {\n                logger.debug(`${this} setOfferAnswerCycle task done`);\n                success();\n            })\n            .catch(error => {\n                logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                failure(error);\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(codecList) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setVideoCodecs: ${codecList}`);\n            this.peerconnection.setVideoCodecs(codecList);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        const workFunction = finishedCallback => {\n            // First set an offer with a rejected 'data' section\n            this.setOfferAnswerCycle(\n                jingleOfferElem,\n                () => {\n                    // Now set the original offer(with the 'data' section)\n                    this.setOfferAnswerCycle(\n                        originalOffer,\n                        () => {\n                            const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n                                localSDP.initialLastN = this.options.channelLastN;\n                            }\n\n                            this.sendTransportAccept(localSDP, success, failure);\n\n                            this.room.eventEmitter.emit(\n                                XMPPEvents.ICE_RESTART_SUCCESS,\n                                this,\n                                originalOffer);\n\n                            finishedCallback();\n                        }, error => finishedCallback(error)\n                    );\n                }, error => finishedCallback(error)\n            );\n        };\n\n        logger.debug(`${this} Queued ICE restart task`);\n\n        // Queue and execute\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} ICE restart task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} ICE restart task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n            localSDP.initialLastN = this.options.channelLastN;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const senders = this._localSendReceiveVideoActive ? 'both' : 'none';\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote p2p peer.\n     *\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - constraints: ${JSON.stringify(sourceReceiverConstraints)}`);\n        this._sourceReceiverConstraints = sourceReceiverConstraints;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Processes the source map message received from the bridge and creates a new remote track for newly signaled\n     * SSRCs or updates the source-name and owner on the remote track for an existing SSRC.\n     *\n     * @param {Object} message - The source map message.\n     * @param {string} mediaType - The media type, 'audio' or 'video'.\n     * @returns {void}\n     */\n    processSourceMap(message, mediaType) {\n        const newSsrcs = [];\n\n        for (const src of message.mappedSources) {\n            // eslint-disable-next-line prefer-const\n            let { owner, source, ssrc, videoType } = src;\n            const isNewSsrc = this.peerconnection.addRemoteSsrc(ssrc, source);\n            let lookupSsrc = ssrc;\n\n            if (isNewSsrc) {\n                newSsrcs.push(src);\n\n                // Check if there is an old mapping for the given source and clear the owner on the associated track.\n                const oldSsrc = this.peerconnection.remoteSources.get(source);\n\n                if (oldSsrc) {\n                    lookupSsrc = oldSsrc;\n                    owner = undefined;\n                    source = undefined;\n                }\n            }\n            const track = this.peerconnection.getTrackBySSRC(lookupSsrc);\n\n            if (track) {\n                logger.debug(`Existing SSRC ${ssrc}: new owner=${owner}, source-name=${source}`);\n\n                // Update the SSRC owner.\n                this._signalingLayer.setSSRCOwner(ssrc, owner);\n\n                // Update the track with all the relevant info.\n                track.setSourceName(source);\n                track.setOwner(owner);\n                if (mediaType === MediaType.VIDEO) {\n                    const type = videoType === 'CAMERA' ? VideoType.CAMERA : VideoType.DESKTOP;\n\n                    track._setVideoType(type);\n                }\n\n                // Update the muted state on the track since the presence for this track could have been received\n                // before the updated source map is received on the bridge channel.\n                const peerMediaInfo = this._signalingLayer.getPeerMediaInfo(owner, mediaType, source);\n\n                peerMediaInfo && this.peerconnection._sourceMutedChanged(source, peerMediaInfo.muted);\n            }\n        }\n\n        // Add the new SSRCs to the remote description by generating a source message.\n        if (newSsrcs.length) {\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: mediaType\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: mediaType\n            });\n\n            for (const src of newSsrcs) {\n                const { rtx, ssrc, source } = src;\n                let msid;\n\n                if (mediaType === MediaType.VIDEO) {\n                    const idx = ++this.numRemoteVideoSources;\n\n                    msid = `remote-video-${idx} remote-video-${idx}`;\n\n                    if (rtx !== '-1') {\n                        _addSourceElement(node, src, rtx, msid);\n                        node.c('ssrc-group', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            semantics: 'FID'\n                        })\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc\n                            })\n                            .up()\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc: rtx\n                            })\n                            .up()\n                            .up();\n                    }\n                } else {\n                    const idx = ++this.numRemoteAudioSources;\n\n                    msid = `remote-audio-${idx} remote-audio-${idx}`;\n                }\n                _addSourceElement(node, src, ssrc, msid);\n                this.peerconnection.remoteSources.set(source, ssrc);\n            }\n            node = node.up();\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => finishCallback(), error => finishCallback(error));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw).then(() => {\n                logger.log(`${this} ${logPrefix} - OK`);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n        let ssrcs;\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            ssrcs = lines.map(line => Number(line.split('a=ssrc:')[1]?.split(' ')[0]));\n\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n\n                            // Reject the m-line so that the browser removes the associated transceiver from the list\n                            // of available transceivers. This will prevent the client from trying to re-use these\n                            // inactive transceivers when additional video sources are added to the peerconnection.\n                            const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n\n        // Update the ssrc owners list.\n        ssrcs?.length && this._signalingLayer.removeSSRCOwners(ssrcs);\n\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Does a new offer/answer flow using the existing remote description (if not provided) and signals any new sources\n     * to Jicofo or the remote peer.\n     *\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp to use.  If not provided, the remote sdp from the\n     * peerconnection will be used.\n     * @returns {Promise} promise which resolves when the o/a flow is complete with no arguments or rejects with an\n     * error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: 'offer',\n            sdp: remoteSdp\n        });\n\n        const oldLocalSDP = this.peerconnection.localDescription.sdp;\n\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints);\n            })\n            .then(answer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(answer);\n            })\n            .then(() => {\n                if (oldLocalSDP) {\n                    // Send the source updates after every renegotiation cycle.\n                    this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(this.peerconnection.localDescription.sdp));\n                }\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            this._renegotiate(remoteSdp.raw)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     *\n     * @param {boolean} active - <tt>true</tt> to enable media transfer or <tt>false</tt> to suspend media transmission\n     * @returns {Promise}\n     */\n    setMediaTransferActive(active) {\n        return this.peerconnection.tpcUtils.setMediaTransferActive(active)\n            .then(() => {\n                this.peerconnection.audioTransferActive = active;\n                this.peerconnection.videoTransferActive = active;\n\n                // Reconfigure the video tracks so that only the correct encodings are active.\n                const promises = [];\n\n                for (const track of this.rtc.getLocalVideoTracks()) {\n                    promises.push(this.peerconnection.configureSenderVideoEncodings(track));\n                }\n\n                return Promise.allSettled(promises);\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate && (oldTrack || newTrack) && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate();\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (oldTrack && newTrack && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends video media transfer over the p2p peer connection.\n     *\n     * @param {boolean} videoActive <tt>true</tt> to enable video media transfer or <tt>false</tt> to suspend video\n     * media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once the operation is done. It will be rejected with\n     * an error description as a string in case anything goes wrong.\n     */\n    setP2pVideoTransferActive(videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject('Can not modify video transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        if (this._localSendReceiveVideoActive !== videoActive) {\n            this._localSendReceiveVideoActive = videoActive;\n            if (this.isP2P && this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n\n            return this.peerconnection\n                .setVideoTransferActive(this._localSendReceiveVideoActive && this._remoteSendReceiveVideoActive);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Enables/disables local video based on 'senders' attribute of the video conent in 'content-modify' IQ sent by the\n     * remote peer. Also, checks if the sourceMaxFrameHeight (as requested by the p2p peer) or the senders attribute of\n     * the video content has changed and modifies the local video resolution accordingly.\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        if (!this._assertNotEnded()) {\n            return;\n        }\n\n        const isRemoteVideoActive\n            = newVideoSenders === 'both'\n                || (newVideoSenders === 'initiator' && this.isInitiator)\n                || (newVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteSendReceiveVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteSendReceiveVideoActive = isRemoteVideoActive;\n\n            this.peerconnection\n                .setVideoTransferActive(this._localSendReceiveVideoActive && this._remoteSendReceiveVideoActive);\n        }\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    clonedeep(pcConfig),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            logger.debug(`Received ${action} from ${fromJid}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        logger.debug('Source-name signaling is enabled');\n        this.caps.addFeature('http://jitsi.org/source-name');\n\n        logger.debug('Receiving multiple video streams is enabled');\n        this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n\n        // Advertise support for ssrc-rewriting.\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting-1');\n        }\n\n        // Use \"-1\" as a version that we can bump later. This should match\n        // the version added in moderator.js, this one here is mostly defined\n        // for keeping stats, since it is not made available to jocofo at\n        // the time of the initial conference-request.\n        if (FeatureFlags.isJoinAsVisitorSupported()) {\n            this.caps.addFeature('http://jitsi.org/visitors-1');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n\n                const processBreakoutRoomsFeatures = f => {\n                    this.breakoutRoomsFeatures = {};\n\n                    f.forEach(fr => {\n                        if (fr.endsWith('#rename')) {\n                            this.breakoutRoomsFeatures.rename = true;\n                        }\n                    });\n                };\n\n                if (features) {\n                    processBreakoutRoomsFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processBreakoutRoomsFeatures(f))\n                        .catch(e => logger.warn('Error getting features for breakout rooms.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                    resolve();\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face landmarks to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceLandmarksEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceLandmarks', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            faceExpression: payload.faceExpression,\n            timestamp: payload.timestamp,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = safeJsonParse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            const entry = JSON.stringify(logObject);\n\n            Statistics.sendLog(entry);\n            logger.info(entry);\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.sendConferenceRequest().finally(resolve);\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n// Default video codec preferences on mobile and desktop endpoints.\nconst DESKTOP_VIDEO_CODEC_ORDER = [ CodecMimeType.VP9, CodecMimeType.VP8, CodecMimeType.H264 ];\nconst MOBILE_P2P_VIDEO_CODEC_ORDER = [ CodecMimeType.H264, CodecMimeType.VP8, CodecMimeType.VP9 ];\nconst MOBILE_VIDEO_CODEC_ORDER = [ CodecMimeType.VP8, CodecMimeType.VP9, CodecMimeType.H264 ];\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.jvb settings (codec list, preferred and disabled) for the jvb connection.\n     * @param {string} options.p2p settings (codec list, preferred and disabled) for the p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n        this.codecPreferenceOrder = {};\n\n        for (const connectionType of Object.keys(options)) {\n            // eslint-disable-next-line prefer-const\n            let { disabledCodec, preferredCodec, preferenceOrder } = options[connectionType];\n            const supportedCodecs = new Set(this._getSupportedVideoCodecs(connectionType));\n\n            // Default preference codec order when no codec preferences are set in config.js\n            let selectedOrder = Array.from(supportedCodecs);\n\n            if (preferenceOrder) {\n                preferenceOrder = preferenceOrder.map(codec => codec.toLowerCase());\n\n                // Select all codecs that are supported by the browser.\n                selectedOrder = preferenceOrder.filter(codec => supportedCodecs.has(codec));\n\n            // Generate the codec list based on the supported codecs and the preferred/disabled (deprecated) settings\n            } else if (preferredCodec || disabledCodec) {\n                disabledCodec = disabledCodec?.toLowerCase();\n                preferredCodec = preferredCodec?.toLowerCase();\n\n                // VP8 cannot be disabled since it the default codec.\n                if (disabledCodec && disabledCodec !== CodecMimeType.VP8) {\n                    selectedOrder = selectedOrder.filter(codec => codec !== disabledCodec);\n                }\n\n                const index = selectedOrder.findIndex(codec => codec === preferredCodec);\n\n                // Move the preferred codec to the top of the list.\n                if (preferredCodec && index !== -1) {\n                    selectedOrder.splice(index, 1);\n                    selectedOrder.unshift(preferredCodec);\n                }\n            }\n\n            // Push VP9 to the end of the list so that the client continues to decode VP9 even if its not\n            // preferable to encode VP9 (because of browser bugs on the encoding side or added complexity on mobile\n            // devices).\n            if ((connectionType === 'jvb' && !browser.supportsVP9()) || this.conference.isE2EEEnabled()) {\n                const index = selectedOrder.findIndex(codec => codec === CodecMimeType.VP9);\n\n                if (index !== -1) {\n                    selectedOrder.splice(index, 1);\n\n                    // Remove VP9 from the list when E2EE is enabled since it is not supported.\n                    // TODO - remove this check when support for VP9-E2EE is introduced.\n                    if (!this.conference.isE2EEEnabled()) {\n                        selectedOrder.push(CodecMimeType.VP9);\n                    }\n                }\n            }\n\n            logger.info(`Codec preference order for ${connectionType} connection is ${selectedOrder}`);\n            this.codecPreferenceOrder[connectionType] = selectedOrder;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._selectPreferredCodec(session));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n    }\n\n    /**\n     * Returns a list of video codecs that are supported by the browser.\n     *\n     * @param {string} connectionType - media connection type, p2p or jvb.\n     * @returns {Array}\n     */\n    _getSupportedVideoCodecs(connectionType) {\n        const videoCodecMimeTypes = browser.isMobileDevice() && connectionType === 'p2p'\n            ? MOBILE_P2P_VIDEO_CODEC_ORDER\n            : browser.isMobileDevice() ? MOBILE_VIDEO_CODEC_ORDER : DESKTOP_VIDEO_CODEC_ORDER;\n\n        return videoCodecMimeTypes.filter(codec =>\n            (window.RTCRtpReceiver?.getCapabilities?.(MediaType.VIDEO)?.codecs ?? [])\n                .some(supportedCodec => supportedCodec.mimeType.toLowerCase() === `${MediaType.VIDEO}/${codec}`));\n    }\n\n    /**\n     * Filters VP9 from the list of the preferred video codecs for JVB if E2EE is enabled.\n     *\n     * @returns {Array}\n     */\n    _maybeFilterJvbCodecs() {\n        // TODO - remove this check when support for VP9-E2EE is introduced.\n        if (this.conference.isE2EEEnabled()) {\n            return this.codecPreferenceOrder.jvb.filter(codec => codec !== CodecMimeType.VP9);\n        }\n\n        return this.codecPreferenceOrder.jvb;\n    }\n\n    /**\n     * Sets the codec on the media session based on the codec preference order configured in config.js and the supported\n     * codecs published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     */\n    _selectPreferredCodec(mediaSession) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n\n        if (!session) {\n            return;\n        }\n        const currentCodecOrder = session.peerconnection.getConfiguredVideoCodecs();\n        const localPreferredCodecOrder = session === this.conference.jvbJingleSession\n            ? this._maybeFilterJvbCodecs()\n            : this.codecPreferenceOrder.p2p;\n\n        const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n        const remoteCodecsPerParticipant = remoteParticipants?.map(remote => {\n            const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n            return peerMediaInfo\n                ? peerMediaInfo.codecList ?? [ peerMediaInfo.codecType ]\n                : [];\n        });\n\n        const selectedCodecOrder = localPreferredCodecOrder.reduce((acc, localCodec) => {\n            let codecNotSupportedByRemote = false;\n\n            // Ignore remote codecs for p2p since only the JVB codec preferences are published in presence.\n            // For p2p, we rely on the codec order present in the remote offer/answer.\n            if (!session.isP2P) {\n                // Remove any codecs that are not supported by any of the remote endpoints. The order of the supported\n                // codecs locally however will remain the same since we want to support asymmetric codecs.\n                for (const remoteCodecs of remoteCodecsPerParticipant) {\n                    codecNotSupportedByRemote = codecNotSupportedByRemote\n                        || !remoteCodecs.find(participantCodec => participantCodec === localCodec);\n                }\n            }\n\n            if (!codecNotSupportedByRemote) {\n                acc.push(localCodec);\n            }\n\n            return acc;\n        }, []);\n\n        if (!selectedCodecOrder.length) {\n            logger.warn('Invalid codec list generated because of a user joining/leaving the call');\n\n            return;\n        }\n\n        // Reconfigure the codecs on the media session.\n        if (!selectedCodecOrder.every((val, index) => val === currentCodecOrder[index])) {\n            session.setVideoCodecs(selectedCodecOrder);\n        }\n    }\n\n    /**\n     * Returns the current codec preference order for the given connection type.\n     *\n     * @param {String} connectionType The media connection type, 'p2p' or 'jvb'.\n     * @returns {Array<string>}\n     */\n    getCodecPreferenceList(connectionType) {\n        return this.codecPreferenceOrder[connectionType];\n    }\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     * @param {JitsiConference} conference the conference instance.\n     */\n    constructor(peerconnection, wsUrl, emitter, conference) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // The conference that uses this bridge channel.\n        this._conference = conference;\n\n        // Whether the channel is connected or not. It will start as undefined\n        // for the first connection attempt. Then transition to either true or false.\n        this._connected = undefined;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            const isConnecting = this._channel && (this._channel.readyState === 'connecting'\n                    || this._channel.readyState === WebSocket.CONNECTING);\n\n            // Should not spawn new websockets while one is already trying to connect.\n            if (isConnecting) {\n                // Timeout is still required as there is flag `_areRetriesEnabled` that\n                // blocks new retrying cycles until any channel opens in current cycle.\n                this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n\n                return;\n            }\n\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'SourceVideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            this._connected = true;\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = safeJsonParse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'ForwardedSources': {\n                const forwardedSources = obj.forwardedSources;\n\n                logger.info(`New forwarded sources: ${forwardedSources}`);\n                emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (typeof obj.sourceName === 'string' && typeof obj.maxHeight === 'number') {\n                    logger.info(`SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, obj);\n                } else {\n                    logger.error(`Invalid SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.debug(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (channel !== this._channel) {\n                logger.debug('Skip close handler, channel instance is not equal to stored one');\n\n                return;\n            }\n\n            // When the JVB closes the connection gracefully due to the participant being alone in the meeting it uses\n            // code 1001. However, the same code is also used by Cloudflare when it terminates the ws. Therefore, check\n            // for the number of remote participants in the call and abort retries only when the endpoint is the only\n            // endpoint in the call.\n            const isGracefulClose = this._closedFromClient\n                || (event.code === 1001 && this._conference.getParticipantCount() === 1);\n\n            if (!isGracefulClose) {\n                const { code, reason } = event;\n\n                logger.error(`Channel closed: ${code} ${reason}`);\n\n                if (this._mode === 'websocket') {\n                    this._retryWebSocketConnection(event);\n\n                    // We only want to send this event the first time the failure happens.\n                    if (this._connected !== false) {\n                        emitter.emit(RTCEvents.DATA_CHANNEL_CLOSED, {\n                            code,\n                            reason\n                        });\n                    }\n                }\n            }\n\n            this._connected = false;\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the source name of the track.\n     * @returns {String|undefined}\n     */\n    getSourceName() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n\n    /**\n     * Assigns the source name to a track.\n     * @param {String} name - The name to be assigned to the track.\n     * @returns {void}\n     */\n    setSourceName(name) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In React Native we mute the camera by setting track.enabled but that doesn't\n        // work for screen-share tracks, so do the remove-as-mute for those.\n        const doesVideoMuteByStreamRemove\n            = browser.isReactNative() ? this.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSendSupportEnabled())\n                || !doesVideoMuteByStreamRemove) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                const streamInfo = streamsInfo.find(info => info.track.kind === this.getType());\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when presence for a source is received.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {string} endpointId - The endpoint id.\n     * @param {boolean} muted - The new muted state.\n     * @param {string} videoType - The video type of the source.\n     */\n    SOURCE_UPDATED = 'signaling.sourceUpdated',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_UPDATED = SignalingEvents.SOURCE_UPDATED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Removes the association between a given SSRC and its current owner so that it can re-used when the SSRC gets\n     * remapped to another source from a different endpoint.\n     * @param {number} ssrc a list of SSRCs.\n     */\n    removeSSRCOwners(ssrcList) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Removes the SSRCs associated with a given endpoint from the SSRC owners.\n     *\n     * @param {string} id endpoint id of the participant leaving the call.\n     * @returns {void}\n     */\n    updateSsrcOwnersOnLeave(id) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Updates or adds a 'msid' attribute in the format '<endpoint_id>-<mediaType>-<trackIndex>-<tpcId>'\n     * example - d8ff91-video-0-1\n     * All other attributes like 'cname', 'label' and 'mslabel' are removed since these are not processed by Jicofo.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const mediaDirection = mediaSection.mLine?.direction;\n        const msidLine = mediaSection.mLine?.msid;\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const streamId = `${this.localEndpointId}-${mediaType}`;\n        const trackId = msidLine && msidLine.split(' ')[1];\n\n        // Always overwrite msid since we want the msid to be in this format even if the browser generates one.\n        for (const source of sources) {\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            // Update the msid if the 'msid' attribute exists.\n            if (msid) {\n                const streamAndTrackIDs = msid.value.split(' ');\n                const trackID = streamAndTrackIDs[1];\n\n                this._updateSourcesToMsidMap(mediaType, streamId, trackID);\n\n                // Update the msid.\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackID)\n                    : this.audioSourcesToMsidMap.get(trackID);\n\n                msid.value = this._generateMsidAttribute(mediaType, trackID, storedStreamId);\n\n            // Generate the msid attribute using the 'trackId' from the msid line from the media description. Only\n            // descriptions that have the direction set to 'sendonly' or 'sendrecv' will have the 'a=msid' line.\n            } else if (trackId) {\n                this._updateSourcesToMsidMap(mediaType, streamId, trackId);\n\n                const storedStreamId = mediaType === MediaType.VIDEO\n                    ? this.videoSourcesToMsidMap.get(trackId)\n                    : this.audioSourcesToMsidMap.get(trackId);\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId, storedStreamId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n\n        // Ignore the 'cname', 'label' and 'mslabel' attributes and only have the 'msid' attribute.\n        mediaSection.ssrcs = mediaSection.ssrcs.filter(ssrc => ssrc.attribute === 'msid');\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n    }\n\n    /**\n     * Updates the MSID map.\n     *\n     * @param {string} mediaType The media type.\n     * @param {string} streamId The stream id.\n     * @param {string} trackId The track id.\n     * @returns {void}\n     */\n    _updateSourcesToMsidMap(mediaType, streamId, trackId) {\n        if (mediaType === MediaType.VIDEO) {\n            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                const generatedStreamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n\n                this.videoSourcesToMsidMap.set(trackId, generatedStreamId);\n            }\n        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n            const generatedStreamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n\n            this.audioSourcesToMsidMap.set(trackId, generatedStreamId);\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (!this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid').value;\n            const streamId = msid.split(' ')[0];\n\n            // Example stream id: d8ff91-video-8-1\n            // In the example above 8 is the track index\n            const trackIndexParts = streamId.split('-');\n            const trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    primarySsrcMsid && mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType,\n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n            this.track.off(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set track RTC muted for: ${sourceName} after the timeout of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track created: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        // Ignore mute events that get fired on desktop tracks because of 0Hz screensharing introduced in Chromium.\n        // The sender stops sending frames if the content of the captured window doesn't change resulting in the\n        // receiver showing avatar instead of the shared content.\n        if (this.videoType === VideoType.DESKTOP) {\n            logger.debug('Ignoring mute event on desktop tracks.');\n\n            return;\n        }\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this._disposeTrackStreamingStatus();\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     */\n    setOwner(owner) {\n        this.ownerEndpointId = owner;\n        this.emit(JitsiTrackEvents.TRACK_OWNER_CHANGED, owner);\n    }\n\n    /**\n     * Sets the name of the source associated with the remtoe track.\n     *\n     * @param {string} name - The source name to be associated with the track.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        logger.info(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        logger.info(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE,\n            ssHigh: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        this.encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this._getVideoStreamEncodings(localTrack.getVideoType());\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: this.pc.audioTransferActive } ];\n    }\n\n    /**\n     * The startup configuration for the stream encodings that are applicable to\n     * the video stream when a new sender is created on the peerconnection. The initial\n     * config takes into account the differences in browser's simulcast implementation.\n     *\n     * Encoding parameters:\n     * active - determine the on/off state of a particular encoding.\n     * maxBitrate - max. bitrate value to be applied to that particular encoding\n     *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n     * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n     * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n     *  original resolution of the captured video.\n     *\n     *  @param {VideoType} videoType\n     */\n    _getVideoStreamEncodings(videoType) {\n        const maxVideoBitrate = videoType === VideoType.DESKTOP && this.encodingBitrates.ssHigh\n            ? this.encodingBitrates.ssHigh : this.encodingBitrates.high;\n\n        return [\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? maxVideoBitrate : this.encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: this.encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: browser.isFirefox() ? this.encodingBitrates.low : maxVideoBitrate,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Updates the sender parameters in the stream encodings.\n     *\n     * @param {RTCRtpSender} sender - the sender associated with a MediaStreamTrack.\n     * @param {boolean} enable - whether the streams needs to be enabled or disabled.\n     * @returns {Promise} - A promise that resolves when the operation is successful, rejected otherwise.\n     */\n    _updateSenderEncodings(sender, enable) {\n        const parameters = sender.getParameters();\n\n        if (parameters?.encodings?.length) {\n            for (const encoding of parameters.encodings) {\n                encoding.active = enable;\n            }\n        }\n\n        return sender.setParameters(parameters);\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n        const encodingsState = videoStreamEncodings\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && videoStreamEncodings[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && videoStreamEncodings[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this._getVideoStreamEncodings(localVideoTrack.getVideoType())\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n                ? desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Returns the max resolution that the client is configured to encode for a given local video track. The actual\n     * send resolution might be downscaled based on cpu and bandwidth constraints.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack - The local video track.\n     * @returns {number|null} The max encoded resolution for the given video track.\n     */\n    getConfiguredEncodeResolution(localVideoTrack) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoSender = this.pc.findSenderForTrack(localVideoTrack.getTrack());\n        let maxHeight = 0;\n\n        if (!videoSender) {\n            return null;\n        }\n        const parameters = videoSender.getParameters();\n\n        if (!parameters?.encodings?.length) {\n            return null;\n        }\n\n        const hasIncorrectConfig = this.pc._capScreenshareBitrate\n            ? parameters.encodings.every(encoding => encoding.active)\n            : parameters.encodings.some(encoding => !encoding.active);\n\n        // Check if every encoding is active for screenshare track when low fps screenshare is configured or some\n        // of the encodings are disabled when high fps screenshare is configured. In both these cases, the track\n        // encodings need to be reconfigured. This is needed when p2p->jvb switch happens and new sender constraints\n        // are not received by the client.\n        if (localVideoTrack.getVideoType() === VideoType.DESKTOP && hasIncorrectConfig) {\n            return null;\n        }\n\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings[encoding].active) {\n                const scaleResolutionDownBy\n                    = this.pc.isSimulcastOn()\n                        ? this._getVideoStreamEncodings(localVideoTrack.getVideoType())[encoding].scaleResolutionDownBy\n                        : parameters.encodings[encoding].scaleResolutionDownBy;\n\n                maxHeight = Math.max(maxHeight, height / scaleResolutionDownBy);\n            }\n        }\n\n        return maxHeight;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSendSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        if (mediaType === MediaType.VIDEO) {\n            return this.pc._updateVideoSenderParameters(() => transceiver.sender.setParameters(parameters));\n        }\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Resumes or suspends media on the peerconnection by setting the active state on RTCRtpEncodingParameters\n     * associated with all the senders that have a track attached to it.\n     *\n     * @param {boolean} enable - whether outgoing media needs to be enabled or disabled.\n     * @param {string} mediaType - media type, 'audio' or 'video', if neither is passed, all outgoing media will either\n     * be enabled or disabled.\n     * @returns {Promise} - A promise that is resolved when the change is succesful on all the senders, rejected\n     * otherwise.\n     */\n    setMediaTransferActive(enable, mediaType) {\n        logger.info(`${this.pc} ${enable ? 'Resuming' : 'Suspending'} media transfer.`);\n\n        const senders = this.pc.peerconnection.getSenders()\n            .filter(s => Boolean(s.track) && (!mediaType || s.track.kind === mediaType));\n        const promises = [];\n\n        for (const sender of senders) {\n            if (sender.track.kind === MediaType.VIDEO) {\n                promises.push(this.pc._updateVideoSenderParameters(() => this._updateSenderEncodings(sender, enable)));\n            } else {\n                promises.push(this._updateSenderEncodings(sender, enable));\n            }\n        }\n\n        return Promise.allSettled(promises)\n            .then(settledResult => {\n                const errors = settledResult\n                    .filter(result => result.status === 'rejected')\n                    .map(result => result.reason);\n\n                if (errors.length) {\n                    return Promise.reject(new Error('Failed to change encodings on the RTCRtpSenders'\n                        + `${errors.join(' ')}`));\n                }\n\n                return Promise.resolve();\n            });\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(localVideoTrack, parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = videoStreamEncodings[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {Object} options.audioQuality - Quality settings to applied on the outbound audio stream.\n * @param {boolean} options.capScreenshareBitrate if set to true, lower layers will be disabled for screenshare.\n * @param {Array<CodecMimeType>} options.codecSettings - codec settings to be applied for video streams.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {boolean} options.enableInsertableStreams set to true when the insertable streams constraints is to be\n * enabled on the PeerConnection.\n * @param {boolean} options.forceTurnRelay If set to true, the browser will generate only Relay ICE candidates.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n * @param {Object} options.videoQuality - Quality settings to applied on the outbound video streams.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     * @type {Set<number>}\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * Mapping of source-names and their associated SSRCs that have been signaled by the JVB.\n     * @type {Map<string, number>}\n     */\n    this.remoteSources = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if low fps screenshare is desired.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Codec preferences set for the peerconnection through config.js.\n     */\n    this.codecSettings = this.options.codecSettings;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    this._lastVideoSenderUpdatePromise = Promise.resolve();\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the MID of the m-line associated with the local desktop track (if it exists).\n *\n * @returns {Number|null}\n */\nTraceablePeerConnection.prototype._getDesktopTrackMid = function() {\n    const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n\n    if (desktopTrack) {\n        return Number(this._localTrackTransceiverMids.get(desktopTrack.rtcId));\n    }\n\n    return null;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(`Remote track not found for source=${sourceName}, mute update failed!`);\n        }\n\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Checks if the browser is currently doing true simulcast where in three different media streams are being sent to the\n * bridge. Currently this happens only when VP8 is the selected codec.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.doesTrueSimulcast = function() {\n    return this.isSimulcastOn() && this.getConfiguredVideoCodec() === CodecMimeType.VP8;\n};\n\n/**\n * Returns the SSRCs associated with a given local video track.\n *\n * @param {JitsiLocalTrack} localTrack\n * @returns\n */\nTraceablePeerConnection.prototype.getLocalVideoSSRCs = function(localTrack) {\n    const ssrcs = [];\n\n    if (!localTrack || !localTrack.isVideoTrack()) {\n        return ssrcs;\n    }\n\n    const ssrcGroup = this.isSimulcastOn() ? 'SIM' : 'FID';\n\n    return this.localSSRCs.get(localTrack.rtcId)?.groups?.find(group => group.semantics === ssrcGroup)?.ssrcs || ssrcs;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        return;\n    }\n    logger.info(`${this} Received track event for remote stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`MediaType undefined for remote track, stream id: ${streamId}, track creation failed!`));\n\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLine;\n\n    // In unified plan mode, find the matching mline using 'mid' or the 'msid' attr of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver?.mid) {\n            const mid = transceiver.mid;\n\n            mediaLine = remoteSDP.media.find(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLine = remoteSDP.media.find(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid === 'string' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLine = remoteSDP.media.find(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLine) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Matching media line not found in remote SDP for remote stream[id=${streamId},type=${mediaType}],`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLine, 'a=ssrc:');\n\n    ssrcLines = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n            + 'track creation failed!'));\n\n        return;\n    }\n\n    const sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    // Assume default presence state for remote source. Presence can be received after source signaling. This shouldn't\n    // prevent the endpoint from creating a remote track for the source.\n    let muted = true;\n    let videoType = mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined; // 'camera' by default\n\n    if (peerMediaInfo) {\n        muted = peerMediaInfo.muted;\n        videoType = peerMediaInfo.videoType; // can be undefined\n    } else {\n        logger.info(`${this}: no source-info available for ${ownerEndpointId}:${sourceName}, assuming default state`);\n    }\n\n    this._createRemoteTrack(ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${ssrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    // Ignore stream removed events for JVB \"mixed\" sources (used for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    logger.info(`${this} Removing remote track stream[id=${toBeRemoved.getStreamId()},`\n        + `trackId=${toBeRemoved.getTrackId()}]`);\n\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n\n    if (!participantId && FeatureFlags.isSsrcRewritingSupported()) {\n        return;\n    }\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    if (this._usesUnifiedPlan) {\n        media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n            || mline.direction === MediaDirection.SENDRECV);\n    } else {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n\n            const simGroup = mLine.ssrcGroups.find(group => group.semantics === 'SIM');\n\n            // Add a SIM group if its missing in the description (happens on Firefox).\n            if (!simGroup) {\n                const groupSsrcs = mLine.ssrcGroups.map(group => group.ssrcs[0]);\n\n                groupsMap.get(groupSsrcs[0]).push({\n                    semantics: 'SIM',\n                    ssrcs: groupSsrcs\n                });\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? `${mLine.type}-${index}` : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecSettings) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media.filter(m => m.type === this.codecSettings.mediaType);\n\n    if (!mLines.length) {\n        return description;\n    }\n\n    for (const mLine of mLines) {\n        const currentCodecs = this.getConfiguredVideoCodecs(description);\n\n        for (const codec of currentCodecs) {\n            // Strip the high profile H264 codecs on mobile clients for p2p connection. High profile codecs give better\n            // quality at the expense of higher load which we do not want on mobile clients. Jicofo offers only the\n            // baseline code for the jvb connection and therefore this is not needed for jvb connection.\n            if (codec === CodecMimeType.H264 && browser.isMobileDevice() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, codec, true /* high profile */);\n            }\n\n            // There are multiple VP9 payload types generated by the browser, more payload types are added if the\n            // endpoint doesn't have a local video source. Therefore, strip all the high profile codec variants for VP9\n            // so that only one payload type for VP9 is negotiated between the peers.\n            if (this.isP2P && codec === CodecMimeType.VP9) {\n                SDPUtil.stripCodec(mLine, codec, true /* high profile */);\n            }\n        }\n\n        // Reorder the codecs based on the preferred settings.\n        for (const codec of this.codecSettings.codecList.slice().reverse()) {\n            SDPUtil.preferCodec(mLine, codec);\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Returns the codecs in the current order of preference as configured on the peerconnection.\n *\n * @param {RTCSessionDescription} - The local description to be used.\n * @returns {Array}\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodecs = function(description) {\n    const currentSdp = description?.sdp ?? this.peerconnection.localDescription?.sdp;\n\n    if (!currentSdp) {\n        return [];\n    }\n    const parsedSdp = transform.parse(currentSdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codecs = new Set(mLine.rtp\n        .filter(pt => pt.codec.toLowerCase() !== 'rtx')\n        .map(pt => pt.codec.toLowerCase()));\n\n    return Array.from(codecs);\n};\n\n/**\n * Checks if the client has negotiated not to receive video encoded using the given codec, i.e., the codec has been\n * removed from the local description.\n */\nTraceablePeerConnection.prototype.isVideoCodecDisabled = function(codec) {\n    const sdp = this.peerconnection.localDescription?.sdp;\n\n    if (!sdp) {\n        return false;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n\n    return !mLine.rtp.find(r => r.codec === codec);\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(codecList) {\n    if (!this.codecSettings || !codecList?.length) {\n        return;\n    }\n\n    this.codecSettings.codecList = codecList;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this._localTrackTransceiverMids.has(track.rtcId)) {\n                this._localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n\n                if (transceiver) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecSettings) {\n        return description;\n    }\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction);\n\n    for (const mLine of mLines) {\n        if (this.codecSettings.codecList[0] === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const ssHdBitrate = bitrates.ssHigh ? bitrates.ssHigh : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSendSupportEnabled()\n                ? mid === this._getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? ssHdBitrate : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    // If media is suspended on the jvb peerconnection, make sure that media stays disabled. The default 'active' state\n    // for the encodings after the source is added to the peerconnection is 'true', so it needs to be explicitly\n    // disabled after the source is added.\n    if (!this.isP2P && !(this.videoTransferActive && this.audioTransferActive)) {\n        return this.tpcUtils.setMediaTransferActive(false);\n    }\n\n    if (localVideoTrack) {\n        return this.setSenderVideoConstraints(\n            this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n            localVideoTrack);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalVideoTracks()) {\n        promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n    }\n\n    return Promise.allSettled(promises);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n    if (!localVideoTrack) {\n        throw new Error('Local video track is missing');\n    }\n    const sourceName = localVideoTrack.getSourceName();\n\n    // Ignore sender constraints if the media on the peerconnection is suspended (jvb conn when p2p is currently active)\n    // or if the video track is muted.\n    if ((!this.isP2P && !this.videoTransferActive) || localVideoTrack.isMuted()) {\n        this._senderMaxHeights.set(sourceName, frameHeight);\n\n        return Promise.resolve();\n    }\n\n    const configuredResolution = this.tpcUtils.getConfiguredEncodeResolution(localVideoTrack);\n\n    // Ignore sender constraints if the client is already sending video of the requested resolution. Note that for\n    // screensharing sources, the max resolution will be the height of the window being captured irrespective of the\n    // height being requested by the peer.\n    if ((localVideoTrack.getVideoType() === VideoType.CAMERA && configuredResolution === frameHeight)\n        || (localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && frameHeight > 0\n            && configuredResolution === localVideoTrack.getTrack()?.getSettings()?.height)) {\n        return Promise.resolve();\n    }\n\n    this._senderMaxHeights.set(sourceName, frameHeight);\n\n    return this._updateVideoSenderParameters(\n        () => this._updateVideoSenderEncodings(frameHeight, localVideoTrack));\n};\n\n/**\n * Returns a wrapped-up promise so that the setParameters() call on the RTCRtpSender for video sources are chained.\n * This is needed on Chrome as it resets the transaction id after executing setParameters() and can affect the next on\n * the fly updates if they are not chained.\n * https://chromium.googlesource.com/external/webrtc/+/master/pc/rtp_sender.cc#340\n * @param {Function} nextFunction - The function to be called when the last video sender update promise is settled.\n * @returns {Promise}\n */\nTraceablePeerConnection.prototype._updateVideoSenderParameters = function(nextFunction) {\n    const nextPromise = this._lastVideoSenderUpdatePromise\n        .finally(nextFunction);\n\n    this._lastVideoSenderUpdatePromise = nextPromise;\n\n    return nextPromise;\n};\n\n/**\n * Configures the video stream with resolution / degradation / maximum bitrates\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype._updateVideoSenderEncodings = function(frameHeight, localVideoTrack) {\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(localVideoTrack, parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils._getVideoStreamEncodings(localVideoTrack.getVideoType())\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        } else {\n            parameters.encodings[0].maxBitrate = undefined;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables outgoing video media transmission on this peer connection. When disabled the stream encoding's\n * active state is enabled or disabled to send or stop the media.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or <tt>false</tt> to disable. If the value\n * is not a boolean the call will have no effect.\n * @return {Promise} A promise that is resolved when the change is succesful, rejected otherwise.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (changed) {\n        return this.tpcUtils.setMediaTransferActive(active, MediaType.VIDEO);\n    }\n\n    return Promise.resolve();\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences && this.codecSettings) {\n        const { codecList, mediaType } = this.codecSettings;\n        const transceivers = this.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver?.track?.kind === mediaType);\n        let capabilities = RTCRtpReceiver.getCapabilities(mediaType)?.codecs;\n\n        if (transceivers.length && capabilities) {\n            // Rearrange the codec list as per the preference order.\n            for (const codec of codecList.slice().reverse()) {\n                // Move the desired codecs (all variations of it as well) to the beginning of the list\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${mediaType}/${codec}` ? -1 : 1;\n                });\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased() && mediaType === MediaType.VIDEO) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            // Apply codec preference to all the transceivers associated with the given media type.\n            for (const transceiver of transceivers) {\n                transceiver.setCodecPreferences(capabilities);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceName = track.getSourceName();\n        const sourceIndex = getSourceIndexFromSourceName(sourceName);\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? `${track.getType()}-${sourceIndex}`\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {number} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter, this.conference);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add forwarded sources change listener.\n        this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {Object} options.audioQuality - Quality settings to applied on the outbound audio stream.\n     * @param {boolean} options.capScreenshareBitrate if set to true, lower layers will be disabled for screenshare.\n     * @param {Array<CodecMimeType>} options.codecSettings - codec settings to be applied for video streams.\n     * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n     * @param {boolean} options.enableInsertableStreams set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.forceTurnRelay If set to true, the browser will generate only Relay ICE candidates.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n     * @param {Object} options.videoQuality - Quality settings to applied on the outbound video streams.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = clonedeep(RTCUtils.pcConstraints);\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        // TODO: remove this.\n        const supportsSdpSemantics = browser.isChromiumBased() && !options.usesUnifiedPlan;\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO)\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high' },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high' },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard' },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard' },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low' },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low' }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        if (!this._options.config.disableLocalStats) {\n            // Listen to local statistics events originating from the RTC module and update the _localStats field.\n            conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n        }\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart failed: reason=${error.reason},`\n                        + `message=${error.msg}`);\n\n                        // Initiate a client reload if Jicofo responds to the session-terminate with an error.\n                        this._conference.eventEmitter.emit(\n                            JitsiConferenceEvents.CONFERENCE_FAILED,\n                            JitsiConferenceErrors.ICE_FAILED);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            track.on(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                }\n            );\n            track.on(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                    this._handleAudioInputStateChange(audioLevel);\n                }\n            );\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","/* global TransformStream */\nimport { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\n// Flag to set on receivers to avoid setting up the lite mode\n// more than once.\nconst kJitsiLiteMode = Symbol('kJitsiLiteMode');\n\nconst logger = getLogger(__filename);\n\n/**\n * This module implements a discard-all insertable stream.  Use to reduce decoder CPU load for testing.\n */\nexport class LiteModeContext {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which lite mode is to be enabled.\n     */\n    constructor(conference) {\n        this.enabled = FeatureFlags.isRunInLiteModeEnabled();\n        if (!this.enabled) {\n            return;\n        }\n\n        conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupLiteModeForTrack(tpc, track));\n    }\n\n    /**\n     * Setup Lite Mode for a track.\n     *\n     * @private\n     */\n    _setupLiteModeForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (!receiver) {\n            logger.warn(`Could not set up lite mode for ${track}: receiver not found in: ${tpc}`);\n\n            return;\n        }\n\n        if (receiver[kJitsiLiteMode]) {\n            return;\n        }\n        receiver[kJitsiLiteMode] = true;\n\n        const receiverStreams = receiver.createEncodedStreams();\n\n        const transformStream = new TransformStream({\n            transform: () => {\n                // Don't call controller.enqueue(encodedFrame), and so drop everything\n            }\n        });\n\n        receiverStreams.readable.pipeThrough(transformStream).pipeTo(receiverStreams.writable);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT = 2160;\nconst LASTN_UNLIMITED = -1;\nconst ASSUMED_BANDWIDTH_BPS = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     * @param {Object} options - The instance options:\n     * - lastN: Number of videos to be requested from the bridge.\n     * - assumedBandwidthBps: Number of bps to be requested from the bridge.\n     */\n    constructor(options) {\n        const { lastN, assumedBandwidthBps } = options;\n\n        // The number of videos requested from the bridge.\n        this._lastN = lastN ?? LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge/peer.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        // The number representing the assumed count of bps the local client should receive from the bridge.\n        this._assumedBandwidthBps = assumedBandwidthBps ?? ASSUMED_BANDWIDTH_BPS;\n\n        this._receiverVideoConstraints = {\n            assumedBandwidthBps: this._assumedBandwidthBps,\n            constraints: {},\n            defaultConstraints: { 'maxHeight': this._maxFrameHeight },\n            lastN: this._lastN\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel or to the remote peer.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.assumedBandwidthBps = this._assumedBandwidthBps;\n        this._receiverVideoConstraints.lastN = this._lastN;\n        const individualConstraints = this._receiverVideoConstraints.constraints;\n\n        if (individualConstraints && Object.keys(individualConstraints).length) {\n            /* eslint-disable no-unused-vars */\n            for (const [ key, value ] of Object.entries(individualConstraints)) {\n                value.maxHeight = this._maxFrameHeight;\n            }\n        } else {\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n\n    /**\n     * Updates the assumed bandwidth bps of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} assumedBandwidthBps\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateAssumedBandwidthBps(assumedBandwidthBps) {\n        const changed = this._assumedBandwidthBps !== assumedBandwidthBps;\n\n        if (changed) {\n            this._assumedBandwidthBps = assumedBandwidthBps;\n            logger.debug(`Updating receive assumedBandwidthBps: ${assumedBandwidthBps}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n\n            if (videoConstraints.defaultConstraints?.maxHeight) {\n                this.updateReceiveResolution(videoConstraints.defaultConstraints.maxHeight);\n            }\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        /**\n         * The map that holds the max frame height requested per remote source for p2p connection.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        /**\n         * The number of bps requested from the bridge.\n         */\n        this._assumedBandwidthBps = ASSUMED_BANDWIDTH_BPS;\n\n        // The default receiver video constraints.\n        this._receiverVideoConstraints = new ReceiverVideoConstraints({\n            lastN: this._lastN,\n            assumedBandwidthBps: this._assumedBandwidthBps\n        });\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {JingleSessionPC} mediaSession - the media session.\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        const height = maxFrameHeight ?? MAX_HEIGHT;\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), height);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P) {\n            mediaSession.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(mediaSession));\n        } else {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Sets the assumed bandwidth bps the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} assumedBandwidthBps - the new value.\n     * @returns {void}\n     */\n    setAssumedBandwidthBps(assumedBandwidthBps) {\n        if (this._receiverVideoConstraints.updateAssumedBandwidthBps(assumedBandwidthBps)) {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._receiverVideoConstraints.updateLastN(value)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P) {\n                session.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(session, maxFrameHeight));\n            } else if (this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!constraints) {\n            return;\n        }\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n\n        if (isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._assumedBandwidthBps = constraints.assumedBandwidthBps ?? this._assumedBandwidthBps;\n            this._lastN = constraints.lastN ?? this._lastN;\n\n            // Send the contraints on the bridge channel.\n            this._rtc.setReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession || !constraints.constraints) {\n                return;\n            }\n\n            const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                .map(constraint => {\n                    constraint[1] = constraint[1].maxHeight;\n\n                    return constraint;\n                });\n\n            this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n            // Send the receiver constraints to the peer through a \"content-modify\" message.\n            p2pSession.setReceiverVideoConstraint(this._sourceReceiverConstraints);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        for (const track of this._rtc.getLocalVideoTracks()) {\n            const sourceName = track.getSourceName();\n\n            sourceName && this._propagateSendMaxFrameHeight(sourceName);\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n            (session, sourceConstraints) => {\n                session === this._conference.getActiveMediaSession()\n                    && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        const { maxHeight, sourceName } = videoConstraints;\n        const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n        for (const track of localVideoTracks) {\n            // Propagate the sender constraint only if it has changed.\n            if (track.getSourceName() === sourceName\n                && this._sourceSenderConstraints.get(sourceName) !== maxHeight) {\n                this._sourceSenderConstraints.set(\n                    sourceName,\n                    maxHeight === -1\n                        ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                        : maxHeight);\n                logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                this._propagateSendMaxFrameHeight(sourceName);\n            }\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? this._sourceSenderConstraints.get(sourceName)\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n        const promises = [];\n\n        for (const sourceName of this._sourceSenderConstraints.keys()) {\n            promises.push(this._propagateSendMaxFrameHeight(sourceName));\n        }\n\n        return Promise.allSettled(promises);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid() {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status) {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid) {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid) {\n        let s;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid) {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\n\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face-landmarks';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                (participant, { type, faceLandmarks }) => {\n                    if (type === FACE_LANDMARK_MESSAGE_TYPE) {\n                        this._onFaceLandmarkAdd(participant.getId(), faceLandmarks);\n                    }\n                });\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data) {\n            savedUser.addFaceLandmarks(data);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                if (Array.isArray(newStats[userId].faceLandmarks)) {\n                    speakerStatsToUpdate.setFaceLandmarks(newStats[userId].faceLandmarks);\n                }\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","/* global config */\n\nimport { safeJsonParse } from '@jitsi/js-utils/json';\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = safeJsonParse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = safeJsonParse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        // Add handlers for 'audiomuted', 'videomuted' and 'videoType' fields in presence in order to support interop\n        // with very old versions of mobile clients and jigasi that do not support source-name signaling.\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        // Add handlers for presence in the new format.\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = safeJsonParse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                let sourceChanged = false;\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    sourceChanged = true;\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    sourceChanged = true;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n\n                if (sourceChanged && FeatureFlags.isSsrcRewritingSupported()) {\n                    this.eventEmitter.emit(\n                        SignalingEvents.SOURCE_UPDATED,\n                        sourceName,\n                        mucNick,\n                        newMutedState,\n                        newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            for (const [ key, value ] of this.ssrcOwners.entries()) {\n                if (value === endpointId) {\n                    delete this._sourceNames[key];\n                }\n            }\n        };\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Logs a debug or error message to console depending on whether SSRC rewriting is enabled or not.\n     * Owner changes are permitted only when SSRC rewriting is enabled.\n     *\n     * @param {string} message - The message to be logged.\n     * @returns {void}\n     */\n    _logOwnerChangedMessage(message) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(message);\n        } else {\n            logger.error(message);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n        if (!lastPresence) {\n            logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n            return;\n        }\n        if (!this._doesEndpointSendNewSourceInfo(owner)) {\n            return legacyGetPeerMediaInfo();\n        }\n\n        if (sourceName) {\n            return this.getPeerSourceInfo(owner, sourceName);\n        }\n\n        const mediaInfo = {\n            muted: true\n        };\n\n        if (mediaType === MediaType.VIDEO) {\n            mediaInfo.videoType = undefined;\n            const codecListNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecList');\n            const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n            if (codecListNode.length) {\n                mediaInfo.codecList = codecListNode[0].value?.split(',') ?? [];\n            } else if (codecTypeNode.length > 0) {\n                mediaInfo.codecType = codecTypeNode[0].value;\n            }\n        }\n\n        return mediaInfo;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaType = getMediaTypeFromSourceName(sourceName);\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            this._sourceInfoHandler\n                && oldChatRoom.removePresenceListener(SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n            this._memberLeftHandler\n                && oldChatRoom.removeEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n        }\n        if (room) {\n            this._bindChatRoomEventHandlers(room);\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            this._logOwnerChangedMessage(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n        logger.debug(`Mute state of ${sourceName} changed to muted=${muted}`);\n\n        if (this.chatRoom) {\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            this._logOwnerChangedMessage(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling from './modules/connectivity/IceFailedHandling';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { LiteModeContext } from './modules/litemode/LiteModeContext';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { SignalingEvents } from './service/RTC/SignalingEvents';\nimport { getMediaTypeFromSourceName, getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Checks if a given string is a valid video codec mime type.\n *\n * @param {string} codec the codec string that needs to be validated.\n * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n * @private\n */\nfunction _getCodecMimeType(codec) {\n    if (typeof codec === 'string') {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return null;\n}\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n\n    /**\n     * List of all the participants in the conference.\n     * @type {Map<string, JitsiParticipant>};\n     */\n    this.participants = new Map();\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    if (FeatureFlags.isRunInLiteModeEnabled()) {\n        logger.info('Lite mode enabled');\n\n        this._liteModeContext = new LiteModeContext(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n    this._firefoxP2pEnabled = browser.isVersionGreaterThan(109)\n        && (this.options.config.testing?.enableFirefoxP2p ?? true);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    const codecSettings = {\n        jvb: {\n            preferenceOrder: browser.isMobileDevice() && config.videoQuality?.mobileCodecPreferenceOrder\n                ? config.videoQuality.mobileCodecPreferenceOrder\n                : config.videoQuality?.codecPreferenceOrder,\n            disabledCodec: _getCodecMimeType(config.videoQuality?.disabledCodec),\n            preferredCodec: _getCodecMimeType(config.videoQuality?.preferredCodec)\n        },\n        p2p: {\n            preferenceOrder: browser.isMobileDevice() && config.p2p?.mobileCodecPreferenceOrder\n                ? config.p2p.mobileCodecPreferenceOrder\n                : config.p2p?.codecPreferenceOrder,\n            disabledCodec: _getCodecMimeType(config.p2p?.disabledCodec),\n            preferredCodec: _getCodecMimeType(config.p2p?.preferredCodec)\n        }\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n    this._signalingLayer.on(\n        SignalingEvents.SOURCE_UPDATED,\n        (sourceName, endpointId, muted, videoType) => {\n            const participant = this.participants.get(endpointId);\n            const mediaType = getMediaTypeFromSourceName(sourceName);\n\n            if (participant) {\n                participant._setSources(mediaType, muted, sourceName, videoType);\n                this.eventEmitter.emit(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, participant);\n            }\n        });\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        this._registerRtcListeners(this.rtc);\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection && !config.disableAudioLevels && LocalStatsCollector.isLocalStatsSupported()) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec preference to presence.\n    this.setLocalParticipantProperty('codecList', this.codecSelection.getCodecPreferenceList('jvb'));\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    localtrack && this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        if (name) {\n            this.room.addOrReplaceInPresence(nickKey, {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: name\n            }) && this.room.sendPresence();\n        } else if (this.room.getFromPresence(nickKey)) {\n            this.room.removeFromPresence(nickKey);\n            this.room.sendPresence();\n        }\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        throw new Error('addTrack - a track is required');\n    }\n\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation.\n    // In React Native we mute the camera by setting track.enabled but that doesn't\n    // work for screen-share tracks, so do the remove-as-mute for those.\n    const doesVideoMuteByStreamRemove\n        = browser.isReactNative() ? track.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n    if (track.isVideoTrack() && !doesVideoMuteByStreamRemove) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!(this.isStartAudioMuted() || this.startMutedPolicy.audio)\n                    || browser.isWebKitBased()\n                    || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted() && !this.startMutedPolicy.video) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSendSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (newTrack) {\n        const sourceName = oldTrack\n            ? oldTrack.getSourceName()\n            : getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            if (oldTrackBelongsToConference && !oldTrack.isMuted() && !newTrack) {\n                oldTrack._sendMuteStatus(true);\n            }\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (!newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Suspend media on the inactive media session since it gets automatically enabled for a newly added source.\n    if (this.isP2PActive()) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n        presenceChanged && logger.debug(`Mute state of ${localTrack} changed to muted=${isMuted}`);\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to adjust video transfer status (${isVideoActive})`, error);\n            });\n    }\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Array.from(this.participants.values());\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants.get(id);\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    // Set remote tracks on the participant if source signaling was received before presence.\n    const remoteTracks = this.isP2PActive()\n        ? this.p2pJingleSession?.peerconnection.getRemoteTracks(id) ?? []\n        : this.jvbJingleSession?.peerconnection.getRemoteTracks(id) ?? [];\n\n    for (const track of remoteTracks) {\n        participant._tracks.push(track);\n    }\n\n    this.participants.set(id, participant);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Update the SSRC owners list.\n        session._signalingLayer.updateSsrcOwnersOnLeave(id);\n        if (!FeatureFlags.isSsrcRewritingSupported()) {\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n    }\n\n    tracksToBeRemoved.forEach(track => {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            track.setSourceName(null);\n            track.setOwner(null);\n        } else {\n            // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n        }\n    });\n\n    const participant = this.participants.get(id);\n\n    if (participant) {\n        this.participants.delete(id);\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants.get(actorId);\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave().finally(() => this.xmpp.disconnect());\n\n        return;\n    }\n\n    const kickedParticipant = this.participants.get(kickedParticipantId);\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    // Add track to JitsiParticipant.\n    if (participant) {\n        participant._tracks.push(track);\n    } else {\n        logger.info(`Source signaling received before presence for ${id}`);\n    }\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan();\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || (browser.isFirefox() && !this._firefoxP2pEnabled)) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                codecSettings: {\n                    mediaType: MediaType.VIDEO,\n                    codecList: this.codecSelection.getCodecPreferenceList('jvb')\n                },\n                enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    const ignoreDomain = this.connection?.options?.bridgeChannel?.ignoreDomain;\n    const preferSctp = this.connection?.options?.bridgeChannel?.preferSctp ?? false;\n    const sctpOffered = $(offerIq).find('>content[name=\"data\"]')\n        .first().length === 1;\n    let wsUrl = null;\n\n    logger.info(`SCTP: offered=${sctpOffered}, prefered=${preferSctp}`);\n\n    if (!(sctpOffered && preferSctp)) {\n        $(offerIq).find('>content>transport>web-socket')\n            .toArray()\n            .map(e => e.getAttribute('url'))\n            .forEach(url => {\n                if (!wsUrl && (!ignoreDomain || ignoreDomain !== new URL(url).hostname)) {\n                    wsUrl = url;\n                    logger.info(`Using colibri-ws url ${url}`);\n                } else if (!wsUrl) {\n                    logger.info(`Ignoring colibri-ws url with domain ${ignoreDomain}`);\n                }\n            });\n\n        if (!wsUrl) {\n            const firstWsUrl = $(offerIq).find('>content>transport>web-socket')\n                .first();\n\n            if (firstWsUrl.length === 1) {\n                wsUrl = firstWsUrl[0].getAttribute('url');\n                logger.info(`Falling back to ${wsUrl}`);\n            }\n        }\n    }\n\n    if (wsUrl && !(sctpOffered && preferSctp)) {\n        // If the offer contains a websocket and we don't prefer SCTP use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else if (sctpOffered) {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else {\n        logger.warn('Neither SCTP nor a websocket is available. Will not initialize bridge channel.');\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    return this.room?.moderator?.isSipGatewayEnabled() ?? false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n\n    // Do not apply the startMutedPolicy locally on the moderator, the moderator should join with available local\n    // sources and the policy needs to be applied only on users that join the call after.\n    // this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                codecList: this.codecSelection.getCodecPreferenceList('p2p')\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        // There will be orphan (with no owner) tracks when ssrc-rewriting is enabled and all of them need to be addded\n        // back to the conference.\n        if (FeatureFlags.isSsrcRewritingSupported() || this.participants.has(track.ownerEndpointId)) {\n            logger.info(`Adding remote ${logName} track: ${track}`);\n            this.onRemoteTrackAdded(track);\n        }\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true)\n        .then(() => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        })\n        .catch(error => {\n            logger.error('Failed to resume media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession.setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to sync up P2P video transfer status (${isVideoActive}), ${error}`);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                codecList: this.codecSelection.getCodecPreferenceList('p2p')\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false)\n        .then(() => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        })\n        .catch(error => {\n            logger.error('Failed to suspend media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || (browser.isFirefox() && !this._firefoxP2pEnabled)\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        const muted = track.isMuted();\n\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, muted);\n        muteStatusChanged && logger.debug(`Updating mute state of ${track} in presence to muted=${muted}`);\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n            videoTypeChanged && logger.debug(`Updating videoType in presence to ${track.getVideoType()}`);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceLandmarksEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the following format. The message updates\n * the fields that are present and leaves the rest unchanged on the bridge. Therefore, any field that is not applicable\n * anymore should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedSources': ['A', 'B', 'C'],\n *      'onStageSources': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n * Where A, B and C are source-names of the remote tracks that are being requested from the bridge.\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the assumed bandwidth bps for the video that is requested from the bridge.\n *\n * @param {Number} assumedBandwidthBps - The bandwidth value expressed in bits per second.\n */\nJitsiConference.prototype.setAssumedBandwidthBps = function(assumedBandwidthBps) {\n    this.receiveVideoController.setAssumedBandwidthBps(assumedBandwidthBps);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Starts the participant verification process.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @returns {void}\n */\nJitsiConference.prototype.startVerification = function(participantId) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.startVerification(participant);\n};\n\n/**\n * Marks the given participant as verified. After this is done, MAC verification will\n * be performed and an event will be emitted with the result.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @param {boolean} isVerified - whether the verification was succesfull.\n * @returns {void}\n */\nJitsiConference.prototype.markParticipantVerified = function(participantId, isVerified) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.markParticipantVerified(participant, isVerified);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        localTracks.forEach((localTrack, localTrackIndex) => {\n            const localSourceNameTrack = getSourceNameForJitsiTrack('peer', localTrack.getType(), localTrackIndex);\n\n            localTrack.setSourceName(localSourceNameTrack);\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        runInLiteMode?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    init(options: IJitsiMeetJSOptions = {}) {\n        // @ts-ignore\n        logger.info(`This appears to be ${browser.getName()}, ver: ${browser.getVersion()}`);\n\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n        const flags = options.flags || {};\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (this.isCollectingLocalStats()) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","ljm","require","window","JitsiMeetJS","Object","assign","_mergeNamespaceAndModule","constructor","userId","displayName","isLocalStats","this","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceLandmarks","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","silence","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFaceLandmarks","setFaceLandmarks","faceLandmarks","addFaceLandmarks","push","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","replace","EventEmitterForwarder","src","dest","addListener","emit","Error","prototype","forward","args","srcEvent","Function","bind","apply","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","forEach","handler","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","error","errHandler","callUnhandledRejectionHandler","randomInt","min","max","Math","floor","random","randomElement","arr","length","RandomUtil","randomHexDigit","randomHexString","len","ret","randomAlphanumStr","result","i","currentExecutingScript","ScriptUtil","loadScript","async","prepend","relativeURL","loadCallback","errorCallback","d","document","tagName","script","createElement","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","substring","lastIndexOf","onload","parentNode","insertBefore","appendChild","names","generateUsername","internals","parse","text","firstOptions","reviver","undefined","options","obj","JSON","protoAction","match","scan","next","nodes","node","hasOwnProperty","call","SyntaxError","__proto__","key","value","safeParse","ignoreError","Logger","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","keys","levels","logLevel","_log","arguments","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","formatLogMessage","msg","arg","ERROR","timestamp","prevMessage","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","log","logger","level","Array","slice","callerInfo","disableCallerInfo","methodName","fileLocation","line","column","stack","split","m","substr","getCallerInfo","transports","concat","t","l","logPrefixes","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","grammar","v","name","reg","o","format","s","u","e","p","z","r","c","b","a","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","maxMessageSize","params","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","parser","writer","write","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","rawName","attachProperties","validLine","test","sdp","session","media","filter","type","rtp","fmtp","j","paramReducer","acc","expr","reduce","toString","map","candidates","parts","component","ip","port","item","stream","scid","paused","formatRegExp","formatStr","x","makeLine","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","sdk_1","watchrtcConfig","services","initSDK","setConfig","_rtcTags","rating","comment","setUserRating","addKeys","disableDataCollection","enableDataCollection","addEvent","mapStream","mapTrack","connect","disconnect","listener","registerOnStatsListener","nailUpCallEnd","persistentEnd","roomId","peerId","persistentStart","registerStateListener","default","init","addTags","addStatsListener","addStateListener","__assign","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","rejected","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","op","TypeError","pop","__spreadArray","to","from","pack","ar","defineProperty","trace","getStatsInterval","hardwareInfo","currentAudioOutputId","reconnectTimerId","getStatsCallback","watchrtcsocket_1","watchrtchttp_1","utils_1","version_1","isFirefox","mozRTCPeerConnection","openChannels","RTCPeerConnection","navigator","webkitGetUserMedia","peerconnectioncounter","connectionData","watchrtcIdentifiers","rtcRoomId","rtcPeerId","projectId","http","socket","lastConnectionOpen","tryingToConnectSocket","authFailed","isManualConnect","isManualDisconnect","stateListener","debugLog","debug","mappedTrack","maybeOpenWebsocketConnection","_a","_b","_c","forceRecreate","_d","reconnecting","_e","pcId","connection","readyState","WebSocket","OPEN","isRoomIdOrPeerIdChanged","close","connectionCount","countOfValidConnections","canConnect","validateConfig","k","useToken","rtcToken","wsConnectionData","getConnectionData","rtcApiKey","proxyUrl","startStatsCollection","wsOpeningTimestamp","url","onData","data","_i","entries","allowBrowserLogCollection","Boolean","collectConsoleLogEnabled","override","collectConsoleLogLevel","setConsoleLevel","restoreOriginalConsoleMethods","buffer","logPrefix","connectionId","sdkVersion","watchRTCSessionId","interval","collectionInterval","oldInterval","resetConnectionState","onError","onOpen","connectionStatus","clearInterval","delta","onClose","closeEvent","code","wasClean","setInterval","stats","pcInfo","peer","streams","connections","pc","signalingState","getStats","__reject","id_1","pc_1","prev_1","prev","res","logGetStats","report","map2obj","base","applyPatchForRTT","deltaCompression","exposeApplicationStatsForPC","watchrtc","prefixesToWrap","watchRTCInitialized","warn","generateID","getHardwareStartTime","getHardwareInfo","hwInfo","getHardwareTime","catch","err","message","urlParams","URLSearchParams","search","has","get","socketService","httpService","wsUrl","prefix","origPeerConnection","peerconnection","constraints","__rtcStatsId","validConnection","nullConfig","iceServers","server","credential","browserType","addEventListener","candidate","getTracks","kind","track","muted","onended","onmute","onunmute","iceConnectionState","iceGatheringState","connectionState","channel","HTMLMediaElement","nativeMethod_1","setSinkId","selectedDeviceId","mediaDevices","enumerateDevices","devices","currentDevice","deviceId","RTCRtpTransceiver","origRTCRtpTransceiver","nativeMethod_2","setCodecPreferences","__pcId","RTCRtpSender","nativeMethod_3","origRTCRtpSender","setParameters","nativeMethod_4","replaceTrack","method","nativeMethod","_this_1","trackOrKind","transceiver","sender","streamInfo","transceivers","getTransceivers","rtcStatsId","description","_this","needToHandleSDPInSuccessCallback","parameterless","localDescription","generateCertificate","origGetUserMedia","cb","eb","dumpStream","errorData","httpReportError","getUserMedia","origGetUserMedia_1","getDisplayMedia","origGetDisplayMedia_1","newWatchrtcConfig","ratingComment","validateRating","opened","promiseFuncs","httpTrace","wasConnected","validateEvent","httpConnectionData","apiKey","getStreamsFromStats","getTransportFromStats","reports","reportKeys","keyPairs","reportKey","nominated","localCandidateId_1","localCandidateId","remoteCandidateId_1","remoteCandidateId","localCandidateKey","remoteCandidateKey","localCandidate","remoteCandidate","candidateType","relayProtocol","previous","current","currentReportsKeys","streamKey","currentReport","previousReport","currentRemoteReport","remoteId","previousRemoteReport","deltaSeconds","frameWidth","frameHeight","framerate","framesPerSecond","jitter","mappedName","trackIdentifier","bytesReceived","packetsReceived","packetsLost","packetsLoss","bitrate","roundTripTime","bytesSent","packetsSent","fractionLost","mediaSourceKey","mediaSourceId","outboundTrackIdentifier","mangleChromeStats","GPU","stats_1","getDebugStatus","object","logArgs","oldStats","newStats","getTime","response","standardReport","standardStats","stat","tracks","enabled","proxyURL","localUrl","staging1Url","staging2Url","productionUrl","production1Url","includes","splitted","changed","old","new","parameters","number_format","num","round","toFixed","loadBenchmarks","gpuInfo","memory","fileName","shift","getGPUTier","cores_count","hardwareConcurrency","performance","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","patchConsoleConfig","originalMethodPrefix","methodsToPatch","patchConsoleMethod","originalMethod","currentMethodIndex","configMethodIndex","stringifyArgs","currentIndex","previousIndex","mappedTradk","replacerFunc","visited","WeakSet","_key","add","hasOldStats","statsHaveRTTMeasurements","roundTripTimeMeasurements","NaN","WatchRTCHttp","_instance","fetch","mode","cache","credentials","headers","LZString","WatchRTCSocket","sendInterval","dataCollection","sendPromises","lines","compressedMessage","compressToEncodedURIComponent","logFunc","_original_log","send","onopen","onclose","onmessage","toggleDebug","setPrototypeOf","throw","return","toLowerCase","userAgent","platform","maxTouchPoints","MSStream","isIpad","isMobile","isSafari12","charCodeAt","h","create","mobileTiers","desktopTiers","glContext","w","failIfMajorPerformanceCaveat","benchmarksURL","A","S","C","E","L","M","B","O","T","U","I","D","R","G","N","K","W","tier","screenSize","screen","json","renderer","sort","MAX_VALUE","devicePixelRatio","width","height","abs","device","fps","gpu","alpha","antialias","depth","powerPreference","stencil","getContext","getExtension","getParameter","UNMASKED_RENDERER_WEBGL","createShader","createProgram","shaderSource","compileShader","attachShader","linkProgram","detachShader","deleteShader","useProgram","createBuffer","bindBuffer","bufferData","Float32Array","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","clearColor","clear","viewport","drawArrays","Uint8Array","readPixels","deleteProgram","deleteBuffer","all","webpackContext","req","webpackContextResolve","__webpack_require__","charAt","fromCharCode","compressToBase64","_compress","decompressFromBase64","_decompress","compressToUTF16","decompressFromUTF16","compressToUint8Array","compress","decompressFromUint8Array","decompress","decompressFromEncodedURIComponent","pow","val","position","__webpack_module_cache__","moduleId","__webpack_modules__","prop","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","end","output","enumerable","toStringTag","__esModule","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","satisfies","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","versionName","vendor","model","scriptReadyRegex","fullPageUrl","href","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","matches","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","ReflectOwnKeys","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","once","emitter","errorListener","removeListener","resolver","eventTargetAgnosticAddListener","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","events","existing","warning","newListener","unshift","warned","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","prependOnceListener","list","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","flat","nodeType","nonce","noModule","getAttribute","setAttribute","head","removeChild","fn","jquery","toArray","pushStack","merge","prevObject","each","first","eq","last","even","grep","odd","extend","isPlainObject","expando","noop","isEmptyObject","globalEval","makeArray","inArray","guid","support","ue","q","H","F","$","V","X","Q","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","Y","J","Z","ee","te","ne","re","oe","ae","xe","disabled","nodeName","dir","childNodes","se","ownerDocument","exec","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","sourceIndex","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","attachEvent","attributes","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","attr","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","textContent","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","hash","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","empty","parent","header","input","button","lt","gt","nth","radio","checkbox","file","password","image","submit","reset","me","we","Ce","Te","Ee","filters","tokenize","compile","selector","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","ready","children","contents","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","promise","fail","Callbacks","stopOnFalse","remove","disable","lock","locked","fireWith","fire","Deferred","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","toUpperCase","uid","access","hasData","removeData","_data","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","style","display","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","trigger","Event","global","handle","triggered","dispatch","bindType","origType","delegateCount","setup","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","elem","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","click","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","clone","_evalUrl","Oe","cleanData","detach","append","before","after","replaceWith","replaceChild","appendTo","prependTo","insertAfter","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","minWidth","maxWidth","$e","cssText","marginLeft","right","offsetWidth","parseFloat","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","setProperty","isFinite","getBoundingClientRect","left","margin","padding","border","expand","delay","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","DOMParser","parseFromString","ft","dt","pt","ht","vt","param","encodeURIComponent","serialize","serializeArray","wrapAll","firstElementChild","wrapInner","wrap","hidden","visible","createHTMLDocument","implementation","offset","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","delegate","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","trim","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","size","overArg","func","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","remainingWait","debounced","isInvoking","leadingEdge","cancel","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","arrayTag","asyncTag","errorTag","nullTag","proxyTag","undefinedTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","foundation","protocol","priority","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","writeIceParameters","iceLite","parseRtpParameters","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","global$1","WebSocketImplementation","getWebSocketImplementation","DOMParserImplementation","getDOMParserImplementation","getDummyXMLDOMDocument","createDocument","documentMode","doc","docStrings","ActiveXObject","_getIEXmlDom","safe_add$1","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","SASLMechanism","isClientFirst","mechname","onStart","_connection","onChallenge","challenge","clientChallenge","onFailure","onSuccess","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","unescape","cookie","core_sha1","olde","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","keystr$1","atobLookup","chr","keystr","btoaLookup","abab","atob","accumulatedBits","btoa","groupsOfSix","$build","attrs","Strophe","Builder","$msg","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","validTag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ATTACHFAIL","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","xmlGenerator","xmlElement","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","createHtml","cssAttrs","cssName","cssValue","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","_console","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","cnode","impNode","xmlGen","importNode","newElem","fragment","xhtml","ns","matchBare","matchBareFromJid","user","Handler","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Connection","service","setProtocol","features","_sasl_data","do_bind","do_session","mechanisms","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","iqFallbackHandler","iq","worker","_proto","WorkerWebsocket","Websocket","Bosh","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","callback","pass","hold","route","authcid","disconnection_timeout","authzid","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","_queueData","_send","sendPresence","errback","timeout","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","Mechanism","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","_dataRecv","raw","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_connect_cb","_callback","bodyWrap","hasFeatures","getElementsByTagNameNS","_no_auth_received","matched","authenticate","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","request_auth_exchange","_onLegacyAuthIQResult","_auth2_cb","serverSignature","attribMatch","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","newList","super","auth_str","salt","iter","Hi","U_old","responseText","authMessage","cnonce","clientKey","serverKey","clientSignature","test_cnonce","core","Request","sends","xmlData","origFunc","date","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","querySelector","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","reqIs0","reqIs1","valid_request","too_many_retries","_removeRequest","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","backoff","new_service","host","pathname","_buildStream","_checkStreamError","connectstatus","errorString","_closeSocket","_onOpen","_onError","_onClose","_onInitialMessage","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_replaceMessageHandler","string","_streamWrap","_onMessage","CLOSED","closeString","rawStanza","startString","lmap","SharedWorker","postMessage","_messageHandler","ev","_onWorkerMessage","_attachCallback","method_name","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","addFeature","var_name","removeFeature","addItem","call_back","success","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","idx","DNS","URL","rnds","_sha","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","DATA_CHANNEL_CLOSED","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","FORWARDED_SOURCES_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","VideoType","IDENTITY_UPDATED","LOCAL_JID","XMPPEvents","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","DISPLAY_NAME_REQUIRED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","REDIRECTED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","E2EE_VERIFICATION_AVAILABLE","E2EE_VERIFICATION_READY","E2EE_VERIFICATION_COMPLETED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","PARTICIPANT_SOURCE_UPDATED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","METADATA_UPDATED","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","TRACK_OWNER_CHANGED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","gum","constraintName","constraint","video","failedConstraintName","mandatory","minHeight","getResolutionFromFailedConstraint","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","BrowserDetection","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","_storage","keyName","keyValue","ignore","storageCopy","jitsiLocalStorage","localStorage","_localStorageDisabled","isLocalStorageDisabled","setLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isAndroidBrowser","isIosBrowser","isMobileDevice","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsTrackBasedStats","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","supportsAudioRed","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","ua","analytics","watchRTCEnabled","isWatchRTCEnabled","disableThirdPartyRequests","isAnalyticsEnabled","rtcstatsEnabled","isRtcstatsEnabled","watchRTCConfigParams","watchRTC","userName","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","reportsQueue","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","devicesData","_reportEvent","conferenceID","overall","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","LocalStatsCollector","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","isLocalStatsSupported","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","disconnectAudioContext","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","task","duration","observer","observe","buffered","startTime","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","MediaType","_runInLiteMode","runInLiteMode","_ssrcRewriting","ssrcRewritingEnabled","_joinAsVisitor","enableJoinAsVisitor","isMultiStreamSendSupportEnabled","isRunInLiteModeEnabled","isSsrcRewritingSupported","isJoinAsVisitorSupported","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","download","upload","resolution","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","getTrackBySSRC","audioCodec","videoCodec","isAudioTrack","participantId","getParticipantId","FeatureFlags","userCodecs","audio","isVideoTrack","userResolutions","doesTrueSimulcast","localSsrcs","getLocalVideoSSRCs","localSsrc","ssrcResolution","userFramerates","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","_calculateFps","frameRate","byteSentStats","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localip","conferenceStatsTransport","p2p","localCandidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","isStreamActive","active","codecId","codecShortType","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","WatchRTC","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","startCallStats","endsWith","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","jingleSession","rtc","closeBridgeChannel","participant","getParticipantById","setFeatures","offerIq","_setBridgeChannel","actor","AUDIO","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","_onConferenceRestarted","_onIceConnectionFailed","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","nick","isGuest","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","getMediaSessions","processSourceMap","videoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","setupStatisticsListeners","setAudioLevel","startSilent","getLocalSSRC","onByteSentStatsReceived","JitsiParticipant","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","_sources","_isMediaTypeMuted","_setSources","sourceName","sourceByMediaType","sourceInfo","getBotType","_botType","getConference","getConnectionJid","_connectionJid","getFeatures","getId","getProperty","getRole","getSources","getStatsID","getTracksByMediaType","hasFeature","feature","isAudioMuted","isHidden","isHiddenFromRecorder","isVideoMuted","setBotType","newBotType","setConnectionJid","newJid","newFeatures","setIsReplaced","newIsReplaced","setIsReplacing","newIsReplacing","oldValue","setRole","newRole","supportsDTMF","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","safeJsonParse","Bourne","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","workerUrl","workerBlob","Blob","createObjectURL","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","E2EEErrors","emojiMapping","sasGenerators","decimal","sasBytes","emoji","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","OLM_KEY_VERIFICATION_MAC_INFO","OLM_KEY_VERIFICATION_MAC_KEY_IDS","kOlmData","OlmAdapterEvents","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_SAS_AVAILABLE","PARTICIPANT_SAS_READY","PARTICIPANT_KEY_UPDATED","PARTICIPANT_VERIFICATION_COMPLETED","OlmAdapter","_conf","_init","_mediaKey","_mediaKeyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","myId","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentMediaKey","clearParticipantSession","free","clearAllParticipantsSessions","markParticipantVerified","isVerified","sasVerification","E2EE_SAS_CHANNEL_VERIFICATION_FAILED","E2EE_SAS_INVALID_SAS_VERIFICATION","sas","sasMacSent","is_their_key_set","_sendSasMac","_olmAccount","Account","_idKeys","_safeJsonParse","identity_keys","get_library_version","_onIdKeysReady","startVerification","SAS","transactionId","startContent","isInitiator","startMessage","idKeys","keyType","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","lastKey","isEqual","pubKey","get_pubkey","commitment","_computeCommitment","acceptMessage","sasCommitment","keyMessage","keySent","theirKey","E2EE_SAS_COMMITMENT_MISMATCHED","set_their_key","myInfo","theirInfo","generatedSas","generateSas","generate_bytes","mac","baseInfo","calculate_mac","E2EE_SAS_KEYS_MAC_MISMATCH","ed25519","E2EE_SAS_MISSING_KEY","computedMac","E2EE_SAS_MAC_MISMATCH","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","curve25519","mark_keys_as_published","keyList","deviceKeyId","macMessage","olmUtil","Utility","sha256","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantSasReady","_onParticipantSasAvailable","_onParticipantVerificationCompleted","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","parseDiscoInfo","identities","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","sha1","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","retry","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","MOVE_TO_ROOM","REMOVE","RENAME","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","renameBreakoutRoom","sendParticipantToRoom","participantJid","isFeatureSupported","breakoutRoomsFeatures","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","filteredPayload","_filterUpdatePayload","hiddenDomain","filteredRooms","participants","filteredParticipants","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","Moderator","Settings","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","targetJid","hosts","targetUrl","conferenceRequestUrl","focusUserJids","focusUserJid","isFocusJid","focusJid","isExternalAuthEnabled","isSipGatewayEnabled","_createConferenceRequest","conferenceRequest","machineUid","_createConferenceIq","_parseConferenceIq","resultIq","vnode","authentication","externalAuth","sendConferenceRequest","_handleIqSuccess","_handleIqError","ok","resultJson","_handleSuccess","statusText","sessionError","notAuthorized","authenticationEnabled","iAmRecorder","iAmSipGateway","waitMs","reservationErr","errorCode","errorTextNode","errorMsg","invalidSession","anonymousdomain","errorIq","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","extractIdentityInformation","hiddenFromRecorderFeatureEnabled","userInfo","groupInfo","ChatRoom","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","fromHiddenDomain","presence","xEl","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","nickEl","onPresenceError","errorDescriptionNode","lobbyRoomNode","waitingForHost","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","onVisitorIQ","visitors","getMediaPresenceInfo","endpointId","mutedNode","codecTypeNode","videoTypeNode","codecType","getMemberRole","peerJid","getLastPresence","mucNick","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","endConferenceComponentAddress","MucConnectionPlugin","onVisitors","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","AV1","H264","OPUS","ULPFEC","VP8","VP9","MediaDirection","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingResolution","desktopSharingSources","streamId","streamType","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxHeight","setContentHint","sourceId","sourceType","surfaceSwitching","cursor","errorDetails","errorName","errorStack","desktopTrack","getVideoTracks","contentHint","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","highProfileCodecs","removePts","CodecMimeType","rtxApts","rtxPts","keepPts","INACTIVE","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","onlyOnce","callFn","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","RECVONLY","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","initialLastN","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","setupLine","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","jingle2media","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","_defer","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","defer","DLL","tail","removeLink","newNode","setInitial","cur","testFn","curr","dll","handlePromise","invokeCallback","isAsync","asyncFn","concurrency","wrapAsync","numRunning","workersList","drain","saturated","unsaturated","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","started","_createTaskItem","_tasks","_createCB","tasks","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","pushAsync","kill","unshiftAsync","running","defineProperties","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ACTIVE","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","JingleSessionPC","jingleContents","videoContents","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_sourceReceiverConstraints","_localSendReceiveVideoActive","_remoteSendReceiveVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","disableRtx","gatherStats","maxstats","capScreenshareBitrate","codecSettings","enableInsertableStreams","videoQuality","forceTurnRelay","disableSimulcast","preferredCodec","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","_renegotiate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","videoTracks","addTracks","addTrack","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","setRemoteDescription","newLocalSdp","sendContentModify","notifyMySSRCUpdate","jingleOfferAnswerIq","audioTracks","bridgeSessionId","setVideoCodecs","codecList","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","newFingerprint","channelLastN","accept","responder","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","maxFrameHeight","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","getRemoteTracks","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","newSsrcs","mappedSources","lookupSsrc","addRemoteSsrc","remoteSources","setSourceName","setOwner","_setVideoType","peerMediaInfo","getPeerMediaInfo","_sourceMutedChanged","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","isAdd","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","removeSSRCOwners","optionalRemoteSdp","oldLocalSDP","createAnswer","answer","replaceTracks","recvOnlyTransceiver","currentDirection","setMediaTransferActive","tpcUtils","audioTransferActive","videoTransferActive","configureSenderVideoEncodings","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","removeTrackFromPc","isRemove","setP2pVideoTransferActive","videoActive","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","sourceMaxFrameHeights","parseSourceMaxFrameHeight","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","XMPP","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","errStatusCapture","createConnection","bosh","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","processBreakoutRoomsFeatures","rename","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFaceLandmarksEvent","faceExpression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","canceled","finally","authenticationError","connectionError","DESKTOP_VIDEO_CODEC_ORDER","MOBILE_P2P_VIDEO_CODEC_ORDER","MOBILE_VIDEO_CODEC_ORDER","CodecSelection","codecPreferenceOrder","connectionType","disabledCodec","preferenceOrder","supportedCodecs","_getSupportedVideoCodecs","selectedOrder","_selectPreferredCodec","supportedCodec","_maybeFilterJvbCodecs","mediaSession","currentCodecOrder","getConfiguredVideoCodecs","localPreferredCodecOrder","remoteParticipants","remoteCodecsPerParticipant","remote","selectedCodecOrder","localCodec","codecNotSupportedByRemote","remoteCodecs","participantCodec","every","getCodecPreferenceList","BridgeChannel","_channel","_connected","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","createBridgeChannelClosedEvent","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendReceiverVideoConstraintsMessage","sendSourceVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","isActive","forwardedSources","getParticipantCount","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","pos","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","getAudioTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","getReceivers","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","oldStream","methodObj","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","getMaxMessageSize","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","completed","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","oninactive","_attachTTFMTracker","container","_maybeFireTrackAttached","_onTrackAttach","_onTrackDetach","_setHandler","_unregisterHandlers","videoTrack","RTCUtils","getStreamId","getMSID","getTrackId","getTrack","getTrackLabel","getUsageLabel","getVideoType","isLocalAudioTrack","isWebRTCTrackMuted","newAudioLevel","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_UPDATED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getPeerSourceInfo","getSSRCOwner","getTrackSourceName","ssrcList","setTrackMuteStatus","setTrackVideoType","updateSsrcOwnersOnLeave","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","_transformMediaIdentifiers","mediaDirection","trackID","_updateSourcesToMsidMap","storedStreamId","generatedMsid","_hasHadVideoTrack","_hasHadAudioTrack","generatedStreamId","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","_usesUnifiedPlan","nameExists","trackIndexParts","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","isRestoringTimedout","isVideoTrackFrozen","INTERRUPTED","RESTORING","restoringTimer","rtcMutedTimestamp","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","_getVideoFrozenTimeout","isP2PActive","_onP2PStatus","figureOutStreamingStatus","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onForwardedSourcesChanged","onForwardedSourcesChanged","_onLastNValueChanged","clearRtcMutedTimestamp","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","newStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldStreamingStatus","streamingStatus","nowMs","startedMs","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","rTimer","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","ssHigh","videoBitrates","encodingBitrates","_getStreamEncodings","localTrack","_getVideoStreamEncodings","maxVideoBitrate","_updateSenderEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","videoStreamEncodings","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","lowFpsScreenshare","getConfiguredEncodeResolution","videoSender","hasIncorrectConfig","isNewLocalSource","stopped","transceiverMid","_localTrackTransceiverMids","setEncodings","_updateVideoSenderParameters","settledResult","updateEncodingsResolution","TraceablePeerConnection","_dtmfSender","_dtmfTonesQueue","remoteTracks","_addedStreams","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","statsinterval","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","results","_processStat","_lastVideoSenderUpdatePromise","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getDesktopTrackMid","_getReceiversByEndpointIds","endpoints","remoteTrackIds","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","currentCodec","remoteTrack","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLine","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","jitsiTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","groupSsrcs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","mLines","currentCodecs","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","currentSdp","isVideoCodecDisabled","lowFps","findSenderByKind","localSdp","oldTrackSSRC","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","localSources","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","bitrates","hdBitrate","ssHdBitrate","isSharingScreen","limit","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","configuredResolution","_updateVideoSenderEncodings","nextFunction","nextPromise","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","getActiveSimulcastStreams","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","metaData","peerConnections","_lastN","_forwardedSources","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldForwardedSources","setReceiverVideoConstraints","sendSourceVideoType","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","startBitrate","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","disableLocalStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioLevel","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","kJitsiLiteMode","LiteModeContext","_setupLiteModeForTrack","transformStream","TransformStream","pipeThrough","pipeTo","MAX_HEIGHT","ReceiverVideoConstraints","assumedBandwidthBps","_maxFrameHeight","_assumedBandwidthBps","defaultConstraints","individualConstraints","updateAssumedBandwidthBps","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","videoConstraints","ReceiveVideoController","_rtc","startLastN","_getDefaultSourceReceiverConstraints","remoteVideoTracks","setAssumedBandwidthBps","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","sendMaxFrameHeight","_selectSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","_sessions","_chatRoom","getSession","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","startRecording","_addSession","stopRecording","_createSession","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","speakerStatsToUpdate","newParticipant","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","TranscriptionService","recordingResult","verify","formatResponse","audioBlob","SphinxService","AbstractTranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","counter","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_bindChatRoomEventHandlers","emitAudioMutedEvent","_audioMuteHandler","_doesEndpointSendNewSourceInfo","emitVideoMutedEvent","_videoMuteHandler","emitVideoTypeEvent","_videoTypeHandler","_sourceInfoHandler","sourceInfoJSON","emitEventsFromHere","endpointSourceState","sourceChanged","newMutedState","oldSourceState","newVideoType","newSourceNames","_memberLeftHandler","_logOwnerChangedMessage","lastPresence","legacyGetPeerMediaInfo","mediaInfo","codecListNode","setChatRoom","oldChatRoom","existingOwner","existingName","_getCodecMimeType","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_liteModeContext","_audioSenderLimitReached","_videoSenderLimitReached","_firefoxP2pEnabled","enableFirefoxP2p","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","resourceCreator","isAuthenticatedUser","mobileCodecPreferenceOrder","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","BridgeVideoType","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_suspendMediaTransferForJvbConnection","_setNewVideoType","videoTypeChanged","presenceChanged","addPromises","removePromises","unlock","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","ignoreDomain","bridgeChannel","preferSctp","sctpOffered","firstWsUrl","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","isSIPCallingSupported","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","localTrackIndex","localSourceNameTrack","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","isCollectingLocalStats","currentlyAvailableMediaDevices","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","lineno","colno","setNetworkInfo","precallTest","util","AuthUtil","cachedModule","loaded","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}